 i,j=0,0
k=1
n=int(input())
a=[[0 for j in range(n)] for i in range(n)]
x,y=0,n
while k<=n*n:
  for j in range(x,y):
    a[i][j]=k
    k+=1
  x+=1
  for i in range(x,y):
    a[i][j]=k
    k+=1
  x-=1
  y-=1
  for j in range(y-1,x-1,-1):
    a[i][j]=k
    k+=1
  x+=1
  for i in range(y-1,x-1,-1):
    a[i][j]=k
    k+=1
for i in range(n):
  for j in range(n):
    print(a[i][j], end=' ')
  print('')

 -End,"
 i=0
e=''
b=[[]]
while e!='end':
  e=input().split()
  if 'end' in e:
    break
  else:
    a=[int(j) for j in e]
    b+=[a]
    i+=1
b.remove([])
c=[]
i,j=0,0
for i in range(len(b)):
  for j in range(len(b[i])):
    if i==len(b)-1 and j!=len(b[i])-1:
      c.append(b[i-1][j]+b[0][j]+b[i][j-1]+b[i][j+1])
    elif j==len(b[i])-1 and i!=len(b)-1:
      c.append(b[i-1][j]+b[i+1][j]+b[i][j-1]+b[i][0])
    elif i==len(b)-1 and j==len(b[i])-1:
      c.append(b[i-1][j]+b[0][j]+b[i][j-1]+b[i][0])
    else:
      c.append(b[i-1][j]+b[i+1][j]+b[i][j-1]+b[i][j+1])
k=0
for i in range(len(b)):
  for j in range(len(b[i])):
    print(c[k], end=' ')
    k+=1
  print('')


 -End,"
 def modify_list(l):
  i=0
  while i<len(l):
    if l[i]%2==0:
      l[i]//=2
      i+=1
    else:
      del l[i]
  return l


 -End,"
 b={}
n=int(input())
for i in range(n):
  a=input().split(';')
  if a[0] not in b:
    b[a[0]]={'game':0,'win':0,'draw':0,'defeat':0,'point':0}
  if a[2] not in b:
    b[a[2]]={'game':0,'win':0,'draw':0,'defeat':0,'point':0}
  if a[1]<a[3]:
    b[a[0]]['game']+=1
    b[a[0]]['defeat']+=1
    b[a[2]]['game']+=1
    b[a[2]]['win']+=1
    b[a[2]]['point']+=3
  elif a[1]>a[3]:
    b[a[0]]['game']+=1
    b[a[0]]['win']+=1
    b[a[0]]['point']+=3
    b[a[2]]['game']+=1
    b[a[2]]['defeat']+=1
  else:
    b[a[0]]['game']+=1
    b[a[0]]['draw']+=1
    b[a[0]]['point']+=1
    b[a[2]]['game']+=1
    b[a[2]]['draw']+=1
    b[a[2]]['point']+=1
for key in b.keys():
  print(key,end=':')
  print(b[key]['game'],b[key]['win'],b[key]['draw'],b[key]['defeat'],b[key]['point'],sep=' ')

 -End,"
 a=str(input())
b=str(input())
s=str(input())
x=str(input())
for i in range(len(s)):
  for j in range(len(a)):
    if s[i]==a[j]:
      print(s[i].replace(a[j],b[j]),end='')
print('')
for i in range(len(x)):
  for j in range(len(b)):
    if x[i]==b[j]:
      print(x[i].replace(b[j],a[j]),end='')

 -End,"
 a={}
d=int(input())
for i in range(d):
  a[input().lower()]=1
l=int(input())
for i in range(l):
  s=input().lower().split()
  for j in range(len(s)):
    if s[j] not in a:
      a[s[j]]=0
for i in a:
  if a[i]==0:
    print(i)


 -End,"
 x,y,s,n=0,0,[],int(input())
for i in range(n):
  s=input().split()
  if s[0]=='север':
    y+=int(s[1])
  elif s[0]=='юг':
    y-=int(s[1])
  elif s[0]=='запад':
    x-=int(s[1])
  elif s[0]=='восток':
    x+=int(s[1])
print(x,y)


 -End,"
 x=int(input())
cl={}
for i in range(x):
    st=input().split()
    if len(st)==1:
        cl[st[0]]=[]
    else:
        for k in range(2, len(st)):
            if st[0] not in cl:
                cl[st[0]]=[st[k]]
            else:
                cl[st[0]].append(st[k])
for i in cl:
    for j in cl[i]:
        if j in cl:
            cl[i]+=cl[j]
x=int(input())
for i in range(x):
    st=input().split()
    if st[0]==st[1]:
        print('Yes')
    elif st[0] in cl[st[1]]:
        print('Yes')
    else:
        print('No')
 -End,"
 class ExtendedStack(list):
    def sum(self):
        if len(self)<2:
            return
        x=self.pop()+self.pop()
        return self.append(x)
    def sub(self):
        if len(self)<2:
            return
        x=self.pop()-self.pop()
        return self.append(x)
    def mul(self):
        if len(self)<2:
            return
        x=self.pop()*self.pop()
        return self.append(x)
    def div(self):
        if len(self)<2:
            return
        if self[-2]==0:
            return
        x=self.pop()//self.pop()
        return self.append(x)




 -End,"
 class LoggableList(list, Loggable):
    def append(self, x):
        self.log(x)
        super(LoggableList, self).append(x)
 -End,"
 x=int(input())
cl={}
for i in range(x):
    st=input().split()
    if len(st)==1:
        cl[st[0]]=[]
    else:
        for k in range(2, len(st)):
            if st[0] not in cl:
                cl[st[0]]=[st[k]]
            else:
                cl[st[0]].append(st[k])
for i in cl:
    for j in cl[i]:
        if j in cl:
            cl[i]+=cl[j]
x=int(input())
st=[]
st1=[]
for i in range(x):
    st.append(input())
for j in range(len(st)):
    for i in range(len(st)):
        if (st[i] in cl[st[j]]) and (i<j):
            if st[j] not in st1:
                st1.append(st[j])
for i in st1:
    print(i)

 -End,"
 class NonPositiveError(Exception):
    pass
class PositiveList(list):
    def append(self,x):
        if x>0:
            super(PositiveList,self).append(x)
        else:
            raise NonPositiveError

 -End,"
 s=input()
t=input()
k=0
for i in range(len(s)):
    if (t in s)and(s.startswith(t)):
        k+=1
    s=s[1:]
print(k)
 -End,"
 import re
import sys
for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""\b[aA]+\b"",""argh"",line,count=1)) -End,"
 import re
import sys
for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""(\w)(\1)+"",r""\1"",line))
 -End,"
 import sys
for line in sys.stdin:
    line=line.rstrip()
    if line.isdigit():
        x=int(line, base=2)
        if x%3==0:
            print(line) -End,"
 import requests as req
import re
a=input()
b=input()
o=False
res=req.get(a)
if res.status_code==200:
    s=re.findall(r""href=\""(.+)\"""",res.text)
    for i in s:
        res=req.get(i)
        if res.status_code==200:
            s1=re.findall(b,res.text)
            if b in s1:
                o=True
                break
else:
    o=False
if o:
    print('Yes')
else:
    print('No') -End,"
 import json
x=input()
d=json.loads(x)
s={}
for i in d:
    for j in i[""parents""]:
        if j!='':
            if j not in s:
                s[j]=[i[""name""]]
            else:
                s[j].append(i[""name""])
for i in d:
    if i[""name""] not in s:
        s[i[""name""]]=''
for i in s:
    for j in s[i]:
        if j in s:
            for k in s[j]:
                if k not in s[i]:
                    s[i].append(k)
rez={}
for j in s:
    if j in s:
        rez[j]=len(s[j])+1
    else:
        rez[j]=1
z=[]
for i in rez:
    z.append(i+' : '+str(rez[i]))
z=sorted(z)
for i in z:
    print(i) -End,"
 s = {'6': 0, '7': 1, '8': 2, '9': 3, '10': 4, 'J': 5, 'Q': 6, 'K': 7, 'A': 8}
a = input().split()
b = input()
if a[0][-1]==a[1][-1]:
    if s[a[0][:-1]]>s[a[1][:-1]]: print('First')
    else: print('Second')
else:
    if a[0][-1]==b: print('First')
    elif a[1][-1]==b: print('Second')
    else: print('Error') -End,"
 n = int(input())
s = [[' ']]
for i in range(n):
    for j in range(len(s)):
        s.insert(j*4,['+'])
        s.insert(j*4,['-'])
        s.insert(j*4,['+'])
for i in s:
    if i==['+']: print('turn 60')
    elif i==['-']: print('turn -120') -End,"
 s = {
    '2': 0, '3': 1, '4': 2, '5': 3,
    '6': 4, '7': 5, '8': 6, '9': 7,
    '10': 8, 'J': 9, 'Q': 10, 'K': 11,
    'A': 12
    }
a = input().split()
b = []
for i in a:
    b.append(s[i[:-1]])
    b = sorted(b)
if a[0][-1]==a[1][-1]==a[2][-1]==a[3][-1]==a[4][-1]:
    if (b==[8, 9, 10, 11, 12]):
        print('Royal Flush')
    elif b[0]==b[1]-1==b[2]-2==b[3]-3==b[4]-4 or b[0]==b[1]-1==b[2]-2==b[3]-3==b[4]-12:
        print('Straight Flush')
    else:
        print('Flush')
else:
    if b[0]==b[3] or b[1]==b[4]:
        print('Four of a Kind')
    elif (b[0]==b[1] and b[2]==b[4]) or (b[0]==b[2] and b[3]==b[4]):
        print('Full House')
    elif (b[0]==b[1]-1==b[2]-2==b[3]-3==b[4]-4) or (b[0]==b[1]-1==b[2]-2==b[3]-3==b[4]-12):
        print('Straight')
    elif b[0]==b[2] or b[1]==b[3] or b[2]==b[4]:
        print('Three of a Kind')
    elif ((b[0]==b[1] or b[1]==b[2]) and b[3]==b[4]) or (b[0]==b[1] and (b[2]==b[3] or b[3]==b[4])):
        print('Two Pairs')
    elif b[0]==b[1] or b[1]==b[2] or b[2]==b[3] or b[3]==b[4]:
        print('Pair')
    else:
        print('High Card')
 -End,"
 print('Hello '+input('Enter your name: ')) -End,"
 s = input()
a1 = 'x'
a2 = '|'
a3 = '|'
a4 = '|'
a5 = '|'
a6 = '|'
a7 = '|'
a8 = '|'
a9 = 'x'
for i in range(len(s)):
    a1 += '-----'
    a9 += '-----'
    if s[i] == '1' or s[i] == '4':
        a2 += '     '
    else:
        a2 += ' --  '
    if s[i] == '1' or s[i] == '2' or s[i] == '3' or s[i] == '7':
        a3 += '   | '
        a4 += '   | '
    elif s[i] == '5' or s[i] == '6':
        a3 += '|    '
        a4 += '|    '
    else:
        a3 += '|  | '
        a4 += '|  | '
    if s[i] == '0' or s[i] == '1' or s[i] == '7':
        a5 += '     '
    else:
        a5 += ' --  '
    if s[i] == '0' or s[i] == '6' or s[i] == '8':
        a6 += '|  | '
        a7 += '|  | '
    elif s[i] == '2':
        a6 += '|    '
        a7 += '|    '
    else:
        a6 += '   | '
        a7 += '   | '
    if s[i] == '1' or s[i] == '4' or s[i] == '7':
        a8 += '     '
    else:
        a8 += ' --  '
print(a1[:-1]+'x')
print(a2[:-1]+'|')
print(a3[:-1]+'|')
print(a4[:-1]+'|')
print(a5[:-1]+'|')
print(a6[:-1]+'|')
print(a7[:-1]+'|')
print(a8[:-1]+'|')
print(a9[:-1]+'x')
 -End,"
 x = ''
while x != 'End':
    x = input()
    if x != 'End':
        print('Processing ""'+x+'"" command...')
print('Good bye!')
 -End,"
 n = int(input())
i = 1
start, stop = 0, n
m = [[0 for i in range(n)] for j in range(n)]
while i <= n*n:
    for x in range(start, stop):
        m[start][x] = i
        i += 1
    start += 1
    for x in range(start, stop):
        m[x][stop - 1] = i
        i += 1
    stop -= 1
    start -= 1
    for x in range(stop, start, -1):
        m[stop][x - 1] = i
        i += 1
    start +=1
    for x in range(stop, start, -1):
        m[x - 1][start - 1] = i
        i += 1
for i in range(n):
    for j in range(n):
        print(m[i][j], end = ' ')
    print()
 -End,"
 x = int(input())
print(int(x), end=' ')
while x != 1:
    if x%2 == 0:
        x = x/2
    else:
        x = x*3+1
    print(int(x), end=' ')
 -End,"
 a = [int(i) for i in input().split()]
s = [[0 for i in range(a[1]+2)] for j in range(a[0]+2)]
z = [[0 for i in range(a[1]+2)] for j in range(a[0]+2)]
for i in range(a[0]):
    x = input()
    for j in range(len(x)):
        s[i+1][j+1] = x[j]
s[0] = s[len(s)-2]
s[len(s)-1] = s[1]
for i in range(len(s)):
    s[i][0] = s[i][len(s[i])-2]
    s[i][len(s[i])-1] = s[i][1]
c = 0
for i in range(len(s)):
    for j in range(len(s[i])):
        z[i][j] = s[i][j]
for i in range(1, len(s)-1):
    for j in range(1, len(s[i])-1):
        if s[i-1][j-1] == 'X': c +=1
        if s[i-1][j] == 'X': c +=1
        if s[i-1][j+1] == 'X': c +=1
        if s[i][j-1] == 'X': c +=1
        if s[i][j+1] == 'X': c +=1
        if s[i+1][j-1] == 'X': c +=1
        if s[i+1][j] == 'X': c +=1
        if s[i+1][j+1] == 'X': c +=1
        if s[i][j] == 'X':
            if c == 2 or c == 3:
                z[i][j] = 'X'
            else:
                z[i][j] = '.'
        else:
            if c == 3:
                z[i][j] = 'X'
        c = 0
for i in range(1, len(z)-1):
    for j in range(1, len(z[i])-1):
        print(z[i][j], end = '')
    print()
 -End,"
 a,b=10,2
print(a+b,a-b,a*b,a/b,a**b,sep='\n') -End,"
 a,b=int(input()),int(input())
print('{:9.5f}***{:9.5f}'.format(a/b,b/a)) -End,"
 a=input()
print(input()+','+a) -End,"
 a,b,c=[int(i) for i in input().split()]
a1,b1,c1=[int(i) for i in input().split()]
print(a*a1+b*b1+c*c1) -End,"
 c=0
for i in range(3):
    a,b=[int(i) for i in input().split()]
    c+=a*b
print(c) -End,"
 print(int(input())*2.6+5) -End,"
 s,a=int(input()),int(input())
print(s/a*2+a*2) -End,"
 print(int(input())*(100+int(input()))/100) -End,"
 for i in input().split():
    print(float(i)*4,end=' ') -End,"
 print(float(input())**2/8) -End,"
 print(input()[-1:]) -End,"
 print(input()[:1]) -End,"
 print(input()[-2]) -End,"
 a,b,x,y=[int(input()) for i in range(4)]
print('YES' if x-a==y-b or x-a==b-y else 'NO') -End,"
 n,m,k=[int(input()) for i in range(3)]
print('YES' if k<=n*m and (k%n==0 or k%m==0) else 'NO') -End,"
 mn,mx,h=[int(input()) for i in range(3)]
print('Недосып' if h<mn else 'Пересып' if h>mx else 'Это нормально') -End,"
 a,b,op=float(input()),float(input()),input()
print('Деление на 0!') if b==0.0 and (op in '/divmod') else print(a+b if op=='+' else a-b if op=='-' else a*b if op=='*' else a/b if op=='/' else a%b if op=='mod' else a**b if op=='pow' else a//b if op=='div' else '') -End,"
 from math import sqrt, pi
x=input()
if x=='треугольник':
    a,b,c=[int(input()) for i in range(3)]
    x=(a+b+c)/2
    print(sqrt(x*(x-a)*(x-b)*(x-c)))
elif x=='прямоугольник':
    print(int(input())*int(input()))
elif x=='круг':
    print('{:.1f}'.format(int(input())**2*pi)) -End,"
 x=0
for i in input():
    if i!='-':
        x+=int(i)
print(x) -End,"
 x=int(input())
a=' '
for i in range(2,int(x**(1/2))+1):
    if x%i==0:
        a=' не '
print('Введённое число'+a+'является простым') -End,"
 i=1
x,y=[int(input()) for i in range(2)]
while not (i%x==0 and i%y==0):
    i+=1
print(i) -End,"
 a, b = [float(input()) for i in range(2)]
if a - int(a) == 0:
    a = int(a)
else:
    a = int(a) + 1
b = int(b)
s=0
for i in range(a,b+1):
    if i%2!=0:
        s+=i
print(s) -End,"
 from math import *
mx,s=0,'NO'
for i in range(int(input())):
    x=float(input())
    if x<30:
        s='YES'
    if x>mx:
        mx=x
print(round(mx),s,sep='\n') -End,"
 x,s,i=int(input()),0,0
while x!=0:
    if x%8==0:
        s+=x
        i+=1
    x=int(input())
print('NO' if not s else '{:.1f}'.format(s/i)) -End,"
 i = a = int(input())
b = int(input())
while i%a != 0 or i%b != 0:
    i+=1
print(i) -End,"
 a,b,c,d=[float(input()) for i in range(4)]
s1=a*b/2
t=(a**2+b**2)**(1/2)
p=(c+d+t)/2
s2=(p*(p-c)*(p-d)*(p-t))**(1/2)
print(int(s1+s2)) -End,"
 def DecToBin(dec):
    bin=''
    while dec>0:
        dec, bin = dec//2, str(dec%2)+bin
    return int(bin)
print(DecToBin(int(input()))) -End,"
 def DecToBin(dec):
    bin=''
    while dec:
        dec, bin = dec//2, str(dec%2)+bin
    return bin
print(DecToBin(int(input()))) -End,"
 def f(x):
    return 1-(x+2)**2 if x<=-2 else (x-2)**2+1 if 2<x else x/(-2)
print(f(float(input()))) -End,"
 def BinToDec(bin):
    i=1
    dec=0
    while bin:
        dec+=bin%10*i
        bin//=10
        i*=2
    return dec
print(BinToDec(int(input()))) -End,"
 def factorial(n):
    return 1 if n==1 else factorial(n-1)*n
print(factorial(int(input()))) -End,"
 def f(n):
    if n<10:
        return n
    return n%10+f(n//10)
def g(n):
    if n<10:
        return n
    return g(f(n))
print(g(int(input()))) -End,"
 def f(n):
    return n[1:].isdigit() if n[0]=='-' else n.isdigit()
print(f(input())) -End,"
 print(' '.join(sorted(input().split(', '),reverse=True))) -End,"
 s=input()
for j in range(2):
    print(s[int(input()):int(input())+1],end=' ') -End,"
 k=s=0
for i in range(int(input())):
    s+=int(input())
    k+=1
print(s/k) -End,"
 m=0
x=int(input())
a=[int(i) for i in input().split()]
for k in range(x):
    if a[k]<8:
        m+=1
print(m) -End,"
 n,x=0,int(input())
a=[int(i) for i in input().split()]
m=sum(a)/len(a)
for k in range(x):
    if a[k]>=m:
        n+=1
print(n) -End,"
 print(sorted(map(int,input().split()))) -End,"
 a,b,c=[int(input()) for i in range(3)]
print(a//2+a%2+b//2+b%2+c//2+c%2) -End,"
 a,b,c=[int(input()) for i in range(3)]
print((a*100+b)*c//100,b*c%100) -End,"
 a=input()
print('YES' if a[:2]==a[:-3:-1] else 'NO') -End,"
 a=input()
print('YES' if a==a[::-1] else 'NO') -End,"
 p,a,b=[int(input()) for i in range(3)]
print('{:.0f} {:.0f}'.format((a*100+b)*(1+p/100)//100,(a*100+b)*(1+p/100)%100)) -End,"
 a,b,c=[int(input()) for i in range(3)]
print('YES' if a+b>c and a+c>b and b+c>a else 'NO') -End,"
 x,s,mx=int(input()),0,0
while x!=0:
    s+=x
    mx=max(x,mx)
    x=int(input())
print(s,mx,sep='\n') -End,"
 a=sorted([int(input()) for i in range(7)],reverse=True)
for i in a[1:7:2]:
    print(i) -End,"
 print(*sorted([int(input()) for i in range(7)],reverse=True)[1:7:2],sep='\n') -End,"
 s=input()
n='первой' if int(s[7:11])>2000 else 'второй' if 1983<int(s[7:11]) else 'третьей'
m={'первой':' (дети)','второй':' (молодежь)','третьей':''}
print('Привет, '+s[:4]+'! Ждем тебя на '+n+' секции'+m[n]) -End,"
 s=input()
n=1 if int(s[7:11])>2000 else 2 if 1983<int(s[7:11]) else 3
m={1:['первой',' (дети)'],2:['второй',' (молодежь)'],3:['третьей','']}
print('Привет, '+s[:4]+'! Ждем тебя на '+m[n][0]+' секции'+m[n][1]) -End,"
 def f(x,y):
    return int((x**2)**(y/2)) if y%2==0 else x*f(x,y-1)
print(f(int(input()),int(input()))) -End,"
 print(int(input())**int(input())) -End,"
 x,y=[int(input()) for i in range(2)]
sm,mx,mn=0,0,1000
for i in range(y):
    z=int(input())
    mx,mn,sm=max(mx,z),min(mn,z),sm+z
print(sm,mx,mn,sm/y) -End,"
 a=[input() for i in range(2)]
print('Paper wins!' if 'paper' in a and 'rock' in a else 'Scissors win!' if 'paper' in a and 'scissors' in a else 'Rock wins!' if 'rock' in a and 'scissors' in a else ""It's a tie!"" if a[0]==a[1] else 'Invalid input! You have not entered rock, paper or scissors, try again.') -End,"
 def fib(x):
    return fib(x-1)+fib(x-2) if x>1 else x
a=[]
for i in range(20):
    a.append(fib(i))
def age(x):
    transp=10000
    for i in range(5001):
        if i in a:
            transp-=i
        else:
            transp+=1
        if transp==x:
            return i
print(age(int(input()))) -End,"
 a=[int(i) for i in input().split()]
print(max(a[0]+a[1]+a[2],a[3]+a[4]+a[5],a[6]+a[7]+a[8])) -End,"
 a,b,c=[int(input()) for i in range(3)]
print((c-a)//b) -End,"
 m=int(input())
n4=m%3
n3=(m-4*n4)//3
print(n3,n4,sep='\n') if n3>=0 else print(0,0,sep='\n') -End,"
 a=sorted(input().split())
if a[1]=='0':
    print(*a[::-1],sep='')
elif a[0]=='0':
    print(a[1],*a[::2],sep='')
    print(*a[1:],a[0],sep='')
    if a[1]!=a[2]:
        print(a[2],*a[:2],sep='')
        print(*a[::-1],sep='')
else:
    print(*a,sep='')
    if a[1]!=a[2]:
        print(*a[::2],a[1],sep='')
    if a[0]!=a[1]:
        print(a[1],*a[::2],sep='')
        print(*a[1:],a[0],sep='')
    if a[1]!=a[2]:
        print(a[2],*a[:2],sep='')
        if a[0]!=a[1]!=a[2]:
            print(*a[::-1],sep='') -End,"
 n=int(input())
print(4 if n==1 else 9*n-8 if n<4 else 9*n-7) -End,"
 s={'0':6,'1':2,'2':5,'3':5,'4':4,'5':5,'6':6,'7':3,'8':7,'9':6}
a=0
for i in input():
    a+=s[i]
print(a) -End,"
 a='abcdefghijklmnopqrstuvwxyz'
b=a[13:]+a[:13]
print(*[b[a.find(i)] if i in a else i for i in input()],sep='') -End,"
 n,k=int(input()),0
a=[int(i) for i in input().split()]
for i in range(n):
    x=min(*a)+i
    y=a.index(x)
    if i!=y:
        a[i],a[y]=a[y],a[i]
        k+=1
print(k) -End,"
 a=' abcdefghijklmnopqrstuvwxyz'
x=int(input())%27
b=a[x:]+a[:x]
print('Result: ""',end='')
for i in input().strip():
    s=a.find(i)
    print(b[s],end='')
print('""') -End,"
 a=[int(input()) for i in range(int(input()))]
print(max(a)-min(a)) -End,"
 a=[]
for i in range(int(input())):
    x=int(input())
    if x%9!=0 and 99<x<1000:
        a.append(x)
try:
    print(max(a))
except:
    print('Не найдено') -End,"
 a=[0]
for i in range(int(input())):
    a.append(int(input()))
a.append(max(a))
a[0]=max(a)
c=0
for i in range(1,len(a)-1):
    if a[i-1]>a[i]<a[i+1] and a[i]%3==0:
        c+=1
print(c) -End,"
 s={}
for i in range(int(input())):
    x=int(input())
    if x>9:
        x=x%100//10+x%10
    if x in s:
        s[x]+=1
    else:
        s[x]=1
max=0
for i in s:
    if s[i]>max:
        max=s[i]
for i in sorted(s,reverse=True):
    if s[i]==max:
        print(i)
        break -End,"
 a,c=[],0
for i in range(int(input())):
    a.append(int(input()))
for i in range(len(a)):
    for j in range(i,len(a)):
        if i!=j and a[i]*a[j]%26==0:
            c+=1
print(c) -End,"
 a,c=[],0
for i in range(int(input())):
    a.append(int(input()))
for i in range(len(a)):
    for j in range(i,len(a)):
        if i!=j and a[i]*a[j]%34!=0:
            c+=1
print(c) -End,"
 s={'0':6,'1':2,'2':5,'3':5,'4':4,'5':5,'6':6,'7':3,'8':7,'9':6}
print(sum(s[i] for i in input())) -End,"
 print(*['Hello, '+input() for i in range(2)],sep='\n') -End,"
 from scipy.constants import c,e,h
def lam(U):
    return h*c/e/U




 -End,"
 # put your python code here
abc = ''.join([chr(i) for i in range(int(0x1f600), int(0x1f64f)+1)])
n = int(input())
ourEmotions = input().strip()
res = [abc[(abc.index(emotion) + n) % len(abc)] for emotion in ourEmotions]
print('Result: ""' + ''.join(res) + '""')




 -End,"
 s = input()
myList = []
digit = ''
for i in s:
    if i.isdigit():
        digit += i
    else:
        if digit:
            myList += [i] * int(digit)
        else:
            myList += [i]
        digit = ''
print(''.join(myList))
 -End,"
 n = int(input())


def collatz(x):
    if x == 1:
        print(x)
        return 1
    elif x % 2 == 0:
        print(x, end=' ')
        return collatz(x // 2)
    elif x % 2 != 0:
        print(x, end=' ')
        return collatz(x * 3 + 1)


collatz(n)
 -End,"
 n = input()
myDict = {
    '0': [' -- ', '|  |', '|  |', '    ', '|  |', '|  |', ' -- '],
    '1': ['    ', '   |', '   |', '    ', '   |', '   |', '    '],
    '2': [' -- ', '   |', '   |', ' -- ', '|   ', '|   ', ' -- '],
    '3': [' -- ', '   |', '   |', ' -- ', '   |', '   |', ' -- '],
    '4': ['    ', '|  |', '|  |', ' -- ', '   |', '   |', '    '],
    '5': [' -- ', '|   ', '|   ', ' -- ', '   |', '   |', ' -- '],
    '6': [' -- ', '|   ', '|   ', ' -- ', '|  |', '|  |', ' -- '],
    '7': [' -- ', '   |', '   |', '    ', '   |', '   |', '    '],
    '8': [' -- ', '|  |', '|  |', ' -- ', '|  |', '|  |', ' -- '],
    '9': [' -- ', '|  |', '|  |', ' -- ', '   |', '   |', ' -- ']
}

print('x' + '-----' * len(n) + 'x')
for i in range(7):
    print('|', end='')
    for j in n:
        print(myDict[j][i], end=' ')
    print('|')
print('x' + '-----' * len(n) + 'x')
 -End,"
 In = [int(i) for i in input().split()]
myList = sorted([(abs(In[i] - In[i - 1])) for i in range(1, len(In))])
if myList == [i for i in range(1, len(In))]:
    print('Jolly')
else:
    print('Not jolly')
 -End,"
 n = [int(i) for i in input().split()]
myList = sorted([(abs(n[i] - n[i - 1])) for i in range(1, len(n))])
print(('Not jolly', 'Jolly')[myList == [i for i in range(1, len(n))]])
 -End,"
 n = [int(i) for i in input().split()]
print(('Not jolly', 'Jolly')[sorted([(abs(n[i] - n[i - 1])) for i in range(1, len(n))]) == [i for i in range(1, len(n))]])
 -End,"
 import sys
import re


[print(line.strip()) for line in sys.stdin if len(re.findall('cat', line)) >= 2]
 -End,"
 s = 100 * float(input()) / 87
print(s)




 -End,"
 total = 0
for i in input():
    total += int(i)
print(total)





 -End,"
 n = list(map(int, input()))
print(n[0] + n[1], n[1] + n[2], sep='')





 -End,"
 n = list(map(int, input()))
print(n[0] + n[1], n[2] + n[3], sep='')





 -End,"
 n = list(map(int, input()))
print(n[0] + n[2] + n[4], n[1] + n[3], sep='')





 -End,"
 print(sum([int(i) for i in str(abs(int(input())))]))
 -End,"
 [print(i**3) for i in [int(input()) for _ in range(4)]]





 -End,"
 total = [i for i in range(int(input()), int(input()) + 1) if i % 3 == 0]
print(sum(total) / len(total))
 -End,"
 n = int(input())
nCopy = sum([int(i) for i in str(n)])
found = True
for num in range(n):
    if sum([int(i) for i in str(num)]) == nCopy:
        if found:
            print('Найденные числа:')
            found = False
        print(num)
if found:
    print('Искомых чисел не найдено')





 -End,"
 print(sum(i for i in [int(input()) for _ in range(int(input()))] if i % 6 == 0)) -End,"
 print(len(list(i for i in [int(input()) for _ in range(int(input()))] if i % 4 == 0)))




 -End,"
 print(min(list(i for i in [int(input()) for _ in range(int(input()))] if i % 3 == 0)))




 -End,"
 print(sum(list(i for i in [int(input()) for _ in range(int(input()))] if i % 3 == 0)))




 -End,"
 print(max(list(i for i in [int(input()) for _ in range(int(input()))] if i % 4 == 0)))




 -End,"
 print(sum(list(i for i in [int(input()) for _ in range(int(input()))] if i % 10 == 4)))




 -End,"
 myList = [int(input()) for i in range(int(input()))]
print(max(myList), ('NO','YES')[0 in myList], sep='\n')





 -End,"
 myList = []
while True:
    n = int(input())
    if n == 0:
        break
    elif n % 8 == 0:
        myList.append(n)
print(round(sum(myList) / len(myList), 1) if myList else 'NO')
 -End,"
 myMin = min([int(input()) for _ in range(int(input()))])
print(myMin, ('NO', 'YES')[myMin < -15], sep='\n')
 -End,"
 
a, b = int(input()), int(input())
p = a * b
while a and b:
    a, b = b % a, a
print(p // (a + b))




 -End,"
 [print(int(input())**2, end=' ') for i in range(5)]
 -End,"
 [print(int(input())**2, end=' ') for i in range(5)]





 -End,"
 myList = [int(input()) for i in range(int(input()))]
print(sum(myList) / len(myList))




 -End,"
 n = int(input())
myList = [int(i) for i in input().split()]
print(len([i for i in myList if i >= sum(myList) / n]))
 -End,"
 print(sorted([int(i) for i in input().split()]))
 -End,"
 n = int(input())
try:
    print([int(i) for i in input().split()].index(n))
except:
    print(-1) -End,"
 print(*divmod((int(input()) * 100 + int(input())) * int(input()), 100))
 -End,"
 print(*divmod(int((1 + int(input()) / 100) * (int(input()) * 100 + int(input()))), 100))
 -End,"
 [print(i) for i in sorted([170, 175, 166, 180, 167, 189, 150], reverse=True)[1::2]]
 -End,"
 n = input()
if 2018 - int(n[7:11]) < 18:
    print('Привет, %s! Ждем тебя на первой секции (дети)' % n[:4])
elif 2018 - int(n[7:11]) <= 35:
    print('Привет, %s! Ждем тебя на второй секции (молодежь)' % n[:4])
else:
    print('Привет, %s! Ждем тебя на третьей секции' % n[:4])
 -End,"
 n = int(input())
total = 1
for i in range(int(input())):
    total *= n
print(total)
 -End,"
 n = int(input())
now = 1
then = 0
while then < n:
    n -= (now + then)
    then = now + then
    now += 1
print(then)
 -End,"
 fib = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]
transp = int(input())
start = 10000
age = 0
for i in range(1, 5001):
    if start == transp:
        break
    age += 1
    if i in fib:
        start -= i
    else:
        start += 1
print(age)
 -End,"
 n, p, y = [int(input()) for _ in range(3)]
[print('%.2f' % (n * (1 + p / 100)**i)) for i in range(1, y + 1)]
 -End,"
 from itertools import permutations
print(*sorted(set([''.join(i) for i in permutations(input().split()) if i[0] != '0'])), sep='\n')
 -End,"
 from itertools import combinations_with_replacement
print(len(set([sum(i) for i in combinations_with_replacement([1, 2, 5, 10], int(input()))])))
 -End,"
 print(sum([{'0': 6, '1': 2, '2': 5, '3': 5, '4': 4, '5': 5, '6': 6, '7': 3, '8': 7, '9': 6}[i] for i in input()])) -End,"
 print(*list(map((lambda x: [max(x), min(x), sum(x) - max(x) - min(x)]),
               [[int(input()) for _ in range(3)]]))[0], sep='\n')
 -End,"
 print(sum(map(int,open(0).read().split()))) -End,"
 x, y = int(input()), int(input())
d, gcd = x, y
while d:
    d, gcd = gcd % d, d  # найти НОД для нахождения потом НОК
print(x * y // gcd)  # НОК - это Произведение a и b деленное на НОД этих чисел -End,"
 print((lambda x: sum(x) / len(x))([i for i in range(int(input()), int(input()) + 1) if i % 3 == 0])) -End,"
 print((lambda n: (n.count('c') + n.count('g')) / len(n) * 100)(input().lower()))
 -End,"
 print(*(lambda x: [x[i - 1] + x[i + 1 - len(x)] for i in range(len(x))] if len(x) != 1 else x)([int(i) for i in input().split()])) -End,"
 (lambda x: [print(i, end=' ') for i in set(x) if x.count(i) > 1])(input().split()) -End,"
 print(*(lambda n: [i for i in range(1, n + 1) for _ in range(i)][:n])(int(input()))) -End,"
 (lambda myList, n: [print(i, end=' ') for i in range(len(myList)) if myList[i] == n] if n in myList else print('Отсутствует'))([int(i) for i in input().split()], int(input()))
 -End,"
 (lambda s: [print(i, s.count(i)) for i in set(s)])(input().lower().split())
 -End,"
 games, wins, draw, lost = {}, {}, {}, {}
for i in range(int(input())):
    a, aScore, b, bScore = input().split(';')
    aScore, bScore = int(aScore), int(bScore)
    games[a], games[b] = games.get(a, 0) + 1, games.get(b, 0) + 1
    draw[a], draw[b] = draw.get(a, 0), draw.get(b, 0)
    wins[b], wins[a] = wins.get(b, 0), wins.get(a, 0)
    lost[a], lost[b] = lost.get(a, 0), lost.get(b, 0)
    if aScore == bScore:
        draw[a] = draw.get(a, 0) + 1
        draw[b] = draw.get(b, 0) + 1
    elif aScore > bScore:
        wins[a] = wins.get(a, 0) + 1
        lost[b] = lost.get(b, 0) + 1
    elif aScore < bScore:
        wins[b] = wins.get(b, 0) + 1
        lost[a] = lost.get(a, 0) + 1
for i in games.keys():
    print(i, ':', sep='', end='')
    print(*[games[i], wins[i], draw[i], lost[i], wins[i] * 3 + draw[i]])
 -End,"
 a, b, = input(), input()
tran = str.maketrans(a, b)
res1 = input().translate(str.maketrans(a, b))
res2 = input().translate(str.maketrans(b, a))
print(res1, res2, sep='\n')
 -End,"
 (lambda a, b, s1, s2: print(s1.translate(str.maketrans(a, b)), s2.translate(str.maketrans(b, a)), sep='\n'))(*[input() for _ in range(4)])
 -End,"
 (lambda a, b, s1, s2: print(''.join(b[a.index(i)] for i in s1), ''.join(a[b.index(i)] for i in s2), sep='\n'))(input(),input(),input(),input()) -End,"
 (lambda a, b, s1, s2: print(''.join(dict(zip(a, b))[i] for i in s1), ''.join(dict(zip(b, a))[i] for i in s2), sep='\n'))(input(),input(),input(),input()) -End,"
 print('Learn Python: action in progress...\n' * 3 + 'Learn Python: action completed.\nLearn Python: action completed.') -End,"
 print(*divmod(int(input()), 60)) -End,"
 print(*divmod(abs(int(input()) - int(input())), 60)) -End,"
 print(sum((int(input()) for _ in '...'))) -End,"
 print(*divmod((int(input()) * 100 + int(input())) * int(input()), 100)) -End,"
 (lambda h, a, b: print((h - b - 1) // (a - b) + 1))(*[int(input()) for _ in '...']) -End,"
 print(('Чет', 'Нечет')[int(input()) % 2]) -End,"
 print(('Чет', 'Нечет')[int(input()) % 2 != 0]) -End,"
 (lambda a, b: print(f'Большее число: {(a, b)[a < b]}, меньшее число: {(a, b)[a > b]}'))(int(input()), int(input())) -End,"
 print(('Нет, это не такое уж и большое число', 'Да, это большое число')[abs(int(input())) > 1000000000]) -End,"
 print(eval('{0}{2}{1}'.format(*[input() for _ in '...']))) -End,"
 print(('Число трехзначное', 'Число двузначное', 'Число однозначное')[-len(input())]) -End,"
 a, b, c = [int(input()) for _ in '...']
print('2 <= 1\n' * (a > b) + '3 <= 2\n' * (b > c) + 'Все в порядке' * (a <= b <= c)) -End,"
 (lambda a, b, c: print('2 <= 1\n' * (a > b) + '3 <= 2\n' * (b > c) + 'Все в порядке' * (a <= b <= c)))(*[int(input()) for _ in '...']) -End,"
 print(('Доступ запрещен', 'Доступ разрешен')[input() in 'Энрико Ферми, Нильс Бор, Джон фон Нейман, Ричард Фейнман, Роберт Оппенгеймер, Ганс Бизе, Ханс Бете']) -End,"
 print(((3, 2), (4, 1))[int(input()) > 0][int(input()) > 0]) -End,"
 print(eval('{0}{2}{1}'.format(*[input() for _ in 'abc']))) -End,"
 (lambda year: print(('Невисокосный', 'Високосный')[year % 400 == 0 or year % 4 == 0 and year % 100 != 0]))(int(input())) -End,"
 (lambda s: print(('Good password', 'Bad password')['qwerty' in s or '1234' in s or len(s) < 8 or s.isalpha()]))(input()) -End,"
 print(('Не подходит', 'Подходит')[int(input()) > 6 and input() == 'Рим' and (lambda lang: ('английский' in lang or 'русский' in lang))(input())])
 -End,"
 (lambda a, b, c, shop: print(('NO', 'YES')[a in shop and b in shop and c in shop]))(*[input() for _ in '1234']) -End,"
 (lambda s: print(('Ты не пройдешь!', 'Проходи!')[bool([1 for i in ['Арагорн', 'Леголас', 'Мериадок Брендибак', 'Боромир', 'Фродо Бэггинс'] if i in s])]))(input()) -End,"
 (lambda s: print(('Ты не пройдешь!', 'Проходи!')[any(i in s for i in ['Арагорн', 'Леголас', 'Мериадок Брендибак', 'Боромир', 'Фродо Бэггинс'])]))(input()) -End,"
 (lambda x, y, x1, y1: print(('NO', 'YES')[x < 9 > y and x1 < 9 > y1 and abs(x - x1) <= 1 >= abs(y - y1) and not (abs(x - x1) == 0 == abs(y - y1))]))(*[int(input()) for _ in '1234']) -End,"
 print(tuple([i for i in range(*(lambda a: [a, a * 10 + 1])(int(input()))) if i % 2 == 0])) -End,"
 [print(i) for i in range(*sorted([int(input()), int(input())])) if i % 2 == 0 and i % 7 == 1] -End,"
 (lambda n: print(*['Красный', 'Оранжевый', 'Желтый', 'Зеленый', 'Голубой', 'Синий', 'Фиолетовый'][:n] if n < 8 else ['Радуга состоит только из семи цветов'], sep='\n'))(int(input())) -End,"
 print(('Не покупает', 'Покупает')[int(input()) >= sum([int(input()) for _ in range(int(input()))])]) -End,"
 (lambda n: print(*['Первый месяц - январь', 'Второй месяц - февраль', 'Третий месяц - март', 'Четвертый месяц - апрель', 'Пятый месяц - май', 'Шестой месяц - июнь', 'Седьмой месяц - июль', 'Восьмой месяц - август', 'Девятый месяц - сентябрь', 'Десятый месяц - октябрь', 'Одиннадцатый месяц - ноябрь', 'Двенадцатый месяц - декабрь'][:n] if n < 13 else ['Error'], sep='\n'))(int(input())) -End,"
 [print(f'На лугу {i} коров' + 'а' * (i % 10 == 1 and i % 100 != 11) + 'ы' * (2 <= i % 10 <= 4 and i // 10 % 10 != 1)) for i in range(1, int(input()) + 1)] -End,"
 a, b = 0, 1
for _ in range(int(input())):
    a, b = b, a + b
    print(a, end=' ') -End,"
 print(('Простое', 'Составное')[(lambda n: any(n % i == 0 for i in range(2, int(n ** 0.5) + 1)))(int(input()))]) -End,"
 (lambda n: [print(*[i * j for j in range(1, n)], sep='\t') for i in range(1, n)])(int(input()) + 1) -End,"
 (lambda found: print(*([-1], [i for i in found if i])[any(found)], sep='\n'))([('', i + 1)['rat' in input()] for i in range(int(input()))]) -End,"
 print(sum([int(i) for i in open(0).readlines()]))
 -End,"
 print('Эти строки запомнятся надолго' if [print('Великолепно, пишите еще!') for i in iter(input, '')] else 'Нет вдохновения? Ну ничего, попробуйте завтра') -End,"
 print(('Нет вдохновения? Ну ничего, попробуйте завтра', 'Эти строки запомнятся надолго')[bool([print('Великолепно, пишите еще!') for i in iter(input, '')])]) -End,"
 print(sum([int(i) for i in iter(input, '0')]))
 -End,"
 (lambda found: print(*([-1], [i for i in found if i][:1])[any(found)], sep='\n'))([('', i + 1)['rat' in input()] for i in range(int(input()))]) -End,"
 [print('Слабый пароль' * ('qwerty' in s or '1234' in s) + 'Короткий пароль' * (len(s.strip()) < 8) + 'Пароль должен содержать цифры' * (s.strip().isalpha())) for s in open(0).readlines()] -End,"
 x = int(input());
print(x//60);
print(x%60);



 -End,"
 x = int(input());
h = int(input());        
m = int(input());
print(h+(x//60)+((m+(x%60))//60));
print((m+(x%60))%60);
 -End,"
 a = float(input())
b = float(input())
s = input()
if s == ""+"":
	print(a+b)
elif s == ""-"":
	print(a-b)
elif s == ""*"":
	print(a*b)
elif s == ""pow"":
	print(a**b)
elif b == 0:
	print(""Деление на 0!"")
elif s == ""/"":
	print(a/b)
elif s == ""div"":
	print(a//b)
else:
	print(a%b)




 -End,"
 n = int(input())
s = 0
while n > 0:
    k = int(input())
    s += k
    n -= 1
print(s) -End,"
 a = int(input())
b = int(input())
c = 0
d = 0
for i in range(a, b+1):
    if (i % 3 == 0):
        c += i
        d += 1
print(c / d)



 -End,"
 s = input()
a = 0
b = len(s)
for i in s:
    if i.lower() == 'c' or i.lower() == 'g':
        a += 1
print(a / b * 100) -End,"
 s = input()
s1 = """"
a = 0
b = s[0]
for i in s:
    if i == b:
        a += 1
    else:
        s1 += b + str(a)
        a = 1
        b = i
s1 += b + str(a)
print(s1) -End,"
 s = input()
s1 = s.split()
ss = 0
q = 0
for i in s1:
    ss += int(s1[q])
    q += 1
print(ss)



 -End,"
 s = input()
s1 = s.split()
s1.sort()
q = s1[0]
w = -1
for i in s1:
    if (q == i):
        w = w + 1
        if (w == 1):
            print(i, end=' ')
    else:
        w = 0
    q = i -End,"
 s = 0
ss = 0
while (True):
    a = int(input())
    s += a
    ss += a*a
    if (s == 0):
        break
print(ss) -End,"
 a = int(input())
x = 1
y = 0
z = 0
while (z != a):
    if (y != x):
        print(x, end=' ')
        y += 1
        z += 1
    else:
        x += 1
        y = 0 -End,"
 def closest_mod_5(x):
    return x + 5 - x % 5




 -End,"
 def f(x):
    if (x <= -2):
        return 1-(x+2)**2
    if (-2 < x <= 2):
        return -x/2
    if (2 < x):
        return (x-2)**2+1




 -End,"
 print ((4*5+10*4+11*3+2*2)/27)




 -End,"
 print(3.5925925925925926)




 -End,"
 print(10+2)
print(10-2)
print(10*2)
print(10/2)
print(10**2) -End,"
 N = int(input())
p = int(input())
ch = int(input())
t = int(input())
d = int(input())
print((p*5+ch*4+t*3+d*2)/N) -End,"
 print(int(input())+int(input())) -End,"
 print('Hello,', input()) -End,"
 a = int(input())
b = int(input())
print(a+b, a-b, a*b, a/b, sep='@') -End,"
 a = int(input())
print(int(input()), a, sep=',')



 -End,"
 a = int(input())
b = int(input())
x = int(input())
print(abs(((a/b)**x)+(a**(x+1))/b**x)) -End,"
 a = abs(int(input()))
b = abs(int(input()))
print(a*b, 2*a+2*b, sep='\n') -End,"
 print(int(input())*60+int(input())) -End,"
 a = int(input())
print(a // 60)
print(a % 60) -End,"
 a = int(input())
b = int(input())
c = int(input())
print((a//60+b)%24+(a%60+c)//60)
print((a%60+c)%60) -End,"
 a = int(input())
print(a//100+a//10%10+a%10)




 -End,"
 from math import *
a = int(input())
b = int(input())
c = int(input())
p = (a+b+c)/2
print(sqrt(p*(p-a)*(p-b)*(p-c))) -End,"
 import math
a = int(input())
b = int(input())
c = int(input())
print(b*a/2*math.sin(math.pi*c/180))
print(b*a/2*math.sin(math.pi*c/180)) -End,"
 print(True) -End,"
 a = int(input())
b = int(input())
m = b
if a > m:
    m = a
print(m) -End,"
 x1, y1 = int (input ()), int (input ())
x2, y2 = int (input ()), int (input ())
x3, y3 = int (input ()), int (input ())
kv_a, kv_b, kv_c = (x2 - x1) ** 2 + (y2 - y1) ** 2, (x3 - x2) ** 2 + (y3 - y2) ** 2, (x1 - x3) ** 2 + (y1 - y3) ** 2
if kv_a > kv_c:
    kv_a, kv_c = kv_c, kv_a
if kv_b > kv_c:
    kv_b, kv_c = kv_c, kv_b
if kv_a + kv_b == kv_c:
    print ('Yes')
else:
    print ('No')




 -End,"
 a = int(input())
if a % 400 == 0 or a % 4 == 0 and a % 100 != 0:
    print('Високосный')
else:
    print('Обычный') -End,"
 a = int(input())
if a > -15 and a <= 12 or a > 14 and a < 17 or a >= 19:
    print('Yes')
else:
    print('No') -End,"
 a = int(input())
if a // 100000 + a // 10000 % 10 + a // 1000 % 10 == a // 100 % 10 + a // 10 % 10 + a % 10:
    print('Счастливый')
else:
    print('Обычный') -End,"
 a = int(input())
b = int(input())
c = int(input())
d = int(input())
s = 'NO'
if a == c or b == d:
    s = 'YES'
print(s) -End,"
 from math import *
a = int(input())
b = int(input())
c = int(input())
d = int(input())
s = 'NO'
if abs(a-c) == abs(b-d):
    s = 'YES'
print(s) -End,"
 from math import *
a = int(input())
b = int(input())
c = int(input())
d = int(input())
s = 'NO'
if a == c or b == d or abs(a-c) == abs(b-d):
    s = 'YES'
print(s) -End,"
 from math import *
a = int(input())
b = int(input())
c = int(input())
d = int(input())
s = 'NO'
if abs(a-c) == 2 and abs(b-d) or abs(a-c) == 1 and abs(b-d) == 2:
    s = 'YES'
print(s) -End,"
 x1 = int(input())
y1 = int(input())
x2 = int(input())
y2 = int(input())
x = int(input())
y = int(input())
s = 'Точка не принадлежит прямоугольнику'
if x1 <= x <= x2 and y2 <= y <= y1:
    s = 'Точка принадлежит прямоугольнику'
print(s) -End,"
 from math import *
a = int(input())
b = int(input())
c = int(input())
d = int(input())
s = 'NO'
if abs(a-c) < 2 and abs(b-d) < 2:
    s = 'YES'
print(s) -End,"
 a = int(input())
b = int(input())
c = int(input())
s = 'NO'
if a*b >= c and (c % a == 0 or c % b == 0):
    s = 'YES'
print(s) -End,"
 from math import *
a = int(input())
b = int(input())
c = int(input())
d = b*b-4*a*c
if d > 0:
    print((-b + sqrt(d)) / 2 / a, (-b - sqrt(d)) / 2 / a, sep = '\n')
elif d == 0:
    print(-b/2/a)
else:
    print('Заданное уравнение не имеет решений') -End,"
 a = int(input())
b = int(input())
h = int(input())
s = 'Это нормально'
if h < a:
    s = 'Недосып'
elif h > b:
    s = 'Пересып'
print(s) -End,"
 a = float(input())
b = float(input())
s = input()
ss = 0
if s == '+':
    ss = a+b
elif s == '-':
    ss = a-b
elif s == '*':
    ss = a*b
elif s == 'pow':
    ss = a**b
elif b == 0:
    ss = 'Деление на 0!'
elif s == '/':
    ss = a/b
elif s == 'div':
    ss = a//b
else:
    ss == a % b
print(ss) -End,"
 s = input()
if (s == ""прямоугольник""):
    print(int(input())*int(input()))
elif (s == ""треугольник""):
    a = int(input())
    b = int(input())
    c = int(input())
    p = (a+b+c)/2;
    print((p*(p-a)*(p-b)*(p-c))**(1/2))
else:
    a = int(input())
    print(a*a*3.14) -End,"
 n = int(input())
if n % 10 > 4 or n % 10 == 0 or n % 100 > 10 and n % 100 < 20:
    print(n, ""программистов"")
elif n % 10 == 1:
    print(n, ""программист"")
else:
    print(n, ""программиста"") -End,"
 from math import *
n = abs(int(input()))
s = 0
while (n != 0):
    s += n % 10
    n //= 10
print(s)


 -End,"
 from math import *
n = int(input())
a = 0
k = 2;
s = ""Введённое число не является простым""
while (k <= sqrt(n)):
    if n % k == 0:
        a += 1
        break;
    if k == 2:
        k += 1
    k += 1
if a == 0:
    s = ""Введённое число является простым""
print(s) -End,"
 a, s = int(input()), 0
while (a != 0):
    s += a
    a = int(input())
print(s) -End,"
 n, m = int(input()), int(input())
k = n*m
while (n*m != 0):
    if n > m:
        n %= m
    else:
        m %= n
print(k//(m+n)) -End,"
 a, b = int(input()), int(input())
while a*b != 0:
    if a > b:
        a %= b
    else:
        b %= a
print(a+b) -End,"
 a = int(input())
while a <= 100:
    if a > 10:
        print(a)
    a = int(input()) -End,"
 a = int(input())
b = 0
while True:
    if a == 0:
        break
    b += 1
    a //= 10
    continue
print(b) -End,"
 a = int(input())
b = 0
if a == 0:
    b = 1
while a != 0:
    a //= 10
    b += 1
print(b) -End,"
 a = input()
print(len(a)) -End,"
 p = 1
for i in (1, 4, 7, 10):
    p *= i
print(p)


 -End,"
 print(280)




 -End,"
 for i in (int(input()),int(input()),int(input()),int(input())):
    print(i**3) -End,"
 n = int(input())
f = 1
for i in range(1, n + 1):
    f *= i
print(f) -End,"
 print(77+18-5)




 -End,"
 print(15*2/3)




 -End,"
 print(2**3*4*6-7*6-3-2*4)




 -End,"
 print(-5*4*4-5*4*9-5*9*9)




 -End,"
 print((3*5*5-15)/8) -End,"
 print((7*3-3**3+3)/(-3)) -End,"
 p = int(input())
a = int(input())
print((p/2-a)*a) -End,"
 print(int(input())*int(input())) -End,"
 print(2*int(input())+2*int(input())) -End,"
 a, b = input().split()
c, d = input().split()
print(int(a)*int(c)+int(b)*int(d)) -End,"
 a, b, c = input().split()
d, e, f = input().split()
print(int(a)*int(d)+int(b)*int(e)+int(c)*int(f))




 -End,"
 print(int(input())*45+int(input())*15+int(input())*10) -End,"
 a, b = input().split()
c, d = input().split()
e, f = input().split()
print(int(a)*int(b)+int(c)*int(d)+int(e)*int(f)) -End,"
 print(int(input())/(int(input())-1)) -End,"
 n = int(input())
print(n+0.8*n+0.8*n+5) -End,"
 s = int(input())
a = int(input())
print(2*(s/a+a)) -End,"
 print(int(input())/8) -End,"
 print(int(input())*int(input())/1000) -End,"
 print(int(input())*1440*26) -End,"
 a, b = input().split()
print((int(a)+int(b))*int(input())*2.7) -End,"
 a = int(input())
print(4*a+8, a*a+4*a-32) -End,"
 from math import *
s = 0
a = ceil(float(input()))
b = int(input())
for i in range (a + 1 - a % 2, b + 1, 2):
    s += i
print(s)



 -End,"
 print(int(input())+int(input())*int(input())) -End,"
 x, y = input().split()
print(float(x)*4, float(y)*4)




 -End,"
 print(int(input())*int(input())/100) -End,"
 a = int(input())
b, c = input().split()
d = int(input())
print(1440-1440/a-int(b)*60-int(c)-d*60) -End,"
 a = float(input())
print(a / 4 * a / 4 * 2) -End,"
 a, b = input().split()
c, d = input().split()
print(float(a)*float(b)+float(c)*float(d)) -End,"
 a, b = input().split()
c, d = input().split()
print((int(a)+int(c))/(int(b)+int(d))) -End,"
 a, b = input().split()
c, d = input().split()
print((float(a)*float(b)+float(c)*float(d))/(float(a)+float(c))) -End,"
 a, b = input().split()
print(float(input())*int(b)/int(a)) -End,"
 print(int(input())/900)




 -End,"
 print(int(input())*int(input())+int(input())) -End,"
 print(int(input())/int(input())+int(input())) -End,"
 print(float(input())*280) -End,"
 print(int(input())*0.87) -End,"
 print(float(input())/0.87) -End,"
 s = 0
n = 0
a, b = int(input()), int(input())
for i in range (a, b+1):
    if i % 3 == 0:
        s += i
        n += 1
print(s / n) -End,"
 n = int(input())
n1 = n
s = 0
q = 0
o = True
while n != 0:
    s += n % 10
    n //= 10
for i in range (0, n1):
    s1, w = 0, i
    while w != 0:
        s1 += w % 10
        w //= 10
    if s1 == s:
        if o:
            print('Найденные числа:')
            o = False
        print(i)
        q += 1
if q == 0:
    print('Искомых чисел не найдено') -End,"
 a, b = int(input()), int(input())
print(b // a, b % a, sep = '\n') -End,"
 import sys


def nd(node, r=''):
    for i in range(len(node)):
        if isinstance(node[i], list):
            nd(node[i], r + str(i))
        else:
            h2.append((node[i], r + str(i)))
    return

s = sys.stdin.readline().strip('\n')
lts = set(s)
h = [[s.count(lt), lt] for lt in lts]

while len(h) > 2:
    p0 = h.pop(h.index(min(h, key=lambda x: x[0])))
    p1 = h.pop(h.index(min(h, key=lambda x: x[0])))
    h.append([p0[0] + p1[0], [p0[1], p1[1]]])
h = [now[1] for now in h]

h2 = []
nd(h)
h2.sort()
h_dict = dict(h2)
s_out = ''
for now in s:
    s_out += h_dict[now]

sys.stdout.write(f'{len(lts)} {len(s_out)}\n')
for now in h2:
    sys.stdout.write(f'{now[0]}: {now[1]}\n')
sys.stdout.write(s_out)
 -End,"
 import sys


k, l = map(int, sys.stdin.readline().split())
d = [sys.stdin.readline().strip() for _ in range(k)]  # создаю список с кодами символов
d = {now.split()[1]: now.split()[0][:-1] for now in d}  # преобразую список в словарь
s = sys.stdin.readline()
pos = ''
s_out = ''

while s:
    pos += s[0]  # добавляем в ключ первый символ из исходной строки
    s = s[1:]    # и удаляем первый символ из исходной строки
    if pos in d:  # проверяем наличие ключа в словаре
        s_out += d[pos]  # если ключ есть - добавляем значение в выходную строку
        pos = ''         # и очищаем ключ

sys.stdout.write(s_out) -End,"
 import sys


def find_index(a, b):
        lf = 1
        rt = n
        while lf <= rt:
            j = int((lf + rt) / 2)
            if a[j] == b:
                return j
            elif a[j] < b:
                lf = j + 1
            elif a[j] > b:
                rt = j - 1
        return -1


if __name__ == '__main__':
    a_array = list(map(int, sys.stdin.readline().split()))
    b_array = list(map(int, sys.stdin.readline().split()))
    n = a_array[0]
    k = b_array[0]
    sys.stdout.write(' '.join(map(str, [find_index(a_array, b_array[i]) for i in range(1, k + 1)])))
 -End,"
 import sys


def merge(lf, rt):
    count_inv = lf.pop() + rt.pop()
    temp = []
    while lf and rt:
        if lf[0] > rt[0]:
            count_inv += len(lf)
            temp.append(rt.pop(0))
        else:
            temp.append(lf.pop(0))
    temp.extend(lf) if lf else temp.extend(rt)
    temp.append(count_inv)
    return temp


def qty(qu):
    count = 0
    if len(qu) == 1:
        qu.append(count)
        return qu
    else:
        left = qu[:len(qu) // 2]
        right = qu[len(qu) // 2:]
        return merge(qty(left), qty(right))


def qty_of_inversions():
    n = int(sys.stdin.readline())
    q = list(map(int, sys.stdin.readline().split()))
    assert len(q) == n
    print(qty(q)[-1])


if __name__ == '__main__':
    qty_of_inversions()
 -End,"
 import sys

from random import randint


def partition(seq):
    _ = randint(0, len(seq) - 1)
    seq[0], seq[_] = seq[_], seq[0]
    j, k = 0, 0
    for i in range(1, len(seq)):
        if seq[i] <= seq[0]:
            k += 1
            seq[i], seq[k] = seq[k], seq[i]
            if seq[k] < seq[0]:
                j += 1
                seq[k], seq[j] = seq[j], seq[k]
    seq[0], seq[j] = seq[j], seq[0]
    return j, k


def quick_sort(seq):
    if len(seq) <= 1:
        return seq

    m, n = partition(seq)
    return quick_sort(seq[:m]) + seq[m:n + 1] + quick_sort(seq[n + 1:])


def middle(p, q, lt, rt):
    if lt == rt:
        if q[lt] <= p and lt == len(q) - 1:
            lt += 1
        return lt
    delta = (rt - lt) // 2
    m = lt + delta
    if q[m] > p:
        rt = m
    elif q[m] == p:
        if p != q[m + 1]:
            lt = m + 1
        else:
            if delta:
                lt = m
            else:
                lt = rt
    else:
        if delta:
            lt = m
        else:
            lt = rt
    return middle(p, q, lt, rt)


def point_in_segments():
    data = list(map(int, sys.stdin.read().split()))
    n, m = data.pop(0), data.pop(0)
    left = data[:2 * n:2]
    right = data[1:2 * n:2]
    points = data[2 * n:]
    lt = quick_sort(left)
    rt = quick_sort(right)
    result = []
    for point in points:
        if point < lt[0] or point > rt[-1]:
            result.append(0)
        else:
            result.append(
                middle(point, lt, 0, n - 1) - middle(point - 1, rt, 0, n - 1)
            )
    return result


if __name__ == '__main__':
    print(' '.join(map(str, point_in_segments())))
 -End,"
 import sys


def main():
    n = int(sys.stdin.readline())
    a = list(map(int, sys.stdin.readline().split()))
    assert len(a) == n
    d = [0] * n
    for i in range(n):
        d[i] = 1
        for j in range(i):
            if a[i] % a[j] == 0 and d[j] + 1 > d[i]:
                d[i] = d[j] + 1
    ans = 0
    for i in range(n):
        ans = max(ans, d[i])
    return ans


if __name__ == '__main__':
    print(main())
 -End,"
 from sys import stdin


def editing_distance():
    a, b = [line[:-1] for line in stdin.readlines()]
    a_, b_ = len(a) + 1, len(b) + 1
    d = [[0 for _ in range(b_)] for _ in range(a_)]
    for i in range(a_):
        d[i][0] = i
    for j in range(b_):
        d[0][j] = j
    for i in range(1, a_):
        for j in range(1, b_):
            c = int(a[i - 1] != b[j - 1])
            d[i][j] = min(d[i - 1][j] + 1,
                          d[i][j - 1] + 1,
                          d[i - 1][j - 1] + c
                          )
    print(d[-1][-1])


if __name__ == '__main__':
    editing_distance()
 -End,"
 from sys import stdin


def knapsack():
    reader = (tuple(map(int, line.split())) for line in stdin)
    wk, n = next(reader)
    w = list(next(reader))
    d = [[0 for _ in range(wk + 1)] for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(1, wk + 1):
            d[i][j] = d[i - 1][j]
            if w[i - 1] <= j:
                d[i][j] = max(d[i][j], d[i - 1][j - w[i - 1]] + w[i - 1])
    print(d[-1][-1])


if __name__ == '__main__':
    knapsack()
 -End,"
 from sys import stdin


def stair():
    n = int(stdin.readline().strip())
    s = [int(x) for x in stdin.readline().split()]
    prev2, prev1, current = 0, 0, 0
    for i in range(n):
        current = s[i] + max(prev1, prev2)
        prev2, prev1 = prev1, current
    print(current)


if __name__ == '__main__':
    stair()
 -End,"
 def calc():
    n = int(input())
    d = [0, 0]
    
    for i in range(2, n + 1):
        if i % 3 == 0:
            x3 = d[i // 3] + 1
        else:
            x3 = float('inf')

        if i % 2 == 0:
            x2 = d[i // 2] + 1
        else:
            x2 = float('inf')
        
        x1 = d[i - 1] + 1
        d.append(min(x1, x2, x3))
    
    k = n
    chain = [n]
    while k > 1:
        if k % 3 == 0 and d[k] == d[k // 3] + 1:
            k = k // 3
        elif k % 2 == 0 and d[k] == d[k // 2] + 1:
            k = k // 2
        else:
            k = k - 1
        chain.append(k)

    print(d[-1])
    print(*reversed(chain))


if __name__ == '__main__':
    calc()
 -End,"
 a = input()
while a.lower() != 'end':
    print(f'Processing ""{a}"" command...')
    a = input()
print('Good bye!')
 -End,"
 user = input('Enter your name: ')
print(f'Hello {user}')
 -End,"
 s = input()
n = ''
s_out = ''
for sign in s:
    if sign.isdigit():
        n = n + sign
    else:
        if not n:
            n = '1'
        s_out = s_out + sign * int(n)
        n = ''
print(s_out)
 -End,"
 input_string = input()
encoded_string = ''
count = ''
prev_symbol = ''
for symbol in input_string:
    if symbol == prev_symbol:
        count = str(int(count or 1) + 1)
    else:
        encoded_string = encoded_string + count + prev_symbol
        prev_symbol = symbol
        count = ''
encoded_string = encoded_string + count + prev_symbol
print(encoded_string)
 -End,"
 def fraction_of_students(grades):
    grades = grades.split()
    return f'{(grades.count(""A"") / len(grades)):.2f}'


if __name__ == '__main__':
    print(fraction_of_students(input()))
 -End,"
 def math_interpreter(expression):
    commands = ['plus', 'minus', 'multiply', 'divide']
    first, command, second = expression.split()
    first, second = int(first), int(second)
    if command not in commands:
        return f'Unknow command: ""{command}"".'
    if command == 'plus':
        result = first + second
    elif command == 'minus':
        result = first - second
    elif command == 'multiply':
        result = first * second
    elif second == 0:
        return f'Error: ""Zero divide""'
    else:
        result = first // second
    return result


if __name__ == '__main__':
    print(math_interpreter(input())) -End,"
 import operator


def math_interpreter(a, oper, b):
    operations = {'plus': operator.add(int(a), int(b)),
                  'minus': operator.sub(int(a), int(b)),
                  'multiply': operator.mul(int(a), int(b)),
                  'divide': operator.floordiv(int(a), int(b))
                 }
    return operations[oper]


if __name__ == '__main__':
    print(math_interpreter(*input().split()))
 -End,"
 def modify_list(l):
    l[:] = [x // 2 for x in l if x % 2 == 0]




 -End,"
 def modify_list(l):
    a = []
    while l:
        item = l.pop()
        if not item % 2:
            a.append(item // 2)
    l[:] = a[::-1]




 -End,"
 def comparison(two_cards, trump):
    cards = {'6': 0, '7': 1, '8': 2, '9': 3, '10': 4, 'J': 5, 'Q': 6, 'K': 7, 'A': 8}
    card1, card2 = two_cards[0][:-1], two_cards[1][:-1]
    suit1, suit2 = two_cards[0][-1], two_cards[1][-1]
    if suit1 == suit2:
        return 'First' if cards[card1] > cards[card2] else 'Second'
    elif trump in [suit1, suit2]:
        return 'First' if trump == suit1 else 'Second'
    else:
        return 'Error'


if __name__ == '__main__':
    print(comparison(input().split(), input()))
 -End,"
 def h_tower(n, start='1', goal='3', free='2'):
    if n:
        h_tower(n - 1, start, free, goal)
        print(f'{start} - {goal}')
        h_tower(n - 1, free, goal, start)


if __name__ == '__main__':
    h_tower(int(input()))
 -End,"
 from collections import OrderedDict


def to_roman(n):
    rom = OrderedDict([(1000, 'M'),
                      (900, 'CM'),
                      (500, 'D'),
                      (400, 'CD'),
                      (100, 'C'),
                      (90, 'XC'),
                      (50, 'L'),
                      (40, 'XL'),
                      (10, 'X'),
                      (9, 'IX'),
                      (5, 'V'),
                      (4, 'IV'),
                      (1, 'I')]
                     )
    roman = ''
    for k, v in rom.items():
        roman += n // k * v
        n %= k
    return roman


if __name__ == '__main__':
    print(to_roman(int(input())))
 -End,"
 def seq(n):
    m = []
    a = 1
    while len(m) < n:
        m += [str(a) for _ in range(a)]
        a += 1
    return ' '.join(m[:n])


if __name__ == '__main__':
    print(seq(int(input())))
 -End,"
 def caesar_cipher(offset, string):
    alphabet = ' abcdefghijklmnopqrstuvwxyz'
    encoded_string = ''
    for chr in string:
        i = alphabet.find(chr)
        encoded_string += alphabet[(i + offset) % 27]
    return f'Result: ""{encoded_string}""'


if __name__ == '__main__':
    print(caesar_cipher(int(input()), input().strip()))
 -End,"
 def caesar_cipher_unicode(offset, sequence):
    encoded_sequence = ''
    for char in sequence:
        encoded_sequence += chr((ord(char) - int(0x1f600) + offset) % 80 + int(0x1f600))
    return f'Result: ""{encoded_sequence}""'


if __name__ == '__main__':
    print(caesar_cipher_unicode(int(input()), input().strip()))
 -End,"
 def split_and_join(string):
    return '_'.join(string.split())


if __name__ == '__main__':
    print(split_and_join(input()))
 -End,"
 import re


def split_and_join(string):
    return re.sub(r'\s+', '_', string.strip())


if __name__ == '__main__':
    print(split_and_join(input()))
 -End,"
 sequence = input().split()
number = input()
print(' '.join([str(pos) for pos, item in enumerate(sequence) if item == number]) or None)
 -End,"
 seq = input().split()
num = input()
match = 0
for i in range(len(seq)):
    if seq[i] == num:
        print(i, end=' ')
        match += 1
if not match:
    print(None)
 -End,"
 seq = input().split()
num = input()
match = 0
try:
    while True:
        match = seq.index(num, match)
        print(match, end=' ')
        match += 1
except ValueError:
    if not match:
        print(None)
 -End,"
 def neighbours(i, j, result):
    for p in range(i - 1, i + 2):
        if 0 <= p < n:
            for q in range(j - 1, j + 2):
                if 0 <= q < m:
                    if field[p][q] == '*':
                        result[p][q] = '*'
                    elif result[p][q] != '*':
                        result[p][q] += 1


def wiper(n, m, field):
    result = [[0 for _ in range(m)] for _ in range(n)]
    for i in range(n):
        for j in range(m):
            if field[i][j] == '*':
                neighbours(i, j, result)
    print(*[''.join(map(str, result[k])) for k in range(n)], sep='\n')


if __name__ == '__main__':
    n, m = map(int, input().split())
    field = [[x for x in input()] for _ in range(n)]
    wiper(n, m, field)
 -End,"
 def neighbours(i, j):
    for row in range(i - 1, i + 2):
        for col in range(j - 1, j + 2):
            if 0 <= row < n and 0 <= col < m:
                if minefield[row][col] != '*':
                    minefield[row][col] += 1


def sapper(n, m, minefield):
    for i in range(n):
        for j in range(m):
            if minefield[i][j] == '*':
                neighbours(i, j)
    print(*[''.join(map(str, minefield[k])) for k in range(n)], sep='\n')


if __name__ == '__main__':
    n, m = map(int, input().split())
    minefield = [[x if x == '*' else 0 for x in input()] for _ in range(n)]
    sapper(n, m, minefield)
 -End,"
 n = int(input())
while n != 1:
    print(n, end=' ')
    if n % 2:
        n = 3 * n + 1
    else:
        n //= 2
print(n)
 -End,"
 def three_n_plus_one(n):
    yield n
    while n > 1:
        n = 3 * n + 1 if n % 2 else n // 2
        yield n


if __name__ == '__main__':
    print(*list(three_n_plus_one(int(input()))))
 -End,"
 def roman_to_decimal(string):
    roman = dict(I=1, V=5, X=10, L=50, C=100, D=500, M=1000)
    decimal = [roman[string[-1]]]
    for symbol in string[-2::-1]:
        a = -1 if roman[symbol] < decimal[-1] else 1
        decimal += [a * roman[symbol]]
    return sum(decimal)


if __name__ == '__main__':
    print(roman_to_decimal(input()))
 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
n = int(input())
b = list(map(int, (input() for _ in range(n ))))
d = dict.fromkeys(b)
for k in b:
    if d[k] is None:
        d[k] = f(k)
    print(d[k])
 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.


def cache_f(func):
    d = {}
    def wrapped(x):
        if x not in d:
            d[x] = func(x)
        return d[x]
    return wrapped


@cache_f
def super(x):
    return f(x)


if __name__ == '__main__':
    print(*[super(x) for x in [int(input()) for _ in range(int(input()))]], sep='\n')
 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
from functools import lru_cache


@lru_cache()
def super(x):
    return f(x)


if __name__ == '__main__':
    print(*[super(x) for x in [int(input()) for _ in range(int(input()))]], sep='\n')
 -End,"
 a, b, k, d = input(), input(), 1, [-1]
while k:
    d.append(a.find(b, d[-1] + 1))
    if d[-1] == -1:
        k += d.pop()
if len(d) > 1: d = d[1:]
print(*d)
 -End,"
 a, b = input(), input()
print(f""{a} and {b} sat in the tree.\n{a} had fallen, {b} was stolen.\nWhat's remaining in the tree?"")
 -End,"
 words, d = input().lower().split(), {}
for word in words:
    if word not in d:
        d[word] = 0
    d[word] += 1
print(*[f'{w} {c}' for w, c in d.items()], sep='\n')
 -End,"
 units_map = {'mile': 1609.00,
             'yard': 0.9144,
             'foot': 0.3048,
             'inch': 0.0254,
             'km': 1000.00,
             'm': 1.00,
             'cm': 0.01,
             'mm': 0.001
            }


line_in = input().split()
number, unit_from, unit_to = float(line_in[0]), line_in[1], line_in[3]
print(f'{number * units_map[unit_from] / units_map[unit_to]:.2e}')
 -End,"
 from collections import Counter


print(*[k for k, v in Counter(input().split()).items() if v > 1])
 -End,"
 t = input().split()
t.sort()
for i in range(1, len(t) - 1):
    if t[i] != t[i + 1] and t[i] != t[i - 1]:
        t[i] = None
t[0], t[-1] = None, None
print(*[t[x] for x in range(1, len(t)) if (t[x] is not None and t[x] != t[x - 1])])
 -End,"
 d = {'0': [' -- ', '|  |', '|  |', '    ', '|  |', '|  |', ' -- '],
     '1': ['    ', '   |', '   |', '    ', '   |', '   |', '    '],
     '2': [' -- ', '   |', '   |', ' -- ', '|   ', '|   ', ' -- '],
     '3': [' -- ', '   |', '   |', ' -- ', '   |', '   |', ' -- '],
     '4': ['    ', '|  |', '|  |', ' -- ', '   |', '   |', '    '],
     '5': [' -- ', '|   ', '|   ', ' -- ', '   |', '   |', ' -- '],
     '6': [' -- ', '|   ', '|   ', ' -- ', '|  |', '|  |', ' -- '],
     '7': [' -- ', '   |', '   |', '    ', '   |', '   |', '    '],
     '8': [' -- ', '|  |', '|  |', ' -- ', '|  |', '|  |', ' -- '],
     '9': [' -- ', '|  |', '|  |', ' -- ', '   |', '   |', ' -- ']
    }

display = ['' for _ in range(9)]

string = input()

to_display = [' '.join([d[i][j] for i in string]) for j in range(7)]

display[0] = display[8] = f""x{'-' * (5 * len(string) - 1)}x""

for i in range(1, 8):
    display[i] = f'|{to_display[i - 1]}|'

print(*display, sep='\n')
 -End,"
 def f(x):
    if x <= -2:
        return 1 - (x + 2) ** 2
    elif -2 < x <= 2:
        return -x / 2
    elif 2 < x:
        return (x - 2) ** 2 + 1
 -End,"
 a = int(input())
print(any([a == -10, -5 < a <= 3, 8 < a < 12, 16 <= a]))
 -End,"
 seq = list(map(int, input().split()))
if sorted([abs(seq[i] - seq[i - 1]) for i in range(1, len(seq))]) == list(range(1, len(seq))):
    print('Jolly')
else:
    print('Not jolly')
 -End,"
 print(sorted(list(input().lower())) == sorted(list(input().lower())))
 -End,"
 a, x = (map(int, input().split('/')))
result = []
while x:
    result.append(a // x)
    a, x = x, a % x
print(*result)




 -End,"
 n, m = map(int, input().split())
for item in zip(*[list(map(int, input().split())) for _ in range(n)]):
    print(*item)
 -End,"
 a, b = map(int, input().split())
for k in range(a, b + 1):
    if not k % 15:
        print('FizzBuzz')
    elif not k % 3 or not k % 5:
        print('Fizz' if k % 5 else 'Buzz')
    else:
        print(k)
 -End,"
 n, k, z = int(input()), 0, 0
matrix = [[0 for _ in range(n)] for _ in range(n)]
while n - 2 * k > 1:
    for j in range(k, n - k):
        z += 1
        matrix[k][j] = z
    z -= 1
    for i in range(k, n - k):
        z += 1
        matrix[i][n - k - 1] = z
    z -= 1
    for j in range(n - 1 - k, k, -1):
        z += 1
        matrix[n - 1 - k][j] = z
    for i in range(n - 1 - k, k, -1):
        z += 1
        matrix[i][k] = z
    k += 1
if z != n * n:
    z += 1
    matrix[k][k] = z
for item in matrix:
    print(*item)
 -End,"
 def neighbors(x, y):
    k = -1 if world[x][y] == 'X' else 0
    for dx in range(-1, 2):
        for dy in range(-1, 2):
            if world[(x + dx) % n][(y + dy) % m] == 'X':
                k += 1
    return k


def life(n, m, world):
    new_world = [[world[i][j] for j in range(m)] for i in range(n)]
    for x in range(n):
        for y in range(m):
            k = neighbors(x, y)
            if k == 3:
                new_world[x][y] = 'X'
            elif k == 2:
                new_world[x][y] = world[x][y]
            else:
                new_world[x][y] = '.'
    return new_world


if __name__ == '__main__':
    n, m = map(int, input().split())
    world = [list(map(str, input())) for _ in range(n)]
    print(*(''.join(row) for row in life(n, m, world)), sep='\n')
 -End,"
 def get_int(start_message, error_message, end_message):
    print(start_message)
    while True:
        try:
            x = int(input())
            print(end_message)
            return x
        except ValueError:
            print(error_message)
 -End,"
 words = [len(word) for word in input().split()]
d = {}
for k in words:
    if k not in d:
        d[k] = 0
    d[k] += 1
for k, v in sorted(d.items()):
    print(f'{k}: {v}')
 -End,"
 n = int(input())
curve, k = [], 0
turn = [60, -120, 60]
while k < n:
    k, b = k + 1, len(curve)
    c = 4 ** (k - 1)
    for i in range(c - 1):
        curve = curve[:-b + i] + turn + curve[-b + i:]
    curve = curve + turn
for a in curve:
    print(f'turn {a}')
 -End,"
 # put your python code here
a = int(input())
b = int(input())
c = int(input())
d = int(input())

for i in range(11):
    if 0 < i < a or i > b:
        continue
    elif i == 0:
        p = i + 1
    else:
        p = i
    for j in range(11):
        if 0 < j < c or j > d:
            continue
        elif j == 0:
            q = j + 1
        else:
            q = j
        if i == 0 and j == 0:
            s = ' '
        else:
            s = p * q
        print(s, end='\t')
    print()
 -End,"
 # put your python code here
a = int(input())
b = int(input())
s = 0
n = 0

if a % 3:
    if (a + 1) % 3:
        a = a + 2
    else:
        a = a + 1

for i in range(a, b + 1, 3):
    s += i
    n += 1

print(s / n)
 -End,"
 # put your python code here
s = input().upper()
print((s.count('C') + s.count('G')) / len(s) * 100)
 -End,"
 # put your python code here
s = input()
g = s[0]
n = 1
s_2 = ''

for ch in s[1:]:
    if ch != g:
        s_2 += g + str(n)
        g = ch
        n = 1
    else:
        n += 1

s_2 += g + str(n)
print(s_2)
 -End,"
 seq = [int(i) for i in input().split()]
for i in range(len(seq)):
    if len(seq) == 1:
        print(seq[0])
    else:
        print(seq[(i - 1) % len(seq)] + seq[(i + 1) % len(seq)], end=' ')
 -End,"
 seq = sorted([int(i) for i in input().split()])
idx = 0
while idx < len(seq):
    dt = seq.count(seq[idx])
    if dt > 1:
        print(seq[idx], end=' ')
        idx += dt
    else:
        idx += 1
 -End,"
 seq = []
seq.append(int(input()))
s = seq[-1]
while s:
    seq.append(int(input()))
    s += seq[-1]
for item in seq:
    s += item * item
print(s)
 -End,"
 a = int(input())
b = a
c = a * a
while b:
    a = int(input())
    b += a
    c += a * a
print(c)
 -End,"
 n = int(input())
r = 0
lst = []

while (r + r * r) / 2 < n:
    r += 1

for i in range(1, r + 1):
    lst += [i] * i

print(*lst[:n])
 -End,"
 lst, x = input().split(), input()
if x not in lst:
    print('Отсутствует')
else:
    idx = 0
    for i in range(lst.count(x)):
        idx = lst.index(x, idx)
        print(idx, end=' ')
        idx += 1
 -End,"
 matrix_in = []
while True:
    line = input()
    if line == 'end':
        break
    else:
        matrix_in.append([int(i) for i in line.split()])

# чтобы работало, даже если не будет введено ни одной строки матрицы
m, n = len(matrix_in), len(matrix_in[0] if matrix_in else matrix_in)

for i in range(m):
    for j in range(n):
        north = matrix_in[i - 1][j]
        east = matrix_in[i][j + 1 - n]
        south = matrix_in[i + 1 - m][j]
        west = matrix_in[i][j - 1]
        print(north + east + south + west, end=' ')
    print()
 -End,"
 n, k, z = int(input()), 0, 0
matrix = [[0 for _ in range(n)] for _ in range(n)]
while n - 2 * k > 1:
    for j in range(k, n - k - 1):
        z += 1
        matrix[k][j] = z
    for i in range(k, n - k - 1):
        z += 1
        matrix[i][n - k - 1] = z
    for j in range(n - 1 - k, k, -1):
        z += 1
        matrix[n - 1 - k][j] = z
    for i in range(n - 1 - k, k, -1):
        z += 1
        matrix[i][k] = z
    k += 1
if n % 2:
    z += 1
    matrix[k][k] = z
for item in matrix:
    print(*item)




 -End,"
 def modify_list(l):
    a = l[:]
    l.clear()
    for i in a:
        if i % 2 == 0:
            l.append(i // 2)
    return
 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key not in d:
        if 2 * key not in d:
            d[2 * key] = [value]
        else:
            d[2 * key] += [value]
    else:
        d[key] += [value]

# не добавляйте кода вне функции -End,"
 d = {}
for word in input().lower().split():
    if word not in d.keys():
        d[word] = 0
    d[word] += 1
for k, v in d.items():
    print(k, v)
 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
n = int(input())
d = {}
data = [int(input()) for _ in range(n)]
for x in data:
    if x not in d:
        d[x] = f(x)
    print(d[x])
 -End,"
 sides = sorted([int(input()) for _ in range(3)])
print ('YES' if sides[-1] < sum(sides[:-1]) else 'NO')
 -End,"
 import string as s
ch = input()
if ch in s.ascii_letters:
    print(ch.upper() if ch in s.ascii_lowercase else ch.lower())
else:
    print(ch)
 -End,"
 matrix = []
m = 0
row = input().split()

while row[0] != 'end':
    matrix.append([int(elm) for elm in row])
    m += 1
    row = input().split()

n = len(matrix[0])

for i in range(m):
    for j in range(n):
        north = matrix[i - 1][j]
        east = matrix[i][j + 1 - n]
        south = matrix[i + 1 - m][j]
        west = matrix[i][j - 1]
        print(north + east + south + west, end=' ')
    print()
 -End,"
 def filter_positive(lst):
    return [now for now in lst if now > 0]
 -End,"
 import sys

print(*sys.argv[1:])
 -End,"
 n = int(input())
sp_lt = {}
lt_sp = {}

for _ in range(n):
    wd = input().split(' ' or ',')
    sp_lt.update({wd[0]: [w.strip(',') for w in wd[2:]]})

for k, v in sp_lt.items():
    for i in v:
        if i not in lt_sp:
            lt_sp[i] = []
        lt_sp[i] += [k]

print(len(lt_sp))
for key, value in sorted(lt_sp.items()):
    print(f'{key} - {"", "".join(sorted(value))}')
 -End,"
 shape = {
    '1': 'You have chosen a square',
    '2': 'You have chosen a circle',
    '3': 'You have chosen a triangle',
    '4': 'You have chosen a rhombus',
}

key = input()

print(shape[key] if key in shape else 'There is no such shape!')
 -End,"
 login = 100500
password = 424242

u_log, u_pas = [int(i) for i in input().split()]

if u_log != login:
    print(f'No user with login {u_log} found')
elif u_pas != password:
    print('Wrong password')
else:
    print('Login success')
 -End,"
 come = list(map(int, input().split()))
n = len(come)

if n == 1:
    print(come[0])
else:
    for i in range(len(come)):
        print(come[i - 1] + come[i + 1 - n], end=' ')
 -End,"
 p, x, y, k = [int(input()) for _ in range(4)]

total = x * 100 + y
for _ in range(k):
    total += int(total * p / 100)

print(total // 100, total % 100)
 -End,"
 n, m = [int(i) for i in input().split()]
m_in = []
m_out = [[0 for _ in range(n)] for _ in range(m)]

for _ in range(n):
    m_in.append([int(i) for i in input().split()])

for i in range(m):
    for j in range(n):
        m_out[i][j] = m_in[n - 1 - j][i]

for i in range(m):
    for j in range(n):
        print(m_out[i][j], end=' ')
    print()
 -End,"
 d = set(input().lower() for _ in range(int(input())))
l = set()
for _ in range(int(input())):
    for z in input().lower().split():
        l.add(z)

print(*(l - d), sep='\n')
 -End,"
 # n, m = [int(_) for _ in input().split()]
# matrix = [input().split() for _ in 'a' * n]
# print(*[' '.join(item) for item in list(zip(*matrix))], sep='\n')

# ... and same it in one string

print(*[' '.join(item) for item in list(zip(*[input().split() for _ in 'a' * [int(_) for _ in input().split()][0]]))], sep='\n')
 -End,"
 s = input().lower()
print((s.count('g') + s.count('c')) / len(s) * 100)
 -End,"
 n, m = [int(_) for _ in input().split()]
for i in range(n):
    for j in range(m):
        if not (m % 2) and i % 2:
            print(f'{0 if (m * i - 1 + j) % 2 else (m * i + j) // 2 + 1: 4}', end='')
        else:
            print(f'{0 if (m * i + j) % 2 else (m * i + j) // 2 + 1: 4}', end='')
    print()
 -End,"
 n = input().zfill(4)
print(1 if n == n[::-1] else 125)
 -End,"
 lst = sorted(input().split())
print(*[n for n in set(lst) if lst.count(n) > 1])
 -End,"
 s = input()
print('yes' if s == s[::-1] else 'no')
 -End,"
 n = int(input())
teams = {}

for i in range(n):
    match = input().split(';')

    for i in [0, 2]:
        if match[i] not in teams:
            teams[match[i]] = [0, 0, 0]

    if int(match[1]) > int(match[3]):
        teams[match[0]][0] += 1
        teams[match[2]][2] += 1
    elif int(match[1]) < int(match[3]):
        teams[match[0]][2] += 1
        teams[match[2]][0] += 1
    else:
        teams[match[0]][1] += 1
        teams[match[2]][1] += 1

for team, val in teams.items():
    print(f'{team}:{sum(val)}'
          f'{val[0]: 2}{val[1]: 2}{val[2]: 2}'
          f'{3 * val[0] + val[1]: 2}')
 -End,"
 a_code, z_code, string_encode, string_decode = [input() for _ in range(4)]
dict_encode = dict(zip(a_code, z_code))
dict_decode = dict(zip(z_code, a_code))
print(*[dict_encode[ch] for ch in string_encode], sep='')
print(*[dict_decode[ch] for ch in string_decode], sep='')
 -End,"
 test_set = set(input().lower() for _ in range(int(input())))
text = set()
for _ in range(int(input())):
    text.update(input().lower().split())
print(*(text - test_set), sep='\n')
 -End,"
 direct = [input().split() for _ in range(int(input()))]
cart = {'север': 0, 'юг': 0, 'восток': 0, 'запад': 0}
for k, v in direct:
    cart[k] += int(v)
print(f""{cart['восток'] - cart['запад']} {cart['север'] - cart['юг']}"")
 -End,"
 def test_input_text(expected_result, actual_result):
    # ваша реализация, напишите assert и сообщение об ошибке
    assert expected_result == actual_result, f""expected {expected_result}, got {actual_result}""
 -End,"
 def test_substring(full_string, substring):
    # ваша реализация, напишите assert и сообщение об ошибке
    assert substring in full_string, f""expected '{substring}' to be substring of '{full_string}'""
 -End,"
 # put your python code here
a, b = input().split()

for n in range(int(a), int(b) + 1):
    print(f""{'Fizz' * (n % 3 == 0)}{'Buzz' * (n % 5 == 0)}"" or f""{n}"")
 -End,"
 a, b, c = [int(input()) for _ in range(3)]
p = (a + b + c) / 2
s = (p * (p - a) * (p - b) * (p - c)) ** .5
print(s)
 -End,"
 # put your python code here
n = int(input())
print(f""{n} {'programmer' if n == 1 else 'programmers'}"")
 -End,"
 stack = [0]
for i in range(int(input())):
  line = input()
  if line == 'max': print(stack[-1])
  elif line == 'pop': del stack[-1]
  else: stack += [max(stack[-1], int(line[4:]))] -End,"
 n, A, m = int(input()), [int(i) for i in input().split()], int(input())
q = []
for i in range(m):
  while len(q) and q[-1] < A[i]: del q[-1]
  q += [A[i]]
print(q[0], end=' ')
for i in range(m, n):
  if q[0] == A[i-m]: del q[0]
  while len(q) and q[-1] < A[i]: del q[-1]
  q += [A[i]]
  print(q[0], end=' ') -End,"
 n, A, m = int(input()), [int(i) for i in input().split()], int(input())
s1, s2, ORIG, MAX = [], [], 0, 1

def sMax(s1, s2):
  if len(s1) and len(s2): return max(s1[-1][MAX], s2[-1][MAX])
  elif len(s1): return s1[-1][MAX]
  else: return s2[-1][MAX]

for i in range(m):
  s1 += [[A[i], max(A[i], s1[-1][MAX]) if len(s1) else A[i]]]
print(sMax(s1, s2), end=' ')
for i in range(m, n):
  if len(s2) == 0:
    while len(s1) != 0:
      ai = s1.pop(-1)[ORIG]
      s2 += [[ai, max(ai, s2[-1][MAX]) if len(s2) else ai]]
  del s2[-1]
  s1 += [[A[i], max(A[i], s1[-1][MAX]) if len(s1) else A[i]]]
  print(sMax(s1, s2), end=' ')
 -End,"
 n, parents = int(input()), [int(i) for i in input().split()]
a = [[] for i in range(n + 1)]
for i in range(n):
  a[parents[i]] += [i]

root, lev = a[-1], 0
while len(root):
  q, root = root, []
  for b in q:
    root += a[b]
  lev += 1
print(lev) -End,"
 n, parents = int(input()), [int(i) for i in input().split()]
cache = [-1] * n + [0]
def height(i):
  if cache[i] == -1:
    cache[i] = 1 + height(parents[i])
  return cache[i]

for i in range(n):
  height(i)
print(max(cache)) -End,"
 import sys
size, n = map(int, sys.stdin.readline().split())
q = []
for i in range(n):
  arrival, duration = map(int, sys.stdin.readline().split())
  while q and q[0] <= arrival:
    del q[0]
  if size <= len(q):
    print('-1')
  else:
    START = max(arrival, q and q[-1] or arrival)
    q += [START + duration]
    print(START) -End,"
 size, H = int(input()), [int(i) for i in input().split()]
steps = []
for i in range(size // 2, -1, -1):
  while i < size:
    m, left, right = i, 2 * i + 1, 2 * i + 2
    if left < size and H[left] < H[m]: m = left
    if right < size and H[right] < H[m]: m = right
    if m == i: break
    steps += [[i, m]]
    H[i], H[m], i = H[m], H[i], m
print(len(steps))
for step in steps: print(*step) -End,"
 size, m = [int(i) for i in input().split()]
H = [[0, i] for i in range(size)]
for ti in input().split():
  print(H[0][1], H[0][0])
  H[0][0] += int(ti)
  i = 0
  while i < size:
    m, left, right = i, 2*i + 1, 2*i + 2
    if left < size and H[left] < H[m]: m = left
    if right < size and H[right] < H[m]: m = right
    if m == i: break
    H[i], H[m] = H[m], H[i]
    i = m -End,"
 from heapq import heapreplace
H = [(0, n) for n in range(int(input().split()[0]))]
for ti in input().split():
    print(*(heapreplace(H, (H[0][0] + int(ti), H[0][1]))[::-1])) -End,"
 import sys
lines = [[*map(int, line.split())] for line in sys.stdin]
n, m = lines[0]
r = [0] + lines[1]
parent = [i for i in range(n + 1)]
maxR = max(r)
for d, s in lines[2:]:
  while d != parent[d]: d = parent[d]
  while s != parent[s]: parent[s], s = d, parent[s]
  if d != s:
    r[d] += r[s]
    parent[s] = d
    if r[d] > maxR: maxR = r[d]
  print(maxR) -End,"
 from sys import stdin
next(stdin)
book = ['not found'] * (10**7)
for line in stdin:
  req = line.split()
  cmd, num = req[0], int(req[1])
  if cmd == 'find':
    print(book[num])
  else:
    book[num] = req[2] if cmd == 'add' else 'not found' -End,"
 from sys import stdin
lines = [line.split() for line in stdin]
m = int(lines[0][0])
table = [[] for i in range(m)]
for cmd, S in lines[2:]:
    if cmd == 'check': print(*table[int(S)])
    else:
        k, xe = 0, 1
        for s in S: k, xe = k + ord(s) * xe, xe * 263
        k = k % 1000000007 % m
        exist = S in table[k]
        if cmd == 'find': print(exist and 'yes' or 'no')
        elif cmd == 'add': exist or table[k].insert(0, S)
        else: exist and table[k].remove(S) -End,"
 hand = input().replace('10', 'T')
mask = ''.join(str(hand[::3].count(c)) for c in '23456789TJQKA')
straight = ('11111' in mask) or ('1111' == mask[:4] and mask[-1] == '1')
flush = 5 == hand[1::3].count(hand[1])
royal = flush and straight and mask[-5:] == '11111'
c2, c3, c4 = (mask.count(c) for c in '234')

if royal:       print('Royal Flush')
elif straight and flush: print('Straight Flush')
elif c4:        print('Four of a Kind')
elif c3 and c2: print('Full House')
elif flush:     print('Flush')
elif straight:  print('Straight')
elif c3:        print('Three of a Kind')
elif c2 == 2:   print('Two Pairs')
elif c2:        print('Pair')
else: print('High Card') -End,"
 P, text = input(), input()
m, n = len(P), len(text)
p, hP, xP = 1000000007, 0, 0
for i, s in enumerate(text[:m]):
    hP, xP = hP + ord(P[i]), xP + ord(s)
hP, xP = hP % p, xP % p
xP == hP and text[:m] == P and print(0, end=' ')
for i, s in enumerate(text[:n-m]):
    xP = (xP - ord(s) + ord(text[i+m])) % p
    xP == hP and text[i+1 : i+1+m] == P and print(i+1, end=' ') -End,"
 from sys import stdin
dirs = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
n, m = [int(i) for i in next(stdin).split()]
M1 = [*map(list, stdin)]
M2 = [['.'] * m for i in range(n)]
for y in range(n):
  for x in range(m):
    s = sum([1 for dx, dy in dirs if M1[(y + dy) % n][(x + dx) % m] == 'X'])
    M2[y][x] = ['.', 'X'][s == 3 or M1[y][x] == 'X' and s == 2]
print('\n'.join([''.join(line) for line in M2])) -End,"
 from sys import stdin
n, KEY, LEFT, RIGHT = next(stdin), 0, 1, 2
tree = [list(map(int, line.split())) for line in stdin]

def inOrder(i):   return (~i and inOrder(tree[i][LEFT]) + [tree[i][KEY]] + inOrder(tree[i][RIGHT])) or []
def preOrder(i):  return (~i and [tree[i][KEY]] + preOrder(tree[i][LEFT]) + preOrder(tree[i][RIGHT])) or []
def postOrder(i): return (~i and postOrder(tree[i][LEFT]) + postOrder(tree[i][RIGHT]) + [tree[i][KEY]]) or []

print(*inOrder(0))
print(*preOrder(0))
print(*postOrder(0)) -End,"
 import sys
lines = [map(int, line.split()) for line in sys.stdin]
n, e, d = lines[0]
parent, res = [*range(n + 1)], 1

def root(i):
    while i != parent[i]: i = parent[i]
    return i

def convolution(i, p):
    while i != p: parent[i], i = p, parent[i]

for i, j in lines[1:e+1]:
    pj = root(j)
    convolution(i, pj)
    convolution(j, pj)

for i, j in lines[e+1:]:
    res *= root(i) != root(j)

print(res) -End,"
 v1, v2 = {}, {}
for v in input().split():
    ([v1, v2][v in v1])[v] = True
print(*v2)
 -End,"
 n = int(input())
A = [[0]*n for i in range(n)]
v, x, y = 0, -1, 0
for i, m in enumerate([0] + [i//2 for i in range(2*n, 1, -1)]):
  s = (-1)**((i - 1)//2)
  dx, dy = i % 2 * s, (i + 1) % 2 * s
  for j in range(m):
    x, y = x + dx, y + dy
    A[y][x] = v = v + 1
for line in A: print(*line) -End,"
 n = int(input())
A = [[0]*n for i in range(n)]
v, x, y = 0, -1, 0
for i, m in enumerate([0] + [i//2 for i in range(2*n, 1, -1)]):
  s = (-1)**((i - 1)//2)
  dx, dy = i % 2 * s, (i + 1) % 2 * s
  for j in range(m):
    x, y = x + dx, y + dy
    A[y][x] = v = v + 1
for line in A: print(*line) -End,"
 n = int(input())
A = [[0]*n for i in range(n)]
x, y, dx, dy = 0, 0, 0, 1
for i in range(n*n):
    A[x][y] = i + 1
    if A[(x + dx) % n][(y + dy) % n]:
        dx, dy = dy, -dx
    x, y = x + dx, y + dy
for line in A: print(*line) -End,"
 hands, suit = input().replace('10', 'T'), input()
(s1, s2), (v1, v2) = hands[1::3], map('6789TJQKA'.index, hands[0::3])
print(['Error', 'First', 'Second'][(lambda x: x and x // abs(x))((s1 == s2 and v1 - v2) or ((s1 == suit) - (s2 == suit)))]) -End,"
 d = ''
for s in input():
  if ~'0123456789'.find(s): 
    d += s
  else: 
    print(s * int(d or 1), end='')
    d = '' -End,"
 d = [0]*100
for n in map(len, input().split()):
    d[n] += 1
for i, v in enumerate(d):
    v and print(f'{i}: {v}') -End,"
 import sys
next(sys.stdin)
M = zip(*[line.split() for line in sys.stdin])
for line in M: print(*line) -End,"
 import re, sys
for a, b in re.findall(r'([\d]*)(\w)', next(sys.stdin)):
    print(b * int(a or 1), end='') -End,"
 shift, text, a = int(input())%27-27, input().strip(), ' abcdefghijklmnopqrstuvwxyz'
print(f'Result: ""{ """".join([a[a.find(s) + shift] for s in text]) }""') -End,"
 shift, text = int(input()), input()
print(f'Result: ""{ """".join(chr(0x1f600 + (ord(s) - 0x1f600 + shift)%80) for s in text) }""') -End,"
 leds = [
' --      --  --      --  --  --  --  -- ',
'|  |   |   |   ||  ||   |      ||  ||  |',
'|  |   |   |   ||  ||   |      ||  ||  |',
'         --  --  --  --  --      --  -- ',
'|  |   ||      |   |   ||  |   ||  |   |',
'|  |   ||      |   |   ||  |   ||  |   |',
' --      --  --      --  --      --  -- ']

n = [int(s) * 4 for s in input()]
sep = f'x{ ""-"" * (5 * len(n) - 1) }x'
print(sep)
for led in leds:
    print(f'|{ "" "".join([led[i:i+4] for i in n]) }|')
print(sep) -End,"
 def hanoi(level, frm, _, to):
  if level:
    hanoi(level - 1, frm, to, _)
    print(f'{frm} - {to}')
    hanoi(level - 1, _, frm, to)

hanoi(int(input()), '1', '2', '3') -End,"
 a, b = map(int, input().split())
print(a + b) -End,"
 N, p, ch, t, d = [int(input()) for i in range(5)]
print((5 * p + 4 * ch + 3 * t + 2 * d) / N) -End,"
 import sys
N, p, ch, t, d = map(int, sys.stdin)
print((5 * p + 4 * ch + 3 * t + 2 * d) / N) -End,"
 x = int(input()) / int(input())
print('%9.5f***%9.5f'%(x, 1 / x)) -End,"
 a, b = input(), input()
a, b = b, a
print(a, b, sep=',') -End,"
 a, b = map(int, input().split())
n = int(input())
c = n * (a * 100 + b)
print(c // 100, c % 100) -End,"
 a = int(input())
a1, a2, a3 = a // 100 % 10, a // 10 % 10, a % 10
print(""%s%s"" % (a1 + a2, a2 + a3)) -End,"
 a = int(input())
a1, a2, a3, a4 = a // 1000, a // 100 % 10, a // 10 % 10, a % 10
print(a1 + a2, a3 + a4, sep='') -End,"
 a = int(input())
a1, a2, a3, a4 = a // 1000, a // 100 % 10, a // 10 % 10, a % 10
print(a1 + a4, a2 + a3, sep='') -End,"
 a = int(input())
a1, a2, a3, a4, a5 = a // 10000, a // 1000 % 10, a // 100 % 10, a // 10 % 10, a % 10
print(a1 + a3 + a5, a2 + a4, sep='') -End,"
 A = input() == 'True'
B = input() == 'True'
C = input() == 'True'
print(A or (not C and B)) -End,"
 x1, y1 = int(input()), int(input())
x2, y2 = int(input()), int(input())
x3, y3 = int(input()), int(input())
a2 = (x2 - x1)**2 + (y2 - y1)**2
b2 = (x3 - x2)**2 + (y3 - y2)**2
c2 = (x1 - x3)**2 + (y1 - y3)**2
if a2 == b2 + c2 or b2 == a2 + c2 or c2 == a2 + b2:
  print('Yes')
else:
  print('No') -End,"
 x = int(input())
if 15 < x <= 12 or 14 < x < 17 or 19 <= x:
    print(""Yes"")
else:
    print(""No"") -End,"
 x1, y1, x2, y2 = [int(input()) for i in range(4)]
print('NO' if (x1 - x2) * (y1 - y2) else 'YES') -End,"
 x1, y1, x2, y2 = [int(input()) for i in range(4)]
print('NO' if abs(x1 - x2) - abs(y1 - y2) else 'YES') -End,"
 x1, y1, x2, y2 = (int(input()) for i in range(4))
print('NO' if (x1 - x2) * (y1 - y2) * (x1 - x2 - y1 + y2) * (x1 - x2 - y2 + y1) else 'YES') -End,"
 x1, y1, x2, y2 = (int(input()) for i in range(4))
print('NO' if (x1 - x2)**2 + (y1 - y2)**2 - 5 else 'YES') -End,"
 x1, y1, x2, y2, x, y = (int(input()) for i in range(6))
if (x1 <= x <= x2 or x2 <= x <= x1) and (y1 <= y <= y2 or y2 <= y <= y1):
    print('Точка принадлежит прямоугольнику')
else:
    print('Точка не принадлежит прямоугольнику') -End,"
 x1, y1, x2, y2 = (int(input()) for i in range(4))
if (x1 - x2)**2 + (y1 - y2)** 2 <= 2:
    print('YES')
else:
    print('NO ') -End,"
 a, b = float(input()), float(input())
o = input()
if b == 0 and (o in 'div/mod'): print('Деление на 0!')
elif o == '+': print(a + b)
elif o == '-': print(a - b)
elif o == '*': print(a * b)
elif o == '/': print(a / b)
elif o == 'mod': print(a % b)
elif o == 'pow': print(a ** b)
elif o == 'div': print(a // b)
 -End,"
 n = int(input())
end = 'ов'
if not 11 <= n <= 14:
    if n % 10 in [1]: end = ''
    if n % 10 in [2, 3, 4]: end = 'а'
print(n, 'программист' + end)
    




 -End,"
 n = int(input())
i = 2
while n % i: 
    i += 1
print('Введённое число ' + ('' if i == n else 'не ') + 'является простым') -End,"
 x, y = int(input()), int(input())
d, gcd = x, y
while d:
    d, gcd = gcd % d, d
print(x * y // gcd) -End,"
 a, b = int(input()), int(input())
while a:
    a, b = b % a, a
print(b) -End,"
 a, b = int(input()), int(input())
s, k = 0, 0
for i in range(a + (3 - a % 3) % 3, b + 1, 3):
    s += i
    k += 1
print(s / k) -End,"
 def fact(n):
    return n and fact(n - 1) * n or 1
print(fact(int(input()))) -End,"
 def disqrt(n):
  if n < 10: return n
  s = 0
  while n:
    s += n % 10
    n //= 10
  return disqrt(s)

print(disqrt(int(input()))) -End,"
 P, X, Y = [int(input()) for i in range(3)]
R = int((X * 100 + Y) * (1 + P / 100))
print(R // 100, R % 100) -End,"
 h1, h2, figures = input(), input(), ['rock', 'scissors', 'paper']
if not (h1 in figures and h2 in figures):
    print('Invalid input! You have not entered rock, paper or scissors, try again.')
elif h1 == h2:
    print(""It's a tie!"")
elif 'paper' in [h1, h2] and 'rock' in [h1, h2]:
    print('Paper wins!')
elif 'paper' in [h1, h2] and 'scissors' in [h1, h2]:
    print('Scissors win!')
else:
    print('Rock wins!') -End,"
 print(year + ""-"" + month + ""-"" + date) -End,"
 print(2 * (a*b + b*c + a*c - x*y + c*y)) -End,"
 name1 = input()
name2 = input()
name3 = input()
name4 = input()
print(name4 + "","" + name3 + "","" + name2 + "","" + name1) -End,"
 def sum2(a, b):
    aNaN = not type(a) in [int, float]
    bNaN = not type(b) in [int, float]
    if aNaN and bNaN: return ""all arguments are not a numbers""
    if aNaN: return ""1st argument is not a number""
    if bNaN: return ""2nd argument is not a number""
    return a + b -End,"
 index = 0
while abs(L[index] - L[index + 1]) != 1: 
  index += 1 -End,"
 N = 2750159 # 200000th prime

# Sieve of Sundaram
N = N // 2 + 1
SIEVE = [0] * (N + 1)
i = 1
while 2 * i * (i + 1) < N:
    for j in range(i, (N - i) // (2 * i + 1) + 1):
        SIEVE[2 * i * j + i + j] = 1
    i += 1
primes = [2]
for i in range(1, N):
    if not SIEVE[i]:
        primes += [2 * i + 1]

input()
print(*[primes[int(i) - 1] for i in input().split()]) -End,"
 N = 2750159 # 200000th prime

# Sieve of Eratosthenes
SIEVE = [1] * (N + 1)
p = 1
primes = [2]
while p < N:
    p += 2
    if SIEVE[p]:
        primes += [p]
        for i in range(p * p, N + 1, p):
            SIEVE[i] = 0

input()
print(*[primes[int(i) - 1] for i in input().split()]) -End,"
 N = int(input())
print(N // 2 * 2 + 2) -End,"
 dic = {}
for i in range(int(input())):
    eng, latins = input().split(' - ')
    for lat in latins.split(', '):
        if not lat in dic: dic[lat] = []
        dic[lat] += [eng]
print(len(dic))
for lat in sorted(dic):
    print('%s - %s' % (lat, "", "".join(dic[lat]))) -End,"
 import string
S = input()
if S in string.ascii_letters: 
    S = S.swapcase()
print(S) -End,"
 def front_x(words):
    words.sort()
    xword = lambda x: x and x[0] == 'x'
    return [x for x in words if xword(x)] + [a for a in words if not xword(a)] -End,"
 s, e = 0, 1
for i in range(int(input())):
    s += e
    e *= -0.5
print(s) -End,"
 N = int(input())
print(N - 1)
print(N + 1) -End,"
 n = int(input())
n2 = n * n
n4 = n2 * n2
n8 = n4 * n4
n10 = n8 * n2
print(n10) -End,"
 a = int(input())
b = int(input())
print(a + b) -End,"
 name = input()
print(""Hello, "" + name + ""!"") -End,"
 L = int(input())
v1 = int(input())
v2 = int(input())
vm = int(input())
print(vm * L / (v1 + v2))



 -End,"
 a = int(input())
print(11 * 3 ** 0.5 * a ** 2 / 4) -End,"
 a = int(input())
s = 6.247595264191645 * a ** 2
print(s) -End,"
 n = int(input())
print(n*n + n/2 - 0.5) -End,"
 print(827 + 3 + 7 + 5 + 13 + 11 + 787 + 769 + 773 + 419 + 149 + 751)
 -End,"
 print(4 * (1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 + 1/13 - 1/15 + 1/17 - 1/19 + 1/21 - 1/23))




 -End,"
 print(1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18)
print(2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2)
print(2**33)
print((341**2 + 420**2)**0.5)
print(37 * (24 * 100 + 65))
print((10**2 + 11**2 + 12**2 + 13**2 + 14**2)/365) -End,"
 n = int(input())
if 100 <= n <= 999:
    print('YES')
else:
    print('NO') -End,"
 n = int(input())
if n < 0:
    print(-1)
elif n == 0: 
    print(0)
else:
    print(1) -End,"
 a = int(input())
b = int(input())
c = int(input())
if a == b == c:
    print('0')
elif a > b and a > c:
    print('A')
elif b > a and b > c:
    print('B')
elif c > a and c > b:
    print('C')
elif a == b and a > c:
    print('A B')
elif a == c and a > b:
    print('A C')
elif b == c and b > a:
    print('B C') -End,"
 a = int(input())
b = int(input())
c = int(input())
min = a
if b < min:
    min = b
if c < min:
    min = c
max = a
if b > max:
    max = b
if c > max:
    max = c
print(min)
print(max) -End,"
 n = int(input())
if n == 1 or n == 3 or n == 5 or n == 7 or n == 8 or n == 10 or n == 12:
    print(31)
elif n == 2:
    print(28)
elif n == 2 or n == 4 or n == 6 or n == 9 or n == 11:
    print(30)
else:
    print(0) -End,"
 saved_user = ""100500""
saved_password = ""424242""
user = input()
password = input()
if user != saved_user:
    print('No user with login ' + user + ' found')
elif password != saved_password:
    print('Wrong password')
else:
    print('Login success') -End,"
 y = int(input())

if (y % 400 == 0) or (y % 4 == 0 and y % 100 != 0):
    print('YES')
else:
    print('NO') -End,"
 m = int(input())
d = int(input())
days = 365
if m > 1: days = days - 31
if m > 2: days = days - 28
if m > 3: days = days - 31
if m > 4: days = days - 30
if m > 5: days = days - 31
if m > 6: days = days - 30
if m > 7: days = days - 31
if m > 8: days = days - 31
if m > 9: days = days - 30
if m > 10: days = days - 31
if m > 11: days = days - 30
days = days - d
print(days) -End,"
 control = int(input())
answer = int(input())
if (answer == 1) == (control == 1):
    print('YES')
else:
    print('NO') -End,"
 a, b = map(int, input().split())

if a == 0 and b == 0:
    print(""INF"")
elif a == 0 or b % a != 0:
    print(""NO"")
else:
    print(-b // a) -End,"
 m = int(input())
n4 = m % 3
n3 = (m - 4 * n4) // 3
if n3 >= 0:
    print(n3, n4)
else:
    print(0, 0) -End,"
 seconds = int(input())
hours = seconds // 3600
minutes = seconds % 3600 // 60
print('It is %s hours %s minutes.' % (hours, minutes)) -End,"
 x1, y1 = [int(t) for t in input().split()]
x2, y2 = [int(t) for t in input().split()]
if x1 == x2 or y1 == y2:
    print('YES')
else:
    print('NO') -End,"
 x1, y1 = [int(t) for t in input().split()] 
x2, y2 = [int(t) for t in input().split()]
if abs(x2 - x1) == abs(y2 - y1):
    print('YES')
else:
    print('NO') -End,"
 x1, y1 = [int(t) for t in input().split()] 
x2, y2 = [int(t) for t in input().split()]
if abs(x2 - x1) <= 1 and abs(y2 - y1) <= 1:
    print('YES')
else:
    print('NO') -End,"
 x1, y1 = [int(t) for t in input().split()] 
x2, y2 = [int(t) for t in input().split()]
if (x2 - x1)**2 + (y2 - y1)**2 == 5:
    print('YES')
else:
    print('NO') -End,"
 x1, y1, x2, y2, x, y = [int(t) for t in input().split()]
ans = """"
if y > y2: ans += ""N""
if y < y1: ans += ""S""
if x < x1: ans += ""W""
if x > x2: ans += ""E""
print(ans) -End,"
 V = int(input())
N = int(input())
R = int(input())
ZIP = int(input())
UNZIP = int(input())

V = V * 2**23
A = int(ZIP + V * R / 100 / 2**N + UNZIP)
B = int(V / 2**N)

if A > B:
    print('Б{}'.format(A - B))
else:
    print('А{}'.format(B - A)) -End,"
 # put your python code here
mi = int(input())
print(mi//60, mi%60, sep='\n') -End,"
 # put your python code here
mi, h, m = int(input()), int(input()), int(input())
print(h + (m + mi) // 60, (m + mi) % 60, sep='\n')


 -End,"
 # put your python code here
a, b, h = int(input()), int(input()), int(input())
if h < a:
    print('Недосып')
elif h > b:
    print('Пересып')
else:
    print('Это нормально')

 -End,"
 # put your python code here
y = int(input())
if y % 4 == 0 and y % 100 != 0 or y % 400 == 0:
    print('Високосный')
else:
    print('Обычный')
 -End,"
 # put your python code here
a, b, c = int(input()), int(input()), int(input())
p = (a + b + c) / 2
print ((p * (p - a) * (p - b) * (p - c))**0.5)




 -End,"
 # put your python code here
n = int(input())
print(-15 < n <= 12 or 14 < n < 17 or n >= 19)


 -End,"
 # put your python code here
x, y, op = float(input()), float(input()), input()
if op == '+':
    print(x + y)
elif op == '-':
    print(x - y)
elif op == '*':
    print(x * y)
elif op == 'pow':
    print(x ** y)
elif op == 'mod' and y:
    print(x % y)
elif op == '/' and y:
    print(x / y)
elif op == 'div' and y:
    print(x // y)
else:
    print('Деление на 0!')
    



 -End,"
 # put your python code here
type = input()
if type == 'прямоугольник':
    print(float(input()) * float(input()))
elif type == 'круг':
    print(3.14 * float(input()) ** 2)
else:
    a, b, c = float(input()), float(input()), float(input())
    p = (a + b + c) / 2
    print((p * (p - a) * (p - b) * (p - c))**0.5)

 -End,"
 # put your python code here
a, b, c = int(input()), int(input()), int(input())
if b >= a:
    a,b = b,a
if c >= a:
    a,c = c,a
if b <= c:
    c, b = b, c
if a <= c:
    c, a = a, c
print(a, c, b, sep='\n')
    



 -End,"
 # put your python code here
n = int(input())
end = ''
if 11 <= n % 100 <= 14 or 5 <= n % 10 <= 9 or n % 10 == 0:
    end = 'ов'
elif 1 < n % 10 < 5:
    end = 'а'
print(n, 'программист'+end)


 -End,"
 # put your python code here
n = int(input())
first = n // 100000 + n % 100000 // 10000  + n % 10000 // 1000
second = n % 10 + n % 100 // 10 + n % 1000 // 100
if first - second == 0:
    print('Счастливый')
else:
    print('Обычный')

 -End,"
 # put your python code here
sum = 0
breaks = True
while breaks:
    n = int(input())
    if n != 0:
        sum = sum + n
    else:
        print(sum)
        breaks = False


 -End,"
 # put your python code here
a, b = int(input()), int(input())
i = a
while i % a or i % b:
    i += 1
print(i) -End,"
 # put your python code here
while True:
    n = int(input())
    if n > 100:
        break
    elif n < 10:
        continue
    else:
        print(n)

 -End,"
 # put your python code here
a, b, c, d = int(input()), int(input()), int(input()), int(input())
for i in range(a - 1, b + 1):
    for j in range(c - 1, d + 1):
        if i == a - 1 and j == c - 1:
            print ('', end='\t')
        elif j == c - 1:
            print (i, end='\t')
        elif i == a - 1:
            print (j, end='\t')
        else:
            print (i * j, end='\t')
    print() -End,"
 # put your python code here
a, b = int(input()), int(input())
res = count = 0
for i in range(a, b + 1):
    if i % 3 == 0:
        res += i
        count += 1
print(res/count)


 -End,"
 # put your python code here
s = input()
c = 1
res = ''
for i in range(len(s)):
    if i + 1 < len(s) and s[i] == s[i + 1] :
        c += 1
    else:
        res += s[i] + str(c)
        c = 1
print(res)

 -End,"
 # put your python code here
sum = 0
for i in input().split():
    sum += int(i)
print(sum)
     -End,"
 # put your python code here
res = []
nums = [int(i) for i in input().split()]
if len(nums) == 1:
    res.append(nums[0])
else:
    for i in range(len(nums)):
        res.append(nums[i-1] + nums[i + 1 - len(nums)])
print(' '.join(str(i) for i in res))

 -End,"
 # put your python code here
nums = input().split()
nums.sort()
res = []
for i in range(len(nums)):
    if i + 1 < len(nums) and nums[i] == nums[i + 1] and nums[i] not in res:
        res.append(nums[i])
print(' '.join(res))

 -End,"
 print('Привет мир!', ""Hello world!"", sep = ""\n"")

 -End,"
 # put your python code here
print(""Learn Python: action in progress...\n""*3, 'Learn Python: action completed.\n'*2, sep='')

 -End,"
 # put your python code here
print('Здравствуй,', input())

 -End,"
 min = int(input())
print(min//60, min%60)



 -End,"
 n, c = int(input()), int(input())
print(n % 10**c)


 -End,"
 n = int(input())
print((n % 10)**3 + (n // 100)**3 + (n // 10 % 10)**3)
 -End,"
 print(input() != input())

 -End,"
 a, b, c = float(input()), float(input()), float(input())
p = (a + b + c)/2
print((p * (p - a) * (p - b) * (p - c))**0.5)
 -End,"
 diff = abs(int(input()) - int(input()))
print(diff // 60, diff % 60)



 -End,"
 price = (100 * int(input()) + int(input())) * int(input())
print(price // 100, price % 100)

 -End,"
 print('Чет' if int(input()) % 2 == 0 else 'Нечет')




 -End,"
 a, b = int(input()), int(input())
if a < b:
    a, b = b, a
print ('Большее число: {0}, меньшее число: {1}'.format(a, b))


 -End,"
 a, b, c = float(input()), float(input()), input()
print(a + b if c == '+' else a - b) -End,"
 a, b, c = int(input()), int(input()), int(input())
if a > b:
    print(""2 <= 1"")
if b > c:
    print (""3 <= 2"")
if a < b < c:
    print(""Все в порядке"") -End,"
 a = input()
if a in ""Энрико Ферми, Нильс Бор, Джон фон Нейман, Ричард Фейнман, Роберт Оппенгеймер, Ганс Бизе, Ханс Бете"":
    print('Доступ разрешен')
else:
    print('Доступ запрещен')




 -End,"
 a, b, = int(input()), int(input())
if a > 0 and b > 0:
    print('1')
elif a < 0 and b > 0:
    print('2')
elif a < 0 and b < 0:
    print('3')
else:
    print('4')
 -End,"
 year = int(input())
if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
    print('Високосный')
else:
    print('Невисокосный')

 -End,"
 p = input()
if 'qwerty' not in p and '1234' not in p and len(p) > 7 and ('0' in p or '1' in p or '2' in p or '3' in p or '4' in p or '5' in p or '6' in p or '7' in p or '8' in p or '9' in p):
    print('Good password')
else:
    print('Bad password') -End,"
 f, c, l = int(input()), input(), input()
if f > 6 and c == 'Рим' and ('английский' in l or 'русский' in l):
    print('Подходит')
else:
    print('Не подходит')




 -End,"
 a, b, c, d = input(), input(), input(), input()
if a in d and b in d and c in d:
    print('YES')
else:
    print('NO')

 -End,"
 s = input()
if 'Арагорн' in s or 'Леголас' in s or 'Мериадок Брендибак' in s or 'Боромир' in s or 'Фродо Бэггинс' in s:
    print('Проходи!')
else:
    print('Ты не пройдешь!')
 -End,"
 a1, b1, a2, b2 = int(input()), int(input()), int(input()), int(input())

if not (a1 == a2 and b1 == b2) and -1 <= a1 - a2 <= 1 and -1 <= b1 - b2 <= 1 and 0 < a2 < 9 and 0 < b2 < 9:
    print('YES')
else:
    print('NO')
 -End,"
 # put your python code here
sum = 0
sumsq = 0
while True:
    n = int(input())
    sum += n
    sumsq += n**2
    if sum == 0:
        print(sumsq)
        break
    


 -End,"
 # put your python code here
nums = input().split()
n = input()
res = []
for i in range(len(nums)):
    if nums[i] == n:
        res.append(str(i))
print(' '.join(res) if len(res) > 0 else 'Отсутствует')

 -End,"
 a, b = int(input()), int(input())
if a > b:
    a, b = b, a
print(tuple(range(a,b)))


 -End,"
 n = int(input())
print(tuple([i for i in range(n, n * 10 + 1) if i % 2 == 0]))
        



 -End,"
 a, b = int(input()), int(input())
if a > b:
    a, b = b, a
print('\n'.join(str(i) for i in range(a,b) if i % 2 == 0 and i % 7 == 1))

 -End,"
 a, b = int(input()), int(input())
if a > b:
    a, b = b, a
print(sum(range(a,b)))



 -End,"
 res = 1
for i in range(1, int(input()) + 1):
    res *= i
print(res)




 -End,"
 n, rainbow = int(input()), ('Красный', 'Оранжевый', 'Желтый', 'Зеленый', 'Голубой', 'Синий', 'Фиолетовый')
i = 0
while i < n:
    if n > 7:
        print(""Радуга состоит только из семи цветов"")
        break
    print(rainbow[i])
    i += 1
    


 -End,"
 total, count = int(input()), int(input())
summ = 0
while total >= summ and count > 0:
    total -= int(input())
    count -= 1
print('Покупает') if total >= 0 else print('Не покупает')
    

     -End,"
 a, b = int(input()), int(input())
if a > b:
    a, b = b, a
print(sum(i**2 for i in range(a, b)))

 -End,"
 numbers = ('Первый', 'Второй', 'Третий', 'Четвертый', 'Пятый', 'Шестой', 'Седьмой', 'Восьмой', 'Девятый', 'Десятый', 'Одиннадцатый', 'Двенадцатый')
names = ('январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь')
res, n = '', int(input())
if n < 13:   
    for i in range(n):
        print(numbers[i], 'месяц', '-', names[i])
else:
    print('Error')
    



 -End,"
 n = int(input()) + 1
for i in range(1, n):
    if 1 < i % 10 < 5 and (i < 10 or i > 14):
        end = 'ы'
    elif i % 10 == 1 and i != 11:
        end = 'а'
    else:
        end = ''
    print('На лугу {0} коров{1}'.format(i, end)) -End,"
 n = int(input())
if n == 1:
    print(1)
else:
    prev = 1
    prevprev = 1
    print(prev, prevprev, end = ' ')
    for i in range(n-2):
        prev_new = prev + prevprev
        print(prev_new, end = ' ')
        prevprev = prev
        prev = prev_new
    


 -End,"
 n = int(input())
status = 'Простое'
for i in range(n-1, 1, -1):
    if n % i == 0:
        status = 'Составное'
        break
print(status) -End,"
 n = int(input())
for i in range(1, n + 1):
    print(*tuple(i * j for j in range(1, n + 1)), sep='\t')
 -End,"
 n = int(input())
yes = False
for i in range(n):
    if 'rat' in input():
        print(i + 1)
        yes = True
if not yes:
    print (-1)
 -End,"
 summ = 0
while True:
    n = int(input())
    if n:
        summ += n
    else:
        break
print(summ)
 -End,"
 is_text_present = False
while True:
    if not input():
        if is_text_present:
            print('Эти строки запомнятся надолго')
        else:  
            print('Нет вдохновения? Ну ничего, попробуйте завтра')
        break
    else:
        print('Великолепно, пишите еще!')
        is_text_present = True
    


 -End,"
 summ, n = 0, int(input())
while True:
    price = int(input())
    if summ + price > n:
        print('Стоп, Джон!', summ, sep='\n')
        break
    summ += price
     -End,"
 n, res = int(input()), -1
for i in range(n):
    if 'rat' in input():
        res = i + 1
        break
print(res)

     -End,"
 while True:
    s = input()
    if 'qwerty' in s or '1234' in s:
        print('Слабый пароль')
        continue
    elif len(s) < 8:
        print('Короткий пароль')
        continue
    elif '0' not in s and '1' not in s and '2' not in s and '3' not in s and '4' not in s and '5' not in s and '6' not in s and '7' not in s and '8' not in s and '9' not in s:
        print('Пароль должен содержать цифры')
        continue
    break
         -End,"
 n = int(input())
for i in range(2, n):
    if n % i == 0:
        print(i)
        break
 -End,"
 n, count = int(input()), (2,)
for i in range(3, n + 1, 2):
    z = True
    for j in count:
        if j > i**0.5:
            break
        if i % j == 0:
            z = False
            break
    if z:
        count = count + (i,)
print(len(count))
    
    
     -End,"
 n = int(input())
while n % 2 == 0:
    n /= 2
print('YES' if n == 1.0 else 'NO')

 -End,"
 # put your python code here
print(int(input())**2)


 -End,"
 # put your python code here
a, b = input(), input()
a, b = b, a
print(a, b)

 -End,"
 # put your python code here
a, b, c = int(input()), int(input()), int(input())
print(a + b + c, a * b * c)



 -End,"
 # put your python code here
a, b = int(input()), int(input())
print(b // a) -End,"
 # put your python code here
a, b = int(input()), int(input())
print(b % a)
 -End,"
 # put your python code here
n = int(input())
print(int((n/(1/n))*(n/(1/n))*(n/(1/n)))) -End,"
 # put your python code here
a, b, n = int(input()), int(input()), int(input())
print(a * n + (b * n) // 100, b * n % 100)

 -End,"
 # put your python code here
print(int(input()) // 10 % 10)


 -End,"
 # put your python code here
n = int(input())
print(n // 100 + n // 10 % 10 + n % 10) -End,"
 # put your python code here
n = int(input())
print(n % 10, n // 10 % 10, n // 100, sep = '') -End,"
 # put your python code here
k = []
#считываем ввод, записываем все в список списков
while True:
    s = input()
    if s != 'end':
        k.append([int(i) for i in s.split()])
    else:
        break
#вычисляем размер матрицы, ибо он очень часто используется
#создаем пустую матрицу состоящую из нулей вычисленного ранее размера
res = [[0 for j in range(len(k[0]))] for i in range(len(k))]
#перебираем все значения
for i in range(len(res)):
    for j in range(len(res[i])):
        #в случае минуса все проходит хорошо, т.к. особенность списка. Плюсы обрабатываем отдельно условием - если результат + 1 выходит за рамки матрицы, задаем значение первого элемента (с нулевым индексом), переводим в строки, чтобы легче потом выводить было через join
        res[i][j] = str(k[i-1][j] + k[i][0 if len(res[i]) <= j + 1 else j + 1] + k[0 if len(res) <= i + 1 else i + 1][j] + k[i][j-1])
#выводим результат
for i in res:
    print(' '.join(i)) -End,"
 # put your python code here
print((int(input()) + int(input()))/2)


 -End,"
 # put your python code here
print(int(input()) / (1024*8)) -End,"
 # put your python code here
a, b = float(input()), float(input())
print(a + b + (a**2 + b**2)**0.5)

 -End,"
 # put your python code here
x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
print(((abs(x1 - x2))**2 + (abs(y1 - y2))**2)**0.5)

 -End,"
 # put your python code here
n = float(input())
print(n - int(n))
 -End,"
 # put your python code here
n = float(input())
print(int(n*10) % 10)

 -End,"
 # put your python code here
print(int(input()) // 100 % 10) -End,"
 # put your python code here
print(int(input()) + int(input()) * (int(input()) - 1))

 -End,"
 # put your python code here
n = int(input())
print(n % 10 + n // 10 % 10 + n // 100 % 10) -End,"
 # put your python code here
print ('YES' if int(input()) % 2 == 0 else 'NO') -End,"
 # put your python code here
print ('YES' if int(input()) % int(input()) == 0 else 'NO') -End,"
 # put your python code here
n = int(input())
n1 = n // 100
n2 = n // 10 % 10
n3 = n % 10
if n1 == n2 or n1 == n3 or n2 == n3:
    print('NO')
else:
    print('YES') -End,"
 # put your python code here
n = int(input())
sum1 = n // 100000 + n // 10000 % 10 + n // 1000 % 10
sum2 = n // 100 % 10 + n // 10 % 10 + n % 10
print('YES' if sum1 == sum2 else 'NO') -End,"
 # put your python code here
x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
print ('YES' if x1 == x2 or y1 == y2 else 'NO') -End,"
 # put your python code here
x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
print ('YES' if abs(x1 - x2) == abs(y1 - y2) else 'NO') -End,"
 # put your python code here
n = int(input())
print('YES' if -3 <= n <= 1 or 5 <= n <= 9 else 'NO') -End,"
 # put your python code here
a, b, c = int(input()), int(input()), int(input())
if a == b == c:
    print(3)
else:
    if a == b or b == c or a == c:
        print(2)
    else:
        print(0) -End,"
 # put your python code here
a, b = int(input()), int(input())
if a > 0 and b > 0:
    print(1)
if a > 0 and b < 0:
    print(4)
if a < 0 and b < 0:
    print(3)
if a < 0 and b > 0:
    print(2)
     -End,"
 # put your python code here
a, b, c = float(input()), float(input()), float(input())
d = b**2 - 4 * a * c
if d > 0:
    res1 = (-b - d**0.5)/ (2 * a)
    res2 = (-b + d**0.5)/ (2 * a)
    if res2 > res1:
        print(res1, res2, sep='\n')
    else:
        print(res2, res1, sep='\n')
if d == 0:
    print(-b / (2 * a))
     -End,"
 # put your python code here
n = int(input())
if n == 1 or n == 3 or n == 5 or n == 7 or n == 8 or n == 10 or n == 12:
    print(31)
elif n == 2:
    print(29)
else:
    print(30) -End,"
 # put your python code here
n = int(input())
if n == 12 or n <=2 :
    print('Зима')
elif 3 <= n <= 5 :
    print('Весна')
elif 6 <= n <= 8:
    print('Лето')
else:
    print('Осень')
     -End,"
 # put your python code here
n = int(input())
print(n + 2 - n % 2) -End,"
 # put your python code here
k, m = int(input()), int(input())
print(k // m if k % m == 0 else k // m  + 1) -End,"
 # put your python code here
# -*- coding: utf-8 -*-
import copy

molodes =3
tak_sebe = 1
komand = {}
result = [0,0,0,0]
for i in range(int(input())):
    k1, r1, k2, r2 = input().split("";"")
    r1, r2 = int(r1), int(r2)
    if k1 not in komand:
        komand[k1] = copy.deepcopy(result)
    if k2 not in komand:
        komand[k2] = copy.deepcopy(result)
    if r1>r2:
        komand[k1][0] +=1
        komand[k2][0] +=1
        komand[k1][1] +=1
        komand[k2][3] +=1
    elif r2>r1:
        komand[k1][0] +=1
        komand[k2][0] +=1
        komand[k2][1] +=1
        komand[k1][3] +=1
    else:
        komand[k1][0] +=1
        komand[k2][0] +=1
        komand[k1][2] +=1
        komand[k2][2] +=1
for i in komand:
    print(""{}:{} {} {} {} {}"".format(i,komand[i][0],komand[i][1],komand[i][2],komand[i][3],komand[i][1]*molodes+komand[i][2]*tak_sebe)) -End,"
 # put your python code here
# -*- coding: utf-8 -*-
a1,a2 = input(),input()
normal = dict(zip(a1,a2))
zhopa = dict(zip(a2,a1))
a1,a2 = input(),input()
for i in a1:
    print(normal[i],end="""")
print()
for i in a2:
    print(zhopa[i],end="""")     -End,"
 # put your python code here
# -*- coding: utf-8 -*-
d={}
for _ in range(int(input())):
    d[input().lower()] = """"
for _ in range(int(input())):
    for i in [z.lower() for z in input().split()]:
        if i not in d:
            print(i)
            d[i] = """" -End,"
 # put your python code here
k = [0,0]
napr1={""север"":1,""юг"":-1} 
napr2={""запад"":-1,""восток"":1} 
for _ in range(int(input())):
    a,b = input().split()
    if a in napr1:
        k[1] +=int(b)*napr1[a]
    else:
        k[0] +=int(b)*napr2[a]
print(k[0],k[1]) -End,"
 # put your python code here
def f(x):
    if x== -10:
        return True
    elif -5<x<=3:
        return True
    elif 8<x<12:
        return True
    elif x>=16:
        return True
    else:
        return False

print(f(int(input()))) -End,"
 # put your python code here
def f(x):
    if (x== -10) or (-5<x<=3) or (8<x<12) or (x>=16):
        return True
    else:
        return False

print(f(int(input()))) -End,"
 # put your python code here
k = input()
while k!=""End"":
    print(('Processing ""{}"" command...').format(k))
    k = input()
print(""Good bye!"") -End,"
 # put your python code here
etalon = dict(mile = 1609.0,
              yard = 0.9144,
              foot = 0.3048,
              inch = 0.0254,
              km = 1000.0,
              m = 1.0,
              cm = 0.01,
              mm = 0.001)
vvod = input().split()
print('{:.2e}'.format(float(vvod[0])*etalon[vvod[1]]/etalon[vvod[3]])) -End,"
 # put your python code here
def operat(metod):
    metod[0] = int(metod[0])
    metod[2] = int(metod[2])
    if metod[1] == ""plus"":
        return metod[0]+metod[2]
    elif metod[1] == ""minus"":
        return metod[0] - metod[2]
    elif metod[1] == ""multiply"":
        return metod[0] * metod[2]
    elif metod[1] == ""divide"":
        return metod[0] // metod[2]

a = input().split()
print(operat(a)) -End,"
 # put your python code here
abc = ' abcdefghijklmnopqrstuvwxyz'
sdvig = int(input())
str_f_shifr = input().strip()
print('Result: ""',end="""")
for i in str_f_shifr:
    print(abc[abc.find(i) - len(abc) + sdvig%len(abc)],end="""")
print('""') -End,"
 # put your python code here
n,m = [int(z) for z in input().split()]
a = [[int(j) for j in input().split()] for i in range(n)]
b = [[0] * n for i in range(m)]
for i in range(n):
    for j in range(m):
        b[j][i] = a[i][j]
for i in b:
    print("" "".join([str(j) for j in i])) -End,"
 def f(x):
    if x<=-2:
        return 1-(x+2)**2
    if -2<x<=2:
        return -(x/2)
    if x>2:
        return (x-2)**2+1 -End,"
 # put your python code here
def kopl(z):
    while z[-1]!=1:
        z.append(z[-1]//2) if z[-1]%2==0 else z.append(z[-1]*3+1 )
a=[int(input())]
kopl(a)
for i in a:
    print(i,end="" "") -End,"
 # put your python code here
print(input().replace(""_"","" "").title().replace("" "",""""))  -End,"
 print(sorted(input().lower())==sorted(input().lower())) -End,"
 # put your python code here
sl = {}
for i in [s for s in input().split()]:
    sl[len(i)] = sl.get(len(i),0)+1
for i in sorted(sl.keys()):
    print(""{}: {}"".format(i,sl[i])) -End,"
 s_rim = [1,5,10,50,100,500,1000]
rim = {0:"""",
       1:""I"",
       5:""V"",
       10:""X"",
       50:""L"",
       100:""C"",
       500:""D"",
       1000:""M"",
       4:""IV"",
       9:""IX"",
       40:""XL"",
       90:""XC"",
       400:""CD"",
       900:""CM""}
for i in range(len(s_rim)):
    if str(s_rim[i])[0] == ""1"":
        rim[s_rim[i]*2] = rim[s_rim[i]]*2
        rim[s_rim[i]*3] = rim[s_rim[i]]*3
    if str(s_rim[i])[0] == ""5"":
        rim[s_rim[i]+s_rim[i-1]*1] = rim[s_rim[i]]+rim[s_rim[i-1]*1]
        rim[s_rim[i]+s_rim[i-1]*2] = rim[s_rim[i]]+rim[s_rim[i-1]*2]
        rim[s_rim[i]+s_rim[i-1]*3] = rim[s_rim[i]]+rim[s_rim[i-1]*3]
d = input()
mn=1
result = """"
for i in range(len(d)):
    result=rim[int(d[(i+1)*(-1)])*mn]+result
    mn*=10
print(result)    -End,"
 # put your python code here
s = """"""{0} and {1} sat in the tree.
{0} had fallen, {1} was stolen.
What's remaining in the tree?""""""
print(s.format(input(),input())) -End,"
 # put your python code here
n = int(input())
s = """"
for i in range(1,n+1):
    s+=str(i)*i
    if len(s)>=n:
        break
print("" "".join(list(s[:n]))) -End,"
 # put your python code here
s_main, s_find=input(),input()
l_s_find = len(s_find)
if s_main.find(s_find) == -1:
    print(s_main.find(s_find))
else:
    for i in range(len(s_main)-l_s_find+1):
        if s_main[i:i+l_s_find]==s_find:
            print(i,end="" "") -End,"
 # put your python code here
s=0
for _ in range(int(input())):
    s+=int(input())
print(s) -End,"
 s = set()
for obj in objects:
    s.add(id(obj))
print(len(s)) -End,"
 # -*- coding: utf-8 -*-

print(""Hello, World!"")
 -End,"
 # -*- coding: utf-8 -*-

print(""Hello, BeeGeek!"")
 -End,"
 # -*- coding: utf-8 -*-

print(int(input())**2)
 -End,"
 b, a = int(input()), int(input())
print(a, b)
 -End,"
 # -*- coding: utf-8 -*-
a, b, c = int(input()), int(input()), int(input()),
print(a + b + c, a * b * c)
 -End,"
 # -*- coding: utf-8 -*-
n, k = int(input()), int(input())
print(k // n)
 -End,"
 # -*- coding: utf-8 -*-
n, k = int(input()), int(input())
print(k % n)
 -End,"
 # -*- coding: utf-8 -*-
a = int(input())
b = a * a
c = a * b
d = c * c
print(d)
 -End,"
 # -*- coding: utf-8 -*-
a, b, n = int(input()), int(input()), int(input())
s = (a * 100 + b) * n
print(s // 100, s % 100)
 -End,"
 # -*- coding: utf-8 -*-
print(int(input()) % 10)
 -End,"
 # -*- coding: utf-8 -*-
print(int(input()) % 100 // 10)
 -End,"
 # -*- coding: utf-8 -*-
n = int(input())
print((n // 100) + (n % 100 // 10) + (n % 10))
 -End,"
 # -*- coding: utf-8 -*-
n = int(input())
print(n % 10, n % 100 // 10, n // 100, sep="""")
 -End,"
 # -*- coding: utf-8 -*-
print((int(input()) + int(input())) / 2)
 -End,"
 # -*- coding: utf-8 -*-
print(3.14 * int(input())**2)
 -End,"
 # -*- coding: utf-8 -*-
print(int(input()) / 8 / 1024)
 -End,"
 # -*- coding: utf-8 -*-
k1, k2 = float(input()), float(input())
print(k1 + k2 + (k1**2 + k2**2)**0.5)
 -End,"
 # -*- coding: utf-8 -*-
x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input()),
print(((x2 - x1)**2 + (y2 - y1)**2)**0.5)
 -End,"
 # -*- coding: utf-8 -*-
print(float(input()) % 1)
 -End,"
 # -*- coding: utf-8 -*-
print(int(float(input()) * 10) % 10)
 -End,"
 # -*- coding: utf-8 -*-
print((int(input())**2 + int(input())**2)**0.5)
 -End,"
 # -*- coding: utf-8 -*-
print(int(input()) % 1000 // 100)
 -End,"
 # -*- coding: utf-8 -*-
n, k = int(input()), int(input())
print(((n - k) % n) % n)
 -End,"
 # -*- coding: utf-8 -*-
a1, d, n = int(input()), int(input()), int(input())
print(a1 + d * (n - 1))
 -End,"
 # -*- coding: utf-8 -*-
a, b = int(input()), int(input())
if a > b:
    print(a)
else:
    print(b)
 -End,"
 # -*- coding: utf-8 -*-
x = int(input())
if x < 0:
    print(-1)
elif x > 0:
    print(1)
else:
    print(0)
     -End,"
 # -*- coding: utf-8 -*-
if int(input()) % 2 == 0:
    print(""YES"")
else:
    print(""NO"")
 -End,"
 # -*- coding: utf-8 -*-
print('NO' if int(input()) % int(input()) else 'YES')
 -End,"
 # -*- coding: utf-8 -*-
hrum = int(input())
a1 = hrum // 100
a2 = hrum // 10 % 10
a3 = hrum % 10
if a1 != a2 != a3 and a1 != a3:
    print(""YES"")
else:
    print(""NO"")
 -End,"
 # -*- coding: utf-8 -*-
c = int(input())
print(""YES"" if c % 1000 // 100 + (c % 1000 // 10) % 10 + c % 1000 % 10 == c // 1000 // 100 + (c // 1000 // 10) % 10 + c // 1000 % 10 else ""NO"")
 -End,"
 # -*- coding: utf-8 -*-
x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
print(""YES"" if x1 == x2 or y1 == y2 else ""NO"")
 -End,"
 # -*- coding: utf-8 -*-
x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
print(""YES"" if abs(x1 - x2) == abs(y1 - y2) else ""NO"")
 -End,"
 # -*- coding: utf-8 -*-
a = int(input())
if -3 <= a <= 1:
    print(""YES"")
elif 5 <= a <= 9:
    print(""YES"")
else:
    print(""NO"")
 -End,"
 # -*- coding: utf-8 -*-
a, b, c = int(input()), int(input()), int(input())
if (a + b + c) / 3 == a:
    print(3)
elif a == b or a == c or b == c:
    print(2)
else:
    print(0)
 -End,"
 # -*- coding: utf-8 -*-
x, y = int(input()), int(input())
if x * y > 0:
    if x > 0:
        print(1)
    else:
        print(3)
else:
    if x > 0:
        print(4)
    else:
        print(2)
 -End,"
 # -*- coding: utf-8 -*-
a, b, c = float(input()), float(input()), float(input()),
d = b**2 - 4 * a * c
if d > 0:
    x1 = (-b + d**0.5) / (2 * a)
    x2 = (-b - d**0.5) / (2 * a)
    if x1 > x2:
        x1, x2 = x2, x1
    print(x1, x2, sep='\n')
elif d == 0:
    x = x2 = -b / (2 * a)
    print(x)
 -End,"
 # -*- coding: utf-8 -*-
print({1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,
     7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}.setdefault(int(input())))
 -End,"
 s = int(input())
if 1 <= s <= 12:
    if s in (1, 3, 5, 7, 8, 10, 12):
        print(31)
    elif s == 2:
        print(29)
    else:
        print(30)
 -End,"
 # -*- coding: utf-8 -*-
m = int(input())
if m == 12 or m == 1 or m == 2:
    print(""Зима"")
elif m == 3 or m == 4 or m == 5:
    print(""Весна"")
elif m == 6 or m == 7 or m == 8:
    print(""Лето"")
else:
    print(""Осень"")
 -End,"
 # -*- coding: utf-8 -*-
z = int(input())
print(z + 2 if z % 2 == 0 else z + 1)
 -End,"
 # -*- coding: utf-8 -*-
k = int(input())
n = int(input())
print((k + n - 1) // n)
 -End,"
 # -*- coding: utf-8 -*-
print(((int(input()) + 2 - 1) // 2) +
      ((int(input()) + 2 - 1) // 2) +
      ((int(input()) + 2 - 1) // 2))
 -End,"
 # -*- coding: utf-8 -*-
print(""YES"" if int(input()) % 10 % 2 == 0 else ""NO"")
 -End,"
 # -*- coding: utf-8 -*-
a1, b1 = int(input()), int(input())
a2, b2 = int(input()), int(input())
if abs(a1 - a2) == abs(b1 - b2) or a1 == a2 or b1 == b2:
    print(""YES"")
else:
    print(""NO"")
 -End,"
 x1, y1 = int(input()), int(input())
x2, y2 = int(input()), int(input())
if abs(x1 - x2) <= 1 and abs(y1 - y2) <= 1:
    print(""YES"")
else:
    print(""NO"")
 -End,"
 x1, y1 = int(input()), int(input())
x2, y2 = int(input()), int(input())
if (abs(x1 - x2) == 1 and abs(y1 - y2) == 2) or (abs(x1 - x2) == 2 and abs(y1 - y2) == 1):
    print(""YES"")
else:
    print(""NO"")
 -End,"
 # -*- coding: utf-8 -*-
z = int(input())
print(""YES"" if (z // 100) < (z // 10 % 10) < (z % 10) else ""NO"")
 -End,"
 # -*- coding: utf-8 -*-
a, b, c = int(input()), int(input()), int(input())
print(""YES"" if a + b > c and a + c > b and b + c > a else ""NO"")
 -End,"
 # -*- coding: utf-8 -*-
s1, s2, m = int(input()), int(input()), int(input())
if s1 + s2 > m and s1 + m > s2 and s2 + m > s1:
    if s1 > m:
        s1, m = m, s1
    if s2 > m:
        s2, m = m, s2
    if s1**2 + s2**2 == m**2:
        print(""right"")
    elif m**2 < s1**2 + s2**2:
        print(""acute"")
    else:
        print(""obtuse"")
else:
    print(""impossible"")
   -End,"
 # -*- coding: utf-8 -*-
z = int(input())
print(""YES"" if z // 100 == z % 100 % 10 * 10 + z % 100 // 10 else ""NO"")
 -End,"
 # -*- coding: utf-8 -*-
for _ in range(1, 20):
    print(""Hello, BeeGeek!"")
 -End,"
 # -*- coding: utf-8 -*-
for i in range(int(input()), int(input()) + 1):
    if i % 2 == 0:
        print(i)
 -End,"
 # -*- coding: utf-8 -*-
z = int(input())
for i in range(1, z + 1):
    if z // i == z / i:
        print(i)
 -End,"
 # -*- coding: utf-8 -*-
a, b = int(input()), int(input())
for i in range(b, a - 1, -1):
    print(i)
 -End,"
 # -*- coding: utf-8 -*-
z = int(input())
c = 0
for i in range(1, z + 2):
    if z % i == 0:
        c += 1
print(c)
 -End,"
 # -*- coding: utf-8 -*-
s = 0
for _ in range(0, int(input())):
    s += int(input())
print(s)
 -End,"
 # -*- coding: utf-8 -*-
s = 0
for _ in range(0, int(input())):
    i = int(input())
    if i % 2 == 0 and i % 3 != 0:
        s += i
print(s)
 -End,"
 # -*- coding: utf-8 -*-
s = 0
for _ in range(0, int(input())):
    if int(input()) % 10 == 0:
        s += 1
print(s)
 -End,"
 s = 1
for i in range(1, int(input()) + 1):
    s *= i
print(s)
 -End,"
 p = 1
for i in range(int(input()), int(input()) + 1):
    p *= i
print(p)
 -End,"
 p = 1
for i in range(int(input()), int(input()) + 1):
    p = p * i if i % 10 == 7 else p * 1
print(p)
 -End,"
 p = 1
for i in range(1, int(input()) + 1):
    p = p * i if i % 2 == 0 else p * 1
print(p)
 -End,"
 a = int(input())
z = 0
while a % 3 == 0:
    z += 1
    a /= 3
print(z)
 -End,"
 n = int(input())
z = 2
print(1)
while z <= n:
    print(z)
    z *= 2
 -End,"
 k, z, n = 0, 1, int(input())
while not (z >= n):
    z *= 2
    k += 1
print(k)
 -End,"
 def gcd(a, b):
    a, b = max(a, b), min(a, b)
    if b % a == 0:
        return a
    else:
        return gcd(a % b, b)

print(gcd(int(input()), int(input())))
 -End,"
 a, b = int(input()), int(input())
if a < b:
    a, b = b, a
while b % a != 0:
    a %= b
    if a < b:
        a, b = b, a
print(a)
 -End,"
 z, n = 0, int(input())
while n > 0:
    z = z + 1 if n % 10 == 4 else z + 0
    n //= 10
print(z)
 -End,"
 s, n = 0, int(input())
n1 = n
while n > 0:
    s += n % 10
    n //= 10
print(""YES"" if n1 % s == 0 else ""NO"")
 -End,"
 n = int(input())
while n > 0:
    print(n % 10, end="""")
    n //= 10
 -End,"
 n = int(input())
while n > 0:
    print(n % 2, end="""")
    n = n // 2
 -End,"
 s, z = 0, int(input())
while z != 0:
    s = s + z if z % 2 == 0 and z % 3 != 0 else s + 0
    z = int(input())
print(s)
 -End,"
 p, o, z = 0, 0, int(input())
while z != 0:
    if z > 0:
        p += 1
    else:
        o += 1
    z = int(input())
print(p - o)
 -End,"
 s, c, x = 0, 0, int(input())
while x != 0:
    c += 1
    s += x
    x = int(input())
print(s / c if c > 0 else """")
 -End,"
 print(input())
 -End,"
 a, b = int(input()), int(input())
print(a + b, a - b)
 -End,"
 a, b = int(input()), int(input())
print(-b / a)
 -End,"
 import numpy as np
print(np.eye(3, 4, k=1)+2*np.eye(3, 4, k=0)) -End,"
 import numpy as np

x_shape = tuple(map(int, input().split()))
X = np.fromiter(map(int, input().split()), np.int).reshape(x_shape)
y_shape = tuple(map(int, input().split()))
Y = np.fromiter(map(int, input().split()), np.int).reshape(y_shape)
try:
    print(X.dot(Y.T))
except ValueError:
    print(""matrix shapes do not match"")
 -End,"
 from urllib.request import urlopen
import numpy as np

filename = input()
f = urlopen(filename)

print(np.loadtxt(f, skiprows=1, delimiter="","").mean(axis = 0)) -End,"
 import numpy as np
print(mat.reshape(12,1)) -End,"
 import urllib
from urllib import request
import numpy as np
from numpy import linalg as la

fname = input()
if (fname == '') :
	fname = 'https://stepic.org/media/attachments/lesson/16462/boston_houses.csv'
f = urllib.request.urlopen(fname)
data = np.loadtxt(f, delimiter=',', skiprows=1)

y = data[:,0].reshape(data.shape[0],1)
x = np.hstack((np.ones((data.shape[0],1)), data[:,1:]))

b = la.inv(x.T.dot(x)).dot(x.T).dot(y)
print(*b[:,0]) -End,"
 import urllib
from urllib import request
import numpy as np
from numpy import linalg as la

fname = input()
if (fname == '') :
	fname = 'https://stepic.org/media/attachments/lesson/16462/boston_houses.csv'
f = urllib.request.urlopen(fname)
data = np.loadtxt(f, delimiter=',', skiprows=1)

y = data[:,0].reshape(data.shape[0],1)
x = np.hstack((np.ones((data.shape[0],1)), data[:,1:]))

b = la.inv(x.T.dot(x)).dot(x.T).dot(y)
print(' '.join(map(str, b[:,0]))) -End,"
 # put your python code here
print(int(input())**int(input())) -End,"
 from re import sub
print(sub(r'(\d+)(\D)', lambda m: m.group(2) * int(m.group(1)), input())) -End,"
 alpha = ''.join(map(chr, range(int('1F600', 16), int('1F650', 16))))
num = int(input())
phrase = input().strip()
print('Result: ""{}""'.format(''.join((alpha[(alpha.find(c) + num) % len(alpha)] for c in phrase)))) -End,"
 def power(x, n):
    if n < 0:
      x = 1 / x
      n = -n
    if n == 0:
      return 1
    
    y = 1
    
    while n > 1:
      if n%2 == 0: 
        x = x * x
        n = n / 2
      else:
        y = x * y
        x = x * x
        n = (n - 1) / 2
    
    return x * y

print(power(float(input()), int(input())))
     -End,"
 def calculator(num):
    t = [None, [0, 0]]
    for i in range(2, num + 1):
        ops = [[t[i - 1][0] + 1, i - 1]]
        if i % 2 == 0:
            ops.append([t[i // 2][0] + 1, i // 2])
        if i % 3 == 0:
            ops.append([t[i // 3][0] + 1, i // 3])
        t.append(min(ops))
    return t

num = int(input())
res = calculator(num)
print(res[num][0])
i = num
steps = []
while i > 0:
    steps.append(i)
    i = res[i][1]
steps.reverse()
print(*steps) -End,"
 print(sum(map(int, input().split()))) -End,"
 sec = int(input())
print(""%d:%02d:%02d"" % (sec // 3600 % 24, sec % 3600 // 60, sec % 60))         -End,"
 # put your python code here
print(int(input()) // 10 % 10) -End,"
 print(int(input()) // 10 % 10) -End,"
 print(int(input()) % 10) -End,"
 a, b, c = int(input()), int(input()), int(input())
print('YES' if a + b + c > 2*max(a, b, c) else 'NO') -End,"
 a = int(input())
print('True' if (-15 < a <= 12) or (14 < a < 17) or (a >= 19) else 'False') -End,"
 def triangle(a, b, c):
    p = (a + b + c) / 2
    return (p*(p - a)*(p - b)*(p - c))**0.5

print({""triangle"": lambda: triangle(float(input()), float(input()), float(input())),
       ""rectangle"": lambda: float(input()) * float(input()),
       ""circle"": lambda: 3.14 * float(input()) ** 2 
       }[input()]()) -End,"
 n = int(input())
print(n, ""programmer"" + ("""" if n == 1  else ""s"")) -End,"
 try:
  print( ""You have chosen a "" + {
    ""1"" : ""square"",
    ""2"" : ""circle"",
    ""3"" : ""triangle"",
    ""4"" : ""rhombus""
    }[input()])
except KeyError:
  print(""There is no such shape!"") -End,"
 try:
  print({
    ""1"" : ""move up"",
    ""2"" : ""move down"",
    ""3"" : ""move left"",
    ""4"" : ""move right"",
    ""0"" : ""do not move""
    }[input()])
except KeyError:
  print(""error!"") -End,"
 print(float(input()) % 1) -End,"
 print((float(input()) % 1) * 10 // 1) -End,"
 print(sum(range(int(input()),int(input()) + 1))) -End,"
 [x, y] = [int(input()) for i in range(2)]
z = x * y
while x:    
    y, x = x, y % x
print(z // y) -End,"
 n, m, k = [int(input()) for i in range(3)]
print('YES' if k <= n * m and (k % n == 0 or k % m == 0) else 'NO') -End,"
 x1, y1, x2, y2 = map(int, input().split())
print(""YES"" if x1 == x2 or y1 == y2 or abs(x1 - x2) == abs(y1 - y2) else ""NO"") -End,"
 a, b, c, d, e, f = [float(input()) for i in range(6)]
delta = (a*d - b*c)  
if (delta) :
    print(""2 "", (e*d - b*f)/delta, (a*f - c*e)/delta)
else :
    if (a == 0 and b == 0 and c == 0 and d == 0 and e == 0 and f == 0) :
        print(""5"")
    elif (a == 0 and c == 0 and (b != 0 or d != 0) and b*f == e*d) :
        print(""4 "", e/b if b else f/d)
    elif ((a != 0 or c != 0) and b == 0 and d == 0 and a*f == c*e) :
        print(""3 "", e/a if a else f/c)
    elif (a*d == b*c and b*f == e*d and (b!= 0 or d != 0)) :
        print(""1 "", -a/b if b else -c/d,  e/b if b else f/d)
    else :
        print(""0"") -End,"
 a, b, c, d = [int(input()) for i in range(4)]
print('', *range(c, d + 1), sep = '\t')
for x in range(a, b + 1):
    print(x, *[y * x for y in range(c, d + 1)], sep = '\t') -End,"
 print(sum([(-0.5)**i for i in range(int(input()))])) -End,"
 h, a, b = [int(input()) for i in range(3)]
print((h - b - 1) // (a - b) + 1) -End,"
 nn, kk = map(int, input().split())
def combin(n, k):
  return 1 if k==0 else (0 if n==0 else combin(n-1, k) + combin(n-1, k-1))
print(combin(nn, kk)) -End,"
 m = [0, 0, 0, 0]
for i in range(int(input())):
  m[int(input()) - 2] += 1
print(*m) -End,"
 nums = [int(input()) for i in range(int(input()))]
print(max([n for n in nums if not n%4])) -End,"
 nums = [int(input()) for i in range(int(input()))]
print(sum([n for n in nums if n%10 == 4])) -End,"
 P, X, Y, K = [int(input()) for i in range(4)]
result = (X * 100 + Y)
for i in range(K): 
    result = int((100 + P) * result) // 100
print('{} {}'.format(*divmod(result, 100))) -End,"
 sumN = 0
while True:
  n = int(input())
  if n == 0 :
    break 
  sumN += n
print(sumN)
     -End,"
 for i in range(int((int(input()))**(0.5))) :
  print((i + 1)**2) -End,"
 from math import log2
print(""NO"" if log2(int(input()))%1 else ""YES"") -End,"
 cout = 0
while int(input()):
  cout += 1
print(cout) -End,"
 n, i = int(input()), 1
while n >= 1:
    i += 1
    n = n / i     
print(i) -End,"
 nums = list(map(int, input()))
print('Lucky' if sum(nums[:3]) == sum(nums[3:]) else 'Regular') -End,"
 inStr = input().upper()
print((inStr.count(""C"") + inStr.count(""G""))/len(inStr)*100) -End,"
 import re 
print(re.sub(r'(.)(\1)+|(.)', 
            lambda m: m.group(0)[0] + str(len(m.group(0))), 
            input()
            )) -End,"
 start, end = map(int, input().split())
for i in range(start, end + 1):
    print('Fizz' * (i % 3 == 0) + 'Buzz' * (i % 5 == 0) or i) -End,"
 nums = [int(input()) for i in range(int(input()))]
print(nums.count(0), nums.count(1), nums.count(-1)) -End,"
 print(max(input().split(), key=len)) -End,"
 print(input().count("" "") + 1) -End,"
 print(""Hello, world!"") -End,"
 print(input()) -End,"
 print(""Hello"", input(""Enter your name: "")) -End,"
 print(sum(map(int, input().split()))) -End,"
 a, b, c, d = [int(input()) for i in range(4)]
print(""\n"".join([str(x) for x in range(1001) if a*x**3 + b*x**2 + c*x + d == 0])) -End,"
 print([""NO"",""YES""][(int(input()) / 3).is_integer()]) -End,"
 num = input()
print(num + ' contig' + ['s', ''][num == '1']) -End,"
 print(''.join([i.capitalize() for i in input().split('_')])) -End,"
 print(input().title().replace('_', '')) -End,"
 line = input().split()
print(""{:.2f}"".format(line.count(""A"")/len(line))) -End,"
 print(sorted(input().lower()) == sorted(input().lower())) -End,"
 string, sub = input(), input()
result = [str(i) for i in range(len(string)) if string[i : i + len(sub)] == sub]
print("" "".join(result) if len(result) else '-1') -End,"
 n, *x = map(int, input().split())
print("" "".join([str(x[i] + x[-i-1]) for i in range(n // 2)]), x[(n // 2)] if n % 2 else '') -End,"
 def checkIP (string):
    if string.count(""."") != 3: return ""NO""
    st = string.split(""."")
    for x in st:
        try:
            if int(x) not in range(256): return ""NO""
        except: return ""NO""
    return ""YES""
print(checkIP(input())) -End,"
 # punctuation marks don't belong to a word:
# import re
# line = sorted(list(map(len ,re.findall(r""\w+"", input()))))
# print(""\n"".join([""{}: {}"".format(i, line.count(i)) for i in range(min(line), max(line) + 1) if line.count(i)]))

# punctuation marks belong to a word:
line = sorted(list(map(len ,input().split())))
print(""\n"".join([""{}: {}"".format(i, line.count(i)) for i in range(min(line), max(line) + 1) if line.count(i)])) -End,"
 arr = []
while True:
    n = int(input())
    if n > 100 : break
    if n >=  10 : arr.append(n)
print(""\n"".join([str(x) for x in arr])) -End,"
 login = 100500
password = 424242
def check (l, p):
    if l == str(login):
        return ['Login success', 'Wrong password'][p != str(password)]
    return ""No user with login "" + l + "" found""
lg, pw = map(str, input().split())
print(check(lg, pw)) -End,"
 print('yes' if input().isdigit() else 'no') -End,"
 n, a = int(input()), list(map(int, input().split()))
d = [0] * (n + 1)
d[0] = a[0]
for i in range(1, n):
    d[i] = max(d[i - 1], [d[i-2], 0][i == 1]) + a[i]
print(d[n - 1]) -End,"
 def binary_search(sorted_ar, value):
    l = 0
    r = len(sorted_ar) - 1

    while l <= r:
        m = (l + r) // 2
        if sorted_ar[m] == value:
            # return m
            return m + 1
        elif sorted_ar[m] > value:
            r = m - 1
        else:
            l = m + 1

    return -1

ar = list(map(int, input().split()))[1:]
values = list(map(int, input().split()))[1:]

res = []
for value in values:
    res.append(binary_search(ar, value))

print(*res) -End,"
 seq = sorted(map(int, input().split()))
print(""No"" if [seq[i] - seq[i - 1] == seq[i - 1] - seq [i - 2] for i in range(2,len(seq))].count(False) else ""Yes"") -End,"
 import math
print(math.pi * float(input()) * 2) -End,"
 line = sorted(list(map(int, input().split())))
print(line[len(line) - 1], line[0]) -End,"
 m, n = map(int, input().split())
sq = list(map(int, input().split()))
print(*[sq.count(i) for i in range(1, n + 1)]) -End,"
 n, sq = int(input()), sorted(list(map(int, input().split())))
print(sq[n-2]*sq[n-1]) -End,"
 from math import log2, sqrt

def arrPrimes(num) :
    primeSet = []
    mask = [True] * (num + 1)
    for i in range(2, num + 1):
        if i <= sqrt(num) :
            if mask[i] : primeSet.append(i)            
            for j in range(i, num + 1, i): mask[j] = False
        if mask[i] : primeSet.append(i)
    return primeSet 
    
n, sq = int(input()), list(map(int, input().split()))
primes = arrPrimes(int(max(sq)*log2(max(sq))/1.28) + 2710)
print(*[primes[x - 1] for x in sq]) -End,"
 text, s = [], ''
while s != ""End"":
    s = input()
    text.append('Processing ""{}"" command...'.format(s) if s != ""End"" else ""Good bye!"")    
print('\n'.join(text)) -End,"
 n, sq = int(input()), sorted(list(map(int, input().split())))
count, out = 0, 0
pre = sq[0]
for x in sq:
    if x - pre : 
        count = 0
        pre = x
    count += 1
    if count > n / 2 : 
        out = 1
        break
print(out) -End,"
 from datetime import date, timedelta
line = list(map(int, input().split()))
out = date(line[0], line[1], line[2]) + timedelta(days=int(input()))
print(out.year, out.month, out.day) -End,"
 import sys
for line in sys.stdin:
    print((line[:-1] + ""\t1"").replace(' ', ""\t1\n"")) -End,"
 from re import sub
print(sub(r'(\d+)(\D)', lambda x: x.group(2) * int(x.group(1)), input())) -End,"
 n, m = map(int, input().split())
arr = "" "".join([input() for i in range(n)]).split()
print(*divmod(arr.index(max(arr, key=int)), m)) -End,"
 def logStars(n, i, j):
    return i != j and n - i - 1 != j and n // 2 != j and n // 2 != i
n = int(input())
arr = [[""."" if logStars(n, i, j) else ""*"" for i in range(n)] for j in range(n)]
print(""\n"".join(["" "".join(arr[i]) for i in range(n)])) -End,"
 n, m = map(int, input().split())
rows = [input() for i in range(n)]
t = "" "".join([""0"" for i in range(int(input()))])
rows = [i + 1 for i in range(n) if rows[i].count(t) > 0]
print(0 if not rows else rows[0]) -End,"
 n = int(input())
arr = [[abs(i - j) for i in range(n)] for j in range(n)]
print(""\n"".join(["" "".join(map(str, arr[i])) for i in range(n)])) -End,"
 n = int(input())
arr = [list(map(int, input().split())) for i in range(n)]
print([""NO"", ""YES""][all([arr[j][i] == arr[i][j] for i in range(n - 1) for j in range(i + 1, n)])]) -End,"
 n = int(input())
arr, k = [input().split() for row in range(n)], int(input())
# print(str(n) + ""\n"" +""\n"".join(["" "".join(map(str, arr[i])) for i in range(n)]) + ""\n"" + str(k))
a = [[""*"" if [i + k != j, i != j + k][k < 0]  else [arr[i][j], arr[j][i]][k > 0]  for i in range(n)] for j in range(n)]
# print(""\n"".join(["" "".join([a[i][j] for i in range(n)]) for j in range(n)]))
print("" "".join(["" "".join([a[i][j] for i in range(n) if a[i][j] != ""*""]) for j in range(n)])) -End,"
 n, m = map(int, input().split())
arr = [[[j*m + i + 1, (j + 1)*m - i][j % 2] for i in range(m)] for j in range(n)]
print(""\n"".join(["""".join([""{:>4}"".format(arr[j][i]) for i in range(m)]) for j in range(n)])) -End,"
 n, m = map(int, input().split())
print(""\n"".join(["""".join([""{:>4}"".format([(j*m+i+2)//2, 0][(i+j) % 2]) for i in range(m)]) for j in range(n)])) -End,"
 n, s = int(input()), 1
for i in range(n) :
	s += i
	if s >= n: print(i); break -End,"
 arr = []
while True :
    line = input()
    if (line == ""end"") : break
    arr.append(list(map(int, line.split())))
    
n, m = len(arr), len(arr[0])

out = [[arr[[i - 1, n - 1][i == 0]][j] + 
        arr[[i + 1, 0][i == n - 1]][j] + 
        arr[i][[j - 1, m -1][j == 0]] + 
        arr[i][[j + 1, 0][j == m - 1]] for j in range(m)] for i in range(n)]

for x in out: print(*x) -End,"
 n, m = map(int, input().split())
arr = [input().split() for i in range(n)]
print('\n'.join([' '.join([arr[i][j] for i in range(n)]) for j in range(m)])) -End,"
 def update_dictionary(d, key, value):
    if key in d.keys():
        d[key] += [value]
    else:
        if key * 2 in d.keys():
            d[key * 2] += [value]
        else:
            d[key * 2] = [value] -End,"
 line = input().lower().split()
print(""\n"".join([x + "" "" + str(line.count(x)) for x in set(line)])) -End,"
 line = input().lower().split()
print(""\n"".join([x + "" "" + str(line.count(x)) for x in set(line)])) -End,"
 data = {}
for direct, dist in [input().split() for i in range(int(input()))]:
    data[direct] = data.setdefault(direct, 0) + int(dist)
print(data.get(""East"", 0) - data.get(""West"", 0), data.get(""North"", 0) - data.get(""South"", 0)) -End,"
 code, decode, encoding, encoded = [input() for _ in range(4)]
print(''.join(decode[code.index(i)] for i in encoding))
print(''.join(code[decode.index(i)] for i in encoded)) -End,"
 arr = []
while True :
    line = input()
    if (line == ""end"") : break
    arr.append(list(map(int, line.split())))
    
n, m = len(arr), len(arr[0])

out = [[arr[[i - 1, n - 1][i == 0]][j] + 
        arr[[i + 1, 0][i == n - 1]][j] + 
        arr[i][[j - 1, m -1][j == 0]] + 
        arr[i][[j + 1, 0][j == m - 1]] for j in range(m)] for i in range(n)]

for x in out: print(*x) -End,"
 print(*set(input().split()).symmetric_difference(set(input().split()))) -End,"
 print(*(set(input().split())^set(input().split()))) -End,"
 input(); print(len(set(input().split()))) -End,"
 a, b = [int(input()) for i in range(2)]
print(a + b, a - b, a * b, a / b, sep = '@') -End,"
 from math import sqrt
type = input()
if (type == 'треугольник'):
    a, b, c = [int(input()) for i in (1, 2, 3)]
    p = (a + b + c) / 2
    print(sqrt(p * (p - a) * (p - b) * (p - c)))
elif (type == 'прямоугольник'):
    a, b = [int(input()) for i in (1, 2)]
    print(a * b)
elif (type == 'круг'):
    r = int(input())
    print(3.14 * r ** 2) -End,"
 print(sum(map(int, input().split()))) -End,"
 print(((int(input()) + 1) // 2 ) + ((int(input()) + 1) // 2 ) + ((int(input()) + 1) // 2 )) -End,"
 p, s, y, i = int(input()), 10000, 0, 0
fib = [0, 1]
while s != p:
    i += 1
    a = fib[0] + fib[1]
    if i == a:
        s -= a
        fib[0], fib[1] = fib[1], a
    else:
        s += 1
    y += 1
print(y) -End,"
 x, y, z = [int(input()) for i in range(3)]
for i in range(z):
    x *= (100 + y) / 100
    print('%.2f' % x)  -End,"
 x, y = float(input()), float(input())
print('YES' if y > -x and x < 1 and y > x ** 2 else 'NO') -End,"
 a = int(input())
print('True' if -15 < a <= 12 or 14 < a < 17 or a >= 19 else 'False') -End,"
 print('Привет мир!', 'Hello world!', sep = '\n') -End,"
 print('Learn Python: action in progress...\n' * 10, 'Learn Python: action completed.\n' * 5, sep = '') -End,"
 passw = input()
print('Bad password' if 'qwerty' in passw or '1234' in passw or len(passw) < 8 or not(any(map(str.isdigit, passw))) else 'Good password') -End,"
 a = int(input())
b = a if a % 2 == 0 else a + 1
print(tuple(range(b, a * 10 + 1, 2))) -End,"
 a, b = [int(input()) for i in '12']
for a in range(a, b, -1):
    print(a) -End,"
 a, b = sorted([int(input()) for i in '12'])
for i in range(a, b):
    if i % 2 == 0 and i % 7 == 1:
        print(i) -End,"
 a, b = sorted([int(input()) for i in '12'])
print(sum(range(a, b))) -End,"
 from math import factorial
print(factorial(int(input()))) -End,"
 n, c = int(input()), ['Красный', 'Оранжевый', 'Желтый', 'Зеленый', 'Голубой', 'Синий', 'Фиолетовый']
if n < 8:
    print(*c[0:n], sep = '\n')
else:
    print('Радуга состоит только из семи цветов') -End,"
 s, n = [int(input()) for i in '12']
c = [int(input()) for i in range(n)]
print('Покупает' if sum(c) <= s else 'Не покупает') -End,"
 a, b = sorted([int(input()) for i in '12'])
s = 0
for i in range(a, b):
    s += i ** 2
print(s) -End,"
 n = int(input())
l = [1, 1]
for i in range(3, n + 1):
    l.append(l[-1] + l[-2])
print(*l if n > 1 else [1] if n == 1 else '') -End,"
 n = int(input())
for i in range(2, int(n ** 0.5 + 1)):
    if n % i == 0:
        print('Составное')
        break
else:
    print('Простое') -End,"
 n, s = int(input()), 0
while n != 0:
    s += n
    n = int(input())
print(s) -End,"
 n = int(input())
s = n - 1
for i in range(2, n + 1):
    for j in range(2, int(i ** 0.5) + 1):
        if i % j == 0:
            s -= 1
            break
print(s) -End,"
 n = int(input())
while n > 1:
    if n == 2:
        print('YES')
        break
    n /= 2
else:
    print('NO') -End,"
 while 1:
    s = input()
    if 'qwerty' in s or '1234' in s:
        print('Слабый пароль')
    elif len(s) < 8:
        print('Короткий пароль')
    elif not(any(map(str.isdigit, s))):
        print('Пароль должен содержать цифры')
    else:
        break -End,"
 n = int(input())
l = sorted([int(input()) for i in range(n)])
for i in range(l[0], 0, -1):
    if all(b % i == 0 for b in l):
        print(i)
        break -End,"
 l = sorted([int(input()) for i in range(int(input()))])
for i in l:
    if i % 10 == 4:
        print(i)
        break -End,"
 numbers = tuple(map(float, input().split()))
a, b, c = numbers[0], numbers[1], abs(numbers[0] - numbers[1])
for i in range(1, len(numbers)):
    if abs(numbers[i - 1] - numbers[i]) > c:
        a, b, c = numbers[i - 1], numbers[i], abs(numbers[i - 1] - numbers[i])
print(a, b) -End,"
 l = list()
while 1:
    a = input()
    if a == '.':
        break
    else:
        l.append(int(a))
print(l[int((len(l) + 1) / 2) - 1] if len(l) % 2 == 1 else (l[int(len(l) / 2) - 1] + l[int(len(l) / 2)]) / 2) -End,"
 while True:
    s = input()
    if s == '.':
        break
    else:
        print(' '.join(s.upper())) -End,"
 print(input().replace(' ', '_')) -End,"
 ind = ['@@', '!!', '//', '**']
m = ['ошибка', 'предупреждение', 'информация', 'подробное сообщение']
while True:
    a = input()
    if a == '.':
        break
    else:
        if a[:2] == a[-2:] and a[:2] in ind:
            print(m[ind.index(a[:2])]) -End,"
 l = []
while True:
    a = input()
    if a == '.':
        break
    else:
        if a.split()[0] == 'POST':
            l.append(a[5:])
        elif a.split()[0] == 'GET':
            print(l[-1])
        elif a.split()[0] == 'DELETE':
            l.pop()
print(*l) -End,"
 print(sum([int(input()) for i in range(int(input()))])) -End,"
 m = int(input())
print(m // 60, m % 60, sep = '\n') -End,"
 x, h, m = [int(input()) for i in '123']
print(h + (x + m) // 60, (x + m) % 60, sep = '\n') -End,"
 a, b, h = [int(input()) for i in '123']
print('Это нормально' if a <= h <= b else 'Пересып' if h > b else 'Недосып') -End,"
 y = int(input())
print('Високосный' if (y % 4 == 0 and y % 100 != 0) or y % 400 == 0 else 'Обычный') -End,"
 a, b, c = [int(input()) for i in '123']
p = (a + b + c) / 2
print((p * (p - a) * (p - b) * (p - c)) ** 0.5) -End,"
 l = sorted([int(input()) for i in '123'])
print(l[2], l[0], l[1], sep = '\n') -End,"
 n = int(input())
if ((n % 10 == 1) and (n % 100 != 11)):
    print(n, 'программист')
elif ((1 < (n % 10) < 5) and ((n % 100 > 14) or (n % 100 < 11))):
    print(n, 'программиста')
else:
    print(n, 'программистов') -End,"
 a = input()
l = sum(map(int, a[0:3]))
r = sum(map(int, a[3:6]))
print('Счастливый' if l == r else 'Обычный') -End,"
 s = input().lower()
print((s.count('c') + s.count('g')) / len(s) * 100) -End,"
 s, c, a = input() + '.', 1, ''
for i in range(len(s) - 1):
    if s[i] == s[i + 1]:
        c += 1
    else:
        a += s[i] + str(c)
        c = 1
print(a) -End,"
 l = [int(i) for i in input().split()]
r = [l[0]] if len(l) == 1 else [l[i - 1] + l[(i + 1) % len(l)] for i in range(len(l))]
print(*r) -End,"
 n, i = int(input()), 1
a = []
while len(a) <= n:
    for j in range(1, i + 1):
        a.append(i)
    i += 1
print(*a[:n]) -End,"
 m = []
while True:
    a = input()
    if a == 'end':
        break
    else:
        m.append([int(i) for i in a.split()])
for i in range(len(m)):
    print(*[m[i - 1][j] + m[(i + 1) % len(m)][j] + m[i][j - 1] + m[i][(j + 1) % len(m[0])] for j in range(len(m[0]))]) -End,"
 x = [int(input()) for i in range(int(input()))]
fv = {}
for i in x:
    if i not in fv:
        fv[i] = f(i)
    print(fv[i]) -End,"
 l = [input().split(';') for i in range(int(input()))]
table = {}
for i in l:
    if i[0] not in table.keys():
        table[i[0]] = [0, 0, 0, 0, 0]
    if i[2] not in table.keys():
        table[i[2]] = [0, 0, 0, 0, 0]
    table[i[0]][0] += 1
    table[i[2]][0] += 1
    if i[1] > i[3]:
        table[i[0]][1] += 1
        table[i[2]][3] += 1
        table[i[0]][4] += 3
    elif i[1] < i[3]:
        table[i[2]][1] += 1
        table[i[0]][3] += 1
        table[i[2]][4] += 3
    else:
        table[i[0]][2] += 1
        table[i[2]][2] += 1
        table[i[0]][4] += 1
        table[i[2]][4] += 1
for k, v in table.items():
    print(k, end = ':')
    print(*v) -End,"
 k1, k2, m1, m2 = [input() for i in '1234']
d1, d2, a1, a2 = {}, {}, '', ''
for i in range(len(k1)):
    d1[k1[i]] = k2[i]
    d2[k2[i]] = k1[i]
for i in m1:
    a1 += d1[i]
for i in m2:
    a2 += d2[i]
print(a1, a2, sep = '\n') -End,"
 d = [input().lower() for i in range(int(input()))]
w = set()
for i in range(int(input())):
    w.update(input().lower().split())
for i in w:
    if i not in d:
        print(i) -End,"
 d = {'global': {'parent': None, 'vars': set()}}
for i in range(int(input())):
    cmd, namesp, arg = input().split()
    if cmd == 'add':
        d[namesp]['vars'].add(arg)
    if cmd == 'create':
        d[namesp] = {'parent': arg, 'vars': set()}
    if cmd == 'get':
        while True:
            if arg in d[namesp]['vars']:
                print(namesp)
                break
            elif d[namesp]['parent'] != None:
                namesp = d[namesp]['parent']
            else:
                print('None')
                break -End,"
 class Buffer:
    def __init__(self):
        self.lst = []

    def add(self, *a):
        self.lst.extend(a)
        while len(self.lst) >= 5:
            print(sum([self.lst.pop(0) for i in range(5)]))

    def get_current_part(self):
        return self.lst -End,"
 import datetime
data = datetime.date(*[int(i) for i in input().split()]) + datetime.timedelta(int(input())) 
print(data.year, data.month, data.day) -End,"
 s, a, b = [input() for i in '123']
n = 0
while s.find(a) != -1 and n < 1002:
    s = s.replace(a, b)
    n += 1
print(n if n <= 1000 else 'Impossible') -End,"
 s, t = [input() for i in '12']
n = 0
for i in range(len(s) - len(t) + 1):
    if s.startswith(t, i):
        n += 1
print(n) -End,"
 import json

def parents(name, data):
    for r in data:
        if r[""name""] == name:
            return r[""parents""]
    return []

def walk(from_, to_, data):
    for p in parents(from_, data):
        if p == to_:
            return True
        else:
            part = walk(p, to_, data)
            if part:
                return part
    return False

ans = {}
js = json.loads(input())
for i in js:
    for j in js:
        a = i['name']
        b = j['name']
        if b not in ans:
            ans[b] = 1
        if a != b and walk(a, b, js):
            ans[b] += 1
for k, v in dict(sorted(ans.items())).items():
    print(k, ':', v) -End,"
 import xml.etree.ElementTree as ET

def children(root):
    global level
    level += 1
    for child in root:
        d[child.attrib['color']] += level
        children(child)
    level -= 1

d = {'red': 0, 'green': 0, 'blue': 0}
level = 1
root = ET.fromstring(input())
d[root.attrib['color']] += 1
children(root)
print(*[v for v in d.values()]) -End,"
 xa, ya, xb, yb = [float(input()) for i in '1234']
print(((xb - xa) ** 2 + (yb - ya) ** 2) ** 0.5) -End,"
 print(float(input()) * float(input())) -End,"
 a, b, c = [int(input()) for i in '123']
p = (a + b + c) / 2
print((p * (p - a) * (p - b) * (p - c)) ** 0.5) -End,"
 print(round(float(input()))) -End,"
 a, b = input(), set()
b.update(*a)
print('Нет' if len(a) == len(b) else 'Да') -End,"
 print(min([int(input()) for i in '1234'])) -End,"
 x, y = [int(input()) for i in '12']
if x > y:
    print('x =', y)
    print('y =', x)
else:
    print('x =', x)
    print('y =', y) -End,"
 x = int(input())
print(-1 if x < 0 else 0 if x == 0 else 1) -End,"
 n = int(input())
r = [n]
while n != 1:
    n = n // 2 if n % 2 == 0 else n * 3 + 1
    r.append(n)
print(*r) -End,"
 d1 = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
d2 = {'IV':4, 'IX':9, 'XL':40, 'XC':90, 'CD':400, 'CM':900}
m, a = input(), 0
while len(m) != 0:
    if m[0:2] in d2:
        a += d2[m[0:2]]
        m = m[2:]
    else:
        a += d1[m[0]]
        m = m[1:]
print(a) -End,"
 l, f = input(), input()
r = [i for i in range(len(l) - len(f) + 1) if l.startswith(f, i)]
print(*r if len(r) > 0 else [-1]) -End,"
 s = input()
print(s.strip(), len(s) - len(s.strip()), sep='\n') -End,"
 while True:
    s = input()
    if s.swapcase() == s.lower() or s.swapcase() == s.upper():
        break
    else:
        print(s.swapcase()) -End,"
 l = [int(i) for i in input().split(', ')]
print(sum([1 for i in range(len(l)) if l[i] == max(l)])) -End,"
 s = sorted([int(i) for i in input().split()])
print(*set([s[i] for i in range(1, len(s)) if s[i] == s[i - 1]])) -End,"
 x = [int(input()) for i in range(int(input()))]
fv = {}
for i in x:
    if i not in fv:
        fv[i] = f(i)
    print(fv[i]) -End,"
 n, m = [int(i) for i in input().split()]
inp = [input() for i in range(n)]
out = [['*' for i in range(m)] for i in range(n)]
for i in range(n):
    for j in range(m):
        num = 0
        for k in [-1, 0, 1]:
            for l in [-1, 0, 1]:
                if 0 <= i + k < n and 0 <= j + l < m:
                    if inp[i + k][j + l] == '*':
                        num += 1
                    if inp[i][j] == '.':
                        out[i][j] = num
for i in range(n):
    print(*[out[i][j] for j in range(m)], sep='') -End,"
 print(sum([(i + 1) // 2 for i in [int(input()) for i in '123']])) -End,"
 a = [int(i) for i in input().split()]
print(*[a[0]] if  len(a) == 1 else [a[i - 1] + a[(i + 1) % len(a)] for i in range(len(a))]) -End,"
 d = [input().lower() for i in range(int(input()))]
s = [input().lower().split() for i in range(int(input()))]
print(*set([j for i in s for j in i if j not in d]), sep='\n') -End,"
 d, dd = [input() for i in range(int(input()))], {}
for i in d:
    a, b = i.split(' - ')
    b = b.split(', ')
    for j in b:
        if j not in dd.keys():
            dd[j] = a
        else:
            dd[j] += ', ' + a
print(len(dd))
for k, v in sorted(dd.items()):
    print(k, '-', v) -End,"
 n, m = [int(i) for i in input().split()]
a = [input().split() for i in range(n)]
for i in range(m):
    print(*[a[j][i] for j in range(n - 1, -1, -1)]) -End,"
 s = input()
s = '0' * (4 - len(s)) + s
print(1 if s[0:2] == s[3:1:-1] else int(s)) -End,"
 n = [int(i) for i in input().split()]
print(*[n[i] + n[-i] for i in range(1, (len(n) + 1) // 2)], n[len(n) // 2] if (len(n) - 1) % 2 == 1 else '') -End,"
 print(int(float(input()) % 1 * 10)) -End,"
 n, m = [int(i) for i in input().split()]
a = [['' for j in range(m)] for i in range(n)]
k = 1
for i in range(n):
    for j in range(m):
        a[i][j] = str(k)
        k += 1
    t = [' ' * (4 - len(l)) + l for l in a[i]]
    print(*t if i % 2 == 0 else t[::-1], sep='') -End,"
 n, m = [int(i) for i in input().split()]
a = [[int(j) for j in input().split()] for i in range(n)]
k, l = [int(i) for i in input().split()]
for i in range(n):
    print(*[a[i][j] if j not in [k, l] else a[i][k] if j == l else a[i][l] for j in range(m)]) -End,"
 n, i = int(input()), 1
while i < n:
    i *= 2
print('YES' if i == n else 'NO') -End,"
 d, l = {}, [input().split() for i in range(int(input()))]
for i in l:
    d[i[0] + ' ' + i[1]] = sum([int(i[j]) for j in range(2, 5)])
for i in sorted(d, key=d.get, reverse=True):
    print(i) -End,"
 import numpy
n, m = [int(i) for i in input().split()]
eq = [[float(j) for j in input().split()] for i in range(n)]
c = numpy.array([[eq[i][j] for j in range(m)] for i in range(n)])
f = numpy.array([eq[i][-1] for i in range(n)])
print(*numpy.linalg.lstsq(c, f, rcond=None)[0]) -End,"
 a, b, c = [float(input()) for i in '123']
d = b ** 2 - (4 * a * c)
print(*sorted([(- b - d ** 0.5) / (2 * a), (- b + d ** 0.5) / (2 * a)]) if d > 0 else [- b / (2 * a)] if d == 0 else [''])




 -End,"
 print(chr(92 + int(input()))) -End,"
 d = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}
l, r = int(input()), []
for k, v in d.items():
    if l // k > 0:
        r.append(v * (l // k))
        l -= k * (l // k)
print(*r, sep='') -End,"
 n = input().split()
print('{:.2f}'.format(n.count('A') / len(n))) -End,"
 while True:
    a = input()
    if a == 'End':
        print('Good bye!')
        break
    print('Processing ""', a, '"" command...', sep='') -End,"
 import sys
for l in sys.stdin.readlines():
    a = l.strip().split('\t')
    print('{}\t{};{};1'.format(a[0], a[1], a[2])) -End,"
 import sys
d = {}
for l in sys.stdin.readlines():
    a, b = l.strip().split('\t')
    if a in d.keys():
        d[a][0] += int(b)
        d[a][1] += 1
    else:
        d[a] = [int(b), 1]
for k, v in d.items():
    print(k, int(v[0] / v[1]), sep='\t') -End,"
 n, k, a = int(input()), 0, [int(i) for i in input().split()]
for i in range(n - 1):
    for j in range(i, n):
        if a[i] == a[j] and i != j:
            k += 1
print(k) -End,"
 a, k = [[int(j) for j in input().split()] for i in range(int(input()))], int(input())
print(*[a[i + abs(k)][i] if k >= 0 else a[i][i + abs(k)] for i in range(len(a) - abs(k))]) -End,"
 import re
import sys
txt = ''.join(sys.stdin.readlines())
results = re.findall(""[Yy]ou"", txt)
print(len(results)) -End,"
 n, m = [int(i) for i in input().split()]
inp = [input() for i in range(n)]
out = [['*' for i in range(m)] for i in range(n)]
for i in range(n):
    for j in range(m):
        num = 0
        for k in [-1, 0, 1]:
            for l in [-1, 0, 1]:
                if 0 <= i + k < n and 0 <= j + l < m:
                    if inp[i + k][j + l] == '*':
                        num += 1
                    if inp[i][j] == '.':
                        out[i][j] = num
for i in range(n):
    print(*[out[i][j] for j in range(m)], sep='') -End,"
 d, n = [], int(input())
for i in range(n):
    d.append([int(i) for i in input().split()])
for k, v in sorted(d, key=lambda x:(-x[1],x[0])):
    print(k, v) -End,"
 # put your python code here
import re, sys
regexp = re.compile(r""0*((1(01*0)*1)*0*)*"")
for line in sys.stdin:
    line = line.strip()
    search_line = regexp.search(line)
    if len(line) == search_line.end():
        print(line) -End,"
 import requests, re
res_a, b, yn, pattern = requests.get(input()), input(), ""No"", r""\bhref\b\s*=\s*[\'\""](.+?)[\'\""]""
print(['No','Yes'][any(map(lambda x: b in re.findall(pattern, requests.get(x).text),re.findall(pattern, res_a.text)))]) -End,"
 def primes():
    p = 2
    while True:
        flag = True
        for i in range(2,int(p**0.5)+1):
            if  p % i == 0:
                flag = False
                break
        if flag: yield p
        p +=1 -End,"
 # put your python code here
import math
n = 1000000
f = [True for i in range(n)]
for i in range(2, int(math.sqrt(n))+1):
    for j in range(i*i, n, i):
        f[j] = False
primes = list(filter(lambda x: f[x], range(2,n)))
n = int(input())
ind = [int(i) for i in input().split()]
print(*[primes[i-1] for i in ind]) -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
saved = {}
n = int(input())
for i in range(n):
    x = int(input())
    if x not in saved:
        saved[x] = f(x)
    print(saved[x]) -End,"
 # put your python code here
matrix = []
n = int(input())
for i in range(n):
    matrix.append(input().split())
k = int(input())
if k>=0:
    for i in range(k, n):
        print(matrix[i][i-k], end="" "")
else:
    for i in range(-k, n):
        print(matrix[i+k][i], end="" "") -End,"
 n, m = [int(i) for i in input().split()]
matrix = [[0 for i in range(n)] for i in range(m)]
for i in range(n):
    line = [int(_) for _ in input().split()]
    for j in range(m):
        matrix[j][n-i-1] = line[j]
print('\n'.join([' '.join([str(matrix[i][j]) for j in range(n)]) for i in range(m)])) -End,"
 n = {}
for w in input().split():
    n[len(w)] = n.get(len(w), 0) + 1
print('\n'.join([str(k)+': '+str(n[k]) for k in n])) -End,"
 print(' '.join(map(str,set(map(int, input().split()))^set(map(int, input().split()))))) -End,"
 # put your python code here
mx = []
n, m = 0, 0
while True:
    line = input()
    if line == 'end':
        m = len(mx[0])
        break
    else:
        mx.append([int(i) for i in line.split()])
    n += 1
i = 3

def sumneib(mx, i, j):
    n = len(mx)
    m = len(mx[0])
    if n == 1 and m == 1:
        return mx[i][j] * 4
    elif n == 1:
        return mx[i][j] * 2 + mx[i][j+1 if j < m-1 else 0] + mx[i][j-1 if j>0 else m-1]
    elif m == 1:
        return mx[i+1 if i < n-1 else 0][j] + mx[i-1 if i>0 else n-1][j] + mx[i][j] * 2
    else:
        return mx[i+1 if i < n-1 else 0][j] + mx[i-1 if i>0 else n-1][j] + mx[i][j+1 if j < m-1 else 0] + \
            mx[i][j-1 if j>0 else m-1]

m1 = [[0]*m for _ in range(n)]

for i in range(n):
    for j in range(m):
        m1[i][j] = sumneib(mx, i, j)
        
print('\n'.join([' '.join([str(el) for el in row]) for row in m1])) -End,"
 n, m = [int(i) for i in input().split()]
mx = [['   0']*m for _ in range(n)]
c = 1
for i in range(n):
    for j in range(m):
        if (i+j)%2 == 0:
            mx[i][j] = ' '*(4-len(str(c))) + str(c)
            c += 1
print('\n'.join(''.join(el for el in row) for row in mx)) -End,"
 # put your python code here
n, m = [int(i) for i in input().split()]
mx = [[int(i) for i in input().split()] for _ in range(n)]
i, j = [int(i) for i in input().split()]
for _ in range(n):
    mx[_][i], mx[_][j] = mx[_][j], mx[_][i]
print('\n'.join(' '.join(str(el) for el in row) for row in mx)) -End,"
 n, m = [int(i) for i in input().split()]
mx = [[0]*m for _ in range(n)]
c = 1
for _ in range(min(n, m)-1):
    i = 0
    for j in range(_, -1, -1):
        mx[i][j] = c
        mx[n-1-i][m-1-j] = n*m - c + 1
        i = i+1
        c += 1
if m<n:
    for _ in range(n-m+1):
        i = _
        for j in range(m-1, -1, -1):
            mx[i][j] = c
            i = i+1
            c += 1
else:
    pass
    for _ in range(n-1, m):
        j = _
        for i in range(n):
            mx[i][j] = c
            j = j-1
            c += 1
                 
print('\n'.join(''.join(' '*(4 - len(str(el)))+str(el) for el in row) for row in mx)) -End,"
 rows = []
n = int(input().split()[0])
for _ in range(n):
    rows.append(input().replace(' ', ''))
k = int(input())
r = 0
for i in range(n):
    if rows[i].find('0'*k) >= 0:
        r = i+1
        break
print(r) -End,"
 n, m, *mx = map(int,input().split())
print(' '.join([' '.join(map(str,mx[i::m])) for i in range(m)])) -End,"
 # put your python code here
j = list(map(int,input().split()))
n = len(j)
jstr = ""Jolly""
isjolly = set(range(1, n))
for i in range(1,n):
    diff = abs(j[i-1]-j[i])
    if diff in isjolly:
        isjolly.difference_update({diff})
        continue
    else:
        jstr = ""Not jolly""
        break
print(jstr) -End,"
 n = int(input())
d = {}
for i in range(n):
    line = input().split(';')
    team1, g1, team2, g2 = (line[0], int(line[1]), line[2], int(line[3]))
    d[team1] = list(map(lambda i: d.get(team1,[0,0,0,0,0])[i] + [1, int(g1>g2), int(g1==g2), int(g1<g2), 3*int(g1>g2) + 1*int(g1==g2) ][i], range(5)))
    d[team2] = list(map(lambda i: d.get(team2,[0,0,0,0,0])[i] + [1, int(g2>g1), int(g1==g2), int(g2<g1), 3*int(g2>g1) + 1*int(g1==g2) ][i], range(5)))
for k in d:
    print('{}:{}'.format(k,' '.join(map(str,d[k])))) -End,"
 import heapq
n = int(input())
lst = list(map(lambda x:-int(x), input().split()))
heapq.heapify(lst)
print(heapq.heappop(lst) * heapq.heappop(lst)) -End,"
 # put your python code here
import heapq

m, n = list(map(int, input().split()))
d = dict.fromkeys(range(1,n+1) , 0)
mx = list(map(lambda x: -1 * int(x), input().split()))
heapq.heapify(mx)
while True:
    try:
        el = - heapq.heappop(mx)
    except IndexError:
        break
    d[el] += 1
for k in d:
    print(d[k], end = ' ') -End,"
 smallletter = 'abcdefghijklmnopqrstuvwxyz'
s = set()
ss = set()
n = int(input())
for _ in range(n):
    inp = input() 
    s|={inp}
    ss|={inp.lower()}
err = 0
try:
    inp = input().split()
except EOFError as e:
    inp = ''
for w in inp:
    if w not in s:
        if w.lower() in ss:
            err += 1
        else:
            ems = 0
            for ltr in w:
                if ltr not in smallletter:
                    ems += 1
                    if ems > 1:
                        break
            if ems != 1:
                err += 1        
print(err)  -End,"
 di = {}
line = input().split()
for w in line:
    w = w.lower()
    di[w] = di.get(w, 0) + 1
for k, v in di.items():
    print(k, v)  -End,"
 def mod_checker(x, mod=0):
    return lambda y: y % x == mod -End,"
 import re
import sys
print(len(re.findall('you', sys.stdin.read()))) -End,"
 n = int(input())
lst = list(map(int, input().split()))
s = set(lst)
c = 0
maxpars = len(lst) - len(s)
if maxpars > 0:
    for i in range(len(lst)-1):
        for j in range(i+1,len(lst)):
            if lst[i] == lst[j]:
                c += 1
print(c) -End,"
 # put your python code here
d = dict.fromkeys([i for i in 'ABCD'],0)
al = {'2' : ""D"", '3' : ""C"", '4' : 'B', '5': 'A'}   
for _ in range(int(input())):
    d[al[input()]] += 1
print(d['D'], d['C'], d['B'], d['A']) -End,"
 a, b = list(map(int,input().split()))
for i in range(a, b+1):
    if i%3 == 0 and i%5 == 0:
        print('FizzBuzz')
    elif i%3==0:
        print('Fizz')
    elif i%5==0:
        print('Buzz')
    else:
        print(i) -End,"
 d = {}
av = {}
def average(g):
    s = 0
    for i in g:
        s += int(i)
    return s/3

for i in range(int(input())):
    sur, nam, *g = input().split()
    d.update({i: '{} {}'.format(sur, nam)})
    ag = average(g)
    av[ag] = av.get(ag, []) + [i]

for k in sorted(av, reverse=True):
    for i in av[k]:
        print(d[i]) -End,"
 # put your python code here
sh = input()
if sh == 'triangle':
    a = float(input())
    b = float(input())
    c = float(input())
    p = (a+b+c)/2
    s = (p*(p-a)*(p-b)*(p-c))**0.5
elif sh == 'rectangle':
    a = float(input())
    b = float(input())
    s = a*b
elif sh == 'circle':
    s = 3.14 * (float(input())**2)
print(s)
         -End,"
 import numpy as np
x = np.array([[2, 1, 0, 0],
 [0,2, 1, 0],
 [0, 0, 2, 1]])
print (x) -End,"
 # put your python code here
n = int(input())
m = 0
while n>0:
    m += 1
    for i in range(m):
        print(m, end = ' ')
        n -= 1
        if n == 0:
            break
 -End,"
 from operator import itemgetter
n = int(input())
points = []
stack = []
covered = [False]*n
ans = []
for i in range(n):
    l, r = list(map(int,input().split())) 
    points.append([ l, 0, i ])  #[point, 0-left or 1 - right, number of interval]
    points.append([ r, 1, i ])
points.sort(key=itemgetter(0,1))
for point in points:
    if point[1] == 0: #if point - left point of interval
        stack.append(point[2]) # add it into stack
    elif not covered[point[2]]:       #if point - right, then if didn't covered,
        ans.append(point[0])        #    add point to the answer and
        while stack:                #    mark all intervals from stack as covered (True)
            covered[stack.pop()] = True
print(len(ans),' '.join(map(str,ans)),sep='\n') -End,"
 def fib(n):
    if n<2:
        return n
    else:
        return fib(n-1) + fib(n-2)
print(fib(int(input()))) -End,"
 print(['NO','YES'][int(input()) > 0]) -End,"
 import datetime
d = list(map(int,input().split()))
d = datetime.date(d[0], d[1], d[2]) + datetime.timedelta(days = int(input()))
print('{} {} {}'.format(d.year, d.month,d.day)) -End,"
 cv = []
n, W = [int(i) for i in input().split()]
for i in range(n):
    ci, vi = [int(_) for _ in input().split()]
    cv.append([ci/vi, ci, vi])
cv.sort(key=lambda x: x[0], reverse = True)
c = 0
w = 0
for cvi in cv:
    minw = min(W-w, cvi[2]) 
    c += minw*cvi[0]
    w += minw
    if w == W:
        break
print(""{:.3f}"".format(c)) -End,"
 # put your python code here
a, b  = [int(i) for i in input().split()]
 
while a!=0 and b!=0:
    if a > b:
        a = a % b
    else:
        b = b % a
 
print (a+b) -End,"
 # put your python code here
def distance(x1, y1, x2, y2):
    return ((x1-x2)**2+(y1-y2)**2)**0.5
print(distance(float(input()), float(input()), float(input()), float(input()))) -End,"
 import heapq, math

class hpq:
    def __init__(self, lst, lift_cap):
        self.lst = [-i for i in lst]
        heapq.heapify(self.lst)
        self.lift_cap = lift_cap
    
    def attempt(self):
        lc = 0
        at = []
        while self.lst:
            p = -heapq.heappop(self.lst)
            lc += p
            if lc > self.lift_cap:
                heapq.heappush(self.lst, -p)
                break
            if p>1: at.append(int(p/2))
        for i in at:
            heapq.heappush(self.lst, -i)
        del at[:]
        return bool(self.lst) 
        

def main():
    n = int(input())
    lst = list(map(int, input().strip().split()))
    k = int(input())
    #if n==10:
     #   raise Exception(k)
    fruits = hpq(lst, k)
    at_count = 1
    attempts = fruits.attempt()
    while attempts:
        at_count += 1
        attempts = fruits.attempt()
    print(at_count)

if __name__ == ""__main__"": main() -End,"
 def f(ls):
    return [ls[0],ls[-1]] -End,"
 def power(a,n):
    if n == 1:
        return a
    if n == 0:
        return 1
    if n % 2 == 1:
        return a * power(a, n-1)
    else:
        return power(a*a, n//2) 
a = float(input())
n = int(input())
print(power(a,n)) -End,"
 def f(ls):
    s = set()
    res = []
    for el in ls:
        if el not in s:
            res.append(el)
            s |= {el}
    return res
 -End,"
 d = { '00':'A' , '01':'C' , '10':'G' , '11':'T' }
a = input()
for i in range(0,len(a),2):
    print(d[a[i:i+2]], end='') -End,"
 # put your python code here
print(int(float(input()) * 10 %10)) -End,"
 # put your python code here
def IsPointInSquare(x, y):
    return abs(x)<=1 and abs(y)<=1
print(['NO','YES'][IsPointInSquare(float(input()), float(input()))]) -End,"
 def IsPointInSquare(x, y):
    return abs(x)<=1 and abs(y)<=1 and abs(x) + abs(y) <= 1
print(['NO','YES'][IsPointInSquare(float(input()), float(input()))]) -End,"
 def f(x):
    if x == 0: return 1
    elif x == 1 or x == 2: return x
    else: return x * f(x-2)
 -End,"
 # put your python code here
print(input().upper()) -End,"
 # put your python code here
def main():
    n, m  = map(int,input().split())
    life_field = [] 
    for _ in range(n):
        life_field.append(input())
    second_gen = []
    for i in range(n):
        s = ''
        for j in range(m):
            s+=status_point(i, j, life_field)            
        second_gen.append(s)
            
    print('\n'.join(i for i in second_gen))

def status_point(ind_i,ind_j,mx):
    n = len(mx)
    m = len(mx[0])
    neib_status = {'.':0 , 'X':1 }
    neib_count = 0
    for i in range(ind_i-1, ind_i+2):
        for j in range(ind_j-1, ind_j+2):
            if i == ind_i and j == ind_j: continue
            neib_count += neib_status[mx[(i+n)%n][(j+m)%m]]
    if mx[ind_i][ind_j] == '.': #if dead
        if neib_count == 3: return 'X'
        else: return '.'
    else: #if alive
        if 2 <= neib_count <= 3: return 'X'
        else: return '.'    

if __name__ == ""__main__"": main() -End,"
 # put your python code here
n, k = map(int, input().split())
s = set(range(1,n+1))
for _ in range(k):
    li, ki = map(int,input().split())
    s -= set(range(li, ki+1))
for i in range(1, n+1):
    if i in s: print('I', end='')
    else: print('.', end='') -End,"
 # put your python code here
rad =  {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
s = input()
arab = rad[s[-1]]
for i in range(len(s)-1):
    if rad[s[i]] >= rad[s[i+1]]: arab += rad[s[i]]
    else:
        arab -= rad[s[i]]
print(arab)  -End,"
 # put your python code here
ard = ['IV', 'XL', 'CD', 'M']
s = input()
rome = ''
dec = 0
for i in s[::-1]:
    i = int(i)
    if 1<=i<=3: rome = ard[dec][0]*i + rome
    elif i == 4: rome = ard[dec] + rome
    elif 5<=i<=8: rome = ard[dec][1] + ard[dec][0]*(i-5) + rome
    elif i == 9: rome = ard[dec][0] + ard[dec+1][0] + rome 
    dec += 1
print(rome)
 -End,"
 # put your python code here
f = float(input())
print(f - int(f)) -End,"
 def hanoi(n, source, helper, target):
    if n > 0:
        hanoi(n - 1, source, target, helper)
        if source['rings']:
            print(source['name'] + ' - ' + target['name'])
            target['rings'].append(source['rings'].pop())
        hanoi(n - 1, helper, source, target)
source = {'name': '1', 'rings': [i for i in range(int(input()),0,-1)]}
helper = {'name': '2', 'rings': []}
target = {'name': '3', 'rings': []}
hanoi(len(source['rings']),source,helper,target) -End,"
 val_card = dict(zip(('6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'), range(9)))
fi , se = input().split()
fi_val = val_card[fi[:-1]]
se_val = val_card[se[:-1]]
trump = input()
if fi[-1] != se[-1]:
    if fi[-1] == trump: print('First')
    elif se[-1] == trump: print('Second')
    else: print('Error')
else: print('First' if fi_val>se_val else 'Second' if fi_val<se_val else 'Error') -End,"
 # put your python code here
n = int(input())
n_prev = n
count = 0
maybe = False
while n!=0:
    if n_prev < n: maybe = True
    elif n_prev > n:
        if maybe: 
            count += 1
            maybe = False
    else: maybe = False
    n_prev = n
    n = int(input())
print (count) -End,"
 class fibonacci_sequence:
    def __init__(self, n):
        self.n = n
        self.i = 0
        
    
    def _fib(self, n):
        if n == 0: return 0
        elif n == 1: return 1
        elif n > 1: return self._fib(n-2) + self._fib(n-1)
    
    def __iter__(self):
        for i in range(1, self.n + 1):
            yield self._fib(i)

 -End,"
 # put your python code here
import requests, re
res_a, b, yn, pattern = requests.get(input()), input(), ""No"", r""\bhref\b\s*=\s*[\'\""](.+?)[\'\""]""
print(['No','Yes'][any(map(lambda x: b in re.findall(pattern, requests.get(x).text),re.findall(pattern, res_a.text)))]) -End,"
 # put your python code here
import re, requests
regexp = re.compile(r""<a[^>]*?href\s*=\s*[\'\""]\s*([\w\d]+://)?([\w\d\.-]+)?(:\d+)?[\./]*[^>]*[\'\""][^>]*>"", re.IGNORECASE)
for l in sorted(set(map(lambda x: x[1], regexp.findall(requests.get(input()).text)))):
    if l and l!='..':
        print(l) -End,"
 # put your python code here
def search(a,b):
    if b in NS.get(a,set()):
        return a
    elif stack.get(a, None) == None:
        return None
    else:
        return search(stack[a],b)
    
NS = {'global':set()}
stack = {}
for i in range(int(input())):
    act, a, b = input().split()
    if act == 'add':
        NS[a] = NS.get(a,set()) | {b}
    elif act == 'create':
        stack[a] = b
    else:
        print (search(a,b)) -End,"
 # put your python code here
s = input()
print(s.upper() if s.islower() else s.lower()) -End,"
 print(sum(map(int,filter(lambda x: x.isdigit(), input().split())))) -End,"
 # put your python code here
a = int(input())
b = int(input())
h = int(input())
if a<=h<=b: print('Normal')
elif h<a: print('Deficiency')
else: print('Excess') -End,"
 LOGIN = '100500'
PASS = '424242'
login, password = input().split()
if login == LOGIN:
    if password == PASS: print('Login success')
    else: print('Wrong password')
else: print('No user with login {} found'.format(login)) -End,"
 # put your python code here
ans = 'Result: ""{}""'
shift = int(input())
mod = 128512
phrase = input()
enc_phrase = '' 
for c in phrase:
    enc_phrase += chr((ord(c) - mod + shift) % 80 + mod)
print(ans.format(enc_phrase)) -End,"
 # put your python code here
from datetime import timedelta as td
print(td(seconds = int(input()) % 86400)) -End,"
 # put your python code here
n = int(input()) 
print(n + [ 2, 1 ][n % 2]) -End,"
 # put your python code here
s = input()+'0'
print(s[-3 if len(s)>2 else -1]) -End,"
 # put your python code here
print(input()[0]) -End,"
 # put your python code here
total = (100 * int(input()) + int(input())) * int(input()) 
print(total // 100, total % 100) -End,"
 # put your python code here
print(input()[-1]) -End,"
 # put your python code here
totaldesks = 0
for _ in range(3):
    num_students = int(input())
    totaldesks += num_students // 2 + num_students % 2
print(totaldesks)  -End,"
 def closest_mod_5(x):
    while x % 5 != 0:
        x += 1
    return x -End,"
 def calc_expr(p):
    q = 1 - p
    return (1 - 6 * p * q) / (p * q) -End,"
 def calc_expr(a, b, c):
    return (a + b * c) / 5 - a**3 + (a + c / 3) / 4
 -End,"
 def num_neib(ind_i, ind_j, mx):
    res = 0
    for i in range(ind_i - 1, ind_i + 2):
        if i <0  or i > n-1: continue
        else:
            for j in range(ind_j - 1, ind_j + 2):
                if (i == ind_i and j == ind_j) or j < 0 or j > m-1: continue
                else:
                    if mx[i][j] == '*': res += 1
    return res
n, m = map(int, input().split())
mx = []
for _ in range(n):
    mx.append(input())
solved_mx = []
for i in range(n):
    solved_mx.append('')
    for j in range(m):
        if mx[i][j] == '*': solved_mx[i] += '*'
        else: solved_mx[i] += str(num_neib(i, j, mx))
for row in solved_mx: print(row) -End,"
 def f(x):
    if x <= -2: return 1 - (x + 2)**2
    elif -2 < x <= 2: return -x / 2
    else: return (x - 2)**2 + 1 -End,"
 print( sum( map( int, input() ))) -End,"
 def modify_list(l):
    delindx = []
    for i in range(len(l)):
        if l[i] % 2 == 0: l[i] //= 2
        else: delindx.append(l[i])
    for i in delindx: l.remove(i) -End,"
 def filter_positive(lst):
    return list(filter(lambda x: x>0, lst)) -End,"
 def fscf(p, q):
    a = []
    while q!=0 :
        a.append(p // q)
        p, q = q, p % q
    return a

(p, q) = map(int, input().split('/'))
print(*fscf(p, q)) -End,"
 def sum_int(n):
    res = 0
    while n !=0:
        res += n % 10
        n = n // 10
    return res
n = input()
s, n = sum(map(int,n)), int(n)
count = 0
for i in range(n):
    if s == sum_int(i): count += 1
print(count) -End,"
 # put your python code here
def main():
    seq = []
    n = int(input())
    while n:
        seq.append(n)
        n = int(input())
    print(min_distance(localmaxs(seq)))

def localmaxs(lst):
    locmaxindxs = []
    maybe = False
    if len(lst) < 3: return []
    for i in range(len(lst) - 1):
        if lst[i] < lst[i+1]: maybe = True
        elif lst[i] > lst[i+1]:
            if maybe: locmaxindxs.append(i)
            maybe = False
    return locmaxindxs

def min_distance(lst):
    if len(lst) >= 2:
        dst = abs(lst[1] - lst[0])
        for i in range(1, len(lst)-1):
            dst = min(dst, abs(lst[i+1] - lst[i]))
    else: dst = 0
    return dst
                 
if __name__ == ""__main__"": main() -End,"
 # put your python code here
print(float(input())/float(input())) -End,"
 class multifilter:
    def judge_half(self, pos, neg):
        return pos >= neg
        
    def judge_any(self, pos, neg):
        return pos >= 1

    def judge_all(self, pos, neg):
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        res = []
        for el in self.iterable:
            pos = 0
            for func in self.funcs:
                if func(el): pos += 1
            neg = len(self.funcs) - pos
            if self.judge(self, pos, neg): yield el -End,"
 def main():
    impossible = """"
    seq = input()
    d = dict(zip( ['{', '(', '[', '}', ')', ']'], ['}', ')', ']', '{', '(', '['] ))
    opens = '{(['
    closes = '})]'
    stack = []
    for bracket in seq:
        if stack and (stack[-1] in opens) and (bracket in closes):
            if d[stack[-1]] == bracket: stack.pop()
            else:
                impossible = 'IMPOSSIBLE'
                break
        else: stack.append(bracket)
    ladd = radd = """"
    for bracket in stack:
        if bracket in opens: break
        else: ladd = d[bracket] + ladd
    for bracket in stack[::-1]:
        if bracket in closes: break
        else: radd += d[bracket]
    print(ladd+seq+radd if not impossible else impossible)

if __name__ == ""__main__"": main()  -End,"
 def add_koeff_rows(i, k, j, mx):
    '''add j-th row of matrix multiplying on koefficient k to i-th row of matrix'''
    mx[i][:] = [mx[i][_] + k * mx[j][_] for _ in range(len(mx[j]))]

def sort(k, mx):
    """"""sorted under-matrix from position [k,k] reversed""""""
    m =[]
    for i in range(k, len(mx)):
        m.append(mx[i][:])
    m.sort(key = lambda x: abs(x[k]), reverse=True)
    for i in range(k, len(mx)):
        mx[i][:] = m[i-k][:]

def remove_0_rows(mx):
    i = 0
    while i<len(mx):
        if sum(mx[i]) == 0:
            del mx[i]
            if i == len(mx): break
            else: continue
        else: i += 1

def is_solving(mx):
    for row in mx:
        if list(filter(lambda x: x!=0, row[:-1])) == []: return 'NO'
    if len(mx) > 0:
        if len(mx) < len(mx[0])-1: return 'INF'
    return 'YES'

def main():
    n, m = map(int, input().split())
    
    T = []
    for _ in range(n):
        T.append(list(map(int, input().split())))
    
#go ahead
    if n>1:
        sort(0, T)
        add_koeff_rows(1, -T[1][0] / T[0][0], 0, T)
    for i in range(n-1):
        if i == m: break
        sort(i+1, T)
        if T[i][i] != 0:
            for j in range(i+1, n):
                add_koeff_rows(j, -T[j][i]/T[i][i], i, T)
                
# backward                
    for i in range(n-1, 0, -1):
        if i > m: continue 
        if T[i][i] != 0:
            for j in range(i-1, -1, -1):
                add_koeff_rows(j, -T[j][i] / T[i][i], i, T)

# define solving
    remove_0_rows(T)
    ans = is_solving(T)
    if ans == 'YES':
        if sum([T[i][m]/T[i][i] for i in range(m)]) == 0: ans = 'NO'
    print(ans)
    if ans == 'YES':
        print(' '.join(map(str,[T[i][m]/T[i][i] for i in range(m)])))

if __name__ == ""__main__"": main() -End,"
 # put your python code here
command = input()
while command != 'End':
    print('Processing ""{}"" command...'.format(command))
    command = input()
print('Good bye!') -End,"
 def frmt(n):
    print(""{:.2e}"".format(n))

transformations = {('mile', 'm'): 1609,
                   ('yard', 'm'): 0.9144,
                   ('foot', 'cm'): 30.48,
                   ('inch', 'cm'): 2.54,
                   ('km', 'm'): 1000,
                   ('cm', 'm'): 0.01,
                   ('mm', 'm'): 0.001,
                   }

def dfs_path(graph, start, goal, visited=set(), path = []):
    visited.add(start)
    if goal in graph[start]:
        path.extend([start, goal])
        return True
    else:
        for nod in graph[start]:
            if nod in visited: continue
            elif dfs_path(graph, nod, goal, visited, path):
                path.insert(0, start)
                return True
    return False

def make_graph():
    graph = {}
    for k in transformations:
        graph[k[0]] = graph.get(k[0], set()) | {k[1]}
        graph[k[1]] = graph.get(k[1], set()) | {k[0]}
    return graph

def main():
    graph = make_graph()
    (n, unitfrom, _, unitto) = input().split()
    n = float(n)
    if unitfrom == unitto: frmt(n)
    else:
        path = []
        dfs_path(graph, unitfrom, unitto, set(), path)
        mult = 1
        for i in range(len(path) - 1):
            if (path[i], path[i+1]) in transformations: mult *= transformations[(path[i], path[i+1])]
            else: mult /= transformations[(path[i+1], path[i])]
        frmt(mult*n)

if __name__ == ""__main__"": main() -End,"
 import sys
def add(hash, v):
    if v in hash: print('FAIL')
    else:
        hash.update({v})
        print('OK')

def delete(hash, v):
    if v not in hash: print('FAIL')
    else:
        hash.difference_update({v})
        print('OK')

def isit(hash,v):
    if v in hash: print('OK')
    else: print('FAIL')

hash = set()
operations = {'+':add, '-':delete, '?':isit}
for line in sys.stdin:
    c, v = line.strip().split()
    if c == '+': add(hash, v)
    elif c == '-': delete(hash, v)
    else: isit(hash, v) -End,"
 import sys
def main():
    def do_map(doc): 
        for word in doc.split(): 
            yield word, 1 
     
    for line in sys.stdin: 
        for key, value in do_map(line): 
            print(key + ""\t"" + str(value)) 
        
if __name__ == ""__main__"": main() -End,"
 import sys

def do_mapreduce(doc):
    w, n, m = doc.strip().split('\t')
    print('{}\t{};{};1'.format(w, n, m))
    

for line in sys.stdin:
    do_mapreduce(line) -End,"
 import sys
lst = list(map(int, sys.stdin.readline().split()))
del lst[::2]
print(*lst[::-1]) -End,"
 import sys
lst = sys.stdin.readline().split()
print(sum(list(map(int, lst)))) -End,"
 import heapq
import sys
seq = list(map(int, sys.stdin.readline().split()))
heapq.heapify(seq)
is_ariphm = True
if len(seq) > 1:
    is_ariphm = True
    last1 = heapq.heappop(seq)
    last2 = heapq.heappop(seq)
    diff = last2 - last1
    last1 = last2 
    while seq:
        last2 = heapq.heappop(seq)
        if diff != last2 - last1:
            is_ariphm = False
            break 
        last1 = last2
if is_ariphm: print('Yes')
else: print('No') -End,"
 # put your python code here
s = 0
c = 0
n = int(input())
while n:
    s += int(n)
    c += 1
    n = int(input())
print(s / c) -End,"
 # put your python code here
input()
seq = input().split()
seq.insert(0, seq.pop())
print(*seq) -End,"
 # put your python code here
print(*input().split()[-2::-1]) -End,"
 days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
d = input()
n = int(input())
ans = (days.index(d) + n) % 7
print('If you leave on {} and return {} days later, you will return on {}.'.format(d,n, days[ans])) -End,"
 # put your python code here
def predok (class1, class2):
    if class1 == class2:
        return 1
    if nasledniki.get(class1, None) == None: 
        return 0
    for cl in nasledniki[class1]:
        if predok(cl,class2) == 1:
            return 1
    return 0
nasledniki = {}
for i in range(int(input())):
    line = input().split()
    for el in line[2:]:
        nasledniki[el] = nasledniki.get(el, set())|{line[0]}
for i in range(int(input())):
    print (['No','Yes'][predok(*input().split())]) -End,"
 try:
    foo()
except AssertionError:
    print(""Caught AssertionError"")
except MemoryError:
    print(""Caught MemoryError"")
except RuntimeError:
    print(""Caught RuntimeError"") -End,"
 a1=int(input())
a2=int(input())
a3=int(input())
if a1>=a2 and a1>=a3 :
    if a2>=a3:
        print (a1)
        print (a3)
        print (a2)
    elif a3>=a2:
        print (a1)
        print (a2)
        print (a3)

elif a2>=a3 and a2>=a1:
    if a1>=a3:
        print (a2)
        print (a3)
        print (a1)
    elif a3>=a1:
        print (a2)
        print (a1)
        print (a3)    

elif a3>=a1 and a3>=a2:
    if a1>=a2:
        print (a3)
        print (a2)
        print (a1)
    elif a2>=a1:
        print (a3)
        print (a1)
        print (a2)




 -End,"
 a='Learn Python: action in progress...'
b='Learn Python: action completed.'
print (((a+'\n')*10)+((b+'\n')*5))




 -End,"
 a=int(input())
b=a//60
c=a-b*60
print(b,c)
 -End,"
 a=input()
b=int(input())
print(a[(len(a)-b):])
 -End,"
 a=str(input())
a1=int(a[0])
a2=int(a[1])
a3=int(a[2])
print(a1**3+a2**3+a3**3)
 -End,"
 
a=[int(i) for i in input().split()]
f=len(a)
s=[]
for i in range(f):
    if i==0 and f>1:
        s=a[1]+a[f-1]
        print (s,end="" "")
    elif i!=0 and i!=f-1 and f>1:
        s=a[i-1]+a[i+1]
        print (s, end="" "")
    elif i==f-1 and f>1:
        s=a[f-2]+a[0]
        print(s,end="" "")
    else:
        print(a[0])

 -End,"
 a=[int(i) for i in input().split()]
a.sort()
s=[]
z=""""
if len(a)>1:
    for j in range(len(a)):
        b=a.count(a[j])  
        if b>1:
            s.append(a[j])
    for k in range(len(s)-1):
        if s[k]==s[k+1] and k+1<len(s):
            continue
        else:
            z+=str(s[k])+"" ""
if len(s)>0:
    z+=str(s[k])
print (z)




 -End,"
 a=int(input())
r=""""
s=""""
if a!=0:
    for i in range (a+1):              
        if len(r.split())<=a+1:
             r+=(str(i)+"" "")*i       
        else:
            break
    for j in (r.split()[:a]):
        s+=j+"" ""
    print (s)
else:
    print(a)
 -End,"
 a=float(input())
b=float(input())
c=float(input())
p=0.5*(a+b+c)
s=(p*(p-a)*(p-b)*(p-c))**(0.5)
print (s)




 -End,"
 a=int(input())
b=int(input())
c=int(input())
print (a+b+c)




 -End,"
 a=int(input())
b=int(input())
c=int(input())
print (a*c+((b*c)//100), (b*c)%100 )
 -End,"
 a=int(input())
b=int(input())
a1=abs(a-b)
a2=a1//60
a3=a1-(a2*60)
print (a2, a3)




 -End,"
 a=int(input())
b=int(input())
if a>b:
    print (""Большее число:"",str(a)+"","",""меньшее число:"",b)
else:
    print (""Большее число:"",str(b)+"","",""меньшее число:"",a)




 -End,"
 a=input()
if len(a)==1:
    print ('Число однозначное')
elif len(a)==2:
    print('Число двузначное')
else:
    print('Число трехзначное')





 -End,"
 import math
a=int(input())
b=int(input())
c=int(input())
s=a-b
s1=s/(b-c)+1
print(int(math.ceil(s1)))




 -End,"
 a=input()
a.find('qwerty')
if (a.find('qwerty')>=0 or a.find('1234')>=0) :
    print ('Bad password')
elif len(a)>8 and(a.find('1')>=0 or a.find('2')>=0 or a.find('3')>=0 or a.find('4')>=0 or a.find('5')>=0 or a.find('6')>=0 or a.find('7')>=0 or a.find('8')>=0 or a.find('9')>=0 or a.find('0')>=0): 
    print ('Good password')
elif len(a)<8:
    print ('Bad password')
else:
    print ('Bad password')




 -End,"
 a,b,c=input(), input(), input()
if int(a)>=7 and (""Рим"" in b) and (('английский' in c) or ('русский' in c)):
    print('Подходит')

else:
    print(""Не подходит"")




 -End,"
 a,b,c,d=input(), input(), input(), input()
if a in d and b in d and c in d:
    print('YES')
else:
    print('NO')




 -End,"
 a=input()
if ('Арагорн' in a) or ('Леголас' in a) or ('Мериадок Брендибак' in a) or ('Боромир' in a) or ('Фродо Бэггинс' in a):
    print('Проходи!')
else:
    print('Ты не пройдешь!')
 -End,"
 a, b = int(input()), int(input())
if a<b:
    print (tuple(range(a,b)))
else:
    print(tuple(range(b,a)))




 -End,"
 a=int(input())
s=''
for i in range(a*10):
    if i%2==0 and i>=a:
      s+=str(i)+"", ""
           
print ('('+s+str(a*10)+')')
 -End,"
 x1 = int(input())
y1 = int(input())
x2 = int(input())
y2 = int(input())
if (x1==x2 and y1==y2) or (0<=x2>8 and 0<=y2>8) or (0<=x1>8 and 0<=y1>8) :
    print('NO')
elif abs(x1 - x2) <= 1 and abs(y1 - y2) <= 1:
    print('YES')
else:
    print('NO')





 -End,"
 a=int(input())
b=int(input())
if a>b:
    for i in range (b, a):
        if i%7==1 and i%2==0:
            print (i)
else:
    for i in range(a, b):
        if i%7==1 and i%2==0:
            print (i)





 -End,"
 a=int(input())
s=1
for i in range (1,a+1):
    s*=i
print(s)




 -End,"
 a=int(input())
b=int(input())
s=0
for i in range(b):
    s+=int(input())
if a-s>=0:
    print ('Покупает')
else:
    print (""Не покупает"")
 -End,"
 a=int(input())
b=int(input())
s=0
if a>b:
    for i in range(b,a):
        s+=i*i
    print (s)
else:
    for i in range(a, b):
        s+=i*i
    print (s)




 -End,"
 a=int(input())
b=(""Первый месяц - январь"", ""Второй месяц - февраль"", ""Третий месяц - март"", ""Четвертый месяц - апрель"", ""Пятый месяц - май"", ""Шестой месяц - июнь"", ""Седьмой месяц - июль"", ""Восьмой месяц - август"", ""Девятый месяц - сентябрь"", ""Десятый месяц - октябрь"", ""Одиннадцатый месяц - ноябрь"", ""Двенадцатый месяц - декабрь"")
if 0<a<=12:
    for i in range(a):
        print (b[i])
else:
    print(""Error"")




 -End,"
 a=int(input())
for i in range (1,a+1):
    if (i%10==1 or i==1) and i!=11:
        print(""На лугу"", i,""корова"")
    elif (i%10==2 or i%10==3 or i%10==4) and (i!=12 and i!=13 and i!=14):
        print (""На лугу"", i,""коровы"")
    else:
        print(""На лугу"", i,""коров"")  




 -End,"
 a=int(input())
b=[1]
for i in range (a):
    b.append(b[i]+b[i-1])
print (1, *b[:a-1])


 -End,"
 a=int(input())
s=0
b=0
for i in range(1, a+1):
    s=a-(a//i)*i
    if s==0:
        b+=1
    else:
        b+=0
if b==2:
    print ('Простое')
else:
    print(""Составное"")




 -End,"
 a=int(input())
s= 0
b=[]
for i in range(a):
    z=input()
    s+=1
    if 'rat'  in z:
        b.append(s)
if len(b)==0:
    b.append('-1')
for i in (b):
    print (i)
 -End,"
 a=int(input())
s=a   
while a!=0:
    a=int(input())
    s+=a
print (s)

 -End,"
 s=0  
while True:
    a=input()
    s+=1
    if len(a)==0 and s==1:
        print ('Нет вдохновения? Ну ничего, попробуйте завтра')
        break
    elif len(a)==0 and s!=1:
        print ('Эти строки запомнятся надолго')
        break
    else:
        print('Великолепно, пишите еще!')




 -End,"
 a=int(input())
s, s1,z=0, 0, 0
while True:
    for i in range(9,1, -1):
        s=a/i
        if s>s1 and a/i==a//i:
            s1=s
            z=i
    break
print (z)
 -End,"
 a=int(input())
m=0
for i in range(0, 100):
    s=2**i
    if s==a:
        m+=1
    else:
        m+=0
if  m>0:
    print('YES')
else:
    print ('NO')  




 -End,"
 a=int(input())
r=[]
for i in range(a):
    i=int(input())
    r.append(i)
r.sort()  
for i in r:
    if (i-4)%10==0:
        print(i)
        break




 -End,"
 a=int(input())
r=[]
r1=0
for i in range(a):
    i=int(input())
    r.append(i)
r.sort()  
for i in r:
    if i%6==0:
        r1+=i
print(r1)




 -End,"
 # Числа, введенные через пробел, сохраняются в кортеж numbers. 
# Используются еще не пройденные функции, поэтому данная строчка написана за вас.
a = tuple(map(int, input().split()))
# Поместите ваш код ниже
r, s = 1, 0
for i in (a[:-1]):
    if (i+a[r])%3==0 and (i+a[r])%9!=0:
        s+=1
        r+=1
    else:
        r+=1
print(s)



 -End,"
 # Числа, введенные через пробел, сохраняются в кортеж numbers. 
# Используются еще не пройденные функции, поэтому данная строчка написана за вас.
a = tuple(map(float, input().split()))
# Поместите ваш код ниже
r, s, s1, r1 = 1, 0, 0, 1
k,k1 = 0, 0
for i in (a[:-1]):
    if i>a[r]:
        s=i-a[r]
        r+=1       
    else:
        s=a[r]-i
        r+=1
    if abs(s)>abs(s1):
        s1=s
        k=i
        k1=a[r-1]        
print(k, k1)



 -End,"
 s=[]
while True:
    a=input()
    if a=='.':
        break
    elif int(a)%2==0:
        s.append(a)
print(*s[::-1])




 -End,"
 s=[]
while True:
    a=input()
    if a=='.':
        s.sort()
        if len(s)%2==0:
            r=len(s)//2
            print(round(s[r]+s[r-1])/2)
            break
        else:
            r=len(s)//2
            print(s[r])
            break            
    elif True:
        s.append(int(a))     
 




 -End,"
 s, n, c=[], [], [] 
c1 = 0 
a=int(input())
for i in range(a):
    i=int(input())
    s.append(i)
    if i%2==0:
        c.append(i)
    else:
        n.append(i)
    c.sort()
    n.sort()
if len(c)==0:
    c[0]=0
elif len(n)==0:
    n[0]=0
c1=c[0]+n[0]
for j in range(len(s)):
    if s[j]<c1:
        s[j]=s[j]+c1
print (*s)




 -End,"
 s=[]
while True:
    a=input()
    s.append(a)
    if a=='.':
        for i in range(len(s)-1):
            s[i]=s[i].split(' ')            
            print (*str(*s[i]).upper())
        break




 -End,"
 s, s1 = [], []
while True:
    b=input()
    s.append(b)
    if b=='.':
        c=int(input())
        for i in range(c):
            d=int(input())
            s1.append(d)
        for j in s1:
            j=j-1
            print (s[j], end='')
        if 1:
            break




 -End,"
 a=input().split()
print('_'.join(a))




 -End,"
 r=0
a=input().split('.')
print(' '.join(a))
for i in a:
    i=int(i)
    r+=i
print(r)




 -End,"
 a=input()
a=a.replace(""."", '')
a=a.replace("","", '')
a=a.replace(""!"", '')
a=a.replace(""?"", '')
a=a.replace("":"", '')
a=a.replace("";"", '')
a=a.replace(""–"", '')
print (a.lower())




 -End,"
 a=input().split()
b=int(input())
c=int(input())
a1=a[c-1:]
z=[]
while len(a1)>=b:
        z=a1[0::b]
        print(*z)
        break




 -End,"
 s=[]
while True:
    a=input()    
    if a!='.':
        s.append(int(a)**2)
    else:
        s.reverse()
        print(*s)
        break




 -End,"
 import copy
s, s1=[], []
while True:
    a=input().split()
    n=len(a)-1
    a.insert(0, a[n])
    a.append(a[1])
    s.append(a)
    b=len(s)
    b1=len(s[0])
    if a==['end', 'end', 'end']:
        s.insert((b-1),s[0])
        s.insert(0,s[b-2])  
        s1=copy.deepcopy(s)
        s1=s1[:b+1]
        for i in range(1,b):
            for j in range(1,b1-1):
                s1[i][j]=int(s[i][j-1])+int(s[i][j+1])+int(s[i+1][j])+int(s[i-1][j])
        for i in range(1,b):
            for j in range(1,b1-1):
                print (s1[i][j], end=' ')
            print()
        break

 -End,"
 def modify_list(l):
    s, k = 0, []   
    for i in l:
        if i%2!=0:            
            s+=1
        else:                      
            l[s]=i//2
            k.append(l[s])
    l.clear()
    l.extend(k)     
    return



 -End,"
 a= input().split()
s={}
n=0
for i in a:
    i=str(i).lower()
    if i not in  s.keys():
        n+=1        
        s[i]=n
        n=0
    else:
        n=0
        n=s[i]
        n+=1
        s[i]=n
        n=0        
for i, f in s.items():
    print (i,f)
 -End,"
 a=float(input())
a=str(a)
print(int(a[2]))



 -End,"
 r=[]
while True:
    a=float(input())
    if a!=0:
        r.append(a)
    else:
        r.sort()
        print(r[0], r[len(r)-1])
        break



 -End,"
 r=[]
b=1
a=int(input())
while b!=0:
    b=a//2
    z=a-(b*2)
    r.append(z)
    a=b
r.reverse()
for i in r:
    print(i,end='')




 -End,"
 s=1
a=input()
for i in range(len(a)):
    if '0' in a[i]:
        a[i].replace('0','1')
    else:
        s*=int(a[i])
print(s)




 -End,"
 s=0
a0=int(input())
a=input().split()
a=sorted(a)
a.reverse()
for i in range(0, len(a)-1):
    if int(a[i])>=a0>int(a[i+1]) and a.count(a[i])==1 :
        s=i+2
    elif int(a[i])>=a0>int(a[i+1]) and a.count(a[i])>1  :
         s=i+a.count(a[i])
    elif a0>int(a[0]) and a.count(a[0])==1:
        s=1
    elif a0==int(a[0]) and a.count(a[0])>1:
        s=1+a.count(a[0])
    elif a0==int(a[len(a)-1]) and a.count(a[len(a)-1])==1:
        s=len(a)+1
    elif a0<int(a[len(a)-1]):
        s=len(a)+1
print (s)



 -End,"
 r=[]
while True:
    a=input()
    if a==""."":
        for i in r:
            print(i, end='\n')
        break
    elif '//' in a:
        r.append('информация')
    elif '@@' in a:
        r.append('ошибка')
    elif '!!' in a:
        r.append('предупреждение')
    elif '**' in a:
        r.append('подробное сообщение')




 -End,"
 a= input().split()
a1=int(a[0])
a2=int(a[1])
a3=int(a[2])
if a3==a1/a2:
    print (a1,'/',a2,'=',a3)
elif a3==a1+a2:
    print (a1,'+',a2,'=',a3)
elif a3==a1-a2:
    print (a1,'-',a2,'=',a3)
elif a3==a1*a2:
    print (a1,'*',a2,'=',a3)
else:
    print('Error')




 -End,"
 a=input().split()
a=sorted(a)
s=[]
for i in a:
    if a.count(i)>1:
        if i not in s:
            s.append(i)
print(*sorted(s))




 -End,"
 b, s, s1={}, 0, 0
for i in range(int(input())):
    a=input().split()
    if a[0] not in b:
        b[a[0]]=a[1]
    else:
        b[a[0]]+=a[1]
for i in b:
    for j in b[i]:
        s+=int(j)
        s1+=1
    b[i]=round(s/s1,1)
    s, s1=0, 0
b= sorted(b.items())        
for i in b:
    print (*i)




 -End,"
 def fu(i):
    while int(a[i-1])>int(a[i]):
        s=int(a[i])
        a[i]=int(a[i-1])
        a[i-1]=int(s)
        i-=1
        if i==0: break
    return a

a=input().split()
for i in range(1,len(a)):
          fu(i)         
        
print(*a)




 -End,"
 klu, klu1={}, {}
n=0
s, s1 = [], []
a=input()
a1=input()
a2=input()
a3=input()
for i in a: # пtреводим в словарь для шифрования
    klu[i]=a1[n]
    n+=1
n=0
for i in a2: # шифруем все
    s.append(klu[i])
for i in a1: # переводим зашифрованный в словарь
    klu1[i]=a[n]
    n+=1
for i in a3: #hfcobahjdsdftv текст
    s1.append(klu1[i])
for i in s: # выводим зашифрованный текст
    print(i,end='')
print()
for i in s1: #d выводим расшифрованный текст
    print (i,end='')




 -End,"
 b, b1=[],{}
res=[]
for i in range(int(input())):
    a=input()
    if ""."" or "","" or ""!"" or ""?"" or "";""or "":"" in a:
        for i in ""."" , "","" , ""!"" ,""?"", "";"", "":"":
            a=a.replace(i,'')
    a=a.lower().split()
    b.append(a)
for i in range(len(b)):
    for j in b[i]:
        if b[i].count(j)>=1 and j not in b1:
            b1[j]=1               
        elif b[i].count(j)>=1 and j in b1:
            b1[j]+=1
for i in b1:
    if b1[i]==max(b1.values()):
        print(i,b1[i])

 -End,"
 a=input()
s, s1=0, 1
while a[s]==' ' or a[s]=='\t':
        s+=1
while a[-s1]==' ' or a[-s1]=='\t':
        s1+=1
print(a[s:] if s1==1  else a[s:-s1+1])
print(s+s1-1)
 -End,"
 b=[]
r=0
a= input().split(', ')
for i in range(len(a)):
    b.append(int(a[i]))
b1=sorted(b)
if b1[0]!=b1[1]:
    print(b.index(b1[0]))
elif b1[0]==b1[1] and b1[1]!=b1[2]:
    z=b.index(b1[0])
    b[z]=''
    z1=b.index(b1[1])
    print(z+z1)
else:
    for i in range(len(b1)):
        if b1[i]==b1[i+1]:
            z=b.index(b1[i+1])
            b[z]=''
            r+=z
        else:
            r+=b.index(b1[0])
            break
    print(r)

 -End,"
 a, a1, a2=input(),[],0
for i in range(len(a)):       
        a1.append(a[i])
for i in range(len(a1)):
    if a[i].isdigit():
        if a1[i]=='9':
            a1[i]='0'
        else:
            a1[i]=int(a1[i])
            a1[i]=a1[i]+1
            a2+=a1[i]
for i in a1:
    print(i, end='')
print()
print(a2)




 -End,"
 b=[]
a= input().split(', ')
for i in range(len(a)):
    b.append(int(a[i]))
b1=sorted(b)
b1=b1[::-1]
r=b1.count(b1[0])
print(r)





 -End,"
 b=[]
a= input().split(', ')
for i in range(len(a)):
    b.append(int(a[i]))
b1=sorted(b)
if b1[len(b1)-2]>=abs(b1[0]) and b1[len(b1)-2]>=abs(b1[1]):
    if abs(b1[len(b1)-2])>=abs(b1[len(b1)-1]):
        print(b1[len(b1)-1],b1[len(b1)-2])
    else:
        print(b1[len(b1)-2],b1[len(b1)-1])
elif abs(b1[0])>=abs(b1[1]) and abs(b1[1])>abs(b1[len(b1)-1]):
    if abs(b1[0])>=abs(b1[1]):
        print(b1[1], b1[0])
    else:
        print(b1[0], b1[1])
else :
    if abs(b1[len(b1)-1])>=abs(b1[0]):
        print(b1[0],b1[len(b1)-1])
    else:
        print(b1[len(b1)-1],b1[0])




 -End,"
 b1, b2=[], []
a= input().split(' ')
l=len(a)//2
a1=a[:l]
a2=a[l:]
for i in a1:
    i=int(i)
    b1.append(i)
for j in a2:
    j=int(j)
    b2.append(j)
b1=sorted(b1)
b2=sorted(b2)
b2=b2[::-1]
print(b1[0]+b2[len(b2)-1])



 -End,"
 b1, b2, s=[], [], 0
a= input().split(',')
a1=int(input())
for i in a:
    i=int(i)
    b1.append(i)
b1=sorted(b1)
for j in range(len(b1)-1):
    if b1[j]!=b1[j+1]:
        s+=1    
for i in b1:
    if i>=a1:
        b2.append(i)
print(s+1)
print(b2[0])




 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity

    def can_add(self, v):
        if v <= self.capacity:
            return True
        else:
            return False 

    def add(self, v):
        if self.can_add(v):
            self.capacity -= v
#            print('В копилку еще можно положить -',  self.capacity)
#        else:
#            print('Больше не положить!Свободного места -', self.capacity)




 -End,"
 a, b =int(input()), int(input())
a = a ^ b
b = a ^ b
a = a ^ b
print(a, b, sep= ',')




 -End,"
 win, loss, name, null, res = [], [], [], [], []
v_i, p, n, pr, it = 0, 0, 0, 0, 0
for i in range(int(input())):
    i = input().split(';')
    name.append(i[0])
    name.append(i[2])
    if i[1]>i[3]:
        win.append(i[0])
        loss.append(i[2])
    elif i[1]<i[3]:
        win.append(i[2])
        loss.append(i[0])
    elif i[1]==i[3]:
        null.append(i[2])
        null.append(i[0])
name.sort()
name1 = set(name)
for j in name1:
    if j in name:
        v_i = name.count(j)
    if j in win:
        p = win.count(j)
    if j in loss:
        pr =  loss.count(j)
    if j in null:
        n = null.count(j)
    it = p*3 + n*1 + pr*0
    res.append([j+':'+str(v_i), p, n, pr, it ])
    v_i, p, n, pr, it = 0, 0, 0, 0, 0
for i in res:
    print(*i, end='\n')





 -End,"
 i = input()
n = 1
if int(i[0]) == int(i[n]):
    print('Да')
elif int(i[n+1]) == int(i[n]): 
    print('Да')
elif int(i[0]) == int(i[n+1]):
    print('Да')
else:
    print('Нет')




 -End,"
 a = []
for i in (1,2,3,4):
    i = int(input())
    a.append(i)
    a.sort()
print(a[0])




 -End,"
 x, y = int(input()), int(input())
print('x =', y if x>y else x )
print('y =', x if x>y else y)




 -End,"
 r = int(input())
if r<0:
    print('-1')
elif r>0:
    print('1')
else:
    print('0')





 -End,"
 
def sqa(i):
    def ta0():
        global r
        if ta[i][j] == 0 :                
            ta[i][j] = a1[r]
            r +=1
    global s, s1, a
    for i in range(a):
        for j in range(a):
            if ta[i][j] == 0:               
                if i == s and j == s:
                    while j!=s1:
                        ta0()
                        if j!=(a-1):
                            j+=1
                if i == s and j == s1:
                    while i!=s1:
                        ta0()
                        if i!=(a-1):
                            i+=1
                if i == s1 and j==s1:
                    while j!=s:
                        ta0()
                        j-=1
                if i == s1 and j== s:
                    while i!=s:
                        ta0()
                        i-=1
                if i==s1==s==j:
                    ta0()
                    return None
                if s!=a-1:
                    s+=1
                s1-=1
r = 0
a = int(input())
a1 = [i for i in range(1,(a**2)+1)] # генератор числе
ta = [[0 for i in range(a)]for j in range(a)] # генератор матрицы
s, s1 = 0, a-1
sqa(a)
for re in ta:
    print(*re) -End,"
 d={'global': {'parent': None, 'vars': []}}
def rec(x):
    if i[1] not in d.keys():
        return 'global'
    if i[2] in d[i[1]]['vars']:
        return i[1]
    else:
        i[1] = d[i[1]]['parent']
        if i[1] == None:
            return i[1]
        else:
            return rec(d[i[1]])
for i in range(int(input())):
    i = input().split()  # i[0]-cmd i[1]-namespace i[2]-var
    if 'add' in i[0]:
        d[i[1]]['vars'].append(i[2])
    elif 'create' in i[0]:
        d[i[1]]={'parent':i[2], 'vars':[]}
    elif 'get' in i[0]:
        print(rec(d)) -End,"
 class LoggableList(list, Loggable):
    def append(list, self):
        s = super(LoggableList, list).append(self)
        list.log(self)




 -End,"
 m, m1, m2 = map(int,input().split())
print(*[i**m2 for i in range(m,m1+1)])





 -End,"
 print(float(input())*1000*0.4*0.7)




 -End,"
 res = []
for i in range(int(input())):    
    i = input().split(',')
    z = {}
    for t in range(len(i)):        
        i[t] = i[t].split()
        z[i[t][0]]=int(i[t][1])
    fil = [v for v,i in z.items() if i==min(z.values())]
    res.append(*fil)
print(*res, sep = ', ') -End,"
 time, maxim = map(int, input().split())
batel = list(map(int, input().split(',')))
chet, kolba = 0, 0
for i in batel:
    kolba = i
    for j in range(1,time+1):        
        kolba *= 2
        if kolba >maxim:
            kolba = 0
    if kolba !=0:
        chet +=1
print(chet)




 -End,"
 dic = {'Константная': 'O(1)', 'Линейная': 'O(n)', 'Квадратичная': 'O(n^2)', 'Кубическая': 'O(n^3)',
       'Логарифмическая': ""O(log n)"", 'Я запомнил': ""Молодец, Вася!""}
while True:
    i = input()
    print(dic[i])
    if i == ""Я запомнил"":
        break -End,"
 a = list(map(int, input().split()))
maxim = 0
result = []
for i in a:
    if i > maxim:
        maxim = i
for i in range(maxim, -1, -1):
    if i in a and a.count(i)==1:
        result.append(i)
    elif i in a and a.count(i)>1:
        while result.count(i)!=a.count(i):
            result.append(i)
print(*result)




 -End,"
 time, maxim = map(int, input().split())
batel = list(map(int, input().split(',')))
chet, kolba = 0, 0
for j in range(time):
    batel = [i*2 for i in batel]
    batel = [i if i <= maxim else 0 for i in batel]
print(*[batel.index(i)+1 for i in batel if i!=0],sep=', ') -End,"
 # Допишите ваш код вместо многоточия:
a, b, c = [input() for i in range(3)]
# в выводе используйте ровно 3 функции print() #
print(a,end=' ')
print(b,end='')
print(c) -End,"
 a, b, c = map(float, input().split())
# Допишите ваш код вместо многоточия:
a, b, c = (map(int, (a, b, c)))
a, b, c = (map(str, (a, b, c)))
# в выводе используйте 1 функцию print()!
print(a+b, c+a, b+c) -End,"
 a, b, c = input().split()
# Допишите ваш код вместо многоточия:
a, b, c =map(str, (int(a,16),int(b,16),int(c,16)))
# в выводе используйте 1 функцию print()!
print(a+b, c*2+b, a) -End,"
 a = int(input())
print(""Следующее за числом"", a , ""число -"", (a+1),end='.\n')
print('Для числа',a, ""предыдущее число -"", a-1,end=""."")




 -End,"
 a = int(input())
b = int(input())
print(a,'+',b,'=',a+b,'\n',a,'-',b,'=',a-b,'\n',a, '*', b, '=', a*b, '\n', a, '/', b, '=', a/b, '\n', '(', a, ""+"", b, ')/2=', (a+b)/2, sep="""")   

 -End,"
 print(*[i for i in input()],sep=', ')




 -End,"
 print(sum(int(i) for i in input()))




 -End,"
 print(round((int(input())**2+int(input())**2)**0.5, 2))




 -End,"
 print(""число двузначное"" if len(input())==2 else ""число не двузначное"") -End,"
 ret = input()
print(""нет""if ret!=ret[::-1] else ""да"")
 -End,"
 m, s = [int(input()) for i in range(3)], 0
print(sum([1 if i>0 else 0 for i in m]))




 -End,"
 m = [int(input()) for i in range(7)]
print(sum([i if i%2==0 else 0 for i in m]))




 -End,"
 from functools import reduce


def printBoard(strings):
    for line in strings:
        res = reduce(lambda x,y: x+str(y), line, """").strip()
        print(res)


def addOne(board, x, y):
    cnt = 0
    n = len(board)
    m = len(board[0])
    for dy in range(-1,2):
        cy = y + dy
        if cy < 0 or cy >= n:
            continue
        for dx in range(-1,2):
            if dx == 0 and dy == 0:
                continue
            cx = x + dx
            if cx < 0 or cx >= m:
                continue
            val = board[cy][cx]
            if val != ""*"":
                board[cy][cx] = val + 1
                
    return cnt

def getSolve(strings):
    board = [list(line) for line in strings]
    board = list(map(lambda line: list(map(lambda x: x if x==""*"" else 0, line)), board))
    n = len(board)
    if n == 0:
        return strings
    
    m = len(board[0])
    for y in range(n):
        for x in range(m):
            if board[y][x] == ""*"":
                addOne(board, x, y)
    return board


def readBoard():
    n,m = map(int, input().split())
    board = []
    for x in range(n):
        board.append(input())
    return board


strs = readBoard()
printBoard(getSolve(strs))

 -End,"
 from functools import reduce, partial
from itertools import combinations as cmb


def getValueOrder(value):
    order = {'6': 6,
             '7': 7,
             '8': 8,
             '9': 9,
             '10': 10,
             'J': 11,
             'Q': 12,
             'K': 13,
             'A': 14}
    if value in order:
        return order[value]
    return None


def getCardOrder(card, trump):
    (value, suit) = card
    order = getValueOrder(value)
    if order is None:
        return None
    if suit == trump:
        order *= 10
    return order


def sign(x):
    if x > 0:
        return 1
    if x < 0:
        return -1
    return 0


""""""
res - (processCode, prevOrder);
    processCode - code of previous comparsion:
       -  None - there was not comparsion;
       -  0 - not in order (Error);
       -  1 - increased order;
       - -1 - decreasd order;
    prevOrder;
order - order value of the current card
""""""
def processOrder(res, order):
    (processCode, prevOrder) = res
    if prevOrder == -1:
        # fist entrance
        return (processCode, order)
    if processCode == 0:
        return res
    
    cmpSign = sign(order-prevOrder)
    
    if processCode == None:
        # fist compare
        return (cmpSign, order)
    if processCode != cmpSign:
        return (0,0)
    
    return (cmpSign, order)
    

""""""
Take list of cards. Eache card contains two chars.
First is value. Second is suit.
Trump is a code of trump suit.
""""""
def cmpCards(cards, trump):
    notComparable = any(map(
        lambda p: p[0][1]!=p[1][1] and p[0][1]!=trump and p[1][1]!=trump,
        cmb(cards, 2)))
    if notComparable:
        return ""Error""
    
    orders = map(partial(getCardOrder, trump=trump), cards)
    (processCode,_) = reduce(processOrder, orders, (None,-1))
    
    if processCode < 0:
        return ""First""
    if processCode > 0:
        return ""Second""
    
    return ""Error""

    
cards = list(map(lambda x: [x[:-1], x[-1]], input().strip().split()))
trump = input().strip()

print(cmpCards(cards, trump))
 -End,"
 n = int(input())
print("" "".join(map(str,[y for x in range(1,n+1) for y in [x]*x][0:n])))
 -End,"
 import math


def nextPrime(prime, prevPrimes):
    np = prime+1
    while any(map(lambda p: (np % p == 0), prevPrimes)):
        np += 1
        
    return np


def findPrimeFactors(n):
    maxPrimes = math.floor(math.sqrt(n))
    prevPrimes = []
    res = []
    i=2
    while n > 1:
        if n % i == 0:
            res.append(i)
            n = n // i
        else:
            prevPrimes.append(i)
            i = nextPrime(i, prevPrimes)
    return res


n = int(input())
factors = findPrimeFactors(n)
print("" "".join(map(str, factors)))
 -End,"
 class Heap:
    
    def __init__(self):
        self.a = []
        

    def insert(self, value):
        self.a.append(value)
        i = len(self.a) - 1
        parent_i = self.parent(i)
        while i > 0 and self.a[i] > self.a[parent_i]:
            self.a[i], self.a[parent_i] = self.a[parent_i], self.a[i]
            i = parent_i
            parent_i = self.parent(i)
            
    def peek(self):
        if self.a:
            return self.a[0]
        return None

    def maxChild(self, i):
        left_i = self.left_child(i)
        right_i = self.right_child(i)
        if left_i == None:
            if right_i == None:
                return None
            elif self.a[i] < self.a[right_i]:
                return right_i
            else:
                return None
        elif right_i == None:
            if left_i == None:
                return None
            elif self.a[i] < self.a[left_i]:
                return left_i
            else:
                return None
        maxIdx = left_i
        if self.a[maxIdx] < self.a[right_i]:
            maxIdx = right_i
        if self.a[i] < self.a[maxIdx]:
            return maxIdx

        return None
            
        
    def pop(self):
        if self.a:
            value = self.a.pop()
            if self.a:
                self.a[0] = value
                i = 0
                while True:
                    max_i = self.maxChild(i)
                    if max_i != None:
                        self.a[i], self.a[max_i] = self.a[max_i], self.a[i]
                        i = max_i
                    else:
                        break
                                           

    def parent(self, i):
        if i == 0:
            return 0
        return (i - 1) // 2


    def left_child(self, i):
        left_idx = 2 * i + 1
        if len(self.a) > left_idx:
            return left_idx
        return None

    def right_child(self, i):
        right_idx = 2 * i + 2
        if len(self.a) > right_idx:
            return right_idx
        return None
   
            
def test(f):
    h = Heap()
    n = int(f.readline())
    res = []
    for _ in range(n):
        cmdlist = f.readline().split("" "")
        if len(cmdlist) == 1:
            num = h.peek()
            res.append(str(num))
            h.pop()
        else:
            x = int(cmdlist[1])
            h.insert(x)
    return res

            
if __name__ == ""__main__"":
    from sys import stdin
    res = test(stdin)
    print(""\n"".join(res)) -End,"
 n = int(input())
res = 0
for i in range(n):
    res += (-1/2)**i
print(res) -End,"
 n = int(input())
print(2/3*(1 - (-1/2)**n)) -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.

def getCached(fun):
  res = {}

  def cached_fun(x):
    if not x in res:
      res[x] = fun(x)
    return res[x]

  return cached_fun


f_chached = getCached(f)

n = int(input())
for _ in range(n):
    print(f_chached(int(input()))) -End,"
 from xml.etree import ElementTree

def calc_colors_of_tree(root, level_cost, rates):
    if root is None:
        return rates
    rates[root.attrib['color']] += level_cost
    for el in root:
        rates = calc_colors_of_tree(el, level_cost+1, rates)
        
    return rates


def calc_colors(s):
    names = ['red', 'green', 'blue']
    rates = {x:0 for x in names}
    root = ElementTree.fromstring(s)
    rates = calc_colors_of_tree(root, 1, rates)
    return [rates[x] for x in names]


print("" "".join(map(str, calc_colors(input()))))
     -End,"
 def encode(key, text):
  orig = ' abcdefghijklmnopqrstuvwxyz'
  codeLen = len(orig)
  normKey = abs(key) % codeLen * (-1 if key < 0 else 1)
  if normKey == 0:
    return text
  coder = dict(zip(orig, orig[normKey:] + orig[:normKey]))
  return """".join(map(lambda c: coder[c], text))

n = int(input())
s = input().strip()
print(""Result: \"""" + encode(n, s) + ""\"""") -End,"
 def modify_list_simple(l):
    l[:] = [x//2 for x in l if x % 2 == 0]

def modify_list(l):
  def getNextEven():
    for x in l:
      if x % 2 == 0:
        yield x//2
    
  l[:] = getNextEven()
 -End,"
 from collections import Counter


def countWords_Counter(s):
  return Counter(s.split())


def countWords(s):
    res = {}
    for word in s.split():
      if word in res:
        res[word] += 1
      else:
        res[word] = 1
        
    return res


res = countWords(input().strip().lower())
print(""\n"".join(map(lambda x: str(x) + "" "" + str(res[x]), res)))
 -End,"
 from queue import PriorityQueue


# fill in the queue with negative weights
# for sorting from maximum to minimum weights
# return q with added fruits
def putToBasket(q, fruits):
  for w in fruits:
    q.put(-w)
  return q


# fill in hand with fruits.
# given:
#   q - queue with fruit weights;
#   k - lifting capacity of Johnny
# return (hand, q):
#   hand - list of weights of taken fruits
#   q - new queue without taken fruits
def fillInHand(q, k):
  hand = [] # fruits to be bitten
  handWeight = 0 # total weight of fruits in the hand
  while not q.empty():
    w = -q.get()
    if handWeight + w > k:
      # return fruit to the basket
      q.put(-w)
      # a fruit can't weight more than k
      # so one first fruit we take anyway
      break
    handWeight += w
    hand.append(w)
  return hand, q


# bite the fruits
# hand - list of fruits weights to bite
# return iterator of bits of the fruits
def biteFruits(hand):
  bits = map(lambda w: w // 2, hand)
  return filter(lambda w: w > 0, bits)


# find how many times Johnhy eat fruits
# n - number of fruits in basket
# fruitsWeights - list of fruits weights
# k - lifting capacity of Johnny
def JohnnyBites(n, fruitsWeights, k):
  i = 0 # number of iterations
  q = PriorityQueue(n)
  # fill in the queue with negative weights
  # for sorting from maximum to minimum weights
  q = putToBasket(q, fruitsWeights)
  
  # eat cycle
  while not q.empty():
    i += 1
    # fill in hand with fruits
    hand, q = fillInHand(q, k)
    # bite the fruits
    bits = list(biteFruits(hand))
    # put bits to the basket
    q = putToBasket(q, bits)
  return i


n = int(input())
strFruits = input().strip()
fruits = map(int, strFruits.split())
k = int(input())
print(JohnnyBites(n, fruits, k)) -End,"
 from functools import reduce


# exts == (minVal, maxVal)
def extremums(exts, v):
    minVal, maxVal = exts
    if minVal == None or minVal > v:
        minVal = v
    if maxVal == None or maxVal < v:
        maxVal = v
    return (minVal, maxVal)


nums = map(int, input().split())

minVal, maxVal = reduce(extremums, nums, (None, None))
print(maxVal, minVal)
 -End,"
 def generate(n):
    for _ in range(n):
        x = int(input())
        if x % 4 == 0:
            yield x

n = int(input())
print(max(generate(n))) -End,"
 from functools import reduce

# e == (a2, prev, inserted)
# v - next eltment in the list
def procDoubles(e, v):
    a2, prev, inserted = e
    newInserted = False
    if prev == v:
      if not inserted:
        a2.append(v)
      newInserted = True
    return (a2, v, newInserted)
    
a = input().split()
a.sort()
a2,_,_ = reduce(procDoubles, a, ([], None, False))
print("" "".join(a2))
 -End,"
 # convert from unit to meters
scales = {
'mile': 1609, 
'yard': 0.9144, 
'foot': 0.3048, 
'inch': 0.0254, 
'km': 1000, 
'm': 1,
'cm': 0.01,
'mm': 0.001 }


# val - float - number to convert
# fr - a name of the unit to convert from
# to - a name of the unit to convert to
def convert(fr, to, val):
    if val == 0:
        return 0
    fromK = scales[fr]
    toK = scales[to]
    if fromK is None or toK is None:
        return val
    return (val * fromK) / toK
 

s = input().split()
print(""{:.2e}"".format(convert(s[1], s[3], float(s[0]))))
 -End,"
 def isJollyJumper(nums):
    n = len(nums)
    if n < 2:
        return True
    difs = sorted(map(lambda x: abs(x[0]-x[1]), zip(nums[:-1], nums[1:])))
    return all(map(lambda x: x[0] == x[1], zip(difs, range(1,n))))


nums = list(map(int, input().split()))

if isJollyJumper(nums):
    print(""Jolly"")
else:
    print(""Not jolly"")
 -End,"
 def addCharToRes(res, c, count):
    if c:
        if count > 1:
            res.append(str(count))
        res.append(curChar)
            
            
s = input()
res = []
curChar = None
curCount = 0
for c in s:
    if curChar != c:
        addCharToRes(res, curChar, curCount)
        curCount = 1
        curChar = c
    else:
        curCount += 1

if curChar:
    addCharToRes(res, curChar, curCount)
    
print("""".join(res)) -End,"
 def isZeroRow(m, row):
    """""" (int, [m]) => boolean
      check if row with length m consists of only zeros
    """"""
    for i in range(m):
        if row[i] != 0:
            return False
    return True


def findNotZeroIndex(n, a, fromIdx):
    """""" (int, [[int]]) => int
        find not zero item from a[fromIdx][fromIdx]
        to a[len(a)][fromIdx]
        if found return index
        if did not find return -1
    """"""
    n = len(a)
    for i in range(fromIdx+1,n):
        if a[i][fromIdx] != 0:
            return i
    return -1


def makeDiagonalMatrix(n, m, a):
    """""" (int, int, [n, m]) => [n, m]
        Make matrix with zeros below the main diagonal.
    """"""
    for i in range(min(n, m)):
        startCol = i
        while startCol < m and a[i][startCol] == 0:
            # try to find not zero factor, and swap
            # with current row
            notZeroIdx = findNotZeroIndex(n, a, i)
            if notZeroIdx != -1:
                # swap two rows
                a[i], a[notZeroIdx] = a[notZeroIdx], a[i]
                break
            # all rows with zero factors
            # step to the right to find column without zeros
            startCol += 1

        if startCol == m:
            return a
        
        ai = a[i]
        for j in range(i+1, n):
            aj = a[j]
            k = aj[startCol] / ai[startCol]
            for idx in range(startCol, m+1):
                aj[idx] -= k * ai[idx]
            a[j][i] = 0
    return a


def solveGauss(n, m, a):
    """"""    
        find solve of the linear system of equations
        by Gauss way.
        Return tuple:
        first - string:
         ""YES"" - there is a solvation;
         ""NO"" - there is not a solvation;
         ""INF"" - infinit number of solvations.
        second - list:
         if first is ""YES"", then contains roots;
         else it is None
    """""" 
    if n == 0 or m == 0:
        return (""NO"", None)
    if n == 1 and m == 1:
        if a[0][0] == 0:
            return (""NO"", None)
        return (""YES"", [a[0][1]/a[0][0]])
    
    makeDiagonalMatrix(n, m, a)
    # remove row with all zeros
    rowsIndicesToDelete = []
    for i in range(n):
        if isZeroRow(m, a[i]):
            if a[i][m] == 0:
                # we need to remove this row
                rowsIndicesToDelete.append(a[i])
            else:
                # there are not an equation solvation
                return (""NO"", None)
    if rowsIndicesToDelete:
        for row in rowsIndicesToDelete:
            del row
        n -= len(rowsIndicesToDelete)
    if n < m:
        return (""INF"", None)
    
    res = [0] * m
    for i in range(n-1,-1,-1):
        # compute x_i
        if a[i][i] == 0:
            raise Exception(""ZERO"" + str(i), a)
        
        res[i] = a[i][m] / a[i][i]
        # change equation above by substract x_i from b
        for j in range(i):
            a[j][m] -= res[i] * a[j][i]
    return (""YES"", res)

            
n, m = map(int, input().split())
a = []
for _ in range(n):
    m1 = list(map(float, input().split()))
    a.append(m1)

message, res = solveGauss(n, m, a)
print(message)
if message == 'YES':
    print("" "".join(map(str, res)))
 -End,"
 n = int(input())
nums = map(int, input().split())
res = 0
scanned = {}
for num in nums:
    if not num in scanned:
        res += 1
        scanned[num] = 1

print(res)
 -End,"
 def toCharUpperCase(ch):
    """""" (char) => char
    convert character to uppercase
    """"""
    code = ord(ch)
    if code < ord('a') or code > ord('z'):
        return ch
    return chr(code - ord('a') + ord('A'))
    
print(toCharUpperCase(input())) -End,"
 def changeCase(c):
    lowerChars = (ord('a'), ord('z'))
    upperChars = (ord('A'), ord('Z'))
    delta = upperChars[0] - lowerChars[0]
    code = ord(c)
    if code >= lowerChars[0] and code <= lowerChars[1]:
        return chr(code + delta)
    if code >= upperChars[0] and code <= upperChars[1]:
        return chr(code - delta)
    return c

c = input()
print(changeCase(c))
     -End,"
 def checkBrackets(s):
    ''' str => int
        Return None - if any close bracket has proper open bracket
        and any open bracket has proper close bracket.
        Return position of bracket without it's pair.
    '''
    # get character of open bracket
    # by the char of close bracket
    openBrackets =  ""{[(""
    closeToOpenBrackets = {
        '}': '{',
        ']': '[',
        ')': '(',
        '>': '<' }
    # stack to store previous not closed brackets
    stack = []
    # stack to store indices respect to characters in stack.
    # It needs to detect error position in the string s.
    stackIdx = []
    slen = len(s)
    for idx in range(0, slen):
        c = s[idx]
        if c in openBrackets:
            stack.append(c)
            stackIdx.append(idx)
        elif c in closeToOpenBrackets:
            # c is the close bracket.
            # last bracket in the stack
            # must be proper open bracket
            if len(stack) == 0:
                return idx+1
            mybeOpenBracket = stack.pop()
            openBracketMatch = closeToOpenBrackets[c]
            if mybeOpenBracket != openBracketMatch:
                return idx+1
            stackIdx.pop()
        #else we pass any other character
    if len(stackIdx) > 0:
        return stackIdx[-1]+1
    return None


def testBrackets(s):
    errPosition = checkBrackets(s)
    if errPosition:
        return errPosition
    else:
        return ""Success""


s = input()
print(testBrackets(s)) -End,"
 n,m = map(int, input().split())
print(int(1+1+n+n*m+n*m*(m-1)/2)) -End,"
 n=int(input())
times = list(map(int, input().split(' ')))
times = [i[0] for i in sorted(enumerate(times), key=lambda x:x[1])]
print(' '.join(map(str, times)))
 -End,"
 a=int(input())
b=int(input())
print((b*(b+1) - a*(a-1))//2) -End,"
 def composition(*funs):
    def f(funs, x):
        if not funs:
            return x
        if len(funs) == 1:
            return funs[0](x)
        return f(funs[0:-1], funs[-1](x))
    return lambda x: f(funs, x) -End,"
 def meanAge(records):
    nlist = filter(lambda r: 'age' in r.keys(), records)
    ageslist = list(map(lambda r: r['age'], nlist))
    if ageslist:
        return sum(ageslist) / len(ageslist)
 -End,"
 from functools import reduce

def meanAge(records):
    def procAges(res, item):
        return (res[0] + 1, res[1] + item)
    fList = filter(lambda r: 'age' in r.keys(), records)
    agesList = map(lambda r: r['age'], fList)
    res = reduce(procAges, agesList, (0,0))
    if res[0]:
        return res[1] / res[0] -End,"
 def quickPower(base, power):
    ''' (int, int) => int
        return base raising to power '''
    if power < 0:
        return 1 / quickPower(base, -power)
    if power == 0:
        return 1
    if power == 1:
        return base
    half = quickPower(base, power // 2)
    return half * half * (base if power % 2 else 1) -End,"
 def isPalindrome(s):
    def doPalindrome(s, res):
        if res and len(s):
            return doPalindrome(s[1:-1], s[0] == s[-1])
        else:
            return res
    return doPalindrome(s, True)
 -End,"
 def flatten(d):
    def flatt(d, res, prefix):
        if type(d) != dict:
            res[prefix] = d
            return res
        dotPrefix = prefix + ("""" if len(prefix) == 0 else ""."")
        for k in d:
            res = flatt(d[k], res, dotPrefix + k)
        return res
    
    return flatt(d, {}, """")
 -End,"
 def bucket(*decargs, **deckwargs):
    def arguedDecorator(f):
        def newF(f):
            return (decargs, deckwargs, f)
        return newF
    return arguedDecorator
 -End,"
 def makeDecorator(decorator):
    def newFunDecorator(f):
        def newArgsDecorator(*args, **kwargs):
            return decorator(f, *args, **kwargs)
        return newArgsDecorator
    return newFunDecorator -End,"
 def mean(*args):
    return sum(*args) / len(*args)

def var(*args):
    m = mean(*args)
    return sum(map(lambda x: (x - m)**2, *args)) / len(*args)
    

def stdv(*args):
    from math import sqrt
    return sqrt(var(*args))
 -End,"
 from functools import reduce

# you are only asked to implement a function maximum
def maximum(x):
    return reduce(lambda res, it: it if it > res else res, x, float('-infinity')) -End,"
 def findTheTriple():
    alpha = 1000
    board = alpha ** 2 / 2
    a,b = [(a,b) for a in range(1,998) for b in range(a,998) if alpha*(a+b) - a*b == board][0]
    return {a, b, 1000 - a - b}
 -End,"
 # you are only asked to implement a function maximum
def maximum(x):
    def maxHelper(values, minVal):
        if not values:
            return minVal
        return maxHelper(values[1:], values[0] if values[0] > minVal else minVal)
    return maxHelper(x, float('-infinity'))
 -End,"
 from functools import partial
from operator import __eq__

# you are only asked to implement functions myAll, myAny, elem
def booleanHelper(s, boolValue):
    ''' For a got sequence of boolean return if the sequence
        contains the specified value.
        s - iterable, sequence.
        boolValue - boolean, value to find.
    '''
    try:
        nextVal = next(s)
        return True if nextVal == boolValue else booleanHelper(s, boolValue)
    except:
        return False
    return False

def myAll(pred, s):
    return not booleanHelper(map(pred, s), False)

def myAny(pred, s):
    return booleanHelper(map(pred, s), True)


elem = lambda x: partial(myAny, partial(__eq__, x)) -End,"
 from functools import partial

# you are only asked to implement a function sampleCount
def countMatches(match, cnt, s):
    if match and s:
        idx = s.find(match)
        return cnt if idx == -1 else countMatches(match, cnt+1, s[idx+1:])
    return cnt

sampleCount = lambda match: lambda strings: sum(map(partial(countMatches, match, 0), strings))
 -End,"
 from functools import reduce

def codeGenerator(inputFun, stopCode = '0'):
    while True:
        code = input()
        if code == stopCode:
            break
        yield code
        

print(reduce(max, map(int, codeGenerator(input))))
 -End,"
 from functools import reduce

def codeGenerator(inputFun, stopCode = '0'):
    while True:
        code = input()
        if code == stopCode:
            break
        yield code
        
s, cnt = reduce(lambda p, value: (p[0]+value, p[1]+1), map(int, codeGenerator(input)), (0, 0))
print(s / cnt) -End,"
 from itertools import accumulate, tee, takewhile, chain

def inputGenerator():
    while True:
        yield input()

it = map(int, inputGenerator())
itSum, itSum2 = tee(it)
sumForZero = chain(takewhile(lambda x: x != 0, accumulate(itSum)), [0])
itemsForZeroSum = map(lambda x: x[1], zip(sumForZero, itSum2))
res = sum(map(lambda x: x*x, itemsForZeroSum))
print(res)
 -End,"
 from itertools import takewhile

def inputGen():
    while True:
        yield input()
        

print(sum(map(int, takewhile(lambda x: x != '0', inputGen())))) -End,"
 from itertools import islice

def numGen():
    i = 0
    while True:
        i += 1
        for _ in range(i):
            yield i

n = int(input())        
print("" "".join(map(str, islice(numGen(), n)))) -End,"
 n = int(input())

for x in filter(lambda x: x <= n, [2**i for i in range(n)]):
    print(x)
 -End,"
 n = int(input())
for i in filter(lambda y: y<=n, map(lambda x: x**2, range(1,n+1))):
    print(i)
                     -End,"
 from toolz import compose

iinput = compose(int, input)

print(sum(filter(lambda x: x%10 == 4, [iinput() for _ in range(iinput())]))) -End,"
 n = int(input())
grades = [0]*4
for _ in range(n):
    g = int(input())
    grades[g-2] += 1
    
print("" "".join(map(str, grades)))
 -End,"
 def isDivBy3(n):
    if n < 10:
        return (n in [3,6,9])
    return isDivBy3(sum(map(int, list(str(n)))))

print('YES' if isDivBy3(int(input())) else 'NO')
     -End,"
 def lmap(f, *args):
    return [f(*x) for x in zip(*args)]

def lfilter(f, values):
    return [x for x in values if f(x)]
 -End,"
 from functools import reduce
from itertools import takewhile, tee
from math import sqrt

def inputGen():
    while True:
        yield input()
        
def mean(x, correct=False):
    res = reduce(lambda p, i: [p[0]+1, p[1]+i], x, [0, 0])
    if correct:
        res[0] -= 1
    return (res[1] / res[0]) if res[0] else 0

def std(x):
    gens = tee(x)
    mm = mean(gens[0])
    return sqrt(mean(map(lambda i: (i-mm)**2, gens[1]), True))


print(std(takewhile(lambda x: x != 0, map(int, inputGen()))))
 -End,"
 def toCamelCase(s):
    ss = s.split('_')
    return ''.join(map(lambda x: x[0].upper() + x[1:].lower(), ss))
    
print(toCamelCase(input())) -End,"
 # convert from unit to meters
scales = {
'mile': 1609, 
'yard': 0.9144, 
'foot': 0.3048, 
'inch': 0.0254, 
'km': 1000, 
'm': 1,
'cm': 0.01,
'mm': 0.001 }


# val - float - number to convert
# fr - a name of the unit to convert from
# to - a name of the unit to convert to
def convert(fr, to, val):
    if val == 0:
        return 0
    fromK = scales[fr]
    toK = scales[to]
    if fromK is None or toK is None:
        return val
    return (val * fromK) / toK
 

s = input().split()
print(""{:.2e}"".format(convert(s[1], s[3], float(s[0]))))
 -End,"
 s = input().split(' ')
res = sum([1 for x in s if x.lower() == 'a']) / len(s)
print(""{:0.2f}"".format(res))
 -End,"
 from itertools import takewhile

def inputGen():
    while True:
        yield input()
        
for n in filter(lambda x: x >= 10, takewhile(lambda x: x <= 100, map(int, inputGen()))):
    print(n)
 -End,"
 from itertools import chain, tee
from functools import reduce
from operator import add


def initDigits():
    ''' () => {LCD parameters}
        Return parameters of LCD display.
        It is used for other functions,
        as a LCDparams argument. '''
    numbers = [' --      --  --      --  --  --  --  -- ',
               '|  |   |   |   ||  ||   |      ||  ||  |',
               '|  |   |   |   ||  ||   |      ||  ||  |',
               '         --  --  --  --  --      --  -- ',
               '|  |   ||      |   |   ||  |   ||  |   |',
               '|  |   ||      |   |   ||  |   ||  |   |',
               ' --      --  --      --  --      --  -- ']
    return {'height': 7, # height of a sign on the display
            'numbers': numbers, # String representations of signs
            'width': 4} # With of numbers


def charToSign(LCDparams, c):
    ''' (char) => [str]
        Gets an list of characters and return list
        of signs. Each sign is a list of strings
        represent of character on LCD display.
    '''
    if c == ' ':
        return [' '] * LCDparams['height']
    try:
        d = int(c)
    except ValueError:
        return [''] * LCDparams['height']
    if d < 0 or d > 9:
        return [''] * LCDparams['height']
    width = LCDparams['width']
    start = width * d
    end = start + width
    return [line[start:end] for line in LCDparams['numbers']]


def sparce(chars):
    ''' ([char]) => [char])
        Take a list of chars and insert space between them.
        ['1','2','3'] => ['1', ' ', '2', ' ', '3']
    '''
    concat = lambda res, val: res + [' '] + [val] if res else [val]
    return reduce(concat, chars, [])


def signWidth(sign):
    if sign:
        return len(sign[0])
    return 0


def addBorder(LCDparams, signs):
    ''' ([[str]]) => str
        Takes a list of signs and return list of signs
        with border. For each sign it adds string of
        border up and down. And for left and right
        borders it adds first and last signs of border.
    '''
    Iters = tee(signs)
    widths = map(signWidth, Iters[0])
    closedSigns = map(lambda s, w: ['-'*w] + s + ['-'*w], Iters[1], widths)
    verticalBorder = [['x'] + ['|'] * LCDparams['height'] + ['x']]
    return chain(verticalBorder, closedSigns, verticalBorder)


def signsAsString(LCDparams, signs):
    ''' ([[str]]) => str
        Takes a list of digit representations and
        make a string to show on the display.
    '''
    lines = reduce(lambda res, val: map(add, res, val), signs)
    return ""\n"".join(lines)

                 
def getLCDstring(LCDparams, s):
    ''' (str) => str
        Takes string with digits and return string
        representation of LCD screen.'''
    chars = sparce(s)
    signs = map(lambda c: charToSign(LCDparams, c), chars)
    signs = addBorder(LCDparams, signs)
    return signsAsString(LCDparams, signs)


LCDparams = initDigits()
s = input()
print(getLCDstring(LCDparams, s))
 -End,"
 from itertools import chain, tee
from functools import reduce
from operator import add


def initDigits():
    ''' () => {LCD parameters}
        Return parameters of LCD display.
        It is used for other functions,
        as a LCDparams argument. '''
    numbers = [' --      --  --      --  --  --  --  -- ',
               '|  |   |   |   ||  ||   |      ||  ||  |',
               '|  |   |   |   ||  ||   |      ||  ||  |',
               '         --  --  --  --  --      --  -- ',
               '|  |   ||      |   |   ||  |   ||  |   |',
               '|  |   ||      |   |   ||  |   ||  |   |',
               ' --      --  --      --  --      --  -- ']
    return {'height': 7, # height of a sign on the display
            'numbers': numbers, # String representations of signs
            'width': 4} # With of numbers


def charToSign(LCDparams, c):
    ''' (char) => [str]
        Gets an list of characters and return list
        of signs. Each sign is a list of strings
        represent of character on LCD display.
    '''
    if c == ' ':
        return [' '] * LCDparams['height']
    try:
        d = int(c)
    except ValueError:
        return [''] * LCDparams['height']
    if d < 0 or d > 9:
        return [''] * LCDparams['height']
    width = LCDparams['width']
    start = width * d
    end = start + width
    return [line[start:end] for line in LCDparams['numbers']]


def sparce(chars):
    ''' ([char]) => [char])
        Take a list of chars and insert space between them.
        ['1','2','3'] => ['1', ' ', '2', ' ', '3']
    '''
    concat = lambda res, val: res + [' '] + [val] if res else [val]
    return reduce(concat, chars, [])


def signWidth(sign):
    if sign:
        return len(sign[0])
    return 0


def addBorder(LCDparams, signs):
    ''' ([[str]]) => str
        Takes a list of signs and return list of signs
        with border. For each sign it adds string of
        border up and down. And for left and right
        borders it adds first and last signs of border.
    '''
    Iters = tee(signs)
    widths = map(signWidth, Iters[0])
    closedSigns = map(lambda s, w: ['-'*w] + s + ['-'*w], Iters[1], widths)
    verticalBorder = [['x'] + ['|'] * LCDparams['height'] + ['x']]
    return chain(verticalBorder, closedSigns, verticalBorder)


def signsAsString(LCDparams, signs):
    ''' ([[str]]) => str
        Takes a list of digit representations and
        make a string to show on the display.
    '''
    lines = reduce(lambda res, val: map(add, res, val), signs)
    return ""\n"".join(lines)

                 
def getLCDstring(LCDparams, s):
    ''' (str) => str
        Takes string with digits and return string
        representation of LCD screen.'''
    chars = sparce(s)
    signs = map(lambda c: charToSign(LCDparams, c), chars)
    signs = addBorder(LCDparams, signs)
    return signsAsString(LCDparams, signs)


LCDparams = initDigits()
s = input()
print(getLCDstring(LCDparams, s))
 -End,"
 counts = {}
for n in map(int, input().split()):
    if not n in counts:
        counts[n] = 1
    else:
        counts[n] += 1
print(*[key for key, cnt in counts.items() if cnt > 1])
     -End,"
 lenWords = map(len, input().split(' '))
counts = {}
for wlen in lenWords:
    if wlen in counts:
        counts[wlen] += 1
    else:
        counts[wlen] = 1
for wlen in sorted(counts.keys()):
    print(""{}: {}"".format(wlen, counts[wlen]))
 -End,"
 pow = lambda b: lambda e: e(b) -End,"
 orr = lambda b1: lambda b2: b1(b1)(b2)
 -End,"
 from math import floor

def deposit(dollars, cents, percent, years):
    p = 1.0 + percent / 100.0
    x = dollars*100 + cents
    for _ in range(years):
        x = floor(x * p)
    res_dollars = int(x // 100)
    res_cents = round(x % 100)
    return res_dollars, res_cents

finp = lambda: float(input())
p = int(input())
x = int(input())
y = int(input())
k = int(input())

dep = deposit(x, y, p, k)
print(dep[0], dep[1])
 -End,"
 # you are only asked to implement a function isZero

true = lambda x: lambda y: x
false = lambda x: lambda y: y

def isZero(numeral):
    falseGetter = lambda x: false
    return numeral(falseGetter)(true)
 -End,"
 from itertools import product


class GameOfLife():
    def __init__(self, width, height, strs):
        """""" (int, int, str) => obj
        GOL constructor.""""""
        self.width = width
        self.height = height
        self.field = strs
        self.fillCell = ""X""
        self.emptyCell = "".""

    def __createField(self):
        """""" Creates empty field for the game obj.""""""
        self.field = [[0]*self.width for _ in range(self.height)]
        
    @staticmethod
    def getMovesToNeighbours():
        """""" () => iterator((int, int))
        Returns iterator which gives all possible
        movements from any cell to it's
        neighbours.""""""
        directions = (-1, 0, 1)
        return filter(lambda x: x[0] or x[1],
                      product(directions, directions))

    def getNewCoords(self, cell, move):
        """"""((int, int), (int, int)) => (int, int)
        Compute new coords in the field of the game,
        by summ coordinates of the given cell and
        values of move. If new coordinates are lied
        outside the field, correct them.""""""
        row = (cell[0] + move[0]) % self.height
        col = (cell[1] + move[1]) % self.width
        return (row, col)
        
    def getNeighbours(self, cell):
        """""" (tuple(int,int,...)) => iterator(iterator(int))
        By given coordinates of cell, gets iterator by
        neighbours cells, which returns iterators by
        coordinates of a neighbour cell.""""""
        return map(lambda move: self.getNewCoords(cell, move),
                   GameOfLife.getMovesToNeighbours())

    def isLiveCell(self, cell):
        """""" ((row, col) => bool
        Returns true, if cell contains life. Otherwise it returns
        false. Cell is a tuple of coordinates (row, col).""""""
        return self.field[cell[0]][cell[1]] == self.fillCell

    def willLive(self, state, nbs):
        """"""(char, int) => char
        Define will cell of given state be alive
        on the next step, if it has ngs neighbours.""""""
        if state == self.emptyCell:
            return self.fillCell if nbs == 3 else self.emptyCell
        return self.fillCell if nbs in [2,3] else self.emptyCell
        
    def countNeighbours(self, cell):
        """""" ((int, int)) => int
        Count number of neighbours alive in the field.
        Cell is a tuple of coordinates (row, col).""""""
        return sum(map(lambda x: gol.isLiveCell(x),
                       self.getNeighbours((cell))))
            
    def countAllNeighbours(self):
        """""" () => [[int]]
        Return array with counts of neighbours for
        every cell on the field of the game.""""""
        res = [[self.countNeighbours((h, w))
                for w in range(self.width)]
               for h in range(self.height)]
        return res
    
    def getNextState(self):
        """"""() => [str]
        Return new field next to the current.""""""
        nbCnt = self.countAllNeighbours()
        res = ["""".join([self.willLive(state, nbs) for state, nbs in zline])
               for zline in map(zip, self.field, nbCnt)]
        return res

    @staticmethod
    def fieldToStr(field):
        return ""\n"".join(field)


h,w = map(int, input().split(' '))
strs = [input() for _ in range(h)]
gol = GameOfLife(w, h, strs)
next = gol.getNextState()
print(GameOfLife.fieldToStr(next))
 -End,"
 def fib(n):
    f1 = 1
    f2 = 0
    for _ in range(n-1):
        f1, f2 = f1+f2, f1
    return f1

def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main() -End,"
 class multifilter:
    def judge_half(pos, neg):
        # accepts the element, if at least half of the functions accept this element (pos >= neg)
        return pos >= neg

    def judge_any(pos, neg):
        # accepts the element, if at least one of the functions accept it (pos >= 1)
        return pos > 0

    def judge_all(pos, neg):
        # accepts the element, if at all functions accept it (neg == 0)
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        # iterable - the original sequence
        # funcs - the allowing functions
        # judge - the judging function
        self.iterable = iterable
        self.funcs = funcs
        self.flen = len(funcs)
        self.judge = judge
        
    def __iter__(self):
        # returns iterator on the resulting sequence
        for x in self.iterable:
            pos = sum(map(lambda f: f(x), self.funcs))
            neg = self.flen - pos
            if self.judge(pos, neg):
                yield x
 -End,"
 from itertools import combinations

def isBeat(qs):
    """""" ([(int, int), (int, int)]) => bool
    Check if queen #1 beats queen #2 and vice-versa.
    qs - is the list of the two queens coordinates.""""""
    dx = abs(qs[0][0]-qs[1][0])
    dy = abs(qs[0][1]-qs[1][1])
    return (qs[0][0] == qs[1][0]) or (qs[0][1] == qs[1][1]) or (dx == dy)

pinput = lambda: tuple(map(int, input().split()))
qs = [pinput() for _ in range(8)]

anyBeat = any(map(isBeat, combinations(qs, 2)))

print(""YES"" if anyBeat else ""NO"")
 -End,"
 def makePrimeResidueFunc(p):
    """""" (int) => ((int) => int)
        Return function which compute residue
        of a number to the modulus p.
        p has to b a prime number. """"""
    return lambda x: x % p


def catalan(n):
    """""" Compute n-th Catalan number. """"""
    prf = makePrimeResidueFunc(1000000007)
    # Find all Catalan number less and equal
    # the n and store them in the cache.
    cCache = [0] * (n+1)
    cCache[0] = 1 # C_0 == 1
    for i in range(1, n+1):
        for k in range(1, i+1):
            s = prf(cCache[k-1] * cCache[i-k])
            cCache[i] = prf(cCache[i] + s)
    return cCache[n]


print(catalan(int(input()))) -End,"
 def denom(x):
    return x % 1000000007

def fastPow(a, p):
    if p == 1:
        return a
    t = fastPow(a, p // 2)
    t = denom(t * t)
    if p & 0x1:    
        return denom(t * a)
    else:
        return t
    
def fastDivision(a, b):
    ''' (int, int) => int
        Fast computation of denom(a // b).
        It is equal to denom(a * b^1000000005) '''
    return denom(a * fastPow(b, 1000000005))

def catalan(n):
    cn = 1 # C_0 = 1
    for k in range(1, n+1):
        newCn = denom(2 * cn)
        newCn = denom((2 * k - 1) * newCn)
        cn = fastDivision(newCn, k+1)
    return cn

n = int(input())
print(catalan(n)) -End,"
 import datetime as dt
partsOfTheDate = map(int, input().split())
days = int(input())
date = dt.date(*partsOfTheDate) + dt.timedelta(days=days)

print(date.year, date.month, date.day)
 -End,"
 def denom(x):
    return x % 1000000007

def fastPow(a, p):
    if p == 1:
        return a
    t = fastPow(a, p // 2)
    t = denom(t * t)
    if p & 0x1:    
        return denom(t * a)
    else:
        return t
    
def fastDivision(a, b):
    ''' (int, int) => int
        Fast computation of denom(a // b).
        It is equal to denom(a * b^1000000005) '''
    return denom(a * fastPow(b, 1000000005))

def catalan(n):
    cn = 1 # C_0 = 1
    for k in range(1, n+1):
        newCn = denom(2 * cn)
        newCn = denom((2 * k - 1) * newCn)
        cn = fastDivision(newCn, k+1)
    return cn

n=int(input())
print(catalan(n))
 -End,"
 import numpy as np

x_shape = tuple(map(int, input().split()))
X = np.fromiter(map(int, input().split()), np.int).reshape(x_shape)
y_shape = tuple(map(int, input().split()))
Y = np.fromiter(map(int, input().split()), np.int).reshape(y_shape)

# here goes your solution; X and Y are already defined!
if x_shape[1] != y_shape[1]:
    print(""matrix shapes do not match"")
else:
    print(X.dot(Y.T)) -End,"
 import numpy as np

readLine = lambda: map(int, input().split())
n, m = readLine()
matrix = np.array([list(readLine()) for _ in range(n)]).reshape(n,m)
i = matrix.argmax()
print(i // m, i % m)
 -End,"
 import sys

res = {}

for line in sys.stdin:
    key, val = line.split('\t')
    if key in res:
        cnt, acc = res[key]
        res[key] = (cnt + 1, acc + int(val))
    else:
        res[key] = (1, int(val))

for key in res:
    cnt, acc = res[key]
    print(""{}\t{}"".format(key, acc//cnt))
 -End,"
 from itertools import chain

def getStrangeMatrix(n):
    return [chain(range(i,0,-1), range(n-i)) 
           for i in range(n)]

def printMatrix(m):
    for line in m:
        print(*line)

n = int(input())
printMatrix(getStrangeMatrix(n)) -End,"
 from functools import reduce

def fib(n):
    return reduce(lambda res,_: (res[0]+res[1], res[0]), range(n-1), (1,0))[0]

def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main() -End,"
 import skimage.io as sio
from itertools import repeat

def getWalker(startP, endP):
    """""" Return point iterator. Each call of it will return
        a point. Iterator begin from startP, and
        finish at the endP inclusive. """"""
    if startP == endP:
        return [startP]
    def getIter(start, end):
        if start == end:
            return repeat(start)
        if start < end:
            return range(start, end+1)
        return range(start, end-1, -1)
    coordIterators = [getIter(startP[coord], endP[coord])
                      for coord in range(len(startP))]
    return zip(*coordIterators)

def countStepsUntil(walker, pred):
    cnt = 0
    for point in walker:
        if not pred(point):
            return cnt
        cnt += 1
    return 0

def frameShape(img):
    frameCol = img[0, 0]
    height, width, _ = img.shape
    cRow = height // 2
    cCol = width // 2
    zone = 50
    # Each direction is a tuple of:
    #   - start point (col, row);
    #   - endpoint (col, row).
    directions = [ # from the center of the left border by columns
                  ((cRow, 0), (cRow, zone)),
                    # from the center of the top border by rows
                  ((0, cCol), (zone, cCol)),
                    # from the center of the right border by columns
                  ((cRow, width-1), (cRow, width-1-zone)),
                    # from the center of the bottom border by rows
                  ((height-1, cCol), (height-1-zone, cCol))]
    return tuple(map(lambda d:
                     countStepsUntil(getWalker(*d),
                                     lambda p: all(img[p] == frameCol)),
                     directions))

img = sio.imread('img.png')
print(*frameShape(img), sep=' ') -End,"
 def log(x, n=0):
    if x <= 1:
        return n
    return log(x // 2, n+1)

n = int(input())
for _ in range(n):
    a = int(input())
    print(int(log(a)))



 -End,"
 from math import sqrt

def distance(p1, p2):
    return sqrt(sum([pow(p1[i] - p2[i], 2) for i in range(len(p1))]))

nextFloat = lambda: float(input())
p1 = (nextFloat(), nextFloat())
p2 = (nextFloat(), nextFloat())
print(distance(p1, p2))
 -End,"
 nextIntLine = lambda: list(map(int, input().split()))
n, m = nextIntLine()
a = [nextIntLine() for _ in range(n)]
i, j = nextIntLine()
i, j = min(i, j), max(i, j)

if i == j:
    for row in a:
        print(*row)
else:
    for row in a:
        print(*row[:i], row[j], *row[i+1:j], row[i], *row[j+1:])
 -End,"
 from itertools import starmap

def IsPointInCircle(p, pc, r):
    dist2 = sum(starmap(lambda x,y: (x-y)**2, zip(pc, p)))
    return dist2 <= r**2

x, y, xc, yc, r = map(lambda _: float(input()), range(5))
print('YES' if IsPointInCircle((x, y), (xc, yc), r) else 'NO')
 -End,"
 from itertools import islice, chain, repeat, count, chain

def getLine(m, row):
    start = (row * m + 1) // 2 + 1
    if row & 1:
        seq = (repeat(0), count(start))
    else:
        seq = (count(start), repeat(0))
    return islice(chain.from_iterable(zip(*seq)), 0, m)
                
n, m = map(int, input().split())
for row in range(n):
    lineSeq = getLine(m, row)
    print(*map(lambda n: ""{:>4}"".format(n), lineSeq), sep='', end='\n')
 -End,"
 def modify_list(l):
    idx = 0
    while idx < len(l):
        if l[idx] & 1:
            del(l[idx])
        else:
            l[idx] //= 2
            idx += 1
 -End,"
 import numpy as np

def dynamic(item_count, capacity, items, debug=False):
    # dynamic algorithm
    d = np.zeros((capacity+1, item_count), dtype=int)
    value = 0
    weightLeft = capacity

    # установим для первого предмета ценность начиная
    # с емкосит способной его вместить
    d[items[0, 2]:, 0] = items[0, 1]
    
    for idx in range(1, item_count):
        prevIdx = idx - 1
        vi, wi = items[idx, 1:]
        # Все что меньше емкости текущего предмета
        # заполняем емкостями из предыдущей колонки.
        d[:wi-1, idx] = d[:wi-1, prevIdx]
        
        for curCap in range(wi, capacity+1):
            #Значение слева: если текущий предмет не используем.
            leftValue = d[curCap, prevIdx]
            #Значение по диагонали: если используем тек. предмет.
            diagValue = d[curCap - wi, prevIdx] + vi
            d[curCap, idx] = max(leftValue, diagValue)
            
    # Проходим обратно и собираем решение
    value = d[-1, -1]
    taken = np.full((item_count), ""0"", dtype=str)
    curCap = capacity
    idx = item_count-1
    while curCap > 0 and idx > 0:
        if d[curCap, idx] != d[curCap, idx-1]:
            #Текущий предмет был взят.
            taken[idx] = '1'
            curCap -= items[idx, 2]
        idx -= 1
        
    if curCap > 0 and d[curCap, 0]:
        taken[0] = '1'
    
    # prepare the solution in the specified output format
    outs = ' '.join(taken.flatten())
    if debug:
        allWeight = sum(map(lambda it: it[2], (filter(lambda it: taken[it[0]] == '1', items))))
        return ""{} 1\n{}"".format(value, outs), allWeight, taken, items, d
    return value, outs

def getItems(input_data, item_count):
    ''' items is [[idx, value, weight]] '''
    items = np.fromstring(input_data, dtype=int, sep=' ')
    i2 = items.copy()
    items = items.reshape((item_count,1))
    i3 = np.insert(items, 0, i2, axis=1)
    items = np.insert(i3, 0, range(0, item_count), axis=1)
    return items

getIntLine = lambda: map(int, input().split())

w,n = getIntLine()
items = getItems(input(), n)
value, outs = dynamic(n, w, items)

print(value)
 -End,"
 def pairsIter(s):
    cc = None
    for c in s:
        if not cc:
            cc = c
        else:
            yield cc + c
            cc = None
    
d = {'00':'A', '01':'C', '10':'G', '11':'T'}
print(*map(lambda c: d[c], pairsIter(input())), sep='')
 -End,"
 from functools import total_ordering, reduce
from operator import sub, eq
from itertools import starmap
from collections import Counter


@total_ordering
class Card:
    values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    suits = ['C', 'D', 'H', 'S']
    value_index = {v: i for i, v in enumerate(values)}
    suit_index = {s: i for i, s in enumerate(suits)}
    def __init__(self, name):
        self.suit = name[-1]
        self.value = name[:-1]
        self.suit_idx = Card.suit_index[self.suit]
        self.value_idx = Card.value_index[self.value]
        self.rank = self.value_idx + 2

    def same_suit(self, other):
        return self.suit_idx == other.suit_idx
        
    def __eq__(self, other):
        return self.suit_idx == other.suit_idx \
               and self.value_idx == other.value_idx

    def __lt__(self, other):
        if self.value_idx == other.value_idx:
            return self.suit_idx < other.suit_idx
        return self.value_idx < other.value_idx

    def __sub__(self, subtrahend):
        return self.value_idx - subtrahend.value_idx
        
    def __str__(self):
        return self.value + self.suit

    
class PokerHand():
    rank_detectors = [
        (""Royal Flush"", lambda ph: ph.is_royal_flush()),
        (""Straight Flush"", lambda ph: ph.is_straight_flush()),
        (""Four of a Kind"", lambda ph: ph.is_count_values(4)),
        (""Full House"", lambda ph: ph.is_full_house()),
        (""Flush"", lambda ph: ph.is_flush()),
        (""Straight"", lambda ph: ph.is_straight()),
        (""Three of a Kind"", lambda ph: ph.is_count_values(3)),
        (""Two Pairs"", lambda ph: ph.is_two_pairs()),
        (""Pair"", lambda ph: ph.is_count_values(2)) ]
    
    def __init__(self, cards):
        self.cards = sorted(cards)
        
    def rank_name(self):
        for name, detector in PokerHand.rank_detectors:
            if detector(self):
                return name
        return 'High Card'
    
    def same_suit(self):
        first = self.cards[0]
        return all(map(lambda c: c.same_suit(first), self.cards[1:]))

    def count_values(self):
        res = Counter(map(lambda card: card.value, self.cards))
        return res.most_common(5)

    def count_suits(self):
        res = Counter(map(lambda card: card.suit, self.cards))
        return res.most_common(5)

    def is_count_values(self, count):
        cnt = self.count_values()
        return cnt[0][1] == count
    
    def is_royal_flush(self):
        if not self.same_suit():
            return False
        for card, value in zip(self.cards, Card.values[8:]):
            if card.value != value:
                return False
        return True
    
    def is_straight_flush(self):
        return self.same_suit() and self.is_straight()

    def is_full_house(self):
        cnt = self.count_values()
        return cnt[0][1] == 3 and cnt[1][1] == 2

    def is_flush(self):
        cnt = self.count_suits()
        return cnt[0][1] == 5

    def is_straight(self):
        difs = starmap(sub, zip(self.cards[1:], self.cards[:-1]))        
        return all(map(lambda x: x == 1, difs))

    def is_two_pairs(self):
        cnt = self.count_values()
        return cnt[0][1] >= 2 and cnt[1][1] == 2
    
    def __str__(self):
        return "" "".join(map(str, self.cards))


if __name__ == ""__main__"":
    cards = map(Card, input().split())
    ph = PokerHand(cards)
    print(ph.rank_name())
 -End,"
 class NonPositiveError(Exception):
    pass


class PositiveList(list):
    def append(self, x):
        if x <= 0:
            raise NonPositiveError
        super(PositiveList, self).append(x)
 -End,"
 try:
    foo()
except ZeroDivisionError:
    print(""ZeroDivisionError"")
except ArithmeticError:
    print(""ArithmeticError"")
except AssertionError:
    print(""AssertionError"")

 -End,"
 from operator import add, sub, floordiv, mul

class ExtendedStack(list):
    def __op2__(self, f):
        a = self.pop()
        b = self.pop()
        self.append(f(a,b))
        
    def sum(self):
        self.__op2__(add)

    def sub(self):
        self.__op2__(sub)

    def mul(self):
        self.__op2__(mul)

    def div(self):
        self.__op2__(floordiv)

 -End,"
 def count_rabbit_steps(k, n):
    cnt = [0]*(n+1)
    cnt[0] = 1
    cnt[1] = 1
    for pos in range(2,n+1):
        lo_pos = max(0, pos - k) # if we make k steps from pos
        # count number of possible ways from pos down the ladder
        num = 0
        for x in range(lo_pos, pos):
            num += cnt[x]
        cnt[pos] = num
    return cnt[n]

k, n = map(int, input().split())
print(count_rabbit_steps(k, n))
 -End,"
 from math import floor, sqrt

def get_terms(n):
    k = floor((sqrt(1 + 8 * n) - 1.0) / 2.0)
    terms = list(range(1,k+1))
    delta = n - k * (k + 1) // 2
    for i in range(k-1,k-delta-1,-1):
        terms[i] += 1
    return terms
    
n = int(input())
terms = get_terms(n)
print(len(terms))
print("" "".join(map(str, terms)))
 -End,"
 res = filter(lambda x: abs(x[1][0]-x[1][1]) == 1, enumerate(zip(L[1:], L[:-1])))
index = next(res)[0]
 -End,"
 def counter(T):
    return max(map(lambda s: (len(set(s.lower())), len(s)), T))[1]




 -End,"
 def factorial(n):
    res = 1
    for x in range(2, n+1):
        res *= x
    return res

def sf(n):
    res = 1
    for x in range(2, n+1):
        res *= x ** (n-x+1)
    return res -End,"
 def numerics(n):
    return [n // 1000,
            (n % 1000) // 100,
            (n % 100) // 10,
             n % 10]
 -End,"
 def kaprekar_step(L):
    min_n = sorted(L)
    max_n = min_n[::-1]
    powers = map(lambda x: 10**x, range(len(L)-1, -1, -1))
    return sum(map(lambda t: (t[0] - t[1]) * t[2], zip(max_n, min_n, powers)))
 -End,"
 def numerics(n):
    return [n // 1000,
            (n % 1000) // 100,
            (n % 100) // 10,
             n % 10]

def kaprekar_step(L):
    min_n = sorted(L)
    max_n = min_n[::-1]
    powers = map(lambda x: 10**x, range(len(L)-1, -1, -1))
    return sum(map(lambda t: (t[0] - t[1]) * t[2], zip(max_n, min_n, powers)))

def kaprekar_loop(n, f=print):
    def kgen(n):
        yield n
        while n != 6174:
            n = kaprekar_step(numerics(n))
            yield n
    any(map(f, kgen(n)))
                
 -End,"
 n = int(input()) # Input and convert to int
sum_n_k = lambda n, k: k * (n // k) * (n // k + 1) // 2
res = sum_n_k(n, 5) - sum_n_k(n, 15)
print(res)




 -End,"
 X = int(input())
if X % 10 == 1 and X % 100 != 11: 
    S = ''
elif X % 10 >= 2 and X % 10 <= 4 and (X % 100 < 10 or X % 100 > 20):
    S = 'а'
else:
    S = 'ов'
print (X, 'программист' + S)




 -End,"
 a = [int(i) for i in input().split()]
i = 0;
while i < len(a):
    n = 0     
    k = a [i]
    j = i + 1
    while j < len(a):
        if k == a[j]:
            a.pop (j)
            n += 1
        else:
            j += 1
    if n > 0:
        print (k, end=' ')
    i += 1




 -End,"
 def makekey (a, b):
    r = [-1 for i in range(256)]
    for i in range (len (a)):
        r [ord (a [i])] = ord (b [i])
    return r
def replace (k, s):
    r = ''
    for i in range (len (s)):
        p = ord (s [i])
        if k [p] >= 0:
            r += chr (k [p])
        else:
            r += s [i]
    return r
x = input()
y = input()
print (replace (makekey (x, y), input()))
print (replace (makekey (y, x), input()))




 -End,"
 mem = {'global': [None,]}
n = int(input())
for i in range(n):
    cmd, scope, parm = map(str, input().split())
    if cmd == 'create':
         mem.update ({scope : [parm]})
    elif cmd == 'add':
        mem [scope].append(parm)
    else:
        find = None;
        while scope != None and find == None:
            var = mem [scope]
            for i in range (1, len (var)):
                if var [i] == parm:
                    find = scope
                    break
            scope = mem [scope] [0]
        print (find)




 -End,"
 class Buffer:
    def __init__(self):
        self.mem = []

    def add(self, *args):
        a = len (self.mem)
        b = len (args)
        i = 0
        while a + b - i >= 5:
            if a > 0:
                r = sum (self.mem)
                j = 5 - a
                a = 0;
                self.mem = []
            else:
                r = 0
                j = 5
            r += sum (args [i : i + j])
            print (r)
            i += j
        self.mem += list (args [i:])
        
    def get_current_part(self):
        return self.mem
 -End,"
 try:
    foo()
except (ZeroDivisionError, AssertionError) as e:
    print(type (e).__name__)
except ArithmeticError:
    print(type (ArithmeticError()).__name__)




 -End,"
 objs = {}
uses = []
def test (parent, child):
    return parent == child or any(map(lambda select: test(parent, select), objs[child]))
for i in range(int(input())):
    line = input().split()
    objs [line[0]] = line[2:]
for i in range(int(input())):
    line = input()
    new = True;
    for e in uses:
        if test (e, line):
            print (line)
            new = False
            break
    if new:
        uses += [line]




 -End,"
 objs = {}
uses = []
def test (parent, child):
    return parent == child or any(map(lambda select: test(parent, select), objs[child]))
for i in range(int(input())):
    line = input().split()
    objs [line[0]] = line[2:]
for i in range(int(input())):
    line = input()
    if any (test (e, line) for e in uses):
        print (line)
    else:
        uses += [line]




 -End,"
 import datetime
r = datetime.date(*(int(i) for i in input().split())) + datetime.timedelta(days=int(input()))
print(r.year, r.month, r.day)




 -End,"
 def primes():
    n = 2
    yield n
    n += 1
    while True:
        if n % 2 != 0 and not any (n % i == 0 for i in range(3, n // 2, 2)):
            yield n
        n += 1




 -End,"
 s = input()
t = input()
p = s.find(t)
n = 0
while p >= 0:
    p = s.find(t, p + 1)
    n += 1
print(n)




 -End,"
 import re
import requests

def find_url (url_A, url_B, find_next = True):
    doc = requests.get(url_A)
    if doc.status_code == requests.codes.ok:
        url = re.findall(r'<a.*href=""([^""]*)""', doc.text)
        if find_next:
            return any (find_url (u, url_B, False) for u in url)
        else:
            return any (u == url_B for u in url)
    return False   

print ('Yes' if find_url (input (), input ()) else 'No')





 -End,"
 import re
import requests
from urllib.parse import urlparse

sites = set()
doc = requests.get(input ())
for url in re.findall(r'<a.+href=[\'""]([^./][^\'""]*)[\'""]', doc.text):
    s = urlparse(url).netloc
    if s:
        p = s.find(':', 3)
        if p > 0: s = s[:p]
        sites.add(s)
for site in sorted(sites):
    print(site)




 -End,"
 import json

data = json.loads(input())
t_name = 'name'
t_parents = 'parents'
objects = {}

def graph(parent, result):
    result.add(parent)
    for child in objects[parent] - result:
        graph(child, result)
    return result

for row in (data):
    child = row[t_name]
    if child not in objects:
        objects[child] = set()
    for parent in row[t_parents]:
        if parent not in objects:
            objects[parent] = set()
        objects[parent].add(child)

for parent in sorted(objects.keys()):
    print(parent, ':', len(graph(parent, set())))






 -End,"
 import xml.etree.ElementTree as ET
 
colors = {'red': 0, 'green': 0, 'blue': 0}
cube = 'cube'
attr = 'color'
 
def cubes_tree(item, weight):
    for e in item.findall(cube):
        cubes_tree(e, weight + 1)
    colors[item.attrib[attr]] += weight
    
tree = ET.ElementTree(ET.fromstring(input()))
cubes_tree(tree.getroot(), 1)
print(*colors.values())




 -End,"
 def modify_list(lst):
    i = 0
    while i < len(lst):
        if lst[i] & 1:
            lst.pop(i)
        else:
            lst[i] //= 2
            i += 1




 -End,"
 def modify_list(lst):
    i = 0
    while i < len(lst):
        if lst[i] & 1:
            lst.pop(i)
        else:
            lst[i] >>= 1
            i += 1




 -End,"
 cards = '67891JQKA'
reply = ('Second', 'Error', 'First')

a, b = map(str,input().split())
x = a [-1]
y = b [-1]
if x == y:
    r = cards.find (a [0]) - cards.find (b [0])
    if r > 1:
        r = 1
    elif r < -1:
        r = -1
else:
    w = input()
    if x == w:
        r = 1
    elif y == w:
        r = -1
    else:
        r = 0
print (reply [r + 1])




 -End,"
 chars = ' abcdefghijklmnopqrstuvwxyz'
limit = len (chars)

shift = int(input())
s = input().strip()
r = ''
for c in s:
    r += chars[(chars.find(c) + shift) % limit]
print (f'Result: ""{r}""')




 -End,"
 a, b = map(int, input().split('/'))
while b > 0:
    r = a // b
    _ = b
    b = a - b * r
    a = _
    print(r, end=' ')




 -End,"
 command = input()
while command != 'End':
    print (f'Processing ""{command}"" command...')
    command = input()
print ('Good bye!')




 -End,"
 n, m = map(int,input().split())
empty = '.'
life = 'X'
field=[]
for i in range (n):
    field += [list(input())]
for i in range(n):
    for j in range(m):
        a = (i + 1) % n
        b = (j + 1) % m
        c = i - 1
        d = j - 1
        count=0
        if field[i][b] == life: count+=1
        if field[i][d] == life: count+=1
        if field[a][j] == life: count+=1
        if field[a][b] == life: count+=1
        if field[a][d] == life: count+=1
        if field[c][j] == life: count+=1
        if field[c][b] == life: count+=1
        if field[c][d] == life: count+=1
        if ((count == 3 and field[i][j] == empty) or
            ((count == 2 or count == 3) and field[i][j] == life)):
            print(life, end='')
        else:
            print(empty, end='')
    print()




 -End,"
 from collections import Counter

items = Counter([len(i) for i in input().split()])
for i in sorted(items.keys()):
    print (i, ':', items[i])




 -End,"
 n = int(input())
while n > 1:
    print(n, end=' ')
    if n & 1:
        n = n * 3 + 1
    else:
        n >>= 1
print(1)




 -End,"
 start, stop = map (int, input().split())
for i in range (start, stop + 1):
    s = ''
    if not i % 3: s = 'Fizz'
    if not i % 5: s += 'Buzz'
    print(s if s else i)




 -End,"
 prefix= 'turn'
first = '60'
second = '-120'

def angle_koch (n):
    while n > 0:
        n -= 1
        angle_koch (n)
        print (prefix, first)
        angle_koch (n)
        print (prefix, second)
        angle_koch (n)
        print (prefix, first)

angle_koch (int(input()))




 -End,"
 import numpy

n, m = map(int, input().split())
table = [list(map(int, input().split())) for i in range(n)]
for row in numpy.array(table).transpose():
    print (*row)




 -End,"
 d1 = '    '
d2 = ' -- '
d3 = '   |'
d4 = '|   '
d5 = '|  |'
image = {0 : (d2, d5, d5, d1, d5, d5, d2),
         1 : (d1, d3, d3, d1, d3, d3, d1),
         2 : (d2, d3, d3, d2, d4, d4, d2),
         3 : (d2, d3, d3, d2, d3, d3, d2),
         4 : (d1, d5, d5, d2, d3, d3, d1),
         5 : (d2, d4, d4, d2, d3, d3, d2),
         6 : (d2, d4, d4, d2, d5, d5, d2),
         7 : (d2, d3, d3, d1, d3, d3, d1),
         8 : (d2, d5, d5, d2, d5, d5, d2),
         9 : (d2, d5, d5, d2, d3, d3, d2),
        }

line = list(map(int, ''.join(input().split())))
frame = 'x' + '-' * 5 * len(line) + 'x'
print(frame)
for i in range(7):
    print ('|', end='')
    for n in line:
        print(image[n][i], end=' ')
    print('|')
print(frame)




 -End,"
 n = int(input())
if n > 0:
    s = '1'
    for i in range(2, n + 1):
        s += (' ' + str(i)) * i
    print(s[0 : n * 2])




 -End,"
 a = list(map(int, input().split()))
x = int(input())
r = [i for i in range(len(a)) if a[i] == x]
if r:
    print(*r)
else:
    print ('None')
    




 -End,"
 from sys import stdin
from collections import Counter

n, *a = tuple(map(int, stdin.readlines()))
c = Counter(a)
for k in sorted(c.keys()):
    print (c[k], end = ' ')





 -End,"
 log, psw = tuple(input().split())
if log != '100500':
   print(f'No user with login {log} found')
else:   
    if psw != '424242':
        print('Wrong password')        
    else:
        print('Login success')





 -End,"
 start, stop = map(int, input().split())
for i in range(start, stop + 1):
    print('Fizz' * (not i % 3) + 'Buzz' * (not i % 5) or i)




 -End,"
 a, b, c, d = input().split()
if a == c or b == d or abs(int(a) - int(c)) == abs(int(b) - int(d)): 
    print('YES')
else:
    print('NO')





 -End,"
 n = int(input())
while n <= 100:
    if n >= 10:
        print(n)
    n = int(input())




 -End,"
 n = 0
for i in range(3):
    n += (int(input()) + 1) >> 1
print(n)





 -End,"
 n = input()
s = sum(map(int, tuple(n)))
print(sum(s == sum(map(int, tuple(str(i)))) for i in range(int(n))))





 -End,"
 lst = tuple(map(int, input().split()))
a = lst[0]
b = a
for i in lst:
    if i > b:
        b = i
    elif i < a:
        a = i
print(b, a)




 -End,"
 a, b, c, d = map(int, input().split())
print('YES' if abs(a - c) + abs(b - d) == 3 else 'NO')




 -End,"
 name, age = input().split()
year = 2016 + 100 - int(age)
print(f'{name}, You will be 100 years old in {year} year.')




 -End,"
 a = input().split()
print(*a[1::2], sep='\n')
print(sum(n for n in map(int, a) if not n & 1))




 -End,"
 from collections import Counter

c = Counter(input().split())
print (*(n for n in c.keys() if c[n] > 1))




 -End,"
 a = ('There is no such shape!', 'square', 'circle', 'triangle', 'rhombus',)
n = int(input())
print ('You have chosen a ' + a[n] if n in range(1, len(a)) else a[0])




 -End,"
 n, m = map(int, input().split())
a = [list(map(int, input().split())) for i in range(n)]
list(map(print, *a[::-1]))




 -End,"
 line = input()
sub = input()
k = len(sub)
n = 0
for i in range(len(line)):
    n += sub == line[i : k + i]
print (n)





 -End,"
 k, n = sorted(int(input()) for _ in range(2))
r = n
for i in range (2, k + 1):
    if r % k:
        r = n * i
    else:
        break
print(r)




 -End,"
 import itertools

k, n = map(int, input().split())
s = (i for i in range(n))
for r in itertools.combinations(s, k):
    print(*r)




 -End,"
 def f(x):
    m = 1
    for i in range(x, 2 - x & 1, -2):
        m *= i
    return m




 -End,"
 a = (int(input()) for _ in range(int(input())))
print(sum(n for n in a if not n % 6))



 -End,"
 f = input()
a = int(input())
if f == 'circle':
    s = a * a * 3.14
else:
    b = int(input())
    if f == 'triangle':
        c = int(input())
        k = (a + b + c) / 2
        s = (k * (k - a) * (k - b) * (k - c)) ** 0.5
    else:
        s = a * b
print(s)



 -End,"
 print(*sorted(map(int, input().split())))




 -End,"
 n = int(input()) / 3
print('YES' if not n - int(n) else 'NO')




 -End,"
 n = float(input())
print(str(n - int(n))[2])




 -End,"
 from sys import stdin 

a = tuple(map(int, stdin.read().split()))
n = a.index(0)
print(sum(a[:n]) / n if n > 0 else 0)





 -End,"
 n = int(input())
x = 0
y = 0
for v in map(int, input().split()):
    if v > x:
        y = x
        x = v
    elif v > y: 
        y = v         
print(y * x)





 -End,"
 print('yes' if '0' <= input() <= '9' else 'no')




 -End,"
 g = {}
n = int(input())
for i in range(n):
    s = input().split("";"")
    for j in range(0, 3, 2):
        k = s[j]
        if k in g:
            g[k][0] += 1
        else:
            g[k] = [1, 0, 0, 0, 0]
    if s[1] == s[3]:
        g[s[0]][2] += 1
        g[s[2]][2] += 1
    elif s[1] < s [3]:
        g[s[0]][3] += 1
        g[s[2]][1] += 1
    else:
        g[s[0]][1] += 1
        g[s[2]][3] += 1
for a, b in g.items():
    b[4] = 3 * b[1] + b[2]
    print(a + ':', *b)




 -End,"
 n = int(input())
e = n & 1
n -= int(e)
a = tuple(map(int, input().split()))
for i in range(0, n, 2):
    print(a[i + 1], a[i], end=' ')
if e:
    print(a[-1])





 -End,"
 import sys

for line in sys.stdin:
    if line.find('\\') >= 0:
        print(line, end='') 





 -End,"
 d = {}
for _ in range(int(input())):
    s = input().split()
    d[s[1]] = s[0]
    d[s[0]] = s[1]
print(d[input()])




 -End,"
 def primes():
    n = 2
    yield n
    n += 1
    while True:
        if n % 2 and not any(not n % i for i in range(3, n // 2, 2)):
            yield n
        n += 1




 -End,"
 import sys
import re


pattern = re.compile(r'cat.*cat') 
for line in sys.stdin: 
    if pattern.search(line):
        print(line, end='')




 -End,"
 n = 0
while input() != '0': 
    n += 1
print(n)




 -End,"
 import json


def graph(parent, result):
    result.add(parent)
    for child in objects[parent] - result:
        graph(child, result)
    return result


data = json.loads(input())
T_NAME = 'name'
T_PARENTS = 'parents'
objects = {}

for row in (data):
    child = row[T_NAME]
    if child not in objects:
        objects[child] = set()
    for parent in row[T_PARENTS]:
        if parent not in objects:
            objects[parent] = set()
        objects[parent].add(child)
        
for parent in sorted(objects.keys()):
    print(parent, ':', len(graph(parent, set())))




 -End,"
 s = input()
a = input()
b = input()
n = 0
while a in s:
    if a in b:
        n = 'Impossible'
        break
    else:
        s = s.replace(a, b)
        n += 1
print(n)





 -End,"
 n = int(input())
k = 0
i = 1
while k + i < n:
    print((str(i) + ' ') * i, end='')
    k += i
    i += 1
print((str(i) + ' ') * (n - k), end='')




 -End,"
 ip = input().split('.')
e = len(ip) == 4 and all(c.isdecimal() and 0 <= int(c) < 256 for c in ip)
print ('YES' if e else 'NO')




 -End,"
 print(''.join(map(str.capitalize, input().split('_'))))




 -End,"
 n = int(input())
h = n >> 1
r = n - 1

def star(y, x):
    return '*' if y == h or x == h or y == x or x + y == r else '.'

for i in range(n):
    print(*(star(i, j) for j in range(n)))




 -End,"
 from sys import stdin


def max_key(v):
    return 0 if v & 3 else v


print(max(map(int, stdin.read().split()), key=max_key))




 -End,"
 a = tuple(map (int, input().split()))
n = len(a)
f = [False] * n
n -= 1
r = True
for i in range(0, n): 
    k = abs(a[i] - a[i + 1])  
    if k == 0 or k > n or f[k] == True: 
        r = False
        break
    f[k] = True
print('Jolly' if r else 'Not jolly')




 -End,"
 n, k = map(int, input().split())
if 0 <= k <= n:
    a = b = 1
    for i in range(1, min(k, n - k) + 1):
        a *= n
        n -= 1
        b *= i
    r = a // b
else:
    r = 0
print(r)




 -End,"
 from fractions import Fraction


n, k = map(int, input().split())
r = 1
for i in range(k):
    r *= Fraction(n - i, i + 1)
print(r)




 -End,"
 n = int(input())
k = 1
while k <= n:
    print(k)
    k <<= 1




 -End,"
 s = input()
a = input()
b = input()
n = 0
while a in s:
    if a in b:
        n = 'Impossible'
        break
    s = s.replace(a, b)
    n += 1
print(n)





 -End,"
 n = int(input())
m = [input().split() for _ in range(n)]
k = int(input())
if k < 0:
    for i in range(-k, n): 
        print(m[i + k][i], end=' ')
else:
    for i in range(k, n):
        print(m[i][i - k], end=' ')



 -End,"
 from sys import stdin 
from numpy import std 

print(std(tuple(map(int, stdin.read().split()))[:-1], ddof=1))






 -End,"
 import sys
import re


for s in sys.stdin:
    if re.fullmatch('(1(01*0)*1|0)*', s[:-1]):
        print(s, end='')




 -End,"
 DIGITS = {'I' : 1,
          'V' : 5,
          'X' : 10,
          'L' : 50,
          'C' : 100,
          'D' : 500,
          'M' : 1000,
         }

s = input()
r = 0
for i, c in enumerate(s):
        k = i + 1
        if len(s) == k or DIGITS[c] >= DIGITS[s[k]]:
            r += DIGITS[c]
        else:
            r -= DIGITS[c]
print(r)





 -End,"
 s = input()
b = input()
c = 0
p = s.find(b)
while p >= 0:
    c += 1
    p = s.find(b, p + 1)
print(c)    





 -End,"
 a = float(input())
b = float(input())
c = float(input())
d = b * b - 4 * a * c
a *= 2
if d > 0:
    k = d ** 0.5
    x = (-b - k) / a
    y = (-b + k) / a
    if x < y: 
        print(x, y)
    else:
        print(y, x)
elif d == 0:
    print(-b / a)




 -End,"
 import xml.etree.ElementTree as ET


def cubes_tree(item, weight):
    for e in item.findall('cube'):
        cubes_tree(e, weight + 1)
    colors[item.attrib['color']] += weight


colors = dict.fromkeys(['red', 'green', 'blue'], 0)
tree = ET.ElementTree(ET.fromstring(input()))
cubes_tree(tree.getroot(), 1)
print(*colors.values())





 -End,"
 from sys import stdin
import re


for s in stdin:
    print (re.sub(r'\ba+\b', 'argh', s, count=1, flags=re.IGNORECASE), end='')





 -End,"
 def distance(row):
    return (row[0] ** 2 + row[1] ** 2) ** 0.5


n = int(input())
a = (tuple(map(int, input().split())) for _ in range(n))
for row in sorted(a, key = distance):
    print(*row)





 -End,"
 n = int(input())
a = tuple(j for j in range(n))
for i in range(n):
    k = n - i
    print(*a[i : 0 : -1], *a[: n - i])




 -End,"
 from collections import Counter
from heapq import heappush, heappop, heapify

 
Z0 = '0'
Z1 = '1'

s = input()
counts = Counter(s)
heap = [[n, [c, '']] for c, n in counts.items()]
heapify(heap)
while len(heap) > 1:
    a = heappop(heap)
    b = heappop(heap)
    for e in a[1:]:
        e[1] = Z0 + e[1]
    for e in b[1:]:
        e[1] = Z1 + e[1]
    heappush(heap, [a[0] + b[0]] + a[1:] + b[1:])
code = sorted(heappop(heap)[1:], key=lambda x: (len(x[1]), x))
if len(code) == 1: code[0][1] = Z0
for cz in code:
    s = s.replace(*cz)
print(len(counts), len(s))
for c, z in code:
    print(f'{c}: {z}')
print (s)




 -End,"
 import numpy


a = numpy.array([input().split() for _ in range(int(input()))]) 
print('YES' if numpy.all(a == a.T) else 'NO')





 -End,"
 n = int(input())
a = (tuple(map(int, input().split())) for _ in range(n))
for p in sorted(a):
    print(*p)





 -End,"
 def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    else:
        key <<= 1
        if key in d:
            d[key].append(value)
        else:
            d[key] = [value] -End,"
 from sys import stdin
import re


for s in stdin:
    if re.match(r'\b(\w+)\1\b', s):
        print(s, end='')




 -End,"
 def test (p, c):
    return p == c or any(map(lambda e: test(p, e), d[c]))


d = {}
for i in range(int(input())):
    a = input().split()
    d[a[0]] = a[2:]
for i in range(int(input())):
    a = input().split()
    print('Yes' if test(*a) else 'No')



 -End,"
 n = int(input())
k = n
for i in range(2, int(n ** 0.5)):
    e = n % i
    if not e:
        k -= k // i
        while not e:
            n //= i
            e = n % i
if n > 1:
    k -= k // n
print(k)




 -End,"
 import numpy

a = numpy.array([input().split() for _ in range(int(input()))]) 
print('YES' if numpy.all(a == a.T) else 'NO')





 -End,"
 import heapq
 
 
class heap_storage(list):
    def assign(self, array):
        super().extend(-v for v in array)
        heapq.heapify(self)
 
    def heappop(self):
        heapq.heappop(self)
 
    def heappush(self, v):
        heapq.heappush(self, -v)
 
    def get_max(self):
        return abs(self[0])
 
 
_ = input()
b = heap_storage()
b.assign(map(int, input().split()))
k = int(input())
 
z = 0
while b:
    r = 0
    a = []
    while b:
        v = b.get_max()
        r += v
        if r > k:
            break
        b.heappop()
        if v > 1:
            a.append(v >> 1)
    z += 1
    for v in a:
        b.heappush(v)
    
print(z) -End,"
 def modify_list(lst):
    i = 0
    while i < len(lst):
        if lst[i] & 1:
            lst.pop(i)
        else:
            lst[i] >>= 1
            i += 1




 -End,"
 d = []
n = int(input())
for _ in range(n):
    k, v = map(int,input().split())
    d.append([v, -k])
for v, k in sorted(d, reverse=True):
    print(-k, v)




 -End,"
 def test(parent, child):
    return parent == child or any(map(lambda select: test(parent, select), objs[child]))

objs = {}
uses = []
for i in range(int(input())):
    line = input().split()
    objs[line[0]] = line[2:]
for i in range(int(input())):
    line = input()
    if any(test (e, line) for e in uses):
        print(line)
    else:
        uses += [line]





 -End,"
 a = list(map(int, input().split()[: -1]))
z = 0
for j in range(1, len(a)):
    i = j - 1
    if a[i] > a[j]:
        a[i], a[j] = a[j], a[i]
        z += 1
print(z)




 -End,"
 x1, y1 = map(float, input().split())
x2, y2 = map(float, input().split())
x3, y3 = map(float, input().split())

print(min((x1 - x2) ** 2 + (y1 - y2) ** 2, (x1 - x3) ** 2 + (y1 - y3) ** 2))




 -End,"
 from sys import stdin
import re

for s in stdin:
    print(re.sub(r'\b(\w)(\w)', r'\2\1', s[: -1]))





 -End,"
 h, x, y = [int(input()) for _ in '123']
print((h - y - 1) // (x - y) + 1)
 -End,"
 # put your python code here
a, b, c = (float(input()) for _ in range(3))
p = (a + b + c) / 2
print((p * (p - a) * (p - b) * (p - c)) ** 0.5)
 -End,"
 # put your python code here
a, b, c = (int(input()) for _ in '123')
if a < b:
    a, b = b, a
if a < c:
    a, c = c, a
if c < b:
    b, c = c, b
print(a, '\n', b, '\n', c)
 -End,"
 # put your python code here
a = int(input())
n1 = a % 10
n2 = a % 100
if n1 == 1 and n2 != 11:
    ok = ''
elif 1 < n1 < 5 and not 11 < n2 < 15:
    ok = 'а'
else:
    ok = 'ов'
print(a, 'программист'+ok)
 -End,"
 # put your python code here
a = int(input())
if a // 100000 + a // 10000 % 10 + a // 1000 % 10 == a // 100 % 10 + a // 10 % 10 + a % 10:
    print('Счастливый')
else:
    print('Обычный')
 -End,"
 # put your python code here
a, b = int(input()), int(input())
if b > a:
    a, b = b, a
c = a
while c % b:
    c += a
print(c)
 -End,"
 # put your python code here
while True:
    n = int(input())
    if n < 10:
        continue
    if n > 100:
        break
    print(n)
 -End,"
 print(int(input()) * 60 + int(input()))
 -End,"
 a = int(input())
print(a // 60, a % 60, sep=""\n"")
 -End,"
 current_time = int(input()) + int(input()) * 60 + int(input())
print(current_time // 60, current_time % 60, sep=""\n"")
 -End,"
 a, b, h = (int(input()) for _ in '123')
print(('Недосып', 'Это нормально', 'Пересып')[(h>=a) + (h>b)])
 -End,"
 year = int(input())
print('Високосный' if not year % 4 and year % 100 or not year % 400 else 'Обычный')
 -End,"
 n = int(input())
print(-15 < n <= 12 or 14 < n < 17 or n >= 19)
 -End,"
 n1, n2 = (float(input()) for _ in '12')
op = input()
if n2 == 0 and (op == '/' or op == 'mod' or op == 'div'):
    n1 = 'Деление на 0!'
else:
    if op == '+': n1 += n2
    if op == '-': n1 -= n2
    if op == '/': n1 /= n2
    if op == '*': n1 *= n2
    if op == 'mod': n1 %= n2
    if op == 'pow': n1 **= n2
    if op == 'div': n1 //= n2
print(n1)
 -End,"
 figure = input()
ar = float(input())
if figure == 'треугольник':
    b, c = (float(input()) for _ in range(2))
    p = (ar + b + c) / 2
    print((p * (p - ar) * (p - b) * (p - c)) ** .5)
if figure == 'прямоугольник':
    b = float(input())
    print(ar * b)
if figure == 'круг':
    PI = 3.14
    print(PI * ar ** 2)
 -End,"
 n, s = 1, 0
while n:
    n = int(input())
    s += n
print(s)
 -End,"
 a, b = int(input()), int(input())
if b > a:
    a, b = b, a
c = a
while c % b:
    c += a
print(c)
 -End,"
 a, b, c, d = [int(input()) for _ in range(4)]
print(end='\t')
for i in range(c, d+1):
    print(i, end='\t')
print()
for i in range(a, b+1):
    print(i, end='\t')
    for j in range(c, d+1):
        print(i * j, end='\t')
    print()
 -End,"
 a, b = (int(input()) for i in '12')
s = k = 0
while a % 3:
    a += 1
for i in range(a, b+1, 3):
    s += i
    k += 1
print(s / k)
 -End,"
 s = input()
print((s.upper().count('C') + s.upper().count('G')) / len(s) * 100)
 -End,"
 genome, genome_with_numbers, number_of_letters = input(), '', 1
letter = genome[0]
for i in genome[1:]:
    if letter == i:
        number_of_letters += 1
    else:
        genome_with_numbers += letter + str(number_of_letters)
        number_of_letters = 1
        letter = i
genome_with_numbers += letter + str(number_of_letters)
print(genome_with_numbers)
 -End,"
 s = 0
for i in input().split():
    s += int(i)
print(s)
 -End,"
 a = [int(i) for i in input().split()]
if len(a) == 1:
    print(a[0])
else:
    for i in range(len(a) - 1):
        print(a[i-1] + a[i+1], end=' ')
    print(a[0] + a[i])
 -End,"
 a, b = [i for i in input().split()], []
for i in a:
    if a.count(i) > 1 and b.count(i) == 0:
        b.append(i)
        print(i, end="" "")
 -End,"
 a = [i for i in input().split()]
for i in a[:]:
    if a.count(i) > 1:
        print(i, end="" "")
        while a.count(i) > 1:
            a.remove(i)
 -End,"
 summ, list_of_numbers = 1, []
while summ:
    list_of_numbers.append(int(input()))
    summ = sum(list_of_numbers)
print(sum(i * i for i in list_of_numbers))
 -End,"
 list_of_numbers = []
while True:
    list_of_numbers.append(int(input()))
    if not sum(list_of_numbers):
        break
print(sum(i * i for i in list_of_numbers))
 -End,"
 n = int(input())
list_ = []
for i in range(n):
    k = i + 1
    while k:
        list_.append(i + 1)
        k -= 1
for i in range(n):
    print(list_[i], end=' ')
 -End,"
 n, list_, i = int(input()), [], 0
while len(list_) < n:
    list_ += [i] * i
    i += 1
for i in range(n):
    print(list_[i], end=' ')
 -End,"
 lst, x = input().split(), input()
if x in lst:
    for i in range(len(lst)):
        if lst[i] == x:
            print(i, end=' ')
else:
    print('Отсутствует')
 -End,"
 matrix = []
while True:
    line_ = input()
    if line_ == 'end':
        break
    matrix.append([int(x) for x in line_.split()])

matrix_finale = []
for i in range(len(matrix)):
    line_finale = []
    for j in range(len(matrix[0])):
        current = matrix[i][j -1] + matrix[i - 1][j] + matrix[i + 1 - len(matrix)][j] + matrix[i][j + 1 - len(matrix[0])]
        line_finale.append(current)
    matrix_finale.append(line_finale)

for row in matrix_finale:
    for el in row:
        print(el, end=' ')
    print()
 -End,"
 matrix = []
while True:
    line_ = input()
    if line_ == 'end':
        break
    matrix.append([int(x) for x in line_.split()])

for i in range(len(matrix)):
    for j in range(len(matrix[0])):
        print(matrix[i][j -1] + matrix[i - 1][j] + 
              matrix[i + 1 - len(matrix)][j] + matrix[i][j + 1 - len(matrix[0])], end=' ')
    print()
 -End,"
 x, y, dx, dy, n = 0, 0, 0, 1, int(input())
matrix = [[0] * n for _ in range(n)]
for i in range(n * n):
    matrix[x][y] = str(i + 1)
    if x + dx >= n or x + dx < 0 or y + dy >= n or y + dy < 0 or matrix[x + dx][y + dy]:
        dx, dy = dy, -dx
    x, y = x + dx, y + dy

for row in matrix:
    for el in row:
        print(el, end=' ')
    print()
 -End,"
 def f(x):
    if x <= -2:
        x = 1 - (x + 2) ** 2
    elif x > 2:
        x = (x - 2) ** 2 + 1
    else:
        x = -x / 2
    return x
 -End,"
 def modify_list(l):
    for el in l.copy():
        if not el % 2:
            l.append(el // 2)
        l.remove(el)
    return l
 -End,"
 def modify_list(l):
    i = 0
    while i < len(l):
        if not l[i] % 2:
            l[i] //= 2
            i += 1
        else:
            l.remove(l[i]) -End,"
 def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    else:
        d.setdefault(2 * key, []).append(value)
         -End,"
 counter = {}
for word in input().lower().split():
    counter[word] = counter.get(word, 0) + 1

for key in counter:
    print(key, counter[key])
 -End,"
 res_ = {}
for i in range(int(input())):
    x = int(input())
    if x not in res_.keys():
        res_[x] = f(x)
    print(res_[x])
 -End,"
 a, b, c = input(), input(), input()
print(a, ' ', b, c, sep='')
 -End,"
 a, b, c = input(), input(), input()
print(a, end=' ')
print(b, end='')
print(c)
 -End,"
 a, b, c = map(str, map(int, map(float, input().split())))
print(a + b + ' ' + c + a + ' ' + b + c)
 -End,"
 a, b, c = map(str, map(int, map(float, input().split())))
print(a + b, end=' ')
print(c + a, end=' ')
print(b + c, end=' ')
 -End,"
 a, b, c = input().split()
a = str(int(a, 16))
b = str(int(b, 16))
c = str(int(c, 16))
print(a + b + ' ' + c + c + b + ' ' + a)
 -End,"
 import math
print(round(math.pi, int(input())))
 -End,"
 n = int(input())
print('Следующее за числом ', str(n), ' число - ', n + 1, '.', sep='')
print('Для числа ', str(n), ' предыдущее число - ', n - 1, '.', sep='')
 -End,"
 a, b, = (int(input()) for i in '12')
print(a, '+', b, '=', a + b, sep='')
print(a, '-', b, '=', a - b, sep='')
print(a, '*', b, '=', a * b, sep='')
print(a, '/', b, '=', a / b, sep='')
print('(', a, '+', b, ')/2=', (a + b) / 2, sep='')
 -End,"
 n = input()
print(int(n[:1]) + int(n[1:]))
 -End,"
 x = 0
for i in input():
    x += int(i)
print(x)
 -End,"
 n = input()
for i in range(len(n)):
    if i + 1 == len(n):
        print(n[i])
    else:
        print(n[i], end=', ')
 -End,"
 n = input()
print(n[0], ', ', n[1], ', ', n[2], sep='')
 -End,"
 n = input()
summ_ = 0
for i in n:
    summ_ += int(i)
print(summ_)
 -End,"
 a, b = [int(input()) for i in '12']
print(round((a * a + b * b) ** 0.5, 2))
 -End,"
 ax, ay = map(int, input().split())
bx, by = map(int, input().split())
print(round(((bx - ax) ** 2 + (by - ay) ** 2) ** 0.5, 2))
 -End,"
 n = int(input())
k = 0
for i in range(n * n):
    if  i // n:
        k += 1
print(k)
 -End,"
 from math import pi as PI
print(2 * PI * float(input()))
 -End,"
 from sys import argv as _ar

[print(i, end=' ') for i in _ar[1:]]
 -End,"
 if int(input()) % 2:
    print('Это число нечетное')
else:
    print('Это число четное')
 -End,"
 if len(input()) == 2:
    print('число двузначное')
else:
    print('число не двузначное')
 -End,"
 n1, n2 = [int(input()) for i in '12']
if not n1 % n2 or not n2 % n1:
    print('да')
else:
    print('нет')
 -End,"
 n = input()
if n[:2] == n[:1:-1]:
    print('да')
else:
    print('нет')
 -End,"
 n1, n2, n3 = [int(input()) for i in '123']
if n1 == n2 or n1 == n3 or n2 == n3:
    print('да')
else:
    print('нет')
 -End,"
 N = [int(input()) for i in '123']
c = 0
for el in N:
    if el > 0:
        c += 1
print(c)
 -End,"
 N = [int(input()) for i in range(7)]
s = 0
for el in N:
    if not el % 2:
        s += el
print(s)
 -End,"
 short, long, short_distance, long_distance = [int(input()) for _ in '1234']
if short > long:
    short, long = long, short
if short_distance < short - short_distance:
    short_distance = short - short_distance
if long_distance < long - long_distance:
    long_distance = long - long_distance
if short_distance > long_distance:
    long_distance = short_distance
print(long_distance)
 -End,"
 n, m, k = [int(input()) for _ in '123']
if k == 1:
    print(True)
elif not k % n or not k % m:
    print(True)
else:
    print(False)
 -End,"
 for el in range(int(input()), int(input())):
    print(el)
 -End,"
 a, b = map(int, input().split())
for el in range(a, b+1):
    print(el, end=' ')
 -End,"
 a, b = (int(input()) for _ in '12')
i = 1
for el in range(a, b):
    print(i, '. ', el, sep='')
    i += 1
 -End,"
 a, b = (int(input()) for _ in '12')
i = [el for el in range(a, b)]
for el in range(len(i)):
    print(el+1, '. ', i[el], sep='')
 -End,"
 a, b = (int(input()) for _ in '12')
for el in range(a, b+1):
    if not el % 2:
        print(el)
 -End,"
 a, b = (int(input()) for _ in '12')
for el in range(a, b+1):
    if not el % 2 and el % 3:
        print(el)
 -End,"
 a, b = (int(input()) for _ in '12')
for el in range(a, b+1):
    if (not el % 3 or not el % 7) and el % 9 and el % 2:
        print(el)
 -End,"
 b = int(input())
for el in range(10, b+1):
    print(el ** 3)
 -End,"
 a = int(input())
for el in range(1, 10):
    print(el, ' х ', a, ' = ', el * a, sep='')
 -End,"
 def points_counter(team, goals1, goals2):
    if team not in teams:
        teams[team] = [0] * 5
    teams[team][0] += 1
    teams[team][1] += int(goals1 > goals2)
    teams[team][2] += int(goals1 == goals2)
    teams[team][3] += int(goals1 < goals2)
    teams[team][4] += int(goals1 > goals2) * 3 + int(goals1 == goals2)


teams = dict()

for _ in range(int(input())):
    k = input().split(';')
    points_counter(k[0], int(k[1]), int(k[3]))
    points_counter(k[2], int(k[3]), int(k[1]))

for el in teams:
    print('{}:{} {} {} {} {}'.format(el, *teams[el]))
 -End,"
 i = 0
n = int(input())
while i < n:
    i += 1
    print(i)
 -End,"
 a = int(input())
while a:
    print(a)
    a //= 10
else:
    print(a)
 -End,"
 a = input()
i = 0
summ_ = 0
while i < len(a):
    summ_ += int(a[i])
    i += 1
print(summ_)
 -End,"
 a = int(input())
summ_ = 0
while a:
    summ_ += a % 10
    a //= 10
print(summ_)
 -End,"
 a = int(input())
i = 1
sq = i ** 2
while sq <= a:
    print(i)
    i += 1
    sq = i ** 2
 -End,"
 summ_ = 0
p = int(input())
while p:
    summ_ += p ** 2
    p = int(input())
print(summ_)
 -End,"
 a, b = [int(input()) for _ in '12']
while a >= b:
    print(a, end='')
    a -= 3
 -End,"
 n = int(input())
i = 2
sq = i ** 3
while sq <= n:
    print(sq)
    i += 2
    sq = i ** 3
 -End,"
 n, i, k = float(input()), 1, 1
while i >= n:
    print(round(i, 2))
    k += 1
    i = 1 / k
 -End,"
 n = int(input())
while n:
    print('Вы ввели число:', n)
    n = int(input())
 -End,"
 n = float(input())
i = 0
while n:
    i += 1
    n = float(input())
print(i)
 -End,"
 old_number = int(input())
index_current = 1
index_min = 1000

while old_number:
    new_number = int(input())
    if old_number == new_number:
        index_current += 1
    else:
        if index_min > index_current:
            index_min = index_current
        old_number, index_current = new_number, 1
        
print(index_min)
 -End,"
 n = int(input())
number = int(input(), n)
i = 0

while number:
    if number % 10 != 2 and number % 10 != 3:
        i += 1
    number = int(input(), n)

print(i)
 -End,"
 def code_decode(a, cypher, code_from, code_to):
    result = ''
    code = dict()

    if cypher:
        code_from, code_to = code_to, code_from

    for i in range(len(code_from)):
        code[code_from[i]] = code_to[i]

    for i in a:
        result += code[i]

    return result


phrase_original, phrase_coded, to_code, to_decode = (input() for _ in '1234')

print(code_decode(to_code, False, phrase_original, phrase_coded))
print(code_decode(to_decode, True, phrase_original, phrase_coded))
 -End,"
 a, b, c, d = [input() for _ in '1234']

for i in c:
    print(b[a.index(i)], end='')
print()
for i in d:
    print(a[b.index(i)], end='')
 -End,"
 s_tring = input()
print(s_tring[1])
print(s_tring[-3])
print(s_tring[:6])
print(s_tring[:-3])
print(s_tring[1::2])
print(s_tring[::2])
print(s_tring[::-1])
print(s_tring[::-2])
print(len(s_tring))
print((s_tring.count('a')))
 -End,"
 print(input().replace('2', 'two'))
 -End,"
 print(input() * int(input()))
 -End,"
 print(input().replace('2', 'two', 1))
 -End,"
 s_tring = input()
lenn = len(s_tring)
i = 0
a = 1
for el in range(lenn):
    if s_tring[el] == ' ':
        i += (not (el - 1 - a) % 2)
        a = el
if not (lenn - 1 - a) % 2:
    i += 1
print(i)
 -End,"
 def get_set():
    n = int(input())
    n_set = set()
    while n:
        n -= 1
        for i in input().split():
            n_set.add(i.lower())
    return n_set


d_dict = get_set()
l_words = get_set()
for el in l_words-d_dict:
    print(el)
 -End,"
 x = y = 0
n = int(input())

for el in range(n):
    direction, movement = input().lower().split()
    movement = int(movement)

    if direction == 'восток':
        x += movement
    elif direction == 'север':
        y += movement
    elif direction == 'запад':
        x -= movement
    elif direction == 'юг':
        y -= movement

print(x, y)
 -End,"
 x, y = (int(input()) for _ in '12')
if y > x:
    x, y = y, x
print('Большее число: ', x, ', меньшее число: ', y, sep='')
 -End,"
 if abs(int(input())) > 1e9:
    print('Да, это большое число')
else:
    print('Нет, это не такое уж и большое число')
 -End,"
 def main(hand):
    mask = ''.join(str(hand[::3].count(c)) for c in ""234567891JQKA"")
    straight = ""11111"" in mask
    if hand[4::3] == hand[1] * 4:
        return (""Flush"", ""Straight Flush"", ""Royal Flush"")[straight + mask.endswith(""11111"")]
    c2, c3, c4 = (mask.count(c) for c in ""234"")
    if c2 and c3 or c4 or straight:
        return (""Full House"", ""Four of a Kind"", ""Straight"")[c4 - straight]
    return (""High Card"", ""Pair"", ""Two Pairs"", ""Three of a Kind"")[c3 * 3 + c2]

print(main(input().replace('0', ''))) -End,"
 print(''.join(map({'A': '00', 'C': '01', 'G': '10', 'T': '11'}.get, input()))) -End,"
 import re
s = input()
print(""YES"" if re.match(r'^(\d+\.){3}\d+$', s) and all(x < 256 for x in map(int, s.split('.'))) else ""NO"") -End,"
 a, x = '', 0
for b in input() + '*':
    if a != b:
        print('%d%s' % (x, a) if x > 1 else a, end='')
        a, x = b, 1
    else:
        x += 1 -End,"
 n = 0x1F600 - int(input())
print('Result: ""%s""' % ''.join(chr((ord(c) - n) % 80 + 0x1F600) for c in input())) -End,"
 n = input()
print(n, ""contigs""[:7 - (n == ""1"")]) -End,"
 n, k = map(int, input().split())
l = ['I'] * n
for _ in range(k):
    lo, hi = map(int, input().split())
    l[lo - 1:hi] = ('.',) * (hi - lo + 1)
print(''.join(l)) -End,"
 l = [input(), input()]
for t in l, l[::-1]:
    print(input().translate(str.maketrans(*t))) -End,"
 a, b, h = [int(input()) for _ in ""abh""]
print((""Normal"", ""Deficiency"", ""Excess"")[(h < a) - (h > b)]) -End,"
 s = ''.join(input() for _ in range(int(input())))
print(*(s.count(c) for c in ""2345"")) -End,"
 x, y, u, v = map(int, input().split())
x, y = abs(x - u), abs(y - v)
print((""NO"", ""YES"")[not (x - y) * x * y]) -End,"
 l, n = input().split(), input()
print(' '.join(str(i) for i, x in enumerate(l) if x == n) or ""Missing"") -End,"
 print(sum((int(input()) + 1) // 2 for _ in ""123"")) -End,"
 def power(a, n):
    if n < 2:
        if n < 0:
            return 1. / power(a, -n)
        return a if n else 1.
    b = power(a, n // 2)
    return b * b * a if n & 1 else b * b

print(power(float(input()), int(input()))) -End,"
 def closest_mod_5(x):
    return (x + 4) // 5 * 5 -End,"
 a, b, c, d = (int(input()) for _ in ""abcd"")
print("""", *range(c, d + 1), sep='\t')
for y in range(a, b + 1):
    print(y, *range(c * y, d * y + y, y), sep='\t') -End,"
 n, l = int(input()), [0]
l += map(int, input().split())
print(*sorted(range(1, n + 1), key=l.__getitem__)) -End,"
 l, p = map(int, input().split())
print((""Login success"", ""Wrong password"",
       ""No user with login %d found"" % l,
       )[(p != 424242) + (l != 100500) * 2]) -End,"
 print((int(input()) | 1) + 1) -End,"
 s = input()
print(s, ""programmers""[:11 - (s == ""1"")]) -End,"
 from sys import argv
print(*argv[1:]) -End,"
 import re
print(1 if re.match(r'.*(.)(.)(\2)(\1)$', ""000"" + input()) else 0) -End,"
 n = int(input())
print(""do not move,move up,move down,move left,move right"".split(',')[n] if 0 <= n < 5 else ""error!"") -End,"
 print(((int(input()) + 2) // 3 + int(input()) // 3) * 1.5) -End,"
 n, p = int(input()), 2
if n % 2:
    for p in range(3, int(n ** .5) + 1, 2):
        if not n % p:
            break
    else:
        p = n
print(p) -End,"
 l = list(map(int, input().split()))
a, r = l[0], len(l)
for b in l:
    if a <= b:
        a = b
        r -= 1
print(r - (a > -1)) -End,"
 b, c, r = 0, 1, 0
for _ in ""abc"":
    a, b, c = b, c, int(input()) if c else 0
while c:
    r += a < b > c
    a, b, c = b, c, int(input())
print(r) -End,"
 from collections import OrderedDict

d = OrderedDict()
try:
    while True:
        s, t = input().split('\t')
        tt, c = d.get(s, (0, 0))
        d[s] = (tt + int(t), c + 1)
except EOFError:
    for s, (tt, c) in d.items():
        print(""{:s}\t{:n}"".format(s, tt / c)) -End,"
 import numpy as np

l = [list(map(float, s)) for s in ""2100 0210 0021"".split()]
print(np.mat(np.array(l)).reshape(12, 1)) -End,"
 print(""011235831459437077415617853819099875279651673033695493257291""[int(input()) % 60]) -End,"
 import re

m = re.compile(r'.*(.)(\1)(\1).*').match
try:
    while True:
        s = input()
        if m(s):
            print(s)
except EOFError:
    pass -End,"
 import re, sys
print(len(re.findall('you', sys.stdin.read()))) -End,"
 from sys import stdin
for s in stdin.read().splitlines():
    if '\\' in s:
        print(s) -End,"
 n = int(input())
for p in 2, 3, 5:
    while not n % p:
        n //= p
        print(p, end=' ')
while p * p < n:
    for p in p + 2, p + 6:
        while not n % p:
            n //= p
            print(p, end=' ')
print(n if n > 1 else '') -End,"
 n, d = int(input()), {}
for w in input().split():
    d[w] = d.get(w, 0) + 1
r, n2 = n * (n - 1) * 2, n * 2 - 1
for v in d.values():
    r -= v * (n2 - v)
print(r // 2) -End,"
 print((input().split('.') + ['0'])[1][0]) -End,"
 a, b, c = (float(input()) for _ in ""abc"")
d, res = b * b - 4. * a * c, set()
if d >= .0:
    d = d ** .5
    res.update(((-b - d) * .5 / a, (-b + d) * .5 / a))
print(' '.join(map(""{:g}"".format, sorted(res)))) -End,"
 import re, sys
p = re.compile(r'\bcat\b').search
print('\n'.join(filter(p, sys.stdin.read().splitlines()))) -End,"
 (a, b), (c, d), (e, f) = (tuple(map(float, input().split())) for _ in ""012"")
print(abs((c - a) * (f - b) - (d - b) * (e - a))) -End,"
 l = list(map(int, input()))
print(''.join(""ACGT""[a * 2 + b] for a, b in zip(l[::2], l[1::2]))) -End,"
 s = input()
print(''.join(""ACGT""[int(s[i:i + 2], 2)] for i in range(0, len(s), 2))) -End,"
 x1, y1, x2, y2 = map(int, input().split())
print((""NO"", ""YES"")[(x1 - x2) ** 2 + (y1 - y2) ** 2 == 5]) -End,"
 from sys import stdin
for s in stdin.read().splitlines():
    print(""%s\t%s;%s;1"" % tuple(s.split('\t'))) -End,"
 _, l = input(), [True]
for x in map(int, input().split()):
    l += [False] * x
    for i in range(len(l) - 1, x - 1, -1):
        l[i] |= l[i - x]
print(sum(l)) -End,"
 a, b = map(int, input().split('/'))
while b:
    print(a // b, end=' ')
    a, b = b, a % b -End,"
 n, m = map(int, input().split())
for t in zip(*[input().split() for _ in range(n)]):
    print(*t) -End,"
 import re
from sys import stdin
print(len(re.findall('[Yy]ou', stdin.read(), flags=re.M))) -End,"
 a, b = (set(input().split()) for _ in ""ab"")
print(*a ^ b) -End,"
 n = int(input())
l = [[n * n] * n for _ in range(n)]
t = list(range(n * n, 0, -1))
for lo, hi in enumerate(range(n - 1, n // 2 - 1, -1)):
    for x in range(lo, hi):
        l[lo][x] = t.pop()
    for y in range(lo, hi):
        l[y][hi] = t.pop()
    for x in range(hi, lo, -1):
        l[hi][x] = t.pop()
    for y in range(hi, lo, -1):
        l[y][lo] = t.pop()
for row in l:
    print(' '.join(map(str, row))) -End,"
 n, m = map(int, input().split())
rr = [[0] * (m + 1) for _ in range(n + 1)]
ss = [input() for _ in range(n)]
for y, s in enumerate(ss):
    for x, c in enumerate(s):
        if c == '*':
            for i in range(y - 1, y + 2):
                for j in range(x - 1, x + 2):
                    rr[i][j] += 1
for s, r in zip(ss, rr):
    print(''.join(c if c == '*' else str(t) for c, t in zip(s, r))) -End,"
 class ExtendedStack(list):
    def sum(self):
        self[-1] += self.pop(-2)

    def sub(self):
        self[-1] -= self.pop(-2)

    def mul(self):
        self[-1] *= self.pop(-2)

    def div(self):
        self[-1] //= self.pop(-2) -End,"
 class MyOwnSet:
    def __init__(self, iterable=()):
        self._capacity = 8
        self._lenght = 0
        self._storage = [None] * 8
        for w in iterable:
            self.add(w)

    def hash(self, w):
        h = hash(w) % self._capacity
        while True:
            yield h
            h = (h + 1) % self._capacity

    def __len__(self):
        return self._lenght

    def add(self, w):
        for h in self.hash(w):
            if self._storage[h] is None:
                self._storage[h] = w
                self._lenght += 1
                if self._lenght * 4 == self._capacity * 3:
                    self._capacity *= 2
                    self._lenght = 0
                    tmp, self._storage = self._storage, [None] * self._capacity
                    for w in tmp:
                        if w is not None:
                            self.add(w)
                return True
            elif self._storage[h] == w:
                return False

    def discard(self, w):
        for h in self.hash(w):
            if self._storage[h] is None:
                return False
            elif self._storage[h] == w:
                self._storage[h] = None
                self._lenght -= 1
                return True

    def check(self, w):
        for h in self.hash(w):
            if self._storage[h] is None:
                return False
            elif self._storage[h] == w:
                return True


from sys import stdin

myset = MyOwnSet()
d = {""+"": myset.add, ""-"": myset.discard, ""?"": myset.check}
for s in stdin.read().splitlines():
    op, w = s.split()
    print((""FAIL"", ""OK"")[d[op](w)]) -End,"
 from collections import deque
q, r = deque(), False
for _ in range(int(input())):
    a, b = input().split()
    r |= bool({""1"": q.append,
               ""2"": lambda k: k != (q.pop() if q else ""-1""),
               ""3"": q.appendleft,
               ""4"": lambda k: k != (q.popleft() if q else ""-1"")}[a](b))
print((""YES"", ""NO"")[r]) -End,"
 from operator import mul
input()
print(mul(*sorted(map(int, input().split()))[-2:])) -End,"
 def dfs(n):
    if n:
        dfs(n[0])
        dfs(n[1])
        print(n[2], end=' ')

_, root = input(), [None] * 3
root[2], *data = map(int, input().split())
for x in data:
    node = root
    while node[node[2] <= x]:
        node = node[node[2] <= x]
    node[node[2] <= x] = [None, None, x]
dfs(root) -End,"
 from sys import setrecursionlimit

def c(n, m):
    if m % n:
        if (n, m) not in cache:
            cache[n, m] = (c(n - 1, m - 1) + c(n - 1, m)) % mod
        return cache[n, m]
    return 1

setrecursionlimit(2000)
n, mod, cache = int(input()), 1000000007, {}
print((c(n * 2, n) - c(n * 2, n - 1)) % mod) -End,"
 import re, sys
print(''.join(filter(re.compile(r'\b(\w+)\1\b').match, sys.stdin.readlines()))) -End,"
 l = input().split()
print(eval({""plus"": ""+"", ""minus"": '-', ""multiply"": ""*"", ""divide"": ""//""}[l.pop(1)].join(l))) -End,"
 a, b, _, c, d = input().replace('1', '')
t, s = input(), ""67890JQKA"".index(a) - ""67890JQKA"".index(c)
print((""Error"", ""First"", ""Second"")[(s > 0) - (s < 0) if b == d else (b == t) - (d == t)]) -End,"
 def f(x, y):
    if x < 0x100000000 > y:
        return x * y
    n = max(x, y).bit_length() // 2
    mask = (1 << n) - 1
    a, b = x >> n, x & mask
    c, d = y >> n, y & mask
    ac, bd = f(a, c), f(b, d)
    p = f((a + b), (c + d)) - ac - bd
    return (((ac << n) + p) << n) + bd

print(f(int(input()), int(input()))) -End,"
 class fibonacci_sequence(list):
    def __init__(self, n):
        a = b = 1
        for _ in range(n):
            self.append(a)
            a, b = b, a + b -End,"
 print((1. - pow(-.5, int(input()))) / 1.5) -End,"
 def f(le, t, x):
    return sum(f(le - 1, t - d, x * 10 + d) for d in range
           (min(t, 9) + 1)) if le else 10 > t < n - x * 10

s = input()
n = int(s)
print(int(f(len(s) - 1, sum(map(int, s)), 0))) -End,"
 def f(x):
    y = 2 - abs(x)
    return 1 + y * y * (-1, 1)[x > 0] if y < 0 else -.5 * x -End,"
 from sys import stdin
from itertools import takewhile

print('\n'.join(filter(lambda s: len(s) > 1, takewhile(
      lambda s: int(s) < 101, stdin.read().splitlines())))) -End,"
 from sys import stdin

for s in stdin.read().splitlines():
    if all(c in '01' for c in s) and not (s[::2].count('1') - s[1::2].count('1')) % 3:
        print(s) -End,"
 foo = pow -End,"
 import re
from sys import stdin

print(re.sub(r'\b(\w)(\w)', r'\2\1', stdin.read(), flags=re.M)) -End,"
 digit_sum = lambda n: sum(map(int, str(n))) -End,"
 n = int(input())
l = list(map(int, input().split()))
k = int(input())
for i in range(0, n, k):
    print(*sorted(l[i:i + k]), end=' ') -End,"
 a, *l = map(int, input().split())
dp = [[a]]
for a in l:
    start = len(dp) - 1
    if dp[-1][-1] < a:
        dp.append(dp[-1] + [a])
    for i in range(start, 0, -1):
        if dp[i - 1][-1] < a < dp[i][-1]:
            dp[i] = dp[i - 1] + [a]
    if a < dp[0][0]:
        dp[0][0] = a
print(*dp[-1]) -End,"
 from sys import stdin

n, m = map(int, input().split())
l, r = [[0] * (m + 1)], -100
for s in stdin.read().splitlines():
    rw0, rw1, a = l[-1], [0], 0
    for i, b in enumerate(map(int, s.split()), 1):
        a += b
        rw1.append(a + rw0[i])
    for rw0 in l:
        for ri in range(1, m + 1):
            for le in range(ri):
                r = max(r, rw0[le] + rw1[ri] - rw0[ri] - rw1[le])
    l.append(rw1)
print(r) -End,"
 from sys import stdin
from bisect import bisect, bisect_left

input()
aa = sorted(map(int, input().split()))
input()
l = stdin.read().splitlines()
for i, s in enumerate(l):
    lo, hi = map(int, s.split())
    l[i] = str(bisect(aa, hi) - bisect_left(aa, lo))
print(' '.join(l)) -End,"
 def func(lst, n):
    return [*lst, *range(n)] -End,"
 def composition(*f):
    return (lambda x: composition(*f[:-1])(f[-1](x))) if f else lambda x: x -End,"
 def quickPower(b, p):
    return (quickPower(b * b, p // 2) * (b if p & 1 else 1)) if p else 1 -End,"
 def isPalindrome(s):
    return len(s) < 2 or s[0] == s[-1] and isPalindrome(s[1:-1]) -End,"
 def makeAmount(t, v):
    return sum(makeAmount(x, v[1:]) for x in range(t, -1, -v[0])) if v else not t -End,"
 def deepReverse(l):
    return list(map(deepReverse, l[::-1])) if isinstance(l, list) else l -End,"
 def flatten(d):
    def helper(e, *prefix):
        if isinstance(e, dict):
            for k, v in e.items():
                yield from helper(v, *prefix, k)
        else:
            yield '.'.join(prefix), e

    return dict(helper(d)) -End,"
 def flatten(d):
    def helper(e, *prefix):
        if isinstance(e, dict):
            for k, v in e.items():
                helper(v, *prefix, k)
        else:
            res['.'.join(prefix)] = e

    res = {}
    helper(d)
    return res -End,"
 def bucket(*args, **kwargs):
    return lambda f: (lambda x: (args, kwargs, f(x))) -End,"
 from functools import partial
from toolz import flip

def sampleCount(s):
    return lambda l: sum(map(partial(flip(str.count), s), l)) -End,"
 import re, sys

print(*re.findall(r'\w+', sys.stdin.read())) -End,"
 from math import ceil, sqrt

print(ceil(sqrt(2. * float(input()) - 1.75) - .5)) -End,"
 from operator import add as compute_sum -End,"
 def unique_integer(_, l):
    l = [0, *sorted(l), 0]
    r = [b for a, b, c in zip(l, l[1:], l[2:]) if a != b != c]
    return r[0] if len(r) == 1 else -1 -End,"
 from operator import mul as computeProduct -End,"
 hello_world = '""{} says hello world!""'.format -End,"
 hello_world = '""{} says hello world!""'.format -End,"
 def shiftChar(c, k):
    zyx = 'zyxwvutsrqponmlkjihgfedcba'
    return repr(zyx[zyx.find(c) - k]) -End,"
 def unshiftChar(c, k):
    abc = 'abcdefghijklmnopqrstuvwxyz'
    return repr(abc[abc.find(c) - k]) -End,"
 def aBeforeB(s, a, b):
    return s.find(f'{b} {a}') < 0 -End,"
 from operator import gt
from functools import partial

lessThan10 = partial(gt, 10) -End,"
 from statistics import median

def isBetween(a, b, c):
    return a == median((a, b, c)) -End,"
 def sum20(*abc):
    return sum(abc) - 20 in abc -End,"
 def exactlyOnePositive(*abc):
    return sum(x > 0 for x in abc) == 1 -End,"
 def isPrime(x):
    for p in 2, 3, 5, 7:
        if x == p:
            return True
        elif not x % p:
            return False
    while x > p * p:
        for s in 4, 2, 4, 2, 4, 6, 2, 6:
            if not x % p:
                return False
            p += s
    return True -End,"
 def max(x, y, z):
    return -min(-x, -y, -z) -End,"
 countX = str.count -End,"
 s1, s2 = input().lower(),input().lower()
if len(s1)!=len(s2): print ('False')
else:
  d1=dict.fromkeys(map(str,s1))
  d2=dict.fromkeys(map(str,s2))
  for i in range(len(s1)):
    if s1[i] in d1:
      if d1[s1[i]]==None:
        d1[s1[i]]=0
      d1[s1[i]]+=1
    if s2[i] in d2:
      if d2[s2[i]]==None:
        d2[s2[i]]=0
      d2[s2[i]]+=1
  if d1==d2:print('True')
  else: print ('False') -End,"
 d={1:[i for i in range(1,int(input())+1)], 2:[],3:[]}
d[1]=d[1][::-1]
e=[]
e+=d[1]
l=len(d[1])
def z(x1,x2):
    d[x2].append(d[x1][len(d[x1])-1])
    d[x1].pop(len(d[x1])-1)
    print(x1,'-', x2)
def c1(l):
    z(1,2)
    z(1,3)
    z(2,3)
def c123(l):
    c23(l)    
def c13(l):
    z(1,2)
    z(3,1)
    z(3,2)    
def c21(l):
    c1(l)     
def c213(l):
    c13(l)    
def c31(l):
    c1(l)
def c321(l):
    z(1,2)
    if d[3][len(d[3])-1]>d[1][len(d[1])-1]: z(1,3)    
    else: z(3,1)
    z(2,3)   
def c23(l):
    z(2,1)
    z(3,1)
    if d[2]!=[]:    
        if d[2][len(d[2])-1]>d[3][len(d[3])-1]: z(3,2)    
        else: z(2,3)
    else: z(2,3)  
def c231(l):
    c1(l)
#------------------------------------------------
def n1(l):
    z(1,3)
    z(1,2)
    z(3,2)
def n100(l):
    z(1,3)    
def n12(l):
    z(1,3)
    z(2,1)
    z(2,3)
def n123(l):
    n23(l)    
def n13(l):
    z(1,2)
    z(3,2)
    if d[3][len(d[3])-1]>d[1][len(d[1])-1]: z(1,3)
    else: z(3,1)
def n132(l):
    n32(l)        
def n213(l): 
    z(1,2)
    z(3,2)
    if d[3]!=[]: 
        if d[1][len(d[1])-1]>d[3][len(d[3])-1]: z(3,1)
        else: z(1,3)
    else: z(1,3)    
def n23(l):
    z(2,1)
    z(3,2)
    z(3,1)        
def n31(l):
    n100(l)        
def n312(l):
    z(2,1)
    if d[3][len(d[3])-1]>d[2][len(d[2])-1]: z(2,3)
    else: z(3,2)
    z(1,3)
def n32(l):
    z(2,1)
    z(2,3)
    z(1,3)   
while d[3]!=e:        
    if l%2==0 and d[1]!=[] and d[2]==[] and d[3]==[]:
        c1(l)
    if d[3]==e: break
    if d[1]!=[] and d[3]!=[]:
        if l%2==0 and d[1][len(d[1])-1]>d[3][len(d[3])-1] and d[2]==[]:
            c13(l)
    if d[1]!=[] and d[2]!=[]:
        if l%2==0 and d[2][len(d[2])-1]>d[1][len(d[1])-1] and d[3]==[]:
            c21(l)
    if d[2]!=[] and d[3]!=[]:
        if l%2==0 and d[2][len(d[2])-1]>d[3][len(d[3])-1] and d[1]==[]:
            c23(l) 
    if l%2==0 and d[3][len(d[3])-1]>d[1][len(d[1])-1] and d[2]==[]:
        c31(l)    
    if d[1]!=[] and d[2]!=[] and d[3]!=[]:
        if l%2==0 and d[3][len(d[3])-1]>d[2][len(d[2])-1] and d[2][len(d[2])-1]>d[1][len(d[1])-1]:
            c321(l)
    if d[1]!=[] and d[2]!=[] and d[3]!=[]:
        if l%2==0 and d[2][len(d[2])-1]>d[1][len(d[1])-1] and d[1][len(d[1])-1]>d[3][len(d[3])-1]:
            c213(l)   
    if d[1]!=[] and d[2]!=[] and d[3]!=[]:   
        if l%2==0 and d[2][len(d[2])-1]>d[3][len(d[3])-1] and d[3][len(d[3])-1]>d[1][len(d[1])-1]:
            c231(l)
    if d[1]!=[] and d[2]!=[] and d[3]!=[]:
        if l%2==0 and d[1][len(d[1])-1]>d[2][len(d[2])-1] and d[2][len(d[2])-1]>d[3][len(d[3])-1]:
            c123(l)
    if l%2!=0:
        if d[1]!=[]:
            if len(d[1])==1 and d[2]==[] and d[3]==[]:
                n100(l)
                break
        if d[2]==[] and d[3]==[]:        
            n1(l)
            
        if d[1]!=[] and d[2]!=[]:
            if d[1][len(d[1])-1]>d[2][len(d[2])-1] and d[3]==[]:
                n12(l)
                    
        if d[1]!=[] and d[3]!=[]:
            if d[1][len(d[1])-1]>d[3][len(d[3])-1] and d[2]==[]:    
                n13(l)
        if d[1]!=[] and d[3]!=[]:
            if d[3][len(d[3])-1]>d[1][len(d[1])-1] and d[2]==[]:    
                n31(l)
                    
        if d[2]!=[] and d[3]!=[]:
            if d[2][len(d[2])-1]>d[3][len(d[3])-1] and d[1]==[]:    
                n23(l)
        if d[2]!=[] and d[3]!=[]:
            if d[3][len(d[3])-1]>d[2][len(d[2])-1] and d[1]==[]:    
                n32(l)
                
        if d[1]!=[] and d[2]!=[] and d[3]!=[]:
            if d[3][len(d[3])-1]>d[1][len(d[1])-1] and d[1][len(d[1])-1]>d[2][len(d[2])-1]:
                n312(l)
        if d[1]!=[] and d[2]!=[] and d[3]!=[]:
            if d[2][len(d[2])-1]>d[1][len(d[1])-1] and d[1][len(d[1])-1]>d[3][len(d[3])-1]:
                n213(l)
        if d[1]!=[] and d[2]!=[] and d[3]!=[]:
            if d[1][len(d[1])-1]>d[3][len(d[3])-1] and d[3][len(d[3])-1]>d[2][len(d[2])-1]:
                n132(l)                
        if d[1]!=[] and d[2]!=[] and d[3]!=[]:
            if d[1][len(d[1])-1]>d[2][len(d[2])-1] and d[2][len(d[2])-1]>d[3][len(d[3])-1]:
                n123(l) -End,"
 n,m=int(input()),[]
for i in range(n):
    j=int(input())
    if j%2==0: m.append(j)
for i in range(len(m)):
    print (m[i]) -End,"
 min,max=9.5,0
while True:
  a=float(input())
  if 0<=a<=9.5:
    if a==0: break
    if a<min: min=a
    if a>max: max=a
print (min, max) -End,"
 a,m=int(input()),''
while a>0:
    if a%2==0: m+='0'
    else: m+='1'
    a//=2
print(m[::-1]) -End,"
 a,m=list(input()),1
for i in a:
    if int(i)!=0: m*=int(i)
print(m) -End,"
 for i in input().split(' ')[::-1]:
    print (i, end=' ') -End,"
 v=input()
print(v[0:v.find('h')+1]+v[v.find('h')+1:][:len(v[v.find('h')+1:])-(len(v)-v.rfind('h')):][::-1]+v[len(v)-(len(v)-v.rfind('h')):]) -End,"
 o=''
se=0
n=0
v=input()
for i in v:
  if i=='h':
    o+=i
    n+=1
    break
  o+=i
  n+=1
for i in v[::-1]:
  if i=='h':
    se+=1
    break
  se+=1

print(o+v[n:][:len(v[n:])-se:][::-1]+v[len(v)-se:]) -End,"
 s,b=input(),input()
if s.find(b)==-1:
  print ('-1')
elif s[s.find(b)+1:].find(b)==-1:
  print('-1')
else:
  print(s.find(b)+s[s.find(b)+1:].find(b)+1) -End,"
 a=input().split()
print (max(a), a.index(max(a))) -End,"
 a, b = map(int, input().split())
print(a+b) -End,"
 n=int(input())
m= {a: a for a in range(n+1)}
for i in range(2,n+1):
    m[i]=m[i-1]+m[i-2]
print (m[n]) -End,"
 n,y,x=int(input()),0,1
for i in range(n):
    y,x=x%10,y%10+x%10
print (y%10) -End,"
 a,s=list(map(int,input().split())),0
for i in range(0,len(a),2): s+=a[i]
print(s*a[len(a)-1]) -End,"
 p,m,n,s,k=int(input()),list(map(int,input().split())),0,0,0
for i in sorted(m, reverse = True):
    n+=1
    if i<p: 
        print (n)
        break
    if i==p: s+=1
    if i>p: k+=1
if len(m)==0: print (1)
elif p==0 and len(m)==0: print (0)
elif s==len(m) and p!=0: print (s+1)
elif k==len(m): print (len(m)+1) -End,"
 l=list(map(int,input().split()))
for i in range(len(l)):
  for j in range(i):
    if l[i]<l[j]: l[i],l[j]=l[j],l[i]
for i in l: print (i, end=' ') -End,"
 n=list(map(int,input().split()))
k=set(n)
for i in k: 
  if n.count(i)>1:
    print(i, end=' ') -End,"
 n,d=int(input()),{}
for i in range(n):
  f,o=map(str,input().split())
  if f in d: 
    d[f][0]+=int(o)
    d[f].append(int(o))
  else: 
    d[f]=[int(o)]
for key in sorted(d): 
  print (key, round(d[key][0]/len(d[key]),1)) -End,"
 m,d,q=[],{},{}
for i in range(int(input())):
  o=input().strip(""."").strip("","").strip(""!"").strip(""?"").strip("";"").strip("":"").lower().split()
  m+=(o)
k=set(m)
for i in m:
    if i in k:
      if i in d: d[i]+=1
      else: d[i]=1
for k,v in sorted(d.items()):
  if v==max(d.values()):
    q[k]=v
for k,v in sorted(q.items()):
  print (k, v)
  break -End,"
 def get_int(start_message, error_message, end_message):
  print(start_message)
  while True:
    i=input()
    try:
      if type(int(i)) is int:
        print(end_message)
        return int(i)
    except ValueError:
      print(error_message) -End,"
 m=['C','D','H','S']
c=['6','7','8','9','1','J','Q','K','A']
k1,k2=map(str,input().split())
k=input()

if k1[len(k1)-1]==k and k2[len(k2)-1]!=k: print(""First"")
elif k2[len(k2)-1]==k and k1[len(k1)-1]!=k: print(""Second"")
elif k2[len(k2)-1]==k1[len(k1)-1]:
  if c.index(k1[0])>c.index(k2[0]): print(""First"")
  elif c.index(k1[0])<c.index(k2[0]): print(""Second"")
  elif c.index(k1[0])==c.index(k2[0]): print(""Error"")
else:
  print(""Error"") -End,"
 c,z=map(int,input().split('/'))
while z!=0:
  o=c//z
  print(o, end="" "")
  p=z
  z=c-o*z
  c=p -End,"
 x, y = map(int, input().split(' '))
print(x + y) -End,"
 import numpy as np

print(2*(np.eye(3,4))+(np.eye(3,4,1))) -End,"
 import numpy as np

print((2*(np.eye(3,4))+(np.eye(3,4,1))).reshape(12,1))


 -End,"
 import numpy as np

print(mat.reshape(12,1))


 -End,"
 import numpy as np

x_shape = tuple(map(int, input().split()))
X = np.fromiter(map(int, input().split()), np.int).reshape(x_shape)
y_shape = tuple(map(int, input().split()))
Y = np.fromiter(map(int, input().split()), np.int).reshape(y_shape)

# here goes your solution; X and Y are already defined!
try:
    #C=X@Y.transpose()
    C=X.dot(Y.transpose())
    print(C)
except:
    print('matrix shapes do not match') -End,"
 from urllib.request import urlopen
import numpy as np

filename = input()
f = urlopen(filename)
sbux = np.loadtxt(f, usecols=(), skiprows=1, delimiter="","")
print(sbux.sum(0)/int(sbux.shape[0])) -End,"
 from urllib.request import urlopen
import numpy as np

filename = input()
f = urlopen(filename)
out = np.loadtxt(f, skiprows=1, delimiter="","")
print(out.mean(axis=0)) -End,"
 word, mm = (), 0
for i in range(int(input())):
    word += tuple(map(str, input().lower().strip("".,!?;:"").split()))
for i in word:
    if word.count(i) > mm: mm, ot = word.count(i), i
print(ot, mm)

 -End,"
 a = int(input())
d={1:'программист',
   2:'программиста',
   3: 'программиста',
   4: 'программиста',
   5: 'программистов',
   6: 'программистов',
   7: 'программистов',
   8: 'программистов',
   9: 'программистов',
   0: 'программистов'}
dd={11: 'программистов',
   12: 'программистов',
   13: 'программистов',
   14: 'программистов'}

if a % 10 in d:
    ans = str(a) + ' ' + d[a % 10]
if a%100 in dd:
    ans = str(a) + ' ' + dd[a%100]
print(ans)
 -End,"
 import datetime

y, m, d = map(int, input().split())
nd = datetime.date(y, m, d) + datetime.timedelta(int(input()))
print(nd.year, nd.month, nd.day)
 -End,"
 s, a, b, k = input(), input(), input(), 0

if a in b and a in s:
    k = 'Impossible'
else:
    while a in s:
        k += 1
        s = s.replace(a, b)
print(k)


 -End,"
 s, t, k = input(), input(),  0
for i in range(len(s)-len(t)+1):
    if s[i: i+len(t)]==t:
        k+=1
print(k)
 -End,"
 import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if len(re.findall(r'cat', line))>=2:
        print(line)



 -End,"
 import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if len(re.findall(r'\bcat\b', line))>0:
        print(line) -End,"
 import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if len(re.findall(r'z...z', line))>0:
        print(line)

 -End,"
 import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if len(re.findall(r'\\', line))>0:
        print(line)
 -End,"
 import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if len(re.findall(r'\b(\w+)\1\b', line))>0:
        print(line)

 -End,"
 import sys, re

for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(r'human', 'computer', line)
    print(line)


 -End,"
 import sys, re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""\ba+\b"", 'argh', line,1, re.IGNORECASE))



 -End,"
 try:
    foo()
except ZeroDivisionError:
    print(""ZeroDivisionError"")
except ArithmeticError:
    print(""ArithmeticError"")
except AssertionError:
    print(""AssertionError"") -End,"
 from skimage.io import imread
img = imread('img.png')
print(img.shape[1])




 -End,"
 from skimage.io import imread, imsave
img = imread('img.png')
img[img.shape[0] // 2, img.shape[1] // 2] = [102, 204, 102]
imsave('out_img.png', img)
 -End,"
 from skimage.io import imread, imsave
img = imread('img.png')
img[img.shape[0] // 2 - 3: img.shape[0] // 2 + 4, img.shape[1] // 2 - 7: img.shape[1] // 2 + 8] = [255, 192, 203]
imsave('out_img.png', img)
 -End,"
 import numpy
from skimage.io import imread
img = imread('img.png')
border = img[0, 0]
v,s,_ = img.shape

def findY(h, l, yy, x=s//2):
    while True:
        y = (h + l) // 2
        if numpy.array_equal(img[y, x], border) and numpy.array_equal(img[y+yy, x], border) == False:
            if yy > 0: return y+1
            else: return v-y
        if numpy.array_equal(img[y, x], border):
            if yy>0: l = y
            else: h=y
        else:
            if yy>0: h = y
            else: l=y

def findX(h, l, xx, y=v//2):
    while True:
        x = (h + l) // 2
        if numpy.array_equal(img[y, x], border) and numpy.array_equal(img[y, x+xx], border) == False:
            if xx > 0: return x+1
            else: return s-x
        if numpy.array_equal(img[y, x], border):
            if xx>0: l = x
            else: h=x
        else:
            if xx>0: h = x
            else: l=x

print(findX(s, 0, 1),findY(v, 0, 1), findX(s, 0, -1),findY(v, 0, -1))
 -End,"
 from skimage.io import imread, imsave
imsave('out_img.png', 255-imread('img.png'))
 -End,"
 from skimage.io import imread, imsave
from skimage import img_as_float
from numpy import dstack
img = imread('img.png')
img_f = img_as_float(img)
r = img_f[:,:, 0]
g = img_f[:,:, 1]
b = img_f[:,:, 2]
img_brg = dstack((b,r,g))
imsave('out_img.png', img_brg)
 -End,"
 from skimage.io import imread, imsave
from skimage import img_as_float, img_as_ubyte
img = img_as_float(imread('img.png'))
r = img[:,:, 0]
g = img[:,:, 1]
b = img[:,:, 2]
imsave('out_img.png', img_as_ubyte(0.2126*r+0.7152*g+0.0722*b))
 -End,"
 def align(img, g_coord):
    import numpy
    from skimage import img_as_float

    def coor(img, g):
        d = 15
        correlation_r = {}
        for row_shift in range(-d, d + 1):
            ry = numpy.roll(img, row_shift, axis=1)
            for col_shift in range(-d, d + 1):
                rx = numpy.roll(ry, col_shift, axis=0)
                correlation_r[(row_shift, col_shift)] = (rx * g).sum()
        return max(correlation_r, key=correlation_r.get)

    img = img_as_float(img)
    yg, xg = g_coord
    per = 10
    v, s = img.shape
    v //= 3
    frv = int(v / 100 * per)
    frs = int(s / 100 * per)
    b = img[frv:v - frv, frs:s - frs]
    g = img[v + frv:v * 2 - frv, frs:s - frs]
    r = img[v * 2 + (img.shape[0] - v * 3) + frv:img.shape[0] - frv, frs:s - frs]
    r_coord = coor(r, g)
    b_coord = coor(b, g)
    yb = yg - v - b_coord[1]
    xb = xg - b_coord[0]
    yr = yg + v - r_coord[1]
    xr = xg - r_coord[0]
    return (yb, xb), (yr, xr) -End,"
 import numpy
from skimage.io import imread, imsave
image = numpy.asarray(imread('img.png'), dtype='int')
image = (image-numpy.min(image))*255/(numpy.max(image)-numpy.min(image))
imsave('out_img.png', numpy.asarray(image, dtype='int'))
 -End,"
 from numpy import histogram
from skimage.io import imread


def find(k, first, second, step):
    for i in range(first, second, step):
        if values[i] - k > 0:
            return i
        else:
            k -= values[i]


img = imread('img.png')
k = round(img.size * 0.05)
values, bin_edges = histogram(img, range(257))
newmin = find(k, img.min(), img.max(), 1)
newmax = find(k, img.max(), img.min(), -1)
print(newmin, newmax)




 -End,"
 from numpy import histogram
import numpy
from skimage.io import imread, imsave


def find(k, first, second, step):
    for i in range(first, second, step):
        if values[i] - k > 0:
            return i
        else:
            k -= values[i]


img = imread('img.png')
k = round(img.size * 0.05)
mn = img.min()
mx = img.max()
values, bin_edges = histogram(img, range(257))
newmin = find(k, mn, mx, 1)
newmax = find(k, mx, mn, -1)
image = numpy.asarray(imread('img.png'), dtype='int')
image = (image - newmin) * 255 / (newmax - newmin)
image = numpy.clip(image, 0, 255)
imsave('out_img.png', numpy.asarray(image, dtype='int'))


 -End,"
 from skimage.io import *
from numpy import *
from skimage import img_as_float, img_as_ubyte

img = img_as_float(imread('img.png'))
r = img[:, :, 0]
g = img[:, :, 1]
b = img[:, :, 2]

y = 0.2126 * r + 0.7152 * g + 0.0722 * b
u = -0.0999 * r - 0.3360 * g + 0.4360 * b
v = 0.6150 * r - 0.5586 * g - 0.0563 * b

img_mi, k = sort(y.flatten()), round(y.size * 0.05)
y = clip((y - img_mi[k]) / (img_mi[-k] - img_mi[k]), 0, 1)

r = clip(y + 1.2803 * v, 0, 1)
g = clip(y - 0.2148 * u - 0.3805 * v, 0, 1)
b = clip(y + 2.1279 * u, 0, 1)

image = img_as_ubyte(dstack((r, g, b)))
imsave('out_img.png', image)
 -End,"
 from numpy import *
from skimage.io import imread, imsave
from skimage import img_as_float, img_as_ubyte

img = img_as_float(imread('img.png'))
r = img[:, :, 0]
g = img[:, :, 1]
b = img[:, :, 2]

rr=mean(r)
gg=mean(g)
bb=mean(b)

avg=(rr+gg+bb)/3

rw=rr/avg
gw=gg/avg
bw=bb/avg

r=clip(r/rw,0,1)
g=clip(g/gw,0,1)
b=clip(b/bw,0,1)

image = img_as_ubyte(dstack((r, g, b)))
imsave('out_img.png', image)
 -End,"
 from skimage.io import imread, imsave
from scipy.signal import convolve2d
import numpy as np

image = np.asarray(imread('img.png'), dtype='int')
img = (np.asarray(convolve2d(image, np.ones((5, 5)), mode='valid'), dtype='int') / 25).astype('uint8')
imsave('out_img.png', img)
 -End,"
 from math import *
s, x, y = map(int, input().split(' '))
print(exp((-x ** 2 - y ** 2) / (2 * s ** 2)) / (2 * pi * s ** 2))
 -End,"
 import numpy as np

s = float(input())
k = int(round(s*6)+1)

def gauss(k, s):
    x, y = np.mgrid[-k // 2 + 1:k // 2 + 1, -k // 2 + 1:k // 2 + 1]
    core = np.exp(-((x**2 + y**2) / (2 * s ** 2)))/(2 * np.pi * s ** 2)
    return core/core.sum()

for x in range(k):
    for y in range(k):
        print(""{:.5f}"".format(gauss(k, s)[x, y]), end='')
        if y != k - 1: print(end=' ')
    if x != k - 1: print('') -End,"
 import numpy as np


def gauss(shape, sigma):
    m, n = [(ss - 1.) / 2. for ss in shape]
    y, x = np.ogrid[-m:m + 1, -n:n + 1]
    h = np.exp(-(x * x + y * y) / (2 * sigma * sigma))/(2 * np.pi * s ** 2)
    h[h < np.finfo(h.dtype).eps * h.max()] = 0
    return h/h.sum()


s = float(input())
k = int(round(s*6)+1)


for x in range(k):
    for y in range(k):
        print(""{:.5f}"".format(gauss((k,k), s)[x, y]), end='')
        if y != k - 1: print(end=' ')
    if x != k - 1: print('') -End,"
 from skimage.io import imread, imsave
from scipy.signal import convolve2d
import numpy as np

def gauss(k, s):
    x, y = np.mgrid[-k // 2 + 1:k // 2 + 1, -k // 2 + 1:k // 2 + 1]
    core = np.exp(-((x**2 + y**2) / (2 * s ** 2)))/(2 * np.pi * s ** 2)
    return core/core.sum()

s = 0.66
image = np.asarray(imread('img.png'), dtype='int')
img = (np.asarray(convolve2d(image, gauss(int(round(s*6)+1), s), mode='valid'), dtype='int')).astype('uint8')
imsave('out_img.png', img) -End,"
 from skimage.io import imread, imsave
import numpy as np

def sharpness(image, kernel):
    convolved_image = np.zeros((image.shape[0] - kernel.shape[0] + 1, image.shape[1] - kernel.shape[1] + 1))
    for row in range(image.shape[0] + 1):
        for col in range(image.shape[1] + 1):
            if row + kernel.shape[0] <= image.shape[0] and col + kernel.shape[1] <= image.shape[1]:
                batch = image[row:row + kernel.shape[0], col:col + kernel.shape[1]]
                convolved_image[row][col] = np.clip((batch * kernel).sum(),0,255)
            else:
                continue
    return convolved_image

image = imread('img.png')
core=np.array([[-1/10, -2/10, -1/10],
               [-2/10, 22/10, -2/10],
               [-1/10, -2/10, -1/10]])
imsave('out_img.png', sharpness(image, core).astype('uint8')) -End,"
 from numpy import *
from skimage.io import imread, imsave
img = imread('img.png')
f=vectorize(lambda row,col: (median(img[row-3:row + 4,col-3:col + 4])))
imsave('out_img.png',f(*mgrid[3:img.shape[0] - 3, 3:img.shape[1] - 3]).clip(0, 255).astype('uint8')) -End,"
 from numpy import *
from skimage.io import imread, imsave

img = imread('img.png')
img_new = zeros((img.shape), dtype=int)
for i in range(3, img.shape[0]-3):
    for j in range(3, img.shape[1]-3):
        img_new[i][j] = sorted(img[i - 3:i + 4, j - 3:j + 4].ravel())[24]
imsave('out_img.png', img_new[3:-3,3:-3]) -End,"
 #Your code. a, b, c
p=(a+b+c)/2
S =(p*(p-a)*(p-b)*(p-c))**0.5




 -End,"
 def sum2(a, b):
    if isinstance(a, (int, float)) and isinstance(b, (int, float)):
        return a + b
    elif isinstance(b, (int, float)):
        return '1st argument is not a number'
    elif isinstance(a, (int, float)):
        return '2nd argument is not a number'
    else:
        return 'all arguments are not a numbers'
 -End,"
 import sys
for i in range(len(L)):
    if abs(L[i + 1] - L[i]) == 1:
        index = i
        break -End,"
 def counter(T):
    t = [x.lower() for x in T]
    mx = (len(set(t[0])), len(t[0]), 0)
    for i in t:
        if mx[0] < len(set(i)):
            mx = (len(set(i)), len(i), 0)
        elif mx[0] == len(set(i)):
            if mx[1] < len(i):
                mx = (mx[0], len(i), 1)
            else:
                mx = (mx[0], mx[1], 1)
    return mx[mx[2]] -End,"
 import scipy.constants as s

def lam(U):
    return (s.c*s.h)/(s.e*U)




 -End,"
 with open('file.txt') as f:
    name, out, number = f.readlines()
with open(name.strip()) as ff:
    stroka = ff.readlines()[int(number.strip())].lower()
    with open(out.strip(), 'a') as fff:
        fff.write(stroka)

 -End,"
 a = int(input())
b = int(input())
print(a + b)
print(a - b)
print(b - a)
print(a * b)
print(a / b)
print(b % a)
print(a ** b)


 -End,"
 print(int(input()) // int(input()))


 -End,"
 a = int(input())
b = int(input())
c = int(input())
p = (a + b + c) / 2
s = (p * (p - a) * (p - b) * (p - c)) ** 0.5
print(a+b+c)
print(s)





 -End,"
 print('Hello,', input())



 -End,"
 print('Hello,', input())
print('Hello,', input())



 -End,"
 print(int(input())+int(input()))

 -End,"
 def cumsum_and_erase(A, erase = 1):
    B = []
    s = 0
    for i in A:
        s += i
        B.append(s)
    B = [x for x in B if x!=erase]
    return B -End,"
 class Neuron:

    def __init__(self, w, f = lambda x: x):
        self.w = w
        self.f = f
        self.x = []

    def forward(self, x):
        self.x = x
        s = 0
        for i in range(len(x)):
            s+=self.w[i]*self.x[i]        
        return self.f(s)

    def backlog(self):        
        return self.x -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('[0-9]{6}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('[a-zA-Z]+ing', line, re.I) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('\w{4,}@(\w+\.)+\w+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    d = '([0][1-9]|[1-2]\d|[3][01])'
    m = '([0][1-9]|[1][0-2])'
    y = '(20[01]\d|[01]\d{3})'
    return re.fullmatch(f'{d}[\.|/]{m}[\.|/]{y}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('<div\s?\w*\s?/?>', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('[a-zA-Z0-9\s]+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('https?://[\w+\.]+\w+/?', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('(\w+\.?)+@(\w+\.)+\w+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('\w*r\d{3,5}r\w*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('[A-ZА-Я]{2}\d{3}\d{2,3}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('(\w+)\\1', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('.+@mail.ru|.+@gmail.com', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('\(20\d{2}\)\sBioinform.*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('[A-Z]\w+\s[A-Z]\.,\set al.', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('\w+a\s\w+a', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('\d?\d?\d?\d?\d?\d?2+\d?\d?\d?\d?\d?\d?', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('.*\s?A.*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('.*(rain|sun|wind|snow)\s.*', line, re.I) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('[ABCDEF0-9]+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('#?([0-9a-fA-F]{6}|[0-9a-fA-F]{3})', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('\d*\.?\d*[FCK]|-\d{1,3}\.?\d*[FCK]', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('-?\d*[\.]?\d*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 a,d = [str(i.lower()) for i in input().split()], {}
for i in range(len(a)):
    if a[i] not in d:
        d[a[i]] = 1
    elif a[i] in d:
        d[a[i]] += 1
for key,value in d.items():
    print(key, value) -End,"
 print(sum(int(input()) for i in range(int(input())))) -End,"
 def modify_list(l):
    l[:] = [(int(l[el] // 2)) for el in range(len(l)) if l[el]%2 == 0]
 -End,"
 a = input().split() # запаковываем список
b = [len(i) for i in a] # список длин слов
c = sorted(list(set(b))) # Множеством (set) убираем повторяющиеся, после переводим в словарь, и после сортируем (так как set не упорядочен)
for i in c: 
    print(i,': ', b.count(i)) # выводим эл-ты и их количество  -End,"
 from datetime import date, timedelta
y, m, d = [int(i) for i in input().split()]
td = int(input())
print((date(y,m,d)+timedelta(days=td)).strftime('%Y %-m %-d')) -End,"
 from itertools import groupby

a = [list(g) for k, g in groupby(input())]
print(''.join([str(len(i) if len(i)!=1 else '') + ''.join(set(i)) for i in a])) -End,"
 counter = {}
for word in input().lower().split():
    counter[word] = counter.get(word, 0) + 1
for k, v in counter.items():
    print(k, v, end='\n') -End,"
 print(sorted(list(input().lower())) == sorted(list(input().lower())), sep='\n') -End,"
 rating = {'A': 5, 'B': 4, 'C': 3, 'D': 2, 'F': 1}
x = [i for i in input().split()]
print('%.2f' % (x.count('A')/len(x))) -End,"
 a = list(map(int, input().split()))
print(*set([i for i in a if a.count(i) > 1])) -End,"
 print(''.join([i.capitalize() for i in input().split('_')])) -End,"
 def get_int(start_message, error_message, end_message):
    print(start_message)
    while True:
        n = input()
        if n.lstrip('-').isdigit() == True:
            print(end_message)
            return int(n)
        else:
            print(error_message)
 -End,"
 src_str, f_str = input(),  input()
x = {src_str.find(f_str,i) for i in range(len(src_str)) if src_str.find(f_str,i) != -1}
if len(x) == 0:
    print(-1)
else:
    print(*sorted(list(x))) -End,"
 def sum2(a,b):
    if isinstance(a, (int, float)) and isinstance(b, (int, float)) == True:
        return a + b
    elif isinstance(a, (int, float)) == False and isinstance(b, (int, float)) == False:
        return ""all arguments are not a numbers""
    elif isinstance(a, (int, float)) == False:
        return ""1st argument is not a number""
    else:
        return ""2nd argument is not a number"" -End,"
 for index in range(1,len(L)):
    if abs(L[index-1] - L[index]) == 1:
        index -= 1
        break -End,"
 from scipy.constants import c, e, h

def lam(U):
    return (h * c)/(e * U)




 -End,"
 tr = [int(input()) for i in range(3)]
p = sum(tr)/2
print(sum(tr), (p * (p-tr[0])*(p-tr[1])*(p-tr[2]))**0.5, sep='\n') -End,"
 s = float(input())
A = (3 * (3**0.5) * (s**2))/2 # hexagon
S = (((s/2)**2) * (3**0.5))/4 # triangle
print(round(A + (s ** 2) * 3 + S * 6)) -End,"
 from math import sqrt

rib = float(input())
print(round(3 * (rib ** 2) * sqrt(5 * (5 + 2 * sqrt(5))), 2)) # square
print(round((rib**3)/4 * (15 + 7 * sqrt(5)), 2)) # volume
 -End,"
 print(sum([int(i) for i in input().split()]))
 -End,"
 print(
    str(sum([int(i) for i in input().split()])) + 
    '#' + 
    str(sum([int(i) for i in input().split()]))
) -End,"
 print(*set(input().split('&'))) -End,"
 lst = input().split()
print(lst[1], lst[2], lst[-2], sep=' ') -End,"
 print('-$-'.join(reversed(input().split()))) -End,"
 lst = input().split()
print(len(lst), lst.count('one'), sep=' ') -End,"
 print(sum(map(int, input().split())))
# print(sum([int(i) for i in input().split()])) -End,"
 B2 = ''.join([B1[i] for i in range(1,len(B1),2)]) -End,"
 L = input()[1:-2].replace(""'"", '').replace(' ', '').split(',') -End,"
 arab_to_lat = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M'}
print(arab_to_lat[int(input())]) -End,"
 f = int(input())

if f != 0:
    print(round(int(input())/f, 1))
else:
    print('Division by zero!') -End,"
 print(*[i for i in range(0,int(input())+1)], sep='\n')




 -End,"
 print(*[i**2 for i in range(0, int(input())) if i % 2 == 0], sep='\n') -End,"
 x = 0
while True:
    w = input()
    if w.lstrip('-').isdigit():
        x += int(w)
    elif w == 'The End':
        print(x)
        break -End,"
 print(*[i for i in input().split() if i[0] != '*'], sep='\n') -End,"
 import math
x = int(input())
for i in range(2, int(math.sqrt(x))):
    if x % i == 0:
        print(i)
        break
else:
    print(x) -End,"
 print(*[i**3 for i in range(1, abs(int(input())))], sep='\n') -End,"
 def dfactorial(n):
    if n <= 0:
        return 1
    else:
        return n * dfactorial(n-2)



 -End,"
 def Kfactorial(n, k = 1):
    res = 1
    r = n%k if n%k > 0 else k
    while r <= n:
        res *= r
        r += k
    return res -End,"
 def convert(L):
    return [int(i) for i in L] -End,"
 def translate(number, base=2):
    ls = []
    while number > 0:
        number, a = divmod(number, base)
        ls = [a] + ls

    return ''.join(str(i) for i in ls) -End,"
 from math import factorial as fact

def factorial (n):
    return fact(n)

def sf(x):
    result = lambda x: result(x-1) * factorial(x) if x > 0 else 1
    return result(x) -End,"
 def maxId(L):
    L = list(map(int, L))
    return L.index(max(L)) -End,"
 def even_indeces(l):
    return [l[i] for i in range(len(l)) if i % 2 == 0] -End,"
 def even_elements(l):
    return [i for i in l if i % 2 == 0] -End,"
 def last_to_first(l):
    return list(reversed(l)) -End,"
 n = int(input()) 
res = sum([i for i in range(n+1) if i % 5 == 0 and i % 3 != 0])
print(res) -End,"
 def common(list_a, list_b):
    return set(list_a) & set(list_b) -End,"
 def front_x(words):
    return sorted([i for i in words if i.startswith('x')]) + \
           sorted([i for i in words if i.startswith('x') == False]) -End,"
 def is_prime(n):
    d = 2
    while d * d <= n and n % d != 0:
        d += 1
    return d * d > n -End,"
 n = int(input())
def donuts(n):
    if n > 9:
        return ""Всего пончиков: много""
    else:
        return ""Всего пончиков: "" + str(n)
print(donuts(n)) -End,"
 s = input()
def both_ends(s):
    if len(s) < 2:
        return ''
    else:
        return s[:2] + s[-2:]
print(both_ends(s)) -End,"
 s = input()
def fix_start(s):
    return s[0]+s[1:].replace(s[0], '*')

print(fix_start(s)) -End,"
 def numerics(n):
    return [int(i) for i in str(n)] -End,"
 def kaprekar_step(L):
    return int(''.join(str(i) for i in sorted(L, reverse=True))) - \
           int(''.join(str(i) for i in sorted(L))) -End,"
 def numerics(n):
    return [int(i) for i in str(n)]

def kaprekar_step(L):
    return int(''.join(str(i) for i in sorted(L, reverse=True))) - \
           int(''.join(str(i) for i in sorted(L)))

def kaprekar_loop(n):
        if n == 6174:
            print (n)
        else:
            while n != 6174:                
                print(n)
                n = numerics(n)
                n = kaprekar_step(n)
            print(n)
 -End,"
 def numerics(n):
    return [int(i) for i in str(n)]

def kaprekar_step(L):
    return int(''.join(str(i) for i in sorted(L, reverse=True))) - \
           int(''.join(str(i) for i in sorted(L)))

def kaprekar_loop(n):
        if n == 6174:
            print (n)
        elif n <= 1000:
            print(""Ошибка! На вход подано число 1000"")
        elif len({int(i) for i in str(n)}) == 1:
            print(""Ошибка! На вход подано число {} - все цифры одинаковые"".format(str(n)))
        else:
            while n != 6174:
                print(n)
                n = numerics(n)
                n = kaprekar_step(n)
            print(n)
 -End,"
 def numerics(n):
    return [int(i) for i in str(n)] -End,"
 # Recomendation to use numerics(n) and set() for counting
def numerics(n):
    return [int(i) for i in str(n)]

def kaprekar_check(n):
    if len(str(n)) in {3,4,6} and n not in {100, 1000, 100000} and len({int(i) for i in str(n)}) != 1:
        return True
    else:
        return False
 -End,"
 def kaprekar_step(L):
    return int(''.join(str(i) for i in sorted(L, reverse=True))) - \
           int(''.join(str(i) for i in sorted(L)))




 -End,"
 def numerics(n):
    return [int(i) for i in str(n)]


def kaprekar_step(L):
    return int(''.join(str(i) for i in sorted(L, reverse=True))) - \
           int(''.join(str(i) for i in sorted(L)))


def kaprekar_loop(n):
    x = set()
    if n in {495, 6174, 549945, 631764}:
        print(n)
    elif len(str(n)) not in {3, 4, 6} or n in {100, 1000, 100000} or len({int(i) for i in str(n)}) == 1:
        print(""Ошибка! На вход подано число {}, не удовлетворяющее условиям процесса Капрекара"".format(str(n)))
    else:
        while True:
            if n not in x:
                print(n)
                x.add(n)
                n = numerics(n)
                n = kaprekar_step(n)
            elif n in {495, 6174, 549945, 631764}:
                break
            elif n in x:
                print('Следующее число - {}, кажется процесс зациклился...'.format(str(n)))
                break -End,"
 def luka(L0, L1, n):
    for i in range(n):
        L0, L1 = L1, L0 + L1
    return L0 -End,"
 def fi(L0, L1, n):
    for i in range(n-1):
        L0, L1 = L1, L0 + L1
    return Decimal(L1)/Decimal(L0)





 -End,"
 import collections


def list_pull(x):
    if isinstance(x, collections.Iterable) and not isinstance(x, (str, bytes)):
        return [a for i in x for a in list_pull(i)]
    else:
        return [x] -End,"
 def kaprekar(n):
    c = str(n**2)
    for i in range(len(c)-1):
        if n == int(c[:i+1]) + int(c[i+1:]) and int(c[i+1:]) != 0:
            return True
    else:
        return False -End,"
 def verbing(s):
    if len(s) >= 3 and s.endswith('ing') == False:
        return s + 'ing'
    elif len(s) >= 3 and s.endswith('ing') == True:
        return s + 'ly'
    elif len(s) < 3:
        return s -End,"
 def front_back(a, b):
    a_l = (len(a) // 2) + len(a) % 2
    b_l = (len(b) // 2) + len(b) % 2
    return a[:a_l] + b[:b_l] + a[a_l:] + b[b_l:] -End,"
 def d_copy(a):
    b = []
    for elem in a:
        if isinstance(elem,list):
            b.append(d_copy(elem))
        else:
            b.append(elem)
    return b

L2 = d_copy(L1) -End,"
 import numpy as np

n = list(map(float, input().split(',')))

V1 = np.array(n)
V2 = np.array(np.array(n)[-2])
V3 = np.array(n)[::-1]
V4 = np.array(n)[::3]
V5 = np.array(range(len(n))) -End,"
 import numpy as np

V1 = np.array(list(map(int, input().split(','))))
V2 = np.array(list(map(int, input().split(','))))
V3 = V1 + V2
V4 = V1[::2] * V2[::-2] -End,"
 import numpy as np

a = np.array(list(map(int, input().split(','))))
b = np.array(list(map(int, input().split(','))))

V = a[a % b[-2] == 0] / b[-2]




 -End,"
 S = abs(round((A1[0] * (A2[1]-A3[1]) + A2[0] * (A3[1]-A1[1]) + A3[0] * (A1[1]-A2[1]))/2, 4))
print(S) -End,"
 for i in range(len(M1[0])):
    M1[-2][i] = np.sin((M1[-2][i] * np.pi) / 6)
    M1[i][-2] = np.exp(M1[i][-2])
M2 = M1.copy() -End,"
 import numpy as np

Z = np.array([0.]*int(input())) -End,"
 import numpy as np

a = input().split()

if a[-1].isalpha():
    Z = np.zeros(shape=list(map(int, a[:-1])), dtype=a[-1])
else:
    Z = np.zeros(shape=list(map(int, a)), dtype=np.float64)
 -End,"
 import numpy as np

print(Z.itemsize * Z.size) -End,"
 import numpy as np

a = np.zeros(shape=int(input()))
a[int(input())] = 1
Z = a -End,"
 import numpy as np

Z = np.array(range(int(input()), int(input()) + 1)) -End,"
 import numpy as np

Z = np.arange(int(input())).reshape(list(map(int, input().split()))) -End,"
 import numpy as np

NonZerros = np.nonzero(Z) -End,"
 import numpy as np

print(list(Z[Z>3])) -End,"
 import numpy as np

np.random.seed(42)
Z = np.random.sample(tuple(map(int, input().split()))) -End,"
 import numpy as np

np.random.seed(42)
matrix = np.random.sample(tuple(map(int, input().split())))
print(matrix.mean()) -End,"
 import numpy as np

np.random.seed(42)
x, y = map(int, input().split())
matrix = np.random.sample((x,y))

lst = [matrix[:, i].mean() for i in range(y)]
print(min(lst), max(lst), sep='\n')
 -End,"
 import numpy as np

Z = np.pad(Z, 1, mode='constant')
 -End,"
 import numpy as np

Z = np.diagflat(np.arange(1,int(input())+1)) -End,"
 import numpy as np

a = [int(i) for i in input().split()]
Z = np.diagflat(np.arange(1,a[1]+1), k=a[0])  -End,"
 import numpy as np

a, b = [int(i) for i in input().split()]
Z = np.zeros((a,b))
Z[1::2,::2] = 1
Z[::2,1::2] = 1
'''
Это не пролезло по времени на 8-м тесте )

a, b = [int(i) for i in input().split()]
a = np.zeros((a,b))
Z = np.float64([[(i+j)%2!=0 for j in range(len(a[i]))] for i in range(len(a))])
''' -End,"
 import numpy as np

print(tuple(*np.argwhere(Z == np.ravel(Z)[i]))) -End,"
 import numpy as np

Z = np.around((Y - np.mean(Y))/np.std(Y), 2) -End,"
 import numpy as np

Z = np.dot(A,B) -End,"
 import numpy as np

if len(A[0]) == len(B):
    Z = A.dot(B)
else:
    Z = 'Упс! Что-то пошло не так...' -End,"
 import numpy as np

Z[(Z>3)&(Z<9)] *= -1 -End,"
 import numpy as np

Z = np.array([np.ceil(i) if i > 0 else np.floor(i) for i in A])  -End,"
 import numpy as np

Z = np.intersect1d(A,B) -End,"
 import numpy as np 

np.seterr(all='ignore') -End,"
 import numpy as np

Z = np.arange(str(input()), str(input()), dtype='datetime64[D]') -End,"
 import numpy as np

n,m = map(int,input().split())
k = int(input())
Z = np.zeros((n,m))

Z = np.array([np.arange(k,k + len(Z[i])) for i in range(len(Z))], dtype=np.float64)
 -End,"
 import numpy as np

n,m = map(int, input().split())
k = int(input())

Z = np.array([np.tile(i,m) for i in np.arange(k,k+n)], dtype=np.float64)
 -End,"
 import numpy as np

Z = np.array(list(V), dtype=np.float64)
 -End,"
 import numpy as np

start, stop, n = [int(input()) for i in range(3)]
Z = np.around(np.geomspace(start, stop, num=n), 3) -End,"
 X = int(input())
print(X//60) 
print(X%60)



 -End,"
 X = int(input())
H = int(input())
Y = int(input())
print((H * 60 + Y + X) // 60)
print((H * 60 + Y + X) % 60)
 -End,"
 # put your python code here
A = int(input())
B = int(input())
H = int(input())
if A > B:
    print(""Вы неправильно ввели данные"")
elif A <= H <= B:
    print(""Это нормально"")
elif H > B:
    print(""Пересып"")
else:
    print(""Недосып"")
 -End,"
 # put your python code here
n = int(input())
if n < 1900 or n > 3000:
    print(""Введите год в диапазоне от 1900 до 3000"")
elif (n % 4 == 0 and n % 100 != 0) or n % 400 == 0:
    print(""Високосный"")
else:
    print(""Обычный"")
 -End,"
 a = int(input())
b = int(input())
c = int(input())
if a >= b and a >= c and b >= c:
    print(""\n"", a, ""\n"", c, ""\n"", b)
elif a >= b and a >= c and b < c:
    print(""\n"", a, ""\n"", b, ""\n"", c)
elif b >= a and b >= c and a >= c:
    print(""\n"", b, ""\n"", c, ""\n"", a)
elif b >= a and b >= c and a <= c:
    print(""\n"", b, ""\n"", a, ""\n"", c)
elif c >= b and c >= a and a >= b:
    print(""\n"", c, ""\n"", b, ""\n"", a)
elif c >= b and c >= b and a <= b:
    print(""\n"", c, ""\n"", a, ""\n"", b)
 -End,"
 a = int(input())
b = int(input())
c = int(input())
if a >= b and b >= c:
    print(""\n"", a, ""\n"", c, ""\n"", b)
elif a >= c and c >= b:
    print(""\n"", a, ""\n"", b, ""\n"", c)
elif b >= a and a >= c:
    print(""\n"", b, ""\n"", c, ""\n"", a)
elif b >= c and c >= a:
    print(""\n"", b, ""\n"", a, ""\n"", c)
elif c >= a and a >= b:
    print(""\n"", c, ""\n"", b, ""\n"", a)
elif c >= b and b >= a:
    print(""\n"", c, ""\n"", a, ""\n"", b)
 -End,"
 a, b = map(int, input().split())
print(a + b)
 -End,"
 a, b = input().split()  # Вводим данные через пробел
a = int(a)              # Присваиваем численный тип разделенной пробелом переменной a
b = int(b)              # Присваиваем численный тип разделенной пробелом переменной b
print(a + b)            # Складываем
 -End,"
 a, b = input().split()  # Вводим данные через пробел
print(int(a) + int(b))  # Присваиваем численный тип переменным, и сразу их складываем
 -End,"
 n = input()
if 11 <= int(n) <= 20 or n[-1] in(""0,5,6,7,8,9"") or (int(n) > 10 and int(n[-2]) == 1):
    print(n, ""программистов"")
elif n[-1] in(""1"", ""1001""):
    print(n, ""программист"")
elif n[-1] in(""2"", ""3"", ""4""):
    print(n, ""программиста"")
 -End,"
 a = int(input())
i = a
s = 0
while i != 0:
    s += i
    i = int(input())
print(s)
 -End,"
 a = int(input())
b = int(input())
c = 1
while c % a != 0 or c % b != 0:
    c += 1
print(c)
 -End,"
 i = int(input())
s = 0
while i != 0:
    s += i
    i = int(input())
print(s)
 -End,"
 a = int(input())
while a <= 100:
    if a >= 10:
        print(a)
        a = int(input())
    else: 
        a = int(input())
 -End,"
 a = int(input())
b = int(input())
c = int(input())
d = int(input())
if a <= b and b <=10 and d <= 10 and c <=d:
 for j in range(c, d + 1):
    print('\t', j, end='')
 for i in range(a, b + 1):
    print()
    print(i, end='')
    for j in range(c, d + 1):
        print('\t', i * j, end='') -End,"
 a = int(input())
b = int(input())
count = 0  # счётчик количества слагаемых
sum = 0  # сумма слагаемых
for i in range(a, b + 1):
    if i % 3 == 0:
        sum += i
        count += 1
        avg = sum / count  # среднее арифметическое
print(avg)
 -End,"
 a = input()
b = a.upper()
c = b.count(""G"")
d = b.count(""C"")
e = len(b)
s = c + d
print((s/e)*100)
 -End,"
 s = input()
q = s+"" ""
i = 0
j = 0
for i in range(len(s)):
    if q[i] == q[i+1]:
        i += 1
        j += 1
    else:
        print(q[i], j+1, sep="""", end='')
        j = 0
 -End,"
 s = input()
s = s+"" ""
i = 0
j = 0
for i in range(len(s)-1):
    if s[i] == s[i+1]:
        i += 1
        j += 1
    else:
        print(s[i], j+1, sep="""", end='')
        j = 0
 -End,"
 s = input() #  Вводим данные
s = s+"" "" #  увеличиваем s на пробел(1 символ), избежать было конфликта в стр.6: if s[i]==s[i+1] ""i+1:Out of Range""
i = 0 #  Счётчик, который пробежит все символы
j = 0 #  Счетчик, кол-ва одинаковых символов подряд
for i in range(len(s)-1): #  Кол-во циклов для i = кол-ву введенных в input символов
    if s[i] == s[i+1]: # Сравниваем символы
        i += 1 # Счётчик перехода к след. символу
        j += 1 # Счётчик кол-ва одинаковых символов
    else: # Цикл одинаковых букв завершен, принтуем и переходим к след. циклу
        print(s[i], j+1, sep="""", end='') # Выводим букву, кол-во подряд, убираем пробел, склеиваем принты из циклов
        j = 0 #  Обнуляем счетчик букв подряд для следующего цикла
 -End,"
 a = input()  # Вводим данные в строку
b = [int(i) for i in a.split()]  # Преобразуем в строку в список чисел 
sum = 0  # создаем переменную ""счётчик"" и присваиваем ей 0 
for i in range(len(b)):  # Запускаем цикл для i для индекса
    sum = sum + b[i]  # Циклично суммируем все числа из списка
print(sum)  # Выводим сумму
 -End,"
 text = input()  # Ввод строки
b = [int(i) for i in text.split()]  # Преобразуем в ряд чисел с пробелами
sum = 0
if len(b) == 0:  # Рассмотрение пустого списка
    b = 0
    print(b)
if len(b) == 1:  # Рассмотрение списка из одного символа 
    print(b[0])
elif len(b) == 2:  # Рассмотрение списка из двух символов
    print(b[1]*2, b[0]*2)
else:
    for i in range(len(b)):  # Cоздание цикла с любой длиной >2
        if i == 0:
            sum = b[1] + b[-1]  # Итерация для крайнего первого символа
        elif i == len(b)-1:
            sum = b[-2] + b[0]  # Итерация для крайнего последнего символа
        else:
            sum = b[i-1] + b[i+1]  # Итерации для прочих символов
        print(sum, end=' ')
 -End,"
 text = input()  # Ввод строки
seq = [int(i) for i in text.split()]
seq.sort()
print(*set([v for v in filter(lambda v:seq.count(v) > 1,seq)]),end="""")
 -End,"
 a = int(input())      # Вводим первое число
b = a                 # b -это переменная которая будет хранить слагаемые
s = a ** 2            # s - сумма квадратов слагаемых, изначально == a*a
while b != 0:         # запускаем цикл ввода, пока сумма слагаемых !=0
    a = int(input())  # Ввод всех последующих чисел
    b = b + a         # Сумма чисел, включая вновь введенное
    s = s + a ** 2    # Сумма квадратов всех введенных чисел
print(s)              # Вывод результата когда b стало ==0
 -End,"
 n = int(input())
a = 0
x = []
while a <= n:
    for i in range(a):
        x.append(a)
    a = a + 1
y = x[:n]
for i in y:
    print(i, end="" "")
 -End,"
 #lst = ""5 8 2 7 8 8 2 4""
lst = [int(i)for i in input().split()]
x = int(input())
if x not in lst:
    print(""Отсутствует"")
else:
    for i in range(len(lst)):
        if lst[i] == x:
            print(i, end=' ')
 -End,"
 def f(x):
    a = 0
    if x <= -2:
        a = 1 - (x + 2) ** 2
    elif -2 < x <= 2:
        a = -x/2
    elif 2 < x:
        a = (x-2)**2 + 1
    return a
 -End,"
 def modify_list(l):
    new_list = [item // 2 for item in l if item % 2 == 0]
    l.clear()
    l += new_list -End,"
 def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    elif key*2 in d:
        d[key*2].append(value)
    else:
        d[key*2] = [value]
 -End,"
 lst = [(str(i).lower()) for i in input().split()]
d = {}
while len(lst) > 0:
    if lst[0] not in d:
        d[lst[0]] = 1
        lst.remove(lst[0])
    else:
        d[lst[0]] += 1
        lst.remove(lst[0])
for key, value in d.items():
    print(key, value)
 -End,"
 lst = [(str(i).lower()) for i in input().split()]
d = {}
for i in lst:
    if i not in d:
        d[i] = 0
    if i in d:
        d[i] = d[i]+1
for key, value in d.items():
    print(key, value)
 -End,"
 lst = [(str(i).lower()) for i in input().split()] # Транформируем текст в список слов с нижним буквенном регистром
d = {}  # Создаём пустой словарь
for i in lst:  #Перебираем все слова в списке
    if i in d: #
        d[i] = d[i]+1 # Если слово уже есть в списке и встретилось опять, увеличиваем кол-во/value на 1
    if i not in d:  # Если слова из списка еще нет в словаре:
        d[i] = 1  # Помещаем в словарь где слово = key, с кол-вом/value =1
for key, value in d.items():
    print(key, value)  # Выводим получившийся словарь(список слов, кол-во повторов слова в списке lst)
 -End,"
 

n = int(input())      # Вводим n = кол-ву значений х
d = {}                # Создаём пустой список( Здесь будем накапливать пары: Ввод х:результат) 
for i in range(n):
    x = int(input())  # Ввод значения х в цикле(т.е. n раз) 
    if x in d.keys(): 
        print(d[x])
    else:
        d[x] = f(x)
        print(d[x])
 -End,"
 n = int(input())
d = {}
for i in range(n):
    x = int(input())
    if x not in d.keys():
        d[x] = f(x)
    print(d[x])
 -End,"
 

def quick():  # Задаем свою функцию ""quick""
    d = {}  # Создаем пустой список для накопления n-ого кол-ва пар (ключ: значение)х:f(x)
    n = int(input())  # Вводим кол-во повторов n 
    i = 0  # Инициируем и обнуляем счётчик повторов
    while i < n:  # Пока кол-во вводов будет меньше n, накапливаем результат f(x) в списке d
        x = int(input())  # Ввод переменной х (будет сделано n раз)
        if x in d:  # Если такое х уже вводили раньше(т.е. ключ уже есть в списке), то переходим к след. вводу х
            pass  #
        else:  #( или if x not in)  если одинакового числа х не было введено ранее,то:
            d[x] = f(x)  # Добавляем в список 
        i += 1  # Счётчик циклов ввода х
        print(d[x]) # По окончании цикла выводим все накопленные рез-ты работы ф-ции f(x)
quick()  # вызов нашей свежесозданной проги ""quick"" -End,"
 def quick():  # Задаем свою функцию ""quick""
    d = {}  # Создаем пустой список для накопления n-ого кол-ва пар (ключ: значение)х:f(x)
    n = int(input())  # Вводим кол-во повторов n 
    i = 0  # Инициируем и обнуляем счётчик повторов
    for i in range(n):  # Пока кол-во вводов будет меньше n, накапливаем результат f(x) в списке d
        x = int(input())  # Ввод переменной х (будет сделано n раз)
        if x in d:  # Если такое х уже вводили раньше(т.е. ключ уже есть в списке), то переходим к след. вводу х
            pass  #
        else:  #( или if x not in)  если одинакового числа х не было введено ранее,то:
            d[x] = f(x)  # Добавляем в список
        print(d[x]) # По окончании цикла выводим все накопленные рез-ты работы ф-ции f(x)
quick()  # вызов нашей свежесозданной проги ""quick"" -End,"
 s = input()  # Вводим данные
s = s+"" ""  # Увеличиваем s на пробел(1 символ), избежать конфликта в стр.6: if s[i]==s[i+1] ""i+1:Out of Range""
i = 0  # Счётчик, который пробежит все символы
j = 0  # Счетчик, кол-ва одинаковых символов подряд
for i in range(len(s)-1):  # Кол-во циклов для i = кол-ву введенных в input символов
    if s[i] == s[i+1]:  # Сравниваем символы
        i += 1  # Счётчик перехода к след. символу
        j += 1  # Счётчик кол-ва одинаковых символов
    else:  # Цикл одинаковых букв завершен, принтуем и переходим к след. циклу
        print(s[i], j+1, sep="""", end='')  # Вывод: буква, кол-во подряд, убрали пробелы, склейка принтов из циклов
        j = 0  # Обнуляем счетчик букв подряд для следующего цикла
 -End,"
 print(""*"","" *"","" *"","" *"","" *"")
print(""*"",""         "", ""*"")
print(""*"",""         "", ""*"")
print(""*"",""         "", ""*"")
print(""*"","" *"","" *"","" *"","" *"")
 -End,"
 print(""*  *  *  *  *"")
print(""*"",""         "", ""*"")
print(""*"",""         "", ""*"")
print(""*"",""         "", ""*"")
print(""*  *  *  *  *"")
 -End,"
 print(""*  *  *  *  *"")
print(""*           *"")
print(""*           *"")
print(""*           *"")
print(""*  *  *  *  *"")
 -End,"
 print(""123456789"")
print(""   456  "")
print(""  34567 "")
print("" 2345678"")
print(""123456789"")
print("" 2345678"")
print(""  34567"")
print(""   456"")
print(""    5"")
 -End,"
 print('''""Старый гений"", ""После бала"", ""Ася"", ""Кавказ"", ""Куст сирени""''') -End,"
 print('""Старый гений"", ""После бала"", ""Ася"", ""Кавказ"", ""Куст сирени""')
 -End,"
 print('''«Старый гений», ""После бала"", 'Ася', «Кавказ», ""Куст сирени""''')
 -End,"
 print(""«Старый гений», \""После бала\"", 'Ася', «Кавказ», \""Куст сирени\"""")
 -End,"
 print(7 * ""*  *  *  *  * "")# put your python code here
print(7 * ""*           * "")
print(7 * ""*           * "")
print(7 * ""*           * "")
print(7 * ""*  *  *  *  * "")


 -End,"
 s = input()
print(s)
print(""ПРИВЕТ,ТЕПЕРЬ ТЫ В ШКОЛЕ!"")
 -End,"
 # put your python code here
s = input()
print(""Привет,"", s+""!"")



 -End,"
 s = input()
n = int(input())
print(s * n)
 -End,"
 a = int(input())
b = int(input())
c = int(input())
sum = a + b + c
print(sum)
 -End,"
 name = input()
family = input()
tel = input()
print(""Имя:"" + name)
print(""Фамилия:"" + family)
print('Телефон:' + tel)
 -End,"
 print('Привет, как тебя зовут?')
a = input()
print(a + ', очень приятно познакомиться.')
 -End,"
 print('Напишите первое число:')
a = int(input())
print('Напишите второе число:')
b = int(input())
c = a + b
d = a - b
print('Если сложить', str(b), 'и', str(a), 'получиться', str(c)+'!', 'А если из первого', str(a), 'вычесть', str(b), 'получиться', str(d)+""!"")
 -End,"
 a = input()
b = a[::-1]
print(b) -End,"
 a = input()
if int(a[0]) == 1:
    print(a[1])
elif int(a[1]) == 1:
    print(a[0])
else:
    print(2)
 -End,"
 a = input()
b = int(a[0])
c = int(a[1])
d = int(a[2])
sum = str(b + c + d)
mult = str(b * c * d)
print(sum+"",""+mult) -End,"
 a = int(input())
b = int(input())
if a < b:
    print(a)
else:
    print(b) -End,"
 a = int(input())
b = int(input())
if a > b:
    print(""Первое"")
elif a < b:
    print('Второе')
else:
    print(""Числа одинаковые"")
 -End,"
 a = input()
max = 0
if int(a[0]) >= int(a[1]) and int(a[0]) >= int(a[2]):
    max = int(a[0])
elif int(a[0]) >= int(a[1]) and int(a[0]) <= int(a[2]):
    max = int(a[2])
elif int(a[1]) >= int(a[0]) and int(a[1]) >= int(a[2]):
    max = int(a[1])
elif int(a[1]) >= int(a[0]) and int(a[1]) <= int(a[2]):
    max = int(a[2])
elif int(a[2]) >= int(a[0]) and int(a[2]) >= int(a[1]):
    max = int(a[2])
elif int(a[2]) >= int(a[0]) and int(a[2]) <= int(a[1]):
    max = int(a[1])
print(max)
 
    
 -End,"
 a = input()
max = 0
if int(a[0]) >= int(a[1]) >= int(a[2]):
    max = int(a[0])
elif int(a[0]) >= int(a[2]) >= int(a[1]):
    max = int(a[0])
elif int(a[1]) >= int(a[0]) >= int(a[2]):
    max = int(a[1])
elif int(a[1]) >= int(a[2]) >= int(a[0]):
    max = int(a[1])
elif int(a[2]) >= int(a[0]) >= int(a[1]):
    max = int(a[2])
elif int(a[2]) >= int(a[2]) >= int(a[0]):
    max = int(a[2])
print(max) -End,"
 a = input()  # Ввод числа списком
max = int(a[0])  # Присваиваем переменной max цифровое значение 1й цифры
if max <= int(a[1]):  # Сравниваем 1-е и 2-е числа
    max = int(a[1])  # Если 2-е( с индексом ""1"") больше, присваеваем его max
else:
    pass
if max <= int(a[2]):  # Cравниваем большее число из предыдущего сравнения с 3-м числом
    max = int(a[2])  # Если оно больше, записываем его в max
else:
    pass
print(max)  # Выводим на печать
 -End,"
 games = int(input())
results = {}
for n in range(games):
    line = input()
    line = line.split("";"")
    for i in range(0,3,2):
        if line[i] not in results:
            results[line[i]] = [1, 0, 0, 0, 0]
        else:
            results[line[i]][0] += 1
    if line[1] > line[3]:
        results[line[0]][1] += 1
        results[line[2]][3] += 1
    elif line[1] == line[3]:
        results[line[0]][2] += 1
        results[line[2]][2] += 1
    else:
        results[line[0]][3] += 1
        results[line[2]][1] += 1

for team, res in results.items():
    res[4] = res[1]*3 + res[2]
    print(team+"":"", res[0], res[1], res[2], res[3], res[4])

 -End,"
 s = str(input())
a = []
for i in range(len(s)):
    si = s[i]
    a.append(si)
b = []
n = str(input())
for j in range(len(n)):
    sj = n[j]
    b.append(sj)
p = {}
for pi in range(len(s)):
    key = s[pi]
    p[key] = 0
j1 = 0
for i in range(0, len(a)):
    key = a[i]
    while j1 < len(b):
        bj = b[0]
        if key in p:
            p[key] = bj
        b.remove(bj)
        break
c = []
si = str(input())
for si1 in range(0, len(si)):
    ci = si[si1]
    c.append(ci)
co = []
for ci in range(0, len(c)):
    if c[ci] in p:
        cco = c[ci]
        pco = p[cco]
        co.append(pco)
d = []
di = str(input())

for sj1 in range(0, len(di)):
    dj = di[sj1]
    d.append(dj)

do = []

for di in range(0, len(d)):
    for key in p:
        pkey = key
        if p.get(key) == d[di]:
            ddo = pkey
            do.append(ddo)

for i in range(0, len(co)):
    print(co[i], end='')
print()

for j in range(0, len(do)):
    print(do[j], end='')
 -End,"
 known = set()
unknown = set()
for _ in range(int(input())):
    known.add(input().strip().lower())

for _ in range(int(input())):
    for word in input().strip().lower().split():
        if word not in known:
            unknown.add(word)
for word in unknown:
    print(word)
 -End,"
 n = int(input())
pos = [0,0]
for i in range(n):
    cmd = input()
    ls = cmd.split()
    if ls[0] == ""север"":
        pos[1] += int(ls[1])
    elif ls[0] == ""запад"":
        pos[0] -= int(ls[1])
    elif ls[0] == ""юг"":
        pos[1] -= int(ls[1])
    elif ls[0] == ""восток"":
        pos[0] += int(ls[1])
print(pos[0],pos[1])
 -End,"
 import math
r=float(input())
print(format(2*math.pi*r)) -End,"
 a = 0
x = 11
for i in range(x):
    print(a)
    a = a + 1
 -End,"
 x=int(input())
for i in range(x+1):
    print(i)
 -End,"
 x=int(input())
i = 0
while i <= x:
    print(i)
    i += 1
 -End,"
 zaehlevon = int(input())
zaehlebis = int(input())
for x in range(zaehlevon,zaehlebis + 1):
    print(x)
 -End,"
 start = int(input())
stop = int(input())
step = stop - start
for i in range(step + 1):
    print(i + start)
 -End,"
 zaehlevon = int(input())
zaehlebis = int(input())
while zaehlevon <= zaehlebis:
    print(zaehlevon)
    zaehlevon = zaehlevon + 1
 -End,"
 zaehlevon = int(input())
zaehlebis = int(input())
for i in range(zaehlevon, zaehlebis + 1):
    print(zaehlevon)
    zaehlevon = zaehlevon + 1



 -End,"
 zaehlevon = int(input())
zaehlebis = int(input())
for i in range(zaehlevon, zaehlebis + 1):
    print(i)
 -End,"
 zaehlevon = int(input())
zaehlebis = int(input())
for zaehlevon in range(zaehlevon, zaehlebis + 1):
    print(zaehlevon)
 -End,"
 jahr = int(input())

if( jahr % 4 == 0 and not jahr % 100 == 0) or jahr % 400 == 0:
    print (""Das Jahr ist ein Schaltjahr."") 
else:
    print(""Das Jahr ist kein Schaltjahr."") -End,"
 def flaeche_dreieck( h, g):
    return h * g / 2
 -End,"
 eingabe=int(input())
i=1
while i*i < eingabe:
    q = i * i
    print(q)
    i = i + 1
 -End,"
 eingabe=int(input())
summe=0
while eingabe != 0:
    summe = summe + eingabe
    eingabe = int(input())
print(summe) -End,"
 monty_python = ""Monty Python""
monty = monty_python[6:]
print(monty)
 -End,"
 class Car():
    def __init__(self):
        self.speed=30
        self.tires=4

    def accelerate(self):
        self.speed=self.speed+10

my_car = Car()
print(my_car.tires) -End,"
 class Person():
    def __init__(self, vorname, nachname, adresse, typ, geburtsdatum):
        self.vorname=vorname # so gehts... self.vorname wird der Wert des Parameters vorname zugewiesen
        self.nachname = nachname
        self.adresse = adresse# ergänze hier die restlichen Attribute:
        self.typ = typ
        self.geburtsdatum = geburtsdatum
        
person = Person(""Heintz"", ""Mustermann"", ""Irgendwo in Usingen"", ""Lehrer"", ""12.12.1912"")
print(person.vorname)
print(person.nachname)
print(person.adresse)
print(person.typ)
print(person.geburtsdatum) -End,"
 class Person():
    def __init__(self, vorname, nachname, adresse, typ, geburtsdatum):
        self.vorname = vorname
        self.nachname = nachname
        self.adresse = adresse
        self.typ = typ
        self.geburtsdatum = geburtsdatum

    def get_name(self):
        return self.vorname + "" "" + self.nachname


person = Person(""Heintz"", ""Mustermann"", ""Irgendwo in Usingen"", ""Lehrer"", ""12.12.1912"")
print(person.get_name())
 -End,"
 class Person():
    def __init__(self, vorname, nachname, adresse, typ, geburtsdatum):
        self.vorname = vorname
        self.nachname = nachname
        self.adresse = adresse
        self.typ = typ
        self.geburtsdatum = geburtsdatum

    def get_name(self):
        return self.vorname+"" ""+self.nachname

    def set_nachname(self, wert):
        self.nachname = wert


person = Person(""Heintz"", ""Mustermann"", ""Irgendwo in Usingen"", ""Lehrer"", ""12.12.1912"")
person.set_nachname(""Mustermann-Musterfrau"")
print(person.get_name())
 -End,"
 

class Trike():
    def __init__(self):
        self.bezeichnung = ""Trike""
        self.raeder = 3
        self.geschwindigkeit = 0

    def beschleunige(self):
        self.geschwindigkeit = self.geschwindigkeit+1

    def bremse(self):
        self.geschwindigkeit = self.geschwindigkeit-1


trike = Trike()
 -End,"
 if list[0] > list[1]:
    if list[0] > list[2]:
        groesstes_element = list[0]
    else:
        groesstes_element = list[2]
if list[0] < list[1]:
    if list[1] > list[2]:
        groesstes_element = list[1]
    else:
        groesstes_element = list[2]
print (groesstes_element)




 -End,"
 list=[int(input()),int(input())]
h = list[0]
j = list[1]
list[0] = j
list[1] = h
# Die Zeile oben liest eine Liste mit zwei Elementen ein.
# Tausche nun das erste und zweite Element mit Hilfe einer Hilfsvariablen.
 -End,"
 list=[int(input()),int(input())]
i = list[0]
list[0] = list[1]
list[1] = i
# Die Zeile oben liest eine Liste mit zwei Elementen ein.
# Tausche nun das erste und zweite Element mit Hilfe einer Hilfsvariablen. -End,"
 import math
temperaturen2017Frankfurt = [0.9, 2, 5.8, 9.8, 14.1, 17.3,]
temperaturen2017Frankfurt.append(19.2)
temperaturen2017Frankfurt.append(18.2)
temperaturen2017Frankfurt.append(14.8)
temperaturen2017Frankfurt.append(9.9)


# Keine Ausgabe erforderlich -End,"
 zahl=int(input())
if zahl in list:
    print(""In Liste enthalten"")
else:
    print(""Nicht in Liste enthalten"")
 -End,"
 #liste = [101, 90, 70, 40, 200, 100] ...oder andere Zahlenwerte
#Berechne das Maximum:
#max = math.inf
m = liste[0]
for listenelement in liste:
    if listenelement > m:
        m = listenelement
print(m) -End,"
 a = int(input())  # Ввод данных
s1 = 3/2 * a * a * (3**0.5)  # площадь правильного 6-угольника
s2 = 3 * a * a  # площадь 3-х квадратов
s3 = 6 * (3 ** 0.5) * ((a/2)**2)/4  # площадь 6 маленьких равносторонних 3-угольников сос тороной а/2
print(s1 + s2 + s3)  # Результат
 -End,"
 a = int(input())
b = int(input())
c = int(input())
sum = a ** 3 + b ** 3 + c ** 3
print(sum)
 -End,"
 a = int(input())
if 99 < a < 1000:
    print(""YES"")
else:
    print('NO')
 -End,"
 a = int(input())
b = int(input())
boys = (a - b) / 2
girls = (a + b) / 2
print(girls, boys)
 -End,"
 a = int(input())
b = a//100
c = (a - b * 100) // 10
d = (a - b * 100 - c * 10)
b = str(b) + '*10^2'
c = str(c) + '*10^1'
d = str(d) + '*10^0'
f = b + '+' + c + '+' + d
print(""Развернутая формула записи числа:"")
print(f)
 -End,"
 a = int(input())  # Ввод числа
b = a // 100  # получаем первое число
c = (a - b * 100) // 10  # получаем второе число
d = (a - b * 100 - c * 10)  # получаем третье число
b = str(b) + '*10^2' 
c = str(c) + '*10^1'
d = str(d) + '*10^0'
print(""Развернутая формула записи числа:"") # Добавляем вывод пояснительной строки, как требует задание  
print(b + '+' + c + '+' + d)  # Вывод Результата
 -End,"
 n=input()
if int(n)==1 or (int(n[-1])==1 and not int(n[-2])==1):
    end=''
elif 2<=int(n)<=4 or (2<=int(n[-1])<=4 and not int(n[-2])==1):
    end='а'
else:
    end='ов'
print(n+' программист{}'.format(end)) -End,"
 number=input()
if sum(list(map(int, number[0:3])))==sum(list(map(int, number[3:6]))):
    print('Счастливый')
else:
    print('Обычный') -End,"
 from fractions import gcd
a, b = int(input()), int(input())
print(int((a*b)/gcd(a,b))) -End,"
 while True:
    n=int(input())
    if n<10: continue
    elif n>100: break
    else: print(n) -End,"
 a, b, c, d = int(input()), int(input()), int(input()), int(input())
print('', end='\t')
print('\t'.join(str(i) for i in range(c, d+1)))
for i in range (a, b+1):
    print(i, end='\t')
    print('\t'.join(str(i*k) for k in range(c, d+1))) -End,"
 a, b = int(input()), int(input())
a=list(filter(lambda x: x%3==0, range(a, b+1)))
print(sum(a)/len(a)) -End,"
 word=input()
ans=word[0]
i=0
char=word[0]
for j in word:
    if char==j:
        i+=1
    else:
        char=j
        ans+=str(i)+char
        i=1
ans+=str(i)
print(ans) -End,"
 print(sum(list(map(int,input().split())))) -End,"
 line=list(map(int, input().split()))
l=len(line)
if l<3:
    print(*line[::-1])
else:
    ans=[line[(i-1)%l]+line[(i+1)%l] for i in range(l)]
    print(*ans) -End,"
 line=list(map(int, input().split()))
ans=set()
for i in line:
    if line.count(i)>1: ans.add(i)
print(*ans) -End,"
 ans=[]
while True:
    ans.append(int(input()))
    if sum(ans)==0:
        print(sum(i**2 for i in ans))
        break -End,"
 n=int(input())
count=0
count2=1
flag=True
ans=[]
while flag:
    for i in range(count2):
        ans.append(count2)
        count+=1
        if count==n:
            flag=False
            break
    count2+=1
print(*ans) -End,"
 lst=list(map(int, input().split()))
x=int(input())
if lst.count(x)==0:
    print('Отсутствует')
else:
    print(*[i for i in range(len(lst)) if lst[i]==x]) -End,"
 lst=[]
while True:
    temp=input()
    if temp!='end': lst.append(list(map(int, temp.split())))
    else: break
li, lj = len(lst), len(lst[0])
ans=[]
for i in range(li):
    for j in range(lj):
        print((lst[i][(j+1)%lj]+lst[i][j-1]+lst[(i-1)][j]+lst[((i+1)%li)][j]), end=' ')
    print()
                   -End,"
 n=int(input())
a=[[0 for i in range(n)] for j in range(n)]
up, right, down, left = 0, n-1, n-1, 0
i, j = 0, 0
for k in range(1, 1+n**2):
    a[i][j]=k
    if i==up and j<right:
        j+=1
        if j==right: up+=1
    elif j==right and i<down:
        i+=1
        if i==down: right-=1
    elif i==down and j>left:
        j-=1
        if j==left: down-=1
    elif j==left and i>up:
        i-=1
        if i==up: left+=1
for i in range(n):
    print(*a[i]) -End,"
 def f(x):
    if x<=-2:
        return 1-(x+2)**2
    elif -2<x<=2:
        return -x/2
    else:
        return (x-2)**2+1 -End,"
 def modify_list(l):
    i=0
    while i<len(l):
        if l[i]%2==1: del(l[i])
        else:
            l[i]=l[i]//2
            i+=1 -End,"
 def update_dictionary(d, key, value):
    if key in d.keys():
        d[key].append(value)
    elif 2*key in d.keys():
        d[2*key].append(value)
    else:
        d[2*key]=[value] -End,"
 ans={}
for word in input().lower().split():
    if word in ans: ans[word]+=1
    else: ans[word]=1
for elem in ans.items():
    print(*elem) -End,"
 ans={}
for x in range(int(input())):
    t=int(input())
    if t not in ans: ans[t]=f(t)
    print(ans[t]) -End,"
 n=int(input())
a=[[0 for i in range(n)] for j in range(n)]
up, right, down, left = 0, n-1, n-1, 0
i, j = 0, 0
for k in range(1, 1+n**2):
    a[i][j]=k
    if i==up and j<right:
        j+=1
        if j==right: up+=1
    elif j==right and i<down:
        i+=1
        if i==down: right-=1
    elif i==down and j>left:
        j-=1
        if j==left: down-=1
    elif j==left and i>up:
        i-=1
        if i==up: left+=1
for i in range(n):
    print(*a[i]) -End,"
 from math import pi
r=float(input())
print(pi*r*2) -End,"
 from sys import argv
print(*[str(i) for i in sys.argv[1:]]) -End,"
 n=int(input())
teams={}
for i in range(n):
    temp=input().split(';')
    if temp[0] in teams:
        teams[temp[0]][0]+=1
    else:
        teams[temp[0]]=[1, 0, 0, 0, 0]
    if temp[2] in teams:
        teams[temp[2]][0]+=1
    else:
        teams[temp[2]]=[1, 0, 0, 0, 0]
    if temp[1]==temp[3]:
        teams[temp[0]][2]+=1
        teams[temp[0]][4]+=1
        teams[temp[2]][2]+=1
        teams[temp[2]][4]+=1
    elif temp[1]>temp[3]:
        teams[temp[0]][1]+=1
        teams[temp[0]][4]+=3
        teams[temp[2]][3]+=1
    else:
        teams[temp[0]][3]+=1
        teams[temp[2]][4]+=3
        teams[temp[2]][1]+=1
for k, v in teams.items():
    print(k, ' '.join(list(map(str, v))), sep=':') -End,"
 abc1, abc2, word1_1, word2_2 = input(), input(), input(), input()
tr1_2=str.maketrans(abc1, abc2)
tr2_1=str.maketrans(abc2, abc1)
word1_2=word1_1.translate(tr1_2)
word2_1=word2_2.translate(tr2_1)
print(word1_2, word2_1, sep='\n') -End,"
 n=int(input())
dic=[input().lower() for i in range(n)]
m=int(input())
a=sum([input().lower().split() for i in range(m)], [])
ans=set(filter(lambda x: x not in dic, a))
print('\n'.join(ans)) -End,"
 ans=[0, 0]
for i in range(int(input())):
    temp=input().split()
    if temp[0]=='север':
        ans[1]+=int(temp[1])
    if temp[0]=='запад':
        ans[0]-=int(temp[1])
    if temp[0]=='юг':
        ans[1]-=int(temp[1])
    if temp[0]=='восток':
        ans[0]+=int(temp[1])
print(*ans) -End,"
 print(float(input())%1) -End,"
 try:
    line=input().split()
    print(*line[1::2][::-1])
except EOFError:
    pass -End,"
 time=int(input())
print(':'.join([str((time//3600)%24), ('0'+str((time//60)%60))[-2:], ('0'+str(time%60))[-2:]])) -End,"
 print(input()[-1]) -End,"
 print(eval('+'.join(input().split()))) -End,"
 from math import ceil
arr=[int(input()), int(input()), int(input())]
print(sum([ceil(i/2) for i in arr])) -End,"
 print(len(input().split())) -End,"
 print(sum(list(map(int, input().split())))) -End,"
 print(input().split(', ')[1]) -End,"
 print(sum(list(map(int, filter(lambda x: x.isdigit(), input().split()))))) -End,"
 weekdays = [""Sunday"",""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""]
leave=input()
d=int(input())
l = weekdays.index(leave)
# l is the numeric version of which day
# d is the number of days until return

# Enter your formula for calculating the return day
r=(l+d)%7

print(""If you leave on {} and return {} days later, you will return on {}."".format(leave,d,weekdays[r])) -End,"
 print('''{X} and {Y} sat in the tree.\n{X} had fallen, {Y} was stolen.\nWhat's remaining in the tree?'''.format(X=input(), Y=input())) -End,"
 A, B, N = int(input()), int(input()), int(input())
print((N*(100*A+B))//100, (N*(A*100+B))%100) -End,"
 N=int(input())
arr=input().split()
for i in range(N//2):
    arr[2*i], arr[2*i+1] = arr[2*i+1], arr[2*i]
print(*arr) -End,"
 V, T = int(input()), int(input())
print((109+V*T)%109) -End,"
 def calc_expr(p):
    q = 1 - p
    return (1-6*p*q)/(p*q) -End,"
 M, N = map(int, input().split())
arr=list(map(int, input().split()))
ans=[0 for i in range(N)]
for i in arr:
    ans[i-1]+=1
print(*ans) -End,"
 word=input()
print('yes') if word==word[::-1] else print('no') -End,"
 print(sum([int(input()) for i in range(int(input()))])) -End,"
 #ans=set()
ans=[]
for i in objects:
    if i not in ans:
        ans+=[i]
print(len(ans)) -End,"
 def closest_mod_5(x):
    if x % 5 == 0:
        return x
    return closest_mod_5(x+1) -End,"
 def C(n, k):
    if k==0: return 1
    elif k>n: return 0
    else: return C(n-1, k)+C(n-1, k-1)
print(C(*list(map(int, input().split())))) -End,"
 class MoneyBox:
    num=0
    cap=0
    def __init__(self, capacity, num=0):
        self.cap=capacity

    def can_add(self, v):
        return (self.num+v)<=self.cap

    def add(self, v):
        self.num+=v -End,"
 class Buffer:
    def __init__(self):
        self.buf=[]

    def add(self, *a):
        self.buf+=a
        while len(self.buf)>=5:
            print(sum(self.buf[:5]))
            del(self.buf[:5])

    def get_current_part(self):
        return (self.buf) -End,"
 try:
    foo()
except ZeroDivisionError:
    print(""ZeroDivisionError"")
except ArithmeticError:
    print(""ArithmeticError"")
except AssertionError:
    print(""AssertionError"")
 -End,"
 a, b, c = int(input()), int(input()), int(input())
p=(a+b+c)/2
ans=(p*(p-a)*(p-b)*(p-c))**0.5
print(ans) -End,"
 login = 100500
password = 424242
for i in range(1):
    log, pas = map(int, input().split())
    if log==login and pas==password: print('Login success')
    elif log==login: print('Wrong password')
    else: print('No user with login {} found'.format(log)) -End,"
 a, b = int(input()), int(input())
print(b//a) -End,"
 ans=0
while True:
    a=int(input())
    if a==0: break
    ans+=a
print(ans) -End,"
 a, b = int(input()), int(input())
mas=[i for i in range(a, b+1) if i%3==0]
print(sum(mas)/len(mas)) -End,"
 a, b = int(input()), int(input())
print(b%a) -End,"
 N=int(input())
i=1
while i<=N:
    print(i)
    i*=2 -End,"
 ans={1: 'square', 2: 'circle', 3: 'triangle', 4: 'rhombus'}
N=int(input())
print('You have chosen a', ans[N]) if N in ans else print('There is no such shape!') -End,"
 x1, y1, x2, y2 = map(int, input().split())
print('YES') if x1==x2 or y1==y2 or abs(x1-x2)==abs(y1-y2) else print('NO') -End,"
 N=int(input())
i=2
while True:
    if N%i==0:
        print(i)
        break
    i+=1 -End,"
 ans={1: 'move up', 2: 'move down', 3: 'move left', 4: 'move right', 0: 'do not move'}
N=int(input())
print(ans[N]) if N in ans else print('error!') -End,"
 print(""Hello, world!"") -End,"
 i=0
while int(input())!=0: i+=1
print(i) -End,"
 x1, y1, x2, y2 = map(int, input().split())
print('YES') if x1==x2 or y1==y2 or abs(x1-x2)==abs(y1-y2) else print('NO') -End,"
 N, M, X, Y = int(input()), int(input()), int(input()), int(input())
print(min(X, Y, abs(min(N, M)-X), abs(max(N, M)-Y))) -End,"
 print('Hello {}'.format(input('Enter your name: '))) -End,"
 print(input()) -End,"
 print(int(input())**int(input())) -End,"
 N, K = map(int, input().split())
ans = input().split()
for i in range(K):
    ans.append(ans[0])
    del(ans[0])
print(*ans) -End,"
 print(sorted(input().lower())==sorted(input().lower())) -End,"
 from math import hypot as h
x1, y1, x2, y2 = map(float, [input() for i in range(4)])
print(h(x1-x2, y1-y2)) -End,"
 def f(ls):
    return set(ls) -End,"
 ans={True: 'YES', False: 'NO'}
def IsPointInArea(x, y):
    return -1<=x<=1 and -1<=y<=1
x, y = float(input()), float(input())
print(ans[IsPointInArea(x, y)]) -End,"
 print(min([int(input()) for i in range(4)])) -End,"
 print('_'.join(input().split())) -End,"
 mas=list(map(int, input().split()))
max=min=mas[0]
for i in mas:
    if i>max: max=i
    if i<min: min=i
print(max, min) -End,"
 from itertools import groupby
word=input()
ans=[list(g) for k, g in groupby(word)]
for i in ans:
    if len(i)>1: print(len(i), end='') 
    print(i[0], end='') -End,"
 word=input()
n=1
flag=True
for i in word:
    if i.isdigit():
        if flag:
            n=int(i)
            flag=False
        else:
            n*=10
            n+=int(i)
    else:
        print(n*i, end='')
        n=1
        flag=True -End,"
 abc=' abcdefghijklmnopqrstuvwxyz'
shift=int(input())%27
text=input().strip()
key=abc[shift:]+abc[:shift]
magic=str.maketrans(abc, key)
ans=text.translate(magic).strip(' ')
print('Result: ""{}""'.format(ans)) -End,"
 n = int(input())
line = input()
ans = str()

for i in line:
    j = ord(i)
    j -= 128512
    j += n
    j %= 80
    j += 128512
    ans += chr(j)

print('Result: ""{}""'.format(ans)) -End,"
 n = int(input())

for i in range(n//1000):
    print('M', end='')
n %= 1000

for i in range(n//900):
    print('CM', end='')
n %= 900

for i in range(n//500):
    print('D', end='')
n %= 500

for i in range(n//400):
    print('CD', end='')
n %= 400

for i in range(n//100):
    print('C', end='')
n %= 100

for i in range(n//90):
    print('XC', end='')
n %= 90

for i in range(n//50):
    print('L', end='')
n %= 50

for i in range(n//40):
    print('XL', end='')
n %= 40

for i in range(n//10):
    print('X', end='')
n %= 10

for i in range(n//9):
    print('IX', end='')
n %= 9

for i in range(n//5):
    print('V', end='')
n %= 5

for i in range(n//4):
    print('IV', end='')
n %= 4

for i in range(n//1):
    print('I', end='')
n %= 1 -End,"
 n = int(input())
ans = [60, -120, 60]

if n > 1:
    for i in range(n-1):
        for j in range(len(ans)+1)[::-1]:
            ans.insert(j, 60)
            ans.insert(j, -120)
            ans.insert(j, 60)

for el in ans:
    print('turn {}'.format(el)) -End,"
 line = input().split()
trans = {'mile':1609, 'yard':0.9144, 'foot':0.3048, 'inch':0.0254, 'km':1000, 'm':1, 'cm':0.01, 'mm':0.001}

n, f, t = float(line[0]), line[1], line[3]

n = n * trans[f] / trans[t]

print('{:.2e}'.format(n)) -End,"
 s_X = [1, 1, 0, -1, -1, -1, 0, 1]
s_Y = [0, 1, 1, 1, 0, -1, -1, -1]
n, m = map(int, input().split())
field, new_field = [], []

for i in range(n):
    line = input()
    field.append([])
    for j in range(m):
        field[i].append(line[j])

for i in range(n):
    new_field.append([])
    for j in range(m):
        new_field[i].append([])

for i in range(n):
    for j in range(m):
        if field[i][j] == '.':
            count = 0
            for k in range(8):
                if field[(i + s_Y[k]) % n][(j + s_X[k]) % m] == 'X':
                    count += 1
            new_field[i][j] = 'X' if count == 3 else '.'

        if field[i][j] == 'X':
            count = 0
            for k in range(8):
                if field[(i + s_Y[k]) % n][(j + s_X[k]) % m] == 'X':
                    count += 1
            new_field[i][j] = 'X' if count == 2 or count == 3 else '.'

for p in range(n):
    print(''.join(new_field[p]))
 -End,"
 a1 = ' -- '
a2 = '|  |'
a3 = '    '
a4 = '   |'
a5 = '|   '

d = {'0': [a1, a2, a2, a3, a2, a2, a1],
     '1': [a3, a4, a4, a3, a4, a4, a3],
     '2': [a1, a4, a4, a1, a5, a5, a1],
     '3': [a1, a4, a4, a1, a4, a4, a1],
     '4': [a3, a2, a2, a1, a4, a4, a3],
     '5': [a1, a5, a5, a1, a4, a4, a1],
     '6': [a1, a5, a5, a1, a2, a2, a1],
     '7': [a1, a4, a4, a3, a4, a4, a3],
     '8': [a1, a2, a2, a1, a2, a2, a1],
     '9': [a1, a2, a2, a1, a4, a4, a1]}

n = input()
l = len(n)

print('x', (5 * l - 1) * '-', 'x', sep='')
for i in range(7):
    print('|', end='')
    print(*[d[j][i] for j in n], end='')
    print('|')
print('x', (5 * l - 1) * '-', 'x', sep='')
 -End,"
 def parabola(x):
    return (x + 4) ** 2 - 4

def small_circle(x, y):
    return (x + 3) ** 2 + (y + 3) ** 2 <= 9

def big_circle(x, y):
    return (x - 3) ** 2 + (y + 3) ** 2 <= 36

def line(x):
    return x


x, y = map(float, input().split())

print('YES') if y >= parabola(x) and small_circle(x, y) or y >= line(x) and big_circle(x, y) else print('NO')
     -End,"
 from itertools import permutations as per

box1, box2 = (int(input()), int(input()), int(input())), (int(input()), int(input()), int(input()))
pr = False

for i in list(per(box1)):
    for j in list(per(box2)):
        if i == j:
            print(""Boxes are equal"")
            pr = True
            break
        elif tuple(i[q] <= j[q] for q in range(3)) == (True, True, True):
            print(""The first box is smaller than the second one"")
            pr = True
            break
        elif tuple(i[q] >= j[q] for q in range(3)) == (True, True, True):
            print(""The first box is larger than the second one"")
            pr = True
            break
    if pr:
        break

else:
    print(""Boxes are incomparable"")
 -End,"
 print('YES') if int(input()) % 3 == 0 else print('NO') -End,"
 # Output format

# If the system has no solution, then the program should print a single number 0. (OK_2)

# If the system has infinitely many solutions, each of which looks like y=kx+b,
# then the program should print the number 1, and then the values k and b. (OK_6)

# If the system has a single solution (x0, y0),
# then the program should print the number 2, and then the values x0 and y0. (OK_3)

# If the system has infinitely many solutions that look like x=x0 with any y,
# then the program should output the number 3, and then the value x0. (OK_5)

# If the system has infinitely many solutions that look like y=y0 with any x,
# then the program should output the number 4, and then the value y0. (OK_4)

# If any pair of numbers (x,y) is a solution, the program should output the number 5. (OK_1)

a, b, c, d, e, f = (float(input()) for _ in range(6))
Det = a * d - b * c
d_x, d_y = e * d - b * f, a * f - c * e

if a == b == c == d == e == f == 0:
    print(5)

elif a == b == 0 and e != 0 or c == d == 0 and f != 0:
    print(0)

elif Det != 0:
    print(2, d_x / Det, d_y / Det)

else:
    if a < 0:
        a, b, e = -a, -b, -e

    if c < 0:
        c, d, f = -c, -d, -f

    if a < c:
        a, b, e, c, d, f = c, d, f, a, b, e

    if a != 0:
        a, b, e = 1, b / a, e / a
        c, d, f = 0, d - c * b, f - c * e

        if d != 0:
            d, f = 1, f / d
            b, e = 0, e - c * f

        if a == b == 0 and e != 0 or c == d == 0 and f != 0:
            print(0)

        elif b != 0:
            a, b, e = a / b, 1, e / b
            print(1, -a, e)
        else: # a != 0, b == 0
            print(3, e / a)

    else: # a == 0
        if b == 0 and e != 0 or d == 0 and f != 0:
            print(0)

        elif b != 0 and d == 0:
            print(4, e / b)

        elif b == 0 and d != 0:
            print(4, f / d)

        elif b != 0 and d != 0 and e / b != f / d:
            print(0)

        elif b != 0 and d != 0 and e / b == f / d:
            print(4, e / b)
 -End,"
 a, b, c  = int(input()), int(input()), int(input())
print('YES') if a < b + c and b < c + a and c < a + b else print('NO') -End,"
 x = int(input())
print(-15 < x <= 12 or 14 < x < 17 or 19 <= x)  -End,"
 n, m, k = int(input()), int(input()), int(input())
print('YES') if (k % n == 0 or k % m == 0) and k <= n * m else print('NO') -End,"
 N = '0000' + input()
N = N[-4:]
print(1) if N == N[::-1] else print(0) -End,"
 P = float(input())
r = float(input())
n = int(input())
t = int(input())

a = P * ((1 + r / n) ** (n * t))

print(a) -End,"
 print(sorted(input().split(), key=lambda x: len(x), reverse=True)[0]) -End,"
 N, K = map(int, input().split())

ans = [True] * N

for i in range(K):
    a, b = map(int, input().split())
    
    for j in range(a - 1, b):
        ans[j] = False

ans = [('.', 'I')[i] for i in ans]

print(''.join(ans))
 -End,"
 temp = input()
print(('Regular', 'Lucky')[sum(map(int, temp[:3])) == sum(map(int, temp[3:]))]) -End,"
 X = int(input())
Y = int(input())
print(X*60 + Y) -End,"
 x = float(input())
h = int(x) // 60
m = x % 60
print(h)
print(int(m))

 -End,"
 x = int(input())
h = int(input()) * 60
m = int(input())
x += h + m
h = int(x) // 60
m = int(float(x) % 60)
print(h)
print(int(m))



 -End,"
 x = int(input())
h = int(input()) * 60
m = int(input())
x += h + m
print(x // 60)
print(x % 60) -End,"
 A = int(input())
B = int(input())
H = int(input())

if (H < A):
    print('Недосып')
elif (H > B):
    print('Пересып')
else:
    print('Это нормально') -End,"
 year = int(input())
if ((year%4 == 0 and year%100 != 0) or (year%400 == 0)):
    print('Високосный')
else:
    print('Обычный')   -End,"
 a = int(input())
b = int(input())
c = int(input())
p = (a + b + c) / 2
s = (p *(p - a)*(p - b)*(p - c)) ** 0.5
print(s) -End,"
 x = int(input())
if ((-15 < x <= 12) or (14 < x < 17) or (19 <= x)):
  print(True)
else:
  print(False) -End,"
 x = int(input())
print((-15 < x <= 12) or (14 < x < 17) or (19 <= x)) -End,"
 a = float(input())
b = float(input())
x = input("""")

if (b == 0 and x == ""/""):
  print('Деление на 0!')

if (x == ""/"" and b != 0):
  print(a / b)

if (x == ""+""):
  print(a + b)

if (x == ""-""):
  print(a - b)
  
if (x == ""*""):
  print(a * b)
  
if (x == ""mod""):
  if(b == 0):
    print('Деление на 0!')
  else:
    print(int(a % b))
  
if (x == ""pow""):
  print(a ** b)
  
if (x == ""div""):
   if(b == 0):
     print('Деление на 0!')
   else:
     print(a // b) -End,"
 a = float(input())
b = float(input())
x = input("""")

if ((x == ""/"") or (x == ""div"") or (x == ""mod"")) and b == 0:
  print('Деление на 0!')
elif (x == ""/"" and b != 0):
  print(a / b)
elif (x == ""+""):
  print(a + b)
elif (x == ""-""):
  print(a - b) 
elif (x == ""*""):
  print(a * b)  
elif (x == ""mod"" and b != 0):
  print(int(a % b)) 
elif (x == ""pow""):
  print(a ** b)  
elif (x == ""div"" and b != 0):
   print(a // b) -End,"
 f = input("""")

if (f == ""прямоугольник""):
  a = float(input())
  b = float(input())
  print(a * b)
elif (f == ""круг""):
  r = float(input())
  print((r*r) * 3.14)
elif (f == ""треугольник""):
  a = int(input())
  b = int(input())
  c = int(input())
  p = (a + b + c) / 2
  s = (p *(p - a)*(p - b)*(p - c)) ** 0.5
  print(s) -End,"
 f = input("""")

if (f == ""прямоугольник""):
  a = float(input())
  b = float(input())
  print(a * b)
elif (f == ""круг""):
  r = float(input())
  print((r*r) * 3.14)
elif (f == ""треугольник""):
  a = float(input())
  b = float(input())
  c = float(input())
  p = (a + b + c) / 2
  print((p *(p - a)*(p - b)*(p - c)) ** 0.5) -End,"
 n = int(input())
if (n % 10 == 1 and n % 100 != 11):
    print (str(n) + "" программист"")
elif (n % 10 == 2 and n % 100 != 12 or n % 10 == 3 and n % 100 != 13 or n % 10 == 4 and n % 100 != 14):
    print (str(n) + "" программиста"")
else:
    print (str(n) + "" программистов"") -End,"
 a = int(input())
b = a % 10
c = ((a % 100) - b) // 10
d = ((a % 1000) - c) // 100
e = ((a % 10000) - d) // 1000
f = ((a % 100000) - e) // 10000
g = ((a % 1000000) - f) // 100000
if ((b + c + d) == (e + f + g)):
  print(""Счастливый"")
else:
  print(""Обычный"") -End,"
 i = 1
sum = 0
while (i != 0):
  a = int(input())
  i = a
  sum += a
  if (i == 0):
    print(sum) -End,"
 a = int(input())
b = int(input())
s = 1
  
while (s % a != 0):
  s += 1
  while (s % b != 0):
    s += 1
print(s) -End,"
 while (True):
  a = int(input())
  if (a < 10):
    continue
  elif(a > 100):
    break
  elif(10 <= a <= 100):
    print(a) -End,"
 a = int(input())
b = int(input()) + 1
c = int(input())
d = int(input()) + 1

print('\t', end='')
for i in range(c, d):
  print(i, '\t', end='')
print()

for j in range(a, b):
  print(j, '\t', end='')
  for i in range(c, d):
    print(j * i, '\t', end='')
  print() -End,"
 a = int(input())
b = int(input())
sum = 0
counter = 0

for i in range(a, b+1):
  if (i % 3 == 0):
    sum += i
    counter += 1
print(sum / counter) -End,"
 a = input()
num = len(a)
count = a.lower().count('g') + a.lower().count('c')
print((count / num) * 100) -End,"
 a = input() + '.'
counter = 0
past = ''
ceeper = ''
for i in a:
  if (past == i or past == ''):
    past = i
    counter += 1
  elif(past != i):
    ceeper += past + str(counter)
    past = i
    counter = 1
print(ceeper) -End,"
 a = input() + '.'
count = 1
for i in range(len(a)-1):
  if (a[i] != a[i+1]):
    print(a[i] + str(count), end='')
    count = 1
  else: count += 1 -End,"
 a = [int(i) for i in input().split()]
sum = 0
for i in a:
  sum += i
print(sum) -End,"
 a = [int(i) for i in input().split()]
if len(a)>1:
    for i in range(len(a)):
        print(a[i-1]+a[i+1-len(a)], end=' ')
else:
    print(a[0]) -End,"
 a = [int(i) for i in input().split()]
a.sort()
x = []
for i in range(len(a)-1):
  if(int(a[i] == a[i+1])):
    if a[i] not in x:
      x.append(a[i])
      print(a[i], end = ' ') -End,"
 a = [int(i) for i in input().split()]
x = []
for i in range(len(a)-1):
  if(a.count(a[i]) > 1):
    if a[i] not in x:
      x.append(a[i])
      print(a[i], end = ' ') -End,"
 a = [int(i) for i in input().split()]
a.sort()
bol = False
for i in range(len(a)-1):
  if((a[i] == a[i+1]) and (bol == False)):
    print(a[i], end = ' ')
    bol = True
  elif(a[i] != a[i+1]):
    bol = False -End,"
 flag = True
ceeper = []
sum = 0
while (flag):
  a = int(input())
  sum += a
  ceeper.append(a*a)
  if (sum == 0):
    flag = False
if(flag == False):
  for i in range(len(ceeper)):
    sum += ceeper[i]
print(sum) -End,"
 a = int(input())
b = 0
for i in range(a):
  if (a < 3):
    print(i+1, end=' ')
  else:
    for j in range(i):
      if (b < a):
        b += 1
        print(str(i), end = ' ') -End,"
 a = int(input())
b = 0
for i in range(a+1):
    for j in range(i):
        b += 1
        if (b < a+1):
          print(i, end = ' ') -End,"
 a = [int(i) for i in input().split()]
b = int(input())
for i in range(len(a)):
  if (a[i] == b):
    print(i, end=' ')
if (b not in a):
  print('Отсутствует') -End,"
 flag = True
x = []
while(flag):
  a = [ i for i in input().split()]
  if (a != ['end']):
    x.append(a)
  else:
    flag = False

l, h = len(x), len(x[0])

for i in range(l):
  if(i != 0):
    print()
  for j in range(h):
    sum = 0
    sum += int(x[i-1][j])
    sum += int(x[i+1-l][j])
    sum += int(x[i][j-1])
    sum += int(x[i][j+1-h])
    print(sum, end= ' ') -End,"
 def f(x):
  if (x <= -2):
    return 1 - (x+2)**2
  elif(-2 < x <= 2):
    return -x/2
  else:
    return (x - 2)**2 + 1 -End,"
 def modify_list(l):
  d = len(l)
  for i in range(0, len(l)):
    if (l[i] % 2 == 0):
      l.append(l[i]//2)
  for j in range(d):
    l.remove(l[0]) -End,"
 def update_dictionary(d, key, value):
  if (key in d.keys()):
    d[key].append(value)
  elif (key not in d.keys()):
    if (key*2 in d.keys()):
      d[key*2].append(value)
    else:
      d[key*2] = []
      d[key*2].append(value) -End,"
 def update_dictionary(d, key, value):
  if (key in d.keys()):
    d[key].append(value)
  elif (key*2 in d.keys()):
    d[key*2] += [value]
  else:
    d[key*2] = [value] -End,"
 a = input().lower().split()
s = set(a)
for x in s:
  print(x + ' ' + str(a.count(x))) -End,"
 d = dict()
for i in range(int(input())):
    b = int(input())
    if (b not in d.keys()):
        d[b] = f(b)
    print(d[b])  -End,"
 from math import pi

print(2 * pi * float(input())) -End,"
 from sys import argv

print(*argv[1:]) -End,"
 numberOfGames = int(input())
d = dict()
matchResult = []
def update_teams(d, team):
    if (team not in d):
        d[team] = [0, 0, 0, 0, 0]

def update_score(d, result):
    if(result[1] > result[3]):
        d[result[0]][0] += 1
        d[result[0]][1] += 1
        d[result[0]][4] += 3
        d[result[2]][0] += 1
        d[result[2]][3] += 1
    elif (result[1] == result[3]):
        d[result[0]][0] += 1
        d[result[0]][2] += 1
        d[result[0]][4] += 1
        d[result[2]][0] += 1
        d[result[2]][2] += 1
        d[result[2]][4] += 1
    else:
        d[result[2]][0] += 1
        d[result[2]][1] += 1
        d[result[2]][4] += 3
        d[result[0]][0] += 1
        d[result[0]][3] += 1

for i in range(numberOfGames):
    matchResult.append(input().split(';'))
    update_teams(d, matchResult[i][0])
    update_teams(d, matchResult[i][2])
    update_score(d, matchResult[i])

for key, values in d.items():
    print(key + ': ', values[0], values[1], values[2], values[3], values[4], end = '')
    print() -End,"
 str1, str2, encrypt, decrypt = list(input()), list(input()), list(input()), list(input())

d = dict (zip (str1, str2))
d2 = dict (zip (str2, str1))

def encr(enc):
    print(d[enc], end='')

def decr(dec):
    print(d2[dec], end='')

for i in range(len(encrypt)):
    encr(encrypt[i])
print()
for i in range(len(decrypt)):
    decr(decrypt[i]) -End,"
 numberOfRecords = int(input())
famousWords = set()
for i in range(numberOfRecords):
    famousWords.add(input().lower())

a = []
numberOfLines = int(input())
for i in range(numberOfLines):
    a += (input().lower().split())
unknownWords = set(a)

for key in unknownWords:
    if (key not in famousWords):
        print(key) -End,"
 number = int(input())
d = {'восток': 0, 'север': 0}
for i in range(number):
    a = input().split()
    if (a[0] == 'север'):
        d['север'] += int(a[1])
    elif (a[0] == 'запад'):
        d['восток'] -= int(a[1])
    elif (a[0] == 'юг'):
        d['север'] -= int(a[1])
    elif (a[0] == 'восток'):
        d['восток'] += int(a[1])

for keys, values in d.items():
    print(values, end = ' ') -End,"
 print(sum([int(input()) for i in range(int(input()))])) -End,"
 d = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}
n = int(input())
x, y = 0, 0
s = []
a = []
turn = 0
counter = 1
c = 0
slicer = 1

for i in range(1, n*n+1):
  a.append(i)
  if (len(a) == n):
    s.append(a)
    a = []

while ((counter <= n*n) and (n > 1)):
  for i in range(0, n - slicer):
    if (counter == 1):
      s[x][y] = counter
      counter += 1
    x += d[turn % 4][0]
    y += d[turn % 4][1]
    s[x][y] = counter
    counter += 1
  turn += 1
  if ((c % 2 == 0)and (c > 1)):
    slicer += 1
  c += 1
  
for i in range(0, n):
  print(*s[i]) -End,"
 s = set()
for obj in objects:
  s.add(id(obj))
  
print(len(s)) -End,"
 def closest_mod_5(x):
  y = x
  while(y % 5 != 0):
    y += 1
  else:
    return y -End,"
 def closest_mod_5(x):
    return x + 5 - x % 5 -End,"
 def closest_mod_5(x):
    if x % 5 == 0:
        return x
    return closest_mod_5(x + 1) -End,"
 n, k = map(int, input().split())
def combinations(n, k):
  if (k == 0):
    return 1
  elif (k > n):
    return 0
  else:
    return combinations(n - 1, k) + combinations(n - 1, k - 1)

print(combinations(n, k)) -End,"
 d = dict()
d['global'] = {'parent': 'None'}
def creating(nmsp, var):
  d[nmsp] = {'parent': (var)}

def adding(nmsp, var):
  if (nmsp in d):
    if ('var' in d[nmsp]):
      d[nmsp]['var'] += [var]
    else:
      d[nmsp].update({'var': [var]})

def reception(nmsp, var):
  if (d[nmsp].get('parent', ()) == 'None' and var not in d[nmsp].get('var', [])):
    print(d[nmsp].get('parent', ()))
  elif (var in d[nmsp].get('var', [])):
    print(nmsp)
  else:
    return reception(d[nmsp].get('parent', ()), var)

def actionSelection(cmd, nmsp, var):
  if (cmd == 'create'):
    creating(nmsp, var)
  elif (cmd == 'add'):
    adding(nmsp, var)
  else:
    reception(nmsp, var)

for i in range(int(input())):
  cmd, nmsp, var = input().split()
  actionSelection(cmd, nmsp, var) -End,"
 class MoneyBox:
  def __init__(self, capacity):
    self.capacity = capacity
    self.amount = 0

  def can_add(self, v):
    self.v = v
    if (self.amount + self.v <= self.capacity):
      return True
    else:
      return False

  def add(self, v):
    self.amount += v -End,"
 class Buffer:
  def __init__(self):
    self.list = []

  def add(self, *a):
    for arg in a:
      self.list.append(arg)
      if (len(self.list) == 5):
        print(sum(self.list))
        self.list = []

  def get_current_part(self):
    return self.list -End,"
 graph = {}

def find_all_paths(graph, start, end, path=[]):
  path = path + [start]
  if (start and end in graph):
    if start == end:
      return [path]
  if (start not in graph):
    return []
  paths = []
  for node in graph[start]:
    if node not in path:
      newpath = find_all_paths(graph, node, end, path)
      if newpath: 
        return newpath 
  if paths:
    return paths
          
def az(graph, start, end):
  x = find_all_paths(graph, start, end)
  if (x != None and x != []):
    return 'Yes'
  else:
    return 'No'

for i in range(int(input())):
  total = input()
  if (':' in total):
    el, parent = total.split(':')
    el = el.replace(' ', '')
    parent = parent.split()
    graph[el] = parent
  else:
    graph[total] = [total]
  # print(graph)

for i in range(int(input())):
  check = input().split()
  print(az(graph, check[1], check[0])) -End,"
 class ExtendedStack(list):
  def sum(self):
    top1, top2 = self.pop(), self.pop()
    self.append(top1 + top2)

  def sub(self):
    top1, top2 = self.pop(), self.pop()
    self.append(top1 - top2)

  def mul(self):
    top1, top2 = self.pop(), self.pop()
    self.append(top1 * top2)

  def div(self):
    top1, top2 = self.pop(), self.pop()
    self.append(top1 // top2) -End,"
 class LoggableList(list, Loggable):
  def append(self, msg):
    super().append(msg)
    self.log(msg) -End,"
 try:
    foo()
except ZeroDivisionError:
    print(""ZeroDivisionError"")
except ArithmeticError:
    print(""ArithmeticError"")
except AssertionError:
    print(""AssertionError"") -End,"
 d = {}
addErr = set()
nope = []

def check(el, origin):
  if (el not in addErr and d[el] == None):
    pass
  else:
    for node in d[el]:
      if (node in addErr):
        if (origin not in nope):
          nope.append(origin)
      elif (node not in addErr and d[node] != None):
        check(node, origin)

for points in [input().split(':') for i in range(int(input()))]:
  if(len(points) > 1):
    d[points[0].replace(' ', '')] = tuple(points[1].split())
  else:
    d[points[0].replace(' ', '')] = (None)

for points in [input().replace(' ', '') for i in range(int(input()))]:
  check(points, points)
  addErr.add(points)

for x in nope:
  print(x) -End,"
 class NonPositiveError(Exception):
  pass

class PositiveList(list):
  def append(self, x):
    if (x <= 0):
      raise NonPositiveError
    else:
      super().append(x) -End,"
 import datetime
(y,m,d) = [int(n) for n in input().split()]
date_now = datetime.date(y, m, d)
plus_day = datetime.timedelta(days=int(input()))
days_later = date_now + plus_day
print(days_later.strftime(""%Y %-m %-d"")) -End,"
 from datetime import datetime, timedelta

y, m, d = map(int, input().split())
new_date = datetime(y, m, d) + timedelta(days=int(input()))
print('{d.year} {d.month} {d.day}'.format(d=new_date)) -End,"
 d = {
    'mile': 1609,
    'yard': 0.9144,
    'foot': 0.3048,
    'inch': 0.0254,
    'km': 1000,
    'cm': 0.01,
    'mm': 0.001,
    'm': 1
}

val = input().split()
print('{0:.2e}'.format(float(val[0]) * d[val[1]] / d[val[3]])) -End,"
 n, val = 0, int(input())
for i in range(1, val + 1):
  for j in range(i):
    if (n >= val):
      break
    print(i, end=' ')
    n += 1 -End,"
 n, val = '', int(input())
for i in range(val + 1):
  n += (str(i) + ' ') * i
    
print(n[:val*2]) -End,"
 n, val = [], int(input())
for i in range(val + 1):
  for j in range(i):
    n.append(i)
    
for node in n[:val]:    
  print(node, end=' ') -End,"
 a = input() + '.'
count = 1
for i in range(len(a)-1):
  if (a[i] != a[i+1]):
    if (count == 1):
      print(a[i], end='')
    else:
      print(str(count) + a[i], end='')
    count = 1
  else: count += 1 -End,"
 def split_encode_series(string):
  a = string + '.'
  res = []
  count = 1
  for i in range(len(a)-1):
    if (a[i] != a[i+1]):
      res.append((count, a[i]))
      count = 1
    else: count += 1
  return res
  
def final_result(list):
  res = list
  final = ''
  for i in range(len(res)):
    if (res[i][0] == 1):
      final += res[i][1]
    else:
      final += str(res[i][0]) + res[i][1]
  return final

res = split_encode_series(input())
print(final_result(res))
 -End,"
 a = input().split()
print(int(a[0]) + int(a[1])) -End,"
 def fib(n):
    fib_list = []
    for i in range(0, n):
        if (i <= 1):
            fib_list.append(1)
        else:
            fib_list.append(fib_list[i-1] + fib_list[i-2])
    return fib_list[i]

def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main() -End,"
 def fib_digit(n):
    prev, cur = 0, 1
    for i in range(1, n):
        prev, cur = cur, prev + cur % 10
    return cur % 10

def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 class multifilter:
    def judge_half(pos, neg):
        return pos >= neg

    def judge_any(pos, neg):
        return pos >= 1

    def judge_all(pos, neg):
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        for i in self.iterable:
          pos, neg = 0, 0
          for j in self.funcs:
            if (j(i)):
              pos += 1
            else:
              neg += 1
          if (self.judge(pos, neg)):
            yield i
         -End,"
 from itertools import takewhile


def primes():
  a = 2
  while True:
    for i in range(2, a+1):
      if (a % i == 0 and a != i):
        break
      elif (a % i == 0 and a == i):
        yield a
    a += 1
 -End,"
 from itertools import takewhile
from math import factorial

def primes():
    a = 2
    while True:
        if ((factorial(a - 1) + 1) % a == 0):
            yield a
        a += 1 -End,"
 def mod_checker(x, mod=0):
    return lambda y: y % x == mod
 -End,"
 def check(s, a, b):
  counter = 0
  while s.count(a):
    if (a in b and a in s):
      print('Impossible')
      break
    s = s.replace(a, b)
    counter += 1
  else:
    print(counter)


check(input(), input(), input())
 -End,"
 def check(s, t, counter=0):
  for i in s:
    if (s.startswith(t)):
      counter += 1
    s = s[1:]
  print(counter)


check(input(), input())
 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    pattern = r""cat.*cat""
    if (re.search(pattern, line)):
        print(line)
 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    if (re.search(r""\bcat\b"", line)):
        print(line)
 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    if (re.search(r""\\"", line)):
        print(line)
 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    if (re.search(r""\b(\w+)\1\b"", line)):
        print(line)
 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'human', 'computer', line))
 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'\ba+\b', 'argh', line, flags=re.IGNORECASE, count=1))
 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'\b(\w)(\w)', r'\2\1', line))
 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'(\w)\1+', r'\1', line))
 -End,"
 import re
import sys


for line in sys.stdin:
    line = line.rstrip()
    if (re.fullmatch(r'(1(01*0)*1|0)*', line) is not None):
        print(line)
 -End,"
 import requests
import re
 

link = input()
link2 = input()
flag = False
 
lst = re.findall(r'href=[\'""]?([^\'"" >]+)', requests.get(link).text)
for i in lst:
    lst_i = re.findall(r'href=[\'""]?([^\'"" >]+)', requests.get(i).text)
    if link2 in lst_i:
        flag = True

if (flag):
    print('Yes')
else:
    print('No')
 -End,"
 import requests
import re
 

res = []
lst = re.findall(r'<a[\w\s=\"".]+href=[\'""]?([^\'"" >]+)', requests.get(input().strip()).text)

for i in lst:
    res += re.findall(r'(?:[\w]+\:\/\/)?((?:[\w-]+\.)+[\w]+)?.*', i)
    
print(*sorted(set(res)), sep='\n')
 -End,"
 import json

d_edit = {i['name']: i['parents'] for i in json.loads(input())}

def find_path(start, key, const, child_lst):
    if (start == const and key not in child_lst):
        child_lst.append(key)
    for node in d_edit[start]:
        find_path(node, key, const, child_lst)

for i in sorted(d_edit):
    child_lst = []
    for key in d_edit.keys():
        find_path(key, key, i, child_lst)
    print(i + ' : ' + str(len(child_lst)))
 -End,"
 from xml.etree import ElementTree

root = ElementTree.fromstring(input())
d = {'red': 0, 'green': 0, 'blue': 0}

def find_val(root, count):
    if (root.tag == 'cube' and root.attrib['color'] in d):
        d[root.attrib['color']] += count
    for node in root:
        find_val(node, count+1)

find_val(root, 1)

for value in d.values():
    print(value, end=' ')
 -End,"
 d = {'6': 6, '7': 7, '8': 8, '9': 9, '10': 10,
     'J': 11, 'Q': 12, 'K': 13, 'A': 14,
     'C': 0, 'D': 0, 'H': 0, 'S': 0}

f, s = input().split()
d[input()] = 15

if (((d[f[:-1]] + d[f[-1:]]) == (d[s[:-1]] + d[s[-1:]])) or ((d[f[:-1]] + d[f[-1:]]) != (d[s[:-1]] + d[s[-1:]]) and ((f[-1:] != s[-1:]) and ((d[f[-1:]] or d[s[-1:]]) != 15)))):
    print('Error')
elif ((d[f[:-1]] + d[f[-1:]]) > (d[s[:-1]] + d[s[-1:]])):
    print('First')
else:
    print('Second')
 -End,"
 val = input().split()
x = [list(input().replace('.', '0').replace('*', '1')) for i in range(int(val[0]))]

def getCell(i, j):
    if (i > -1 and i < len(x) and j > -1 and j < len(x[0])):
        return int(x[i][j])
    else:
        return 0


for i in range(len(x)):
    if (i != 0):
        print()
    for j in range(len(x[i])):
        if (x[i][j] != '1'):
            sum = 0
            sum += getCell(i - 1, j)
            sum += getCell(i + 1, j)
            sum += getCell(i, j - 1)
            sum += getCell(i, j + 1)
            sum += getCell(i - 1, j - 1)
            sum += getCell(i + 1, j - 1)
            sum += getCell(i + 1, j + 1)
            sum += getCell(i - 1, j + 1)
            print(sum, end='')
        else:
            print('*', end='')
print()
 -End,"
 val = input()
print(f'{val.count(""A"") / len(val.split()):.2f}')
 -End,"
 print('_'.join(input().split()))
 -End,"
 def find_correnct_num(n):
    return n == -10 or (-5<n<=3) or (8<n<12) or n >= 16

print(find_correnct_num(int(input())))
 -End,"
 print(input().title().replace('_', ''))
 -End,"
 string, val = input(), input()
if (val in string):
    for i in range(len(string)):
        if (string[i:].find(val) == 0):
            print(i)
else:
    print(-1)
 -End,"
 def f(x):
    if (x <= -2):
        return 1 - (x + 2)**2
    elif (-2 < x <= 2):
        return -(x / 2)
    else:
        return (x - 2)**2 + 1
 -End,"
 def modify_list(l):
    l[:] = [i // 2 for i in l if not i % 2]
 -End,"
 print(sum(map(int,input().split()))) -End,"
 s=list(map(int,input().split()))
print(' '.join([str(i) for i in set(s) if s.count(i)>1])) -End,"
 s=[int(input())]
while sum(s)!=0: s.append(int(input()))
print(sum([i**2 for i in s])) -End,"
 a=list(map(int,input().split()))
n=int(input())
s=[str(i) for i in range(len(a)) if a[i]==n]
print('Отсутствует' if s==[] else ' '.join(s)) -End,"
 def f(x):
    return 1-(x+2)**2 if x<=-2 else (x-2)**2+1 if x>2 else -x/2 -End,"
 s=input().lower().split()
d={key:s.count(key) for key in set(s)}
for k,v in zip(d.keys(),d.values()):
    print(""%s %s""%(k,v))
 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
a=[int(input()) for i in range(int(input()))]
b={x:f(x) for x in set(a)}
for i in a:
    print(b[i])
 -End,"
 a=[input().split(';') for i in range(int(input()))]
b={i:[] for i in set([i[0] for i in a])|set([i[2] for i in a])}
for i in a:
	b[i[0]].append(1 if i[1]==i[3] else 3 if i[1]>i[3] else 0)
	b[i[2]].append(1 if i[1]==i[3] else 3 if i[1]<i[3] else 0)
for i in b: print('%s:%i %i %i %i %i'%(i,len(b[i]),b[i].count(3),b[i].count(1),b[i].count(0),sum(b[i]))) -End,"
 a,b,c,d=input(),input(),input(),input()
print(''.join(b[a.index(i)] for i in c))
print(''.join(a[b.index(i)] for i in d)) -End,"
 d=[input().lower().strip() for i in range(int(input()))]
print('\n'.join(set([w for w in ' '.join(input().lower().strip() for i in range(int(input()))).split() if w not in d]))) -End,"
 a=[input().split() for i in range(int(input()))]
print(""%i %i""%(sum([int(i[1]) for i in a if i[0] in ['восток']])-sum([int(i[1]) for i in a if i[0] in ['запад']]),sum([int(i[1]) for i in a if i[0] in ['север']]) - sum([int(i[1]) for i in a if i[0] in ['юг']]))) -End,"
 a=input()
b=[]
while a!='end':
    b.append(list(map(int,a.split())))
    a=input()
print('\n'.join([' '.join([str(b[i-1][j]+b[(i+1)%len(b)][j]+b[i][j-1]+b[i][(j+1)%len(b[0])]) for j in range(len(b[0]))]) for i in range(len(b))]))

 -End,"
 m=n=int(input())
a=[[0]*n for i in range(n)]
c,x,y=0,-1,0
while ' 0' in '\n'.join([' '.join(map(str,i)) for i in a]):
	while x!=n-1:
		c,x=c+1,x+1
		a[y][x]=c
	while y!=n-1:
		c,y=c+1,y+1
		a[y][x]=c
	while x!=m-n:
		c,x=c+1,x-1
		a[y][x]=c
	while y>m-n+1:
		c,y=c+1,y-1
		a[y][x]=c
	n=n-1
print('\n'.join([' '.join(map(str,i)) for i in a]) if m!=1 else 1)
 -End,"
 from math import pi
print(2*pi*float(input())) -End,"
 ops={'plus':lambda x,y: x+y, 'minus':lambda x,y: x-y, 'multiply':lambda x,y: x*y, 'divide':lambda x,y: x//y}
a=input().split()
print(ops[a[1]](int(a[0]),int(a[2]))) -End,"
 s,a=input().split(),input()
res=[str(i) for i in range(len(s)) if s[i]==a]
print(' '.join(res) if res!=[] else None) -End,"
 c=input()
while c!='End':
    print('Processing ""%s"" command...'%c)
    c=input()
print('Good bye!') -End,"
 cipher=[[' -- ','|  |','|  |','    ','|  |','|  |',' -- '],#0
        ['    ','   |','   |','    ','   |','   |','   |'],#1
        [' -- ','   |','   |',' -- ','|   ','|   ',' -- '],#2
        [' -- ','   |','   |',' -- ','   |','   |',' -- '],#3
        ['    ','|  |','|  |',' -- ','   |','   |','    '],#4
        [' -- ','|   ','|   ',' -- ','   |','   |',' -- '],#5
        [' -- ','|   ','|   ',' -- ','|  |','|  |',' -- '],#6
        [' -- ','   |','   |','    ','   |','   |','   |'],#7
        [' -- ','|  |','|  |',' -- ','|  |','|  |',' -- '],#8
        [' -- ','|  |','|  |',' -- ','   |','   |',' -- '],#9
        ]

s=list(map(int,input()))
print('x%sx'%('-'*(len(s)*5-1)))
print('\n'.join(['|%s|'%(' '.join([cipher[c][i] for c in s])) for i in range(7)]))
print('x%sx'%('-'*(len(s)*5-1))) -End,"
 def get_int(start_message, error_message, end_message):
    print(start_message)
    while True:
        try:
            a=int(input())
            print(end_message)
            return a
        except:
            print(error_message) -End,"
 a,b=map(int,input().split())
print('\n'.join(['FizzBuzz' if i%15==0 else 'Fizz' if i%3==0 else 'Buzz' if i%5==0 else str(i) for i in range(a,b+1)]))
     -End,"
 a=list(map(int,input().split()))
print({True:'Jolly',False:'Not jolly'}[sorted([abs(a[i]-a[i+1]) for i in range(len(a)-1)])==list(range(1,len(a)))]) -End,"
 cards={'6':6,'7':7,'7':7,'8':8,'9':9,'10':10,'J':11,'Q':12,'K':13,'A':14}
(card1,card2),main=input().split(),input()
if card1[-1]==card2[-1]:
    print('First' if cards[card1[:-1]]>cards[card2[:-1]] else 'Second')
elif main not in [card1[-1],card2[-1]]:
    print('Error')
else:
    print('First' if card1[-1]==main else 'Second') -End,"
 a=input().lower().split()
for i in set(a): print(""%s %i""%(i,a.count(i)))
 -End,"
 print(sorted(input().lower())==sorted(input().lower())) -End,"
 import re
print("""".join([i[-1]*int(i[:-1]) if len(i)!=1 else i for i in re.findall('\d*\D',input())])) -End,"
 import re
print("""".join(map(lambda i: len(i)==1 and i or i[-1]*int(i[:-1]),re.findall('\d*\D',input())))) -End,"
 import numpy
(n,m)=map(int,input().split())
a=numpy.array([list('.'*(m+2))]+[list('.'+input()+'.') for i in range(n)]+[list('.'*(m+2))])
print('\n'.join([''.join(['*' if a[i,j]=='*' else str(len(numpy.where(a[i-1:i+2,j-1:j+2]=='*')[0])) for j in range(1,m+1)]) for i in range(1,n+1)]))    -End,"
 b=list(map(len,input().split()))
print(""\n"".join([""%i: %i""%(i,b.count(i)) for i in sorted(set(b))])) -End,"
 a,b=map(int,input().split('/'))
f=lambda a,b: b!=0 and ""%s %s""%(str(a//b),f(b,a%b)) or ''
print(f(a,b)) -End,"
 a,b=input(),input()
f=lambda s,a: s.rfind(a)!=-1 and [s.rfind(a)]+f(s[:-1],a) or []
print("" "".join(map(str,sorted(set(f(a,b))))) if b in a else -1) -End,"
 r=[{'0':'','1':'I','2':'II','3':'III','4':'IV','5':'V','6':'VI','7':'VII','8':'VIII','9':'IX'},
	{'0':'','1':'X','2':'XX','3':'XXX','4':'XL','5':'L','6':'LX','7':'LXX','8':'LXXX','9':'XC'},
	{'0':'','1':'C','2':'CC','3':'CCC','4':'CD','5':'D','6':'DC','7':'DCC','8':'DCCC','9':'CM'},
	{'1':'M','2':'MM','3':'MMM'}]
a=input()[::-1]
print("""".join([r[i][a[i]] for i in range(len(a))][::-1])) -End,"
 a=[int(input()) for i in range(int(input()))]
b={i:str(f(i)) for i in set(a)}
print(""\n"".join([b[i] for i in a])) -End,"
 n,m=map(int,input().split())
ms=[input().split() for i in range(n)]
print(""\n"".join(["" "".join([ms[j][i] for j in range(n)]) for i in range(m)])) -End,"
 a=' abcdefghijklmnopqrstuvwxyz'
n,s=int(input()),input().strip()
print('result: ""%s""'%"""".join([a[(a.index(c)+n)%len(a)] for c in s])) -End,"
 f=lambda a,i: a>i and [str(i)]*i+f(a-i,i+1) or [str(i)]*a
print(' '.join(f(int(input()),1))) -End,"
 import numpy
n,m=map(int,input().split())
ss=[list(input()) for i in range(n)]
a=numpy.array([[ss[-1][-1]]+ss[-1]+[ss[-1][0]]]+[[ss[i][-1]]+ss[i]+[ss[i][0]] for i in range(n)]+[[ss[0][-1]]+ss[0]+[ss[0][0]]])
print('\n'.join([''.join(['X' if (len(numpy.where(a[i-1:(i+2),j-1:(j+2)]=='X')[0])-int(a[i][j]=='X'))==3 or (len(numpy.where(a[i-1:(i+2),j-1:(j+2)]=='X')[0])-int(a[i][j]=='X'))==2 and a[i][j]=='X' else '.' for j in range(1,m+1)]) for i in range(1,n+1)])) -End,"
 r={'I':1,'IV':4,'V':5,'IX':9,'X':10,'XL':40,'L':50,'XC':90,'C':100,'CD':400,'D':500,'CM':900,'M':1000}
f=lambda s: s!='' and r[s[0]]+f(s[1:]) if len(s)<2 or s[:2] not in r else r[s[:2]]+f(s[2:])
print(f(input())) -End,"
 a,b=input(),input()
print(""""""%s and %s sat in the tree.
%s had fallen, %s was stolen.
What's remaining in the tree?
""""""%(a,b,a,b)) -End,"
 f=lambda x: 1-(x+2)**2 if x<=-2 else (x-2)**2+1 if x>2 else -x/2 -End,"
 n=input()
f=lambda n: n!=1 and ([str(n//2)]+ f(n//2) if n%2==0 else [str(n*3+1)] + f(n*3+1)) or []
print(' '.join([n]+f(int(n)))) -End,"
 n,s=int(input()),input()
print('Result: ""%s""'%''.join([chr((ord(c)+n-0x1f600)%0x50+0x1f600) for c in s])) -End,"
 def fib(n):
	a,b=0,1
	yield a
	yield b
	for i in range(n-1):
		a,b=b,a+b
		yield b

print(list(fib(int(input())))[-1])


 -End,"
 def fibd(n):
	a,b=0,1
	for i in range(n-1):
		a,b=b%10,(a+b)%10
	return b
		
print(fibd(int(input()))) -End,"
 n,m=map(int,input().split())
o,i=[0,1],2
while not (o[i-2]==0 and o[i-1]==1) or i<=2:
	o.append((o[i-2]+o[i-1])%m)
	i+=1
print(o[n%(i-2)])
 -End,"
 from skimage.io import *
img=imread(""img.png"")
img[img.shape[0]//2,img.shape[1]//2]=(102,204,102)
imsave('out_img.png',img) -End,"
 from skimage.io import *
img=imread(""img.png"")
img[img.shape[0]//2-3:img.shape[0]//2+4,img.shape[1]//2-7:img.shape[1]//2+8]=(255,192,203)
imsave('out_img.png',img) -End,"
 from numpy import *
from skimage.io import *
img=imread(""img.png"")
a=where(img!=img[0,0])
print(""%i %i %i %i""%(a[1][0],a[0][0],img.shape[1]-1-a[1][-1],img.shape[0]-1-a[0][-1]))

 -End,"
 from skimage.io import *
imsave('out_img.png',255-imread(""img.png"")) -End,"
 from skimage.io import *
from numpy import *
img=imread(""img.png"")
imsave('out_img.png',dstack((img[:,:,2],img[:,:,0],img[:,:,1]))) -End,"
 from skimage.io import *
from skimage import *
img=img_as_float(imread(""img.png""))
imsave('out_img.png',img_as_ubyte(0.2126*img[:,:,0]+0.7152*img[:,:,1]+0.0722*img[:,:,2])) -End,"
 from numpy import *
def align(img, coord):
    dy,dx=0.07*(img.shape[0]//3),0.07*(img.shape[1])
    b,g,r=img[dy:img.shape[0]//3-dy+1,dx:img.shape[1]-dx],img[img.shape[0]//3+dy:2*(img.shape[0]//3)-dy+1,dx:img.shape[1]-dx],img[2*(img.shape[0]//3)+dy:3*(img.shape[0]//3)-dy+1,dx:img.shape[1]-dx]
    bg=array([[(g*roll(roll(b,col_shift,axis=1),row_shift,axis=0)).sum() for col_shift in range(-15,16)] for row_shift in range(-15,16)])
    rg=array([[(g*roll(roll(r,col_shift,axis=1),row_shift,axis=0)).sum() for col_shift in range(-15,16)] for row_shift in range(-15,16)])
    bg_shift=where(bg==bg.max())
    rg_shift=where(rg==rg.max())
    return (coord[0]-(bg_shift[0][0]-15+img.shape[0]//3), coord[1]-(bg_shift[1][0]-15)), (coord[0] - (rg_shift[0][0]-15) + img.shape[0]//3,  coord[1] -(rg_shift[1][0] - 15)) -End,"
 from skimage.io import *
from numpy import *
img = imread('img.png')
gray = vectorize(lambda x, xmin, xdiff: (x - xmin) * 255 / xdiff, otypes=[uint8])
imsave('out_img.png', gray(img, img.min(), img.max() - img.min())) -End,"
 from skimage.io import *
from numpy import *
img=sort(imread('img.png').flatten())
print(img[round(img.size * 0.05)],img[-round(img.size * 0.05)])
 -End,"
 from skimage.io import *
from numpy import *
img = imread('img.png').astype('int32')
img_fl, k = sort(img.flatten()), round(img.size * 0.05)
imsave('out_img.png',clip((img - img_fl[k]) * 255 / (img_fl[-k] - img_fl[k]),0,255).astype('uint8')) -End,"
 from skimage.io import *
from skimage import *
from numpy import *
img = img_as_float(imread('img.png'))
y, u, v = (img * array([0.2126, 0.7152, 0.0722])).sum(axis=2), \
          (img * array([-0.0999, -0.3360, 0.4360])).sum(axis=2), \
          (img * array([0.6150, -0.5586, -0.0563])).sum(axis=2)
y_fl, k = sort(y, axis=None), round(y.size * 0.05)
y_new=clip((y - y_fl[k]) * 1 / (y_fl[-k] - y_fl[k]),0,1)
r, g, b = y_new + 1.2803 * v, \
          y_new - 0.2148 * u - 0.3805 * v, \
          y_new + 2.1279 * u
imsave('out_img.png',img_as_ubyte(clip(dstack((r, g, b)),0,1)))
del img, y, u, v, y_fl, y_new, r, g, b, k -End,"
 from skimage.io import *
from numpy import *
img=imread('img.png')
ra, ga, ba = img.mean(axis=(0,1))
imsave('out_img.png', clip(img * [(ra + ga + ba) / 3 /ra, (ra + ga + ba) / 3 / ga, (ra + ga + ba) / 3 / ba],0,255).round().astype('uint8')) -End,"
 from skimage.io import *
from numpy import *
img = imread('img.png')
cdf = cumsum(histogram(img, bins = range(256))[0])
f = vectorize(lambda x: (cdf[x] - cdf[cdf.nonzero()].min()) * 255 / (img.size - 1))
imsave('out_img.png',f(img).round().astype('uint8')) -End,"
 from numpy import *
print(array([roll([2,1,0,0],i) for i in range(3)]))

 -End,"
 mat.shape=mat.size,1
print(mat) -End,"
 import numpy as np
x_shape, X = tuple(map(int, input().split())), np.fromstring(input(),dtype=np.int16,sep=' ')
y_shape, Y = tuple(map(int, input().split())), np.fromstring(input(),dtype=np.int16,sep=' ')
X.shape, Y.shape=x_shape, y_shape
print(X.dot(Y.T) if X.shape[1]==Y.shape[1] else ""matrix shapes do not match"") -End,"
 from skimage.io import *
import numpy as np
img = imread('img.png')
a=[]
for row in range(img.shape[0]):
    for col in range(img.shape[1]):
        if np.all(img[row,col]!=img[0, 0]):
            a.append((row,col))
#a = np.where(img != img[0, 0])
print(a[0][1], a[0][0], img.shape[1] - a[-1][1] - 1, img.shape[0] - a[-1][0] - 1) -End,"
 from skimage.io import *
from numpy import *
img=imread('img.png')
ii=[[0]*(img.shape[1]+1)]+[[0]+[img[:row+1,:col+1].sum() for col in range(img.shape[1])] for row in range(img.shape[0])]
imsave('out_img.png',array([[(ii[row+5][col+5]+ii[row][col]-ii[row+5][col]-ii[row][col+5])/25 for col in range(img.shape[1]-4)] for row in range(img.shape[0]-4)]).astype('uint8')) -End,"
 from numpy import *
s = float(input())
k = int(round(3 * s))
m = array([[1 / ( 2 * pi * s**2) * exp((-x**2 - y**2)/(2 * s**2)) for x in range(-k,k+1)] for y in range(-k,k+1)])
print('\n'.join([' '.join([e for e in row]) for row in (m / m.sum()).round(5).astype('str')])) -End,"
 from skimage.io import *
from numpy import *
img=imread('img.png')
m = array([[1 / ( 2 * pi * 0.66**2) * exp((-x**2 - y**2)/(2 * 0.66**2)) for x in range(-2, 3)] for y in range(-2, 3)])
m /= m.sum()
imsave('out_img.png',array([[(img[row:row + 5,col:col + 5] * m).sum() for col in range(img.shape[1] - 4)] for row in range(img.shape[0] - 4)]).astype('uint8')) -End,"
 from skimage.io import *
from numpy import *
img=imread('img.png')
m = 0.1 * array([[-1, -2, -1],\
                 [-2, 22, -2],\
                 [-1, -2, -1]])
imsave('out_img.png',clip(array([[(img[row:row + 3,col:col + 3] * m).sum() for col in range(img.shape[1] - 2)] for row in range(img.shape[0] - 2)]), 0, 255).astype('uint8')) -End,"
 from skimage.io import *
from numpy import *
img=imread('img.png')
imsave('out_img.png',array([[sort(img[row:row + 7,col:col + 7],axis=None)[24] for col in range(img.shape[1] - 6)] for row in range(img.shape[0] - 6)])) -End,"
 a, b = int(input()), int(input())
print(""%i\n%i\n%i\n%i\n%s\n%i\n%i""%(a + b, a - b, b - a, a * b, a / b, b % a, a ** b)) -End,"
 s = (float(input()) * float(input()))/2
print(""%i\n%0.1f\n%s""%(int(s), s, s)) -End,"
 print(round(int(input()) ** 2 * 3 ** 0.5 / 4 * 11)) -End,"
 print(round(float(input()) ** 2 * (1.25 *  3 ** 0.5 / 4 * 6 + 3))) -End,"
 print(""-$-"".join(input().split()[::-1])) -End,"
 print(input() + '$' + input()) -End,"
 # your code
L = input().replace('[','').replace(']','').replace(""'"",'').split(', ') -End,"
 print({'1': 'I', '5': 'V', '10' : 'X', '50' : 'L', '100': 'C', '500': 'D', '1000': 'M'}[input()]) -End,"
 print(*range(int(input())+1),sep='\n') -End,"
 print(*map(lambda i: i**2, range(0,int(input()),2)),sep='\n') -End,"
 a, i = int(input()), 2
while a%i != 0: i+=1
print(i)
 -End,"
 print(*map(lambda x: x**3, range(1,abs(int(input())))), sep = '\n') -End,"
 dfactorial = lambda n: int(n<=1) or dfactorial(n-2)*n -End,"
 Kfactorial = lambda n, k = 1: int(n<=1) or Kfactorial(n - k, k) * n -End,"
 convert = lambda l: map(int,l) -End,"
 def translate(x, k=2):
    s = """"
    while x != 0:
        s += str(x % k)
        x = x // k
    s += str(x % k)
    return s[::-1] -End,"
 factorial = lambda x: int(x<=1) or factorial(x - 1) * x
sf = lambda x: int(x<=1) or factorial(x) * sf(x - 1) -End,"
 print((lambda a: ""%0.2f\n%0.2f""%(3 * a ** 2 *(5 * (5 + 2* 5**0.5)) ** 0.5, a ** 3 * (15 + 7 * 5 ** 0.5) / 4))(int(input()))) -End,"
 from math import *
def_e = lambda x: (e ** (x+0.0001) - e ** x) / 0.0001 -End,"
 last_to_first = lambda l: l[::-1]
     -End,"
 print(sum(e for e in range(0,int(input())+1,5) if e%3)) -End,"
 common = lambda a, b: set(a)&set(b) -End,"
 front_x = lambda words: sorted(w for w in words if w != '' and w[0] == 'x') + sorted(w for w in words if w == '' or w[0] != 'x') -End,"
 fib = lambda n: int(n<3) or fib(n-1) + fib(n-2) -End,"
 def is_prime(n):
    res, i = True, int(n ** 0.5)
    while res and i > 1:
        i, res = i - 1, bool(n % i)
    return res -End,"
 is_prime = lambda n: not bool(sum([not n % i for i in range(2,int(n ** 0.5)+1)])) -End,"
 donuts = lambda n: ""Всего пончиков: %s""%(n if n<=9 else ""много"")
print (donuts(int(input()))) -End,"
 both_ends = lambda s: len(s) >= 2 and s[:2] + s[-2:] or ''
print(both_ends(input())) -End,"
 print(' '.join(w[0] for w in input().split())) -End,"
 from numpy import *
m = array((input().split(),input().split()),dtype=int)
print(*linalg.solve(m[:,:-1],m[:,-1])) -End,"
 from numpy import *
m = array((input().split(),input().split()),dtype=int)
print(""Система не имеет решений"" if linalg.det(m[:,:-1])==0 else ""%s %s""%tuple(linalg.solve(m[:,:-1],m[:,-1]))) -End,"
 from numpy import *
m = array(tuple(input().split() for _ in range(3)),dtype=int)
print(""Система не имеет решений"" if linalg.det(m[:,:-1])==0 else "" "".join(""%s""*3)%tuple(linalg.solve(m[:,:-1],m[:,-1]))) -End,"
 from numpy import *
m = array(tuple(input().split() for _ in range(4)),dtype=int)
print(""Система не имеет решений"" if linalg.det(m[:,:-1])==0 else "" "".join(""%s""*4)%tuple(linalg.solve(m[:,:-1],m[:,-1]))) -End,"
 from numpy import *
m = array(tuple(input().split() for _ in range(int(input()))),dtype=float)
print(""Система не имеет решений"") if linalg.det(m[:,:-1])==0 else print(*linalg.solve(m[:,:-1],m[:,-1])) -End,"
 a = int(input())
b = int(input())
d = max(a, b)
while (d % min(a, b)) != 0:
    d += max(a, b)
print(d)
 -End,"
 a = int(input())
while a <= 100:
    if a < 10:
        a = int(input())
        continue
    elif 10 <= a <= 100:
        print(a)
        a = int(input())
 -End,"
 a = int(input())
b = int(input())
s = 0
c = 0
for i in range(a, b + 1):
    if i % 3 == 0:
        s += i
        c += 1
print(s / c)
 -End,"
 a = input().upper()
c = a.count('C')
g = a.count('G')
print(((c+g)/(len(a)))*100)
 -End,"
 s = input()
res = ''
n = 1
for i in range(len(s)):
    if (i + 1) > (len(s)-1):
        res += s[i] + str(n)
        n = 1
    elif s[i] == s[i+1]:
        n += 1
    else:
        res += s[i] + str(n)
        n = 1
print(res)
 -End,"
 a = [int(i) for i in input().split()]
print(sum(a))
 -End,"
 a = [int(i) for i in input().split()]
new = []
for i in range(len(a)):
    if len(a) == 1:
        new += a
    else:
        if i == 0:
            new.append((a[i + 1]) + (a[(len(a)-1)]))
        elif i == (len(a)-1):
            new.append((a[i-1]) + a[0])
        else:
            new.append((a[i + 1]) + (a[i - 1]))
for j in new:
    print(j, end=' ')
 -End,"
 a = [int(i) for i in input().split()]
new = []
for i in a:
    if (a.count(i) > 1) and (i not in new):
        new.append(i)
        new.sort()
print(*new)
 -End,"
 a = int(input())
new = []
sn = []
if (len(new)) == 0:
    new.append(a)
while sum(new) != 0:
    a = int(input())
    new.append(a)
    if sum(new) == 0:
        sn = [i*i for i in new]
        break
print(sum(sn))
 -End,"
 n = int(input())
a = [[i]*i for i in range(1, n+1)]
new = []
for k in a:
    new.extend(k)
print(*new[0:n])
 -End,"
 lst = list([int(i) for i in input().split()])
x = int(input())
res = []
for i in range(len(lst)):
    if lst[i] == x:
        res.append(i)
if len(res) == 0:
    print('Отсутствует')
else:
    print(*res)
 -End,"
 def f(x):
    if x <= -2:
        return 1 - (x + 2) ** 2
    elif -2 < x <= 2:
        return -(x/2)
    else:
        return ((x-2)**2)+1
 -End,"
 def modify_list(l):
    new = []
    for i in l:
        if i % 2 == 0:
            new.append(i // 2)
    l.clear()
    l += new
 -End,"
 def update_dictionary(d, key, value):
    if key in d:
        d[key] += [value]
    elif key not in d:
        if 2 * key in d:
            d[2 * key] += [value]
        else:
            d[2 * key] = [value] -End,"
 s = list(input().lower().split())
d = {}
for i in s:
    if i in d:
        d[i] += 1
    else:
        d[i] = 1
for k in d:
    print(k, d[k])
 -End,"
 n = int(input())
d = {}

for i in range(1, n + 1):
    x = int(input())
    if x in d:
        print(d[x])
    else:
        d[x] = f(x)
        print(d[x])
 -End,"
 import math
r = float(input())
c = (2*math.pi*r)
print(c)
 -End,"
 import sys

x = sys.argv
for i in range(1, len(x)):
    print(sys.argv[i], end=' ')
 -End,"
 n = int(input())
tournament = {}
team = {'game': 0,
        'win': 0,
        'a_draw': 0,
        'lose': 0,
        'points': 0
        }
for game in range(n):
    count = 0
    team1, score1, team2, score2 = list(input().split(';'))
    if team1 in tournament:  # first team
        tournament[team1]['game'] += 1
    else:
        tournament[team1] = team.copy()
        tournament[team1]['game'] += 1
    if team2 in tournament:  # second team
        tournament[team2]['game'] += 1
    else:
        tournament[team2] = team.copy()
        tournament[team2]['game'] += 1
    if score2 != score1 > score2:  # points
        tournament[team1]['win'] += 1
        tournament[team2]['lose'] += 1
    elif score2 == score1:
        tournament[team1]['a_draw'] += 1
        tournament[team2]['a_draw'] += 1
    elif score1 != score2 > score1:
        tournament[team1]['lose'] += 1
        tournament[team2]['win'] += 1
    tournament[team1]['points'] = (tournament[team1]['win']) * 3 + (tournament[team1]['a_draw']) * 1
    tournament[team2]['points'] = (tournament[team2]['win']) * 3 + (tournament[team2]['a_draw']) * 1
for i in tournament:
    a = tournament[i].values()
    b = str(i) + ': '
    for j in a:
        b += str(j) + ' '
    print(b)
 -End,"
 text1 = input()
text11 = input()
text_code = input()
text_decode = input()
podst = {}
for i in range(len(text1)):
    if text1[i] not in podst:
        podst[text1[i]] = text11[i]
text_decode_out = ''
for j in text_code:
    text_decode_out += podst[j]
print(text_decode_out)
recoding = ''
for code in text_decode:
    for n in podst:
        if podst[n] == code:
            recoding += n
print(recoding)
 -End,"
 d = int(input())
vocabulary = set()
for word in range(d):
    d = input().lower()
    vocabulary.add(d)
l = int(input())
text = set()
for word in range(l):
    l = input().lower().split()
    for words in l:
        text.add(words)
for i in (text - vocabulary):
    print(i)
 -End,"
 x = 0
y = 0
n = int(input())
for move in range(n):
    n = input().split()
    if n[0] == 'север':
        y += int(n[1])
    elif n[0] == 'запад':
        x -= int(n[1])
    elif n[0] == 'юг':
        y -= int(n[1])
    elif n[0] == 'восток':
        x += int(n[1])
print(x, y)
 -End,"
 n = input()
result = 0
for i in range(int(n)):
    n = int(input())
    result += n
print(result)
 -End,"
 ans = 0
a = []
for i in objects:
    if i not in a:
        a.append(i)
print(len(a))
 -End,"
 n, k = map(int, input().split())


def c(n, k):
    if k > n:
        return 0
    if k == 0:
        return 1
    return c(n - 1, k) + c(n - 1, k - 1)
print(c(n, k)) -End,"
 n = int(input())
namesp = {
    'global': {
                'parent': None,
                'vars': set(),
                }
            }


def create(namespace, parent):
    namesp[namespace] = {
                'parent': parent,
                'vars': set(),
                }


def add(namespace, variable):
    namesp[namespace]['vars'].add(variable)


def get_ns(namespace, variable):
    while namespace is not None:
        if variable in namesp[namespace]['vars']:
            return namespace
        else:
            namespace = namesp[namespace]['parent']
    return None


for i in range(n):
    cmd, arg1, arg2 = input().split()
    if cmd == 'add':
        add(arg1, arg2)
    elif cmd == 'create':
        create(arg1, arg2)
    elif cmd == 'get':
        print(get_ns(arg1, arg2))
 -End,"
 class Buffer:
    def __init__(self):
        self.numbers = []

    def add(self, *a):
        for i in a:
            self.numbers.append(i)
        while len(self.numbers) >= 5:
            print(sum(self.numbers[0:5]))
            del self.numbers[:5]

    def get_current_part(self):
        return self.numbers
 -End,"
 print(""Здравствуй, "" + input())
 -End,"
 print(input() + ' действительно есть в нашем словаре!')
 -End,"
 print(int(input()) + int(input()))
 -End,"
 print(float(input()) * float(input()))
 -End,"
 print(float(input())*(float(input())**2)/2)
 -End,"
 print(int(input())*365*24*60*60)
 -End,"
 print(int(input()) % 10)
 -End,"
 n = int(input())
print(n // 60, n % 60)
 -End,"
 print(int(input()) % 10**int(input()))
 -End,"
 n = int(input())
print(((n % 10)**3) + ((n//10 % 10) ** 3) + ((n // 100 % 10) ** 3))
 -End,"
 a = input()
b = input()
if a != b:
    print(True)
else:
    print(False)
 -End,"
 print(len(input()))
 -End,"
 a, b, c = float(input()), float(input()), float(input())
p = 1 / 2 * (a + b + c)
print((p * (p - a) * (p - b) * (p - c))**0.5)
 -End,"
 print(int(input()) + int(input()) + int(input()))
 -End,"
 s = (int(input())*100 + int(input())) * int(input())
print(s//100, s % 100)
 -End,"
 a = int(input())
b = int(input())
if a > b:
    print(""Большее число: {0}, меньшее число: {1}"".format(a, b))
else:
    print(""Большее число: {0}, меньшее число: {1}"".format(b, a))
 -End,"
 a = abs(int(input()))
if a > 10**9:
    print(""Да, это большое число"")
else:
    print(""Нет, это не такое уж и большое число"")

 -End,"
 a = float(input())
b = float(input())
c = input()
if c == '+':
    print(a + b)
else:
    print(a - b)
 -End,"
 a = input()
if len(a) == 1:
    print(""Число однозначное"")
elif len(a) == 2:
    print(""Число двузначное"")
else:
    print(""Число трехзначное"")
 -End,"
 a = int(input())
b = int(input())
c = int(input())
if a < b < c:
    print(""Все в порядке"")
if a >= b:
    print(""2 <= 1"")
if b >= c:
    print(""3 <= 2"")
 -End,"
 a = input()
b = 'Энрико Ферми, Нильс Бор, Джон фон Нейман, Ричард Фейнман, Роберт Оппенгеймер, Ганс Бизе, Ханс Бете'
if a in b:
    print(""Доступ разрешен"")
else:
    print(""Доступ запрещен"")
 -End,"
 x = int(input())
y = int(input())
if x > 0 < y:
    print(""1"")
elif x < 0 < y:
    print(""2"")
elif x < 0 > y:
    print(""3"")
else:
    print(4)
 -End,"
 a = float(input())
b = float(input())
c = input()
if c == '+':
    print(a + b)
elif c == '-':
    print(a - b)
elif c == '*':
    print(a*b)
else:
    print(a/b)
 -End,"
 a = int(input())
if (a % 4 == 0) and ((a % 100 != 0) or (a % 400 == 0)):
    print(""Високосный"")
else:
    print(""Невисокосный"")
 -End,"
 a = input()
if ('qwerty' in a) or ('1234' in a) or (len(a) < 8) or (
        '1' not in a and '2' not in a and '3' not in a and '4' not in a and '5' not in a and '6' not in a and '7' not in a and '8' not in a and '9' not in a and '0' not in a):
    print(""Bad password"")
else:
    print(""Good password"")
 -End,"
 reviews = int(input())
city = input().lower().strip()
language = input().lower().strip()
if (reviews >= 7) and (city == 'рим') and (('английский' in language) or ('русский' in language)):
    print(""Подходит"")
else:
    print(""Не подходит"")
 -End,"
 character = input()
if ('Арагорн' in character) or ('Леголас' in character) or ('Мериадок Брендибак' in character) or (
        'Боромир' in character) or ('Фродо Бэггинс' in character):
    print(""Проходи!"")
else:
    print(""Ты не пройдешь!"")
 -End,"
 number = int(input())
if (number % 2) == 0:
    print(tuple(range(number, number * 10 + 1, 2)))
else:
    print(tuple(range(number+1, number * 10 + 1, 2)))
 -End,"
 for i in range(int(input()), int(input()), -1):
    print(i)
 -End,"
 a = int(input())
b = int(input())
result = 0
if a > b:
    a, b = b, a
for i in range(a, b):
    result += i
print(result)
 -End,"
 n = int(input())
result = 1
for i in range(1, n+1):
    result *= i
print(result)
 -End,"
 n = int(input())
rainbow = ""Красный"", ""Оранжевый"", ""Желтый"", ""Зеленый"", ""Голубой"", ""Синий"", ""Фиолетовый""
if n > 7:
    print(""Радуга состоит только из семи цветов"")
else:
    for i in range(n):
        print(rainbow[i])
 -End,"
 n = int(input())
result = 0
for i in range(int(input())):
    nn = int(input())
    result += nn
if result <= n:
    print(""Покупает"")
else:
    print(""Не покупает"")
 -End,"
 a = int(input())
b = int(input())
result = 0
if a > b:
    a, b = b, a
for i in range(a, b):
    result += i**2
print(result)
 -End,"
 a = int(input())
b = (""Первый месяц - январь"", ""Второй месяц - февраль"", ""Третий месяц - март"", ""Четвертый месяц - апрель"",
     ""Пятый месяц - май"", ""Шестой месяц - июнь"", ""Седьмой месяц - июль"", ""Восьмой месяц - август"",
     ""Девятый месяц - сентябрь"", ""Десятый месяц - октябрь"", ""Одиннадцатый месяц - ноябрь"",
     ""Двенадцатый месяц - декабрь"")
result = 0
if a > 12:
    print(""Error"")
else:
    for i in range(a):
        print(b[i])
 -End,"
 n = int(input())
b = ""На лугу""
c = ""коров""
for i in range(1, n+1):
    if (0 == (i % 10)) or ((i % 10) > 4) or (10 < i < 20):
        print(b, i, c)
    elif 1 < (i % 10) < 5:
        print(b, i, c + 'ы')
    else:
        print(b, i, c + 'а') -End,"
 n = int(input())
fib1 = 1
fib2 = 1
if n < 2:
    print(str(1)*n)
    quit()
print(fib1, fib2, end=' ')
for i in range(2, n):
    fib1, fib2 = fib2, fib1 + fib2
    print(fib2, end=' ')
 -End,"
 n = int(input())
for i in range(2, n):
    if n % i == 0:
        print(""Составное"")
        break
else:
    print(""Простое"")
 -End,"
 n = int(input())
for i in range(1, n+1):
    for j in range(1, n+1):
        print(i*j, end='\t')
    print()
 -End,"
 n = int(input())
count = 0
res = 0
while n > 0:
    text = input().strip()
    count += 1
    if 'rat' in text:
        res += 1
        print(count)
    n -= 1
if res == 0:
    print(-1)
 -End,"
 n = int(input())
res = 0
while n != 0:
    res += n
    n = int(input())
print(res)
 -End,"
 n = input()
if n == '':
    print(""Нет вдохновения? Ну ничего, попробуйте завтра"")
else:
    while n:
        print(""Великолепно, пишите еще!"")
        n = input()
    print(""Эти строки запомнятся надолго"")
 -End,"
 n = int(input())
result = 0
while result <= n:
    s = int(input())
    if (result + s) > n:
        print(""Стоп, Джон!"")
        print(result)
        break
    else:
        result += s
 -End,"
 n = int(input())
count = 0
res = 0
while n:
    text = input().strip()
    count += 1
    if 'rat' in text:
        res += 1
        print(count)
        break
    n -= 1
if res == 0:
    print(-1)
 -End,"
 while True:
    password = input().strip()
    count = 0
    for i in password:
        if i.isdigit():
            count += 1
    if (""qwerty"" in password) or ('1234' in password):
        print('Слабый пароль')
    elif len(password) < 8:
        print(""Короткий пароль"")
    elif count == 0:
        print(""Пароль должен содержать цифры"")
    else:
        break
 -End,"
 while True:
    n = int(input())
    for i in range(2, n + 1):
        if n % i == 0:
            print(i)
            break
    break
 -End,"
 n = int(input())
step = 0
while (2 ** step) < n:
    step += 1
    if (2 ** step) == n:
        print(""YES"")
        break
else:
    print(""NO"")
 -End,"
 n = int(input())
lst_number = []
for i in range(n):
    n = int(input())
    lst_number.append(n)
a = lst_number[0]
for j in range(1, len(lst_number)):
    b = lst_number[j]
    while b != 0:
        if a == b:
            break
        if b > a:
            a, b = b, a
        a, b = b, a % b
print(a) -End,"
 n = int(input())
lst_number = []
for i in range(n):
    n = int(input())
    lst_number.append(n)
a = max(lst_number)
b = min(lst_number)
while b != 0:
    if a == b:
        break
    if b > a:
        a, b = b, a
    a, b = b, a % b
print(a)
if a == 1:
    print(""NO"")
else:
    for j in range(2, a):
        if a % j == 0:
            print(""NO"")
            break
    else:
        print(""YES"")
 -End,"
 n = int(input())
sym_number = []
for i in range(n):
    n = int(input())
    if len(sym_number) == 0:
        sym_number.append(n)
    else:
        if (n < sym_number[0]) and ((n % 10) == 4):
            sym_number[0] = n
print(sym_number[0])
 -End,"
 n = int(input())
sym_number = 0
for i in range(n):
    n = int(input())
    if n % 6 == 0:
        sym_number += n
print(sym_number)
 -End,"
 numbers = tuple(map(int, input().split()))
count_couple = 0
for i in range(0, len(numbers)-1):
    if ((((numbers[i]) + (numbers[i + 1])) % 3) == 0) and ((((numbers[i]) + (numbers[i + 1])) % 9) != 0):
        count_couple += 1
print(count_couple)
 -End,"
 numbers = tuple(map(int, input().split()))
max_number = []
for i in range(0, len(numbers)):
    if ((numbers[i] // 10) > 0) and ((numbers[i] % 3) != 0) and ((numbers[i] // 10) < 10):
        if len(max_number) == 0:
            max_number.append(numbers[i])
        else:
            if numbers[i] > max_number[0]:
                max_number[0] = numbers[i]
if len(max_number) > 0:
    print(max_number[0])
else:
    print(""Не найдено"")
 -End,"
 numbers = tuple(map(float, input().split()))
first = numbers[0]
second = numbers[1]
result = abs(first - second)
for i in range(1, len(numbers)-1):
    if (abs((numbers[i]) - (numbers[i + 1]))) >= result:
        first = numbers[i]
        second = numbers[i + 1]
        result = abs(first - second)
print(first, second)
 -End,"
 result = []
n = input()
while n != '.':
    if n == '.':
        break
    else:
        if int(n) % 2 == 0:
            result.append(n)
    n = input()
result_out = reversed(result)
for i in result_out:
    print(i, end=' ')
 -End,"
 lst = []
number_chet = None
number_ne_chet = None
n = int(input())
for i in range(n):
    x = int(input())
    lst.append(x)
    if x % 2 == 0:
        if number_chet is None:
            number_chet = x
        else:
            if x < number_chet:
                number_chet = x
    else:
        if number_ne_chet is None:
            number_ne_chet = x
        else:
            if x < number_ne_chet:
                number_ne_chet = x
res_sym = number_chet + number_ne_chet
for j in range(0, len(lst)):
    if (number_ne_chet is None) or (number_chet is None):
        break
    elif lst[j] < res_sym:
        lst[j] += res_sym
print(*lst)
 -End,"
 n = input().upper()
lst = []
while n != '.':
    lst.append(n)
    n = input().upper().strip()
for i in lst:
    print(*i)
 -End,"
 n = input()
lst = []
while n != '.':
    lst.append(n)
    n = input()
x = int(input())
number = []
for i in range(x):
    number.append(int(input())-1)
for j in number:
    print(lst[j], end='')
 -End,"
 n = input()
n = n.replace(' ', '_')
print(n)
 -End,"
 n = input().replace('.', ' ')
print(n)
res = 0
for i in n.split():
    res += int(i)
print(res)
 -End,"
 t = ""."", "","", ""!"", ""?"", "":"", "";"", ""–""
n = str(input().lower())
for i in t:
    n = n.replace(i, '')
print(n)
 -End,"
 n = int(input())
while True:
    text = input()
    if text == '.':
        break
    elif len(text) > n:
        print(text[:n] + '... ' + 'Читайте продолжение в источнике...')
    else:
        print(text)
 -End,"
 numbers = []
n = input()
while n != ""."":
    numbers.append(int(n)**2)
    n = input()
print(*numbers[::-1])
 -End,"
 numbers = []
n = input().split()
while n[0] != ""."":
    if n[0] == n[-1] == '!!':
        print(""предупреждение"")
    elif n[0] == n[-1] == '@@':
        print(""ошибка"")
    elif n[0] == n[-1] == '//':
        print(""информация"")
    elif n[0] == n[-1] == '**':
        print(""подробное сообщение"")
    n = input().split()
 -End,"
 server = []
n = input().split()
while n[0] != ""."":
    if n[0] == 'POST':
        server.append([])
        server[len(server)-1] = n[1:]
    elif n[0] == 'GET':
        print(*server[-1])
    elif n[0] == 'DELETE':
        server.pop()
    n = input().split()
for i in server:
    print(*i, end=' ')
 -End,"
 n = [int(i) for i in input().split()]
if n[0] + n[1] == n[2]:
    print(n[0], '+',  n[1], '=', n[2])
elif n[0] * n[1] == n[2]:
    print(n[0], '*',  n[1], '=', n[2])
elif n[0] - n[1] == n[2]:
    print(n[0], '-',  n[1], '=', n[2])
elif n[0] / n[1] == n[2]:
    print(n[0], '/',  n[1], '=', n[2])
else:
    print(""Error"")
 -End,"
 n = input()
length_text = len(n) - len(n.strip())
print(n.strip())
print(length_text)
 -End,"
 n = [int(i) for i in input().split(',')]
output = 0
for j in range(len(n)):
    if n[j] == min(n):
        output += j
print(output)
 -End,"
 n = input()
output = []
while True:
    if n.isupper() or n.islower() or n.isdigit():
        break
    else:
        output.append(n)
    n = input()
for i in output:
    print(i.swapcase())
 -End,"
 n = input()
output = []
sum_number = 0
for i in range(len(n)):
    if n[i].isdigit():
        if (int(n[i])+1) > 9:
            output.append(str(0))
        else:
            output.append(str(int(n[i])+1))
            sum_number += int(n[i])+1
    else:
        output.append(n[i])
print(''.join(output))
print(sum_number)
 -End,"
 n = [int(i) for i in input().split(',')]
m = list(set(n))
m.sort()
maximum1 = []
maximum2 = []
for i in m:
    if (len(maximum1) == 0) or (len(maximum2) == 0):
        if len(maximum1) == 0:
            maximum1.append(i)
        elif len(maximum2) == 0:
            maximum2.append(i)
    elif abs(i) > abs(maximum1[0]):
        if abs(maximum1[0]) > abs(maximum2[0]):
            maximum2[0] = maximum1[0]
        maximum1[0] = i
    elif abs(i) < abs(maximum1[0]):
        if (abs(i) != abs(maximum1[0])) and (abs(i) > abs(maximum2[0])):
            maximum2[0] = i
if abs(maximum1[0]) > abs(maximum2[0]):
    maximum1[0], maximum2[0] = maximum2[0], maximum1[0]
print(*maximum1, *maximum2)
 -End,"
 n = [int(i) for i in input().split(' ')]
first = sorted((n[0:(len(n)//2)]))
second = sorted((n[len(first):]), reverse=True)
print(first[0] + second[-1])
 -End,"
 s = input().lower()
s = s.replace(' ', '')
mas = s[::-1]
if s == str(mas):
    print('YES')
else:
    print('NO')
 -End,"
 # put your python code here
d, spanish = dict(), []
for i in range(int(input())):
    s=input().split(' - ')
    d[s[0]] = s[1].split(', ')
    spanish += d[s[0]]
 
spanish = sorted(list(set(spanish)))
print(len(spanish))
[print(w + ' - ' + ', '.join(sorted([i[0] for i in d.items() if w in i[1]]))) for w in spanish] -End,"
 # put your python code here
import heapq

st = []
for i in range(int(input())):
    inp = input().split()[-1]
    if inp == 'ExtractMax' : print(-heapq.heappop(st))
    else: heapq.heappush(st, -(int(inp))) -End,"
 print(sum([0 if objects.pop() in objects else 1 for i in range(len(objects))])) -End,"
 # put your python code here
n = int(input())
mat =    [[int(i) for i in input().split()] for row in range(n)]
print('YES' if False not in [mat[row][col] == mat[col][row] for col in range(n) for row in range(n)] else 'NO') -End,"
 # put your python code here
i = input()
print(int(i) + 1) if i[-1] in {'1','3','5','7','9'} else print(int(i) + 2) -End,"
 def cnk(n, k):
    return cnk(n - 1, k) + cnk(n - 1, k - 1) if k != 0 and k <= n else  1 if k == 0 else  0

print(cnk(*map(int, input().split())))
    -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity  = capacity
        
    def can_add(self, v):
        return True if self.capacity >= v else False        

    def add(self, v):
        if self.can_add(v):
            self.capacity -= v -End,"
 def fib_digit(n):
    d = [0,1]
    [d.append((d.pop(0) + d[-1])%10) for i in range(2,n+1)]
    return d[-1]


def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 # put your python code here# put your python code here
import sys, re
[print(line.rstrip()) for line in sys.stdin if re.search(r'\b(\w+)\1\b', line.rstrip())] -End,"
 import sys, re

[print(re.sub(r'\b[aA]+\b','argh', line, count=1), end='') for line in sys.stdin] -End,"
 import re, sys

[print(re.sub(r'\b(\w)(\w)',r'\2\1', line.strip())) for line in sys.stdin] -End,"
 # put your python code here
import re, sys

[print(re.sub(r'(\w)\1+',r'\1', line.strip())) for line in sys.stdin] -End,"
 # put your python code here
import re , requests

[print(a) for a in sorted(list({i[1] for i in  re.findall(r""<a.+href=[\""\'](\w+://)?(\w[-\._\w]+).*[\""\'].*>"", requests.get(input()).text)}))] -End,"
 # put your python code here
class NameSpace:
    def __init__(self):
        self.g = {'global': set()}  # graph_name_space

    def create(self, namespace, parent):
        self.g[parent].add(namespace)
        self.g[namespace] = set()
        pass

    def add(self, namespace, var):
        namespace = namespace
        var = var
        if namespace in self.g:
            self.g[namespace].add(var)

    def get(self, namespace, var):
        namespace = namespace
        var = var
        ans = None
        if var in self.g[namespace]:
            return namespace
        else:
            for n in self.g:
                if namespace in self.g[n]:
                    ans = self.get(n, var)
        return ans

    def read_data(self, data):
        o, n, t = [d.strip() for d in data.split()]
        if o == 'add':
            self.add(n, t)
        elif o == 'create':
            self.create(n, t, )
        elif o == 'get':
            print(self.get(n, t))
        else:
            print('Error!')


n = NameSpace()
for i in range(int(input())):
    n.read_data(input()) -End,"
 class Graph:
    def __init__(self):
        self.g = {} 

    def add_node(self, node_name, parents):
        if node_name in self.g.keys():
            self.g[node_name].extend(parents)
        else:
            self.g[node_name] = parents
        for p in parents:
            if p not in self.g.keys():
                self.add_node(p, [])

    def is_parent(self, parent, node_name, ans = 'No'):        
        if parent == node_name or parent in self.g[node_name]: 
            return ""Yes""
        else:
            for n in self.g[node_name]:
                if parent in self.g[n]:
                    return ""Yes""
                else:
                    ans = self.is_parent(parent, n)
                    if ans == 'Yes': return ans
        return ans

    def read_data(self, data):
        node = [d.strip() for d in data.split(':')]
        parents = [p.strip() for p in node[1].split()] if len(node) > 1 else []
        self.add_node(node[0], parents)

    def read_question(self, data):        
        return self.is_parent(*[q.strip() for q in data.split()])

g = Graph()
for i in range(int(input())): g.read_data(input())
for i in range(int(input())): print(g.read_question(input())) -End,"
 # put your python code here
import sys
import json


class Graph:
    def __init__(self):
        self.g = {}

    def add_node(self, node_name, parents):
        if node_name in self.g.keys():
            self.g[node_name].extend(parents)
        else:
            self.g[node_name] = parents
        for p in parents:
            if p not in self.g.keys(): self.add_node(p, [])

    def is_parent(self, parent, node_name, ans='No'):
        if parent == node_name or parent in self.g[node_name]:
            return ""Yes""
        else:
            for n in self.g[node_name]:
                if parent in self.g[n]:
                    return ""Yes""
                else:
                    ans = self.is_parent(parent, n)
                    if ans == 'Yes': return ans
        return ans

    def get_nodes(self):
        return self.g.keys()


data = sys.stdin.readline()
data = json.loads(data.strip())
g = Graph()
for d in data: g.add_node(d['name'], d['parents'])
nodes = g.get_nodes()
ans = {node: [] for node in nodes}
for parent in nodes:
    for child in nodes:
        res = g.is_parent(parent, child)
        if res == 'Yes':
            ans[parent].append(child)
for node in sorted(nodes): print('{} : {}'.format(node, len(ans[node]))) -End,"
 # put your python code here
class Graph:
    def __init__(self):
        self.g = {}

    def add_node(self, node_name, parents):
        if node_name in self.g.keys():
            self.g[node_name].extend(parents)
        else:
            self.g[node_name] = parents
        for p in parents:
            if p not in self.g.keys(): self.add_node(p, [])

    def is_parent(self, parent, node_name, ans='No'):
        if parent == node_name or parent in self.g[node_name]:
            return ""Yes""
        else:
            for n in self.g[node_name]:
                if parent in self.g[n]:
                    return ""Yes""
                else:
                    ans = self.is_parent(parent, n)
                    if ans == 'Yes': return ans
        return ans

    def get_nodes(self):
        return self.g.keys()

    def read_data(self, data):
        node = [d.strip() for d in data.split(':')]
        parents = [p.strip() for p in node[1].split()] if len(node) > 1 else []
        self.add_node(node[0], parents)

g = Graph()
for i in range(int(input())): g.read_data(input())
exeptions = [input() for i in range(int(input()))]

nodes = g.get_nodes()
ans = {node: [] for node in nodes}
for parent in nodes:
    for child in nodes:
        res = g.is_parent(parent, child)
        if res == 'Yes':
            ans[parent].append(child)

for exeption in exeptions:
    if exeption in ans.keys():
        for child in ans[exeption]:
            if child != exeption and child in ans.keys(): del ans[child]
        del ans[exeption]
    else:
        print(exeption) -End,"
 # put your python code here
print(' '.join([str(ord(i)) for i in input()])) -End,"
 from lxml import etree

root = etree.fromstring(input())
colors = {'red': [], 'green': [], 'blue': []}

def add_weight(element, weight=0):
    weight = int(weight) + 1
    element.set('weight', str(weight))
    colors[element.get('color')].append(weight)
    for children in element:
        add_weight(children, weight)

add_weight(root)
print(' '.join([str(s) for s in list(map(sum, [colors['red'], colors['green'], colors['blue']]))])) -End,"
 # put your python code here
def factorial(n):
    return 1 if n == 0  else n * factorial(n - 1)


n = int(input())
for i in range(0, n // 2):
    if factorial(i) > n:
        print(i)
        break
 -End,"
 # put your python code here
print(sum([int(i) for i in input()])) -End,"
 x, op, y = input().split()
dict_op = {'divide': lambda x, y: x // y, 
            'plus': lambda x, y: x + y,
            'minus': lambda x, y: x - y,
            'multiply': lambda x, y: x * y,
            }

print(dict_op[op](int(x), int(y))) -End,"
 # put your python code here
print(sum([sum(divmod(int(input()), 2)) for i in range(3)])) -End,"
 x, y = sorted(map(int, input().split()))
while x:    
    y,  x = x, y % x
print(y) -End,"
 x, y = sorted(map(int, input().split()))
while x:    
    y,  x = x, y % x
print(y) -End,"
 # put your python code here
t = sorted([int(input()) for i in range(3)])
print('YES') if sum(t) and t.pop() < sum(t) else print('NO') -End,"
 ''Supported operations: +, -, /, *, mod, pow, div; where
mod — taking the residue,
pow — exponentiation,
div — integer division.'''

args = [float(i)  if '.' in i else int(i) for i in [input(), input()]]

try:
    print({'mod':lambda x, y: x % y , 
            'pow':lambda x, y: x**y, 
            'div':lambda x, y: x // y, 
            '+':lambda x, y: x + y, 
            '-':lambda x, y: x - y, 
            '/':lambda x, y: x / y, 
            '*':lambda x, y: x * y,
            }[input()](*args))
except ZeroDivisionError:
    print(""Division by 0!"") -End,"
 # put your python code here
x1,y1,x2,y2 = map(int, input().split())
print('YES') if (abs(x1-x2) == 2 and abs(y1-y2) == 1 ) or  (abs(x1-x2) == 1 and abs(y1-y2) == 2 ) else print('NO') -End,"
 x1,y1,x2,y2 = map(int, input().split())
result = (abs(x1-x2), abs(y1-y2))
correct = {(2, 1), (1, 2)}
print('YES') if result in correct else print('NO') -End,"
 n, W = map(int, input().split())
p = []
for i in range(n):
    c, w = map(int, input().split())
    if c * w > 0 : p.append([c ,w])
p.sort(key=lambda cw: cw[1]/cw[0] )
ans = []
weight_in_pack = 0
while weight_in_pack < W and len(p):
    i = p.pop(0)
    ans.append(i if i[1]<=(W - weight_in_pack) else [i[0]/i[1]*(W - weight_in_pack), (W - weight_in_pack)])
    weight_in_pack = sum([a[1] for a in ans])
print(sum([a[0] for a in ans]))
    
         -End,"
 # put your python code here
i = int(input()) 
print('True' if -15 < i <= 12 or 14 < i < 17 or 19 <= i else 'False') -End,"
 # put your python code here
s, t = input(), input()
print(sum([1 for i in range(len(s)) if t in s[i:len(t)+i]])) -End,"
 # put your python code here
s, t = input(), input()
ans = ' '.join([str(i) for i in range(len(s)) if t in s[i:len(t)+i]]) 
print(ans if ans else -1) -End,"
 l = input()
if 65 <= ord(l) <= 122: 
    print(l.upper() if l.islower() else l.lower())
else:
    print(l) -End,"
 ip = input().split('.')
ans = 'YES'
for b in ip:
    if not b.isnumeric() or ( int(b) < 0 or int(b) > 255) :
        ans = 'NO' 
        break
print(ans if len(ip) == 4 else 'NO') -End,"
 login = 100500
password = 424242
#put your python code here
u_login, u_password  = map(int, input().split())
if u_login == login:
    print  ('Login success' if u_password == password else 'Wrong password')
else:
    print('No user with login {} found'.format(u_login)) -End,"
 s, ans, n = input(), '', ''
for i in s:
    if i.isnumeric():
        n += i
    else:
        ans += i * int(n) if len(n) else i
        n = ''
print(ans) -End,"
 s, ans  = input(), []
for i in s:
    if not len(ans) or i != ans[-1][-1]:
        ans.append(i)
    else:
        ans[-1] += i
for i in ans:
    print (str(len(i))+i[0] if len(i) > 1 else ''+i[0], end='') -End,"
 s=input().lower()
print((s.count('c') + s.count('g'))/len(s)*100) -End,"
 s = input()
print(s, 'contig' if s=='1' else 'contigs') -End,"
 # put your python code here
s, ans   = input(), []
for i in s:
    if not len(ans) or i not in ans[-1]:
        ans.append(i)  
    else:
        ans[-1] += i
print(''.join([i[0] + str(len(i)) for i in ans])) -End,"
 print(''.join([i.title() for i in input().split('_')])) -End,"
 s  = input()
print('{:.2f}'.format(s.count('A')/(len(s)//2 +1))) -End,"
 # put your python code here
poem = '''{0} and {1} sat in the tree.
{0} had fallen, {1} was stolen.
What's remaining in the tree?'''
print(poem.format(input(), input())) -End,"
 # put your python code here
name, age = input().split()
print('{0}, You will be 100 years old in {1} year.'.format(name, 100 - int(age) + 2016)) -End,"
 print(sum([int(i) for i  in input().split() if i.isnumeric()])) -End,"
 t = [int(i) for i in input()]
print('Lucky' if sum(t[:3]) == sum(t[3:]) else 'Regular') -End,"
 n, k = map(int, input().split()) 
t, tt = [list(map(int, input().split())) for i in range(k)], set()
for i in t:
    tt.update( set(range(i[0],i[-1] + 1)))
for i in range(n):
    print('.' if i+1 in tt else 'I', end='') -End,"
 def cl(s):
    return {i:s.count(i) for i in set(s)}
print(cl(input().upper()) == cl(input().upper()))
 -End,"
 from math import sqrt
print (((lambda x,y: sqrt((x[1] - y[1])**2 + (x[0] - y[0])**2)) (*[list(map(float, input().split())) for i in range(2)])) ** 2 ) -End,"
 try:
    print(' '.join(reversed(input().split()[1::2])))
except:
    print() -End,"
 print(' '.join(reversed(input().split()[:-1:]))) -End,"
 s = input().split()
print(' '.join([i for i  in set(s) if s.count(i) - 1])) -End,"
 h, m = divmod(int(input()), (60*60))
m, s = divmod(m, 60)
print('{:2d}:{:0>2d}:{:0>2d}'.format(h%24, m, s))
 -End,"
 # put your python code here
print('0.{}'.format(str(float(input())).split('.')[-1])) -End,"
 def flog(x):
    for i in range(x//2):
        if i not in d:
            d[i] = 2**i
        if d[i] > x:
            break
    return i-1

d = {}
print('\n'.join([str(flog(int(input())))  for i in range(int(input()))])) -End,"
 k = 0
while k <= 100 :
    if k >= 10  : print(k) 
    k = int(input()) -End,"
 lst = list(map(int, input().split()))
len_lest = len(lst)
print(*[lst[i-1] + lst[(i+1)%len_lest] for i in range(len_lest)]) if len_lest>1 else print(lst[0]) -End,"
 print(sum([int(i) for i in input().split()])) -End,"
 # put your python code here
op = {'1': 'move up', '2': 'move down', '3': 'move left', '4': 'move right', '0': 'do not move'}
try:
    print(op[input()])
except:
    print('error!')
    -End,"
 try:
    print({'1': 'move up', '2': 'move down', '3': 'move left', '4': 'move right', '0': 'do not move'}[input()])
except:
    print('error!') -End,"
 try:
    print(""You have chosen a {}"".format({1.0:'square' ,2.0:'circle' ,3.0:'triangle' ,4.0:'rhombus' ,}[float(input())]))
except:
    print(""There is no such shape!"") -End,"
 d= sorted([int(input()) for i in range(3)])
print(d[-1],'\n', d[0],'\n', d[1])
 -End,"
 ans = []
while True:
    ans.append(int(input()))
    if not sum(ans):break
print(sum([i**2 for i in ans])) -End,"
 k, ans  = int(input()), ''
for i in range(1, k // 2 + 2):
    ans += str(i * (str(i) + ' '))
print(' '.join(ans.split()[:k])) -End,"
 st, ln = set(input().lower() for i in range(int(input()))), set()
for i in range(int(input())): ln |= set(input().lower().split())
print('\n'.join((ln - st))) -End,"
 lst, n = input().split(), input()
lst = [i[0] for i in enumerate(lst) if i[1]==n]
print(*lst) if len(lst) else print(""Отсутствует"" )

 -End,"
 y = int(input())
print('Високосный' if not y%400 or not y%4 and y%100 else 'Обычный') -End,"
 n = list(map(int, list(input())))
print('Счастливый' if sum(n[:3]) == sum(n[3:]) else 'Обычный') -End,"
 def command(c, res):
    if not c in dct: dct[c] = [0, 0, 0, 0, 0]
    dct[c] = [dct[c][0] + 1, 
                dct[c][1] + 1 if res == 3 else dct[c][1],
                dct[c][2] + 1 if res == 1 else dct[c][2],
                dct[c][3] + 1 if res == 0 else dct[c][3],
                dct[c][4] + res,]  
dct = {}
for i in range(int(input())):
    c1, g1, c2, g2 = input().split(';')    
    command(c1, 3 if g1 > g2 else 1 if g1 == g2 else 0)
    command(c2, 3 if g2 > g1 else 1 if g1 == g2 else 0)
for c in dct:
    print('{}:{} {} {} {} {}'.format(c, *dct[c])) -End,"
 def f(x):
    return (1-(x + 2)**2) if x<=-2 else (((x - 2)**2 + 1) if x > 2 else -x/2) -End,"
 def modify_list(l):
    nl = [int(i//2) for i in l if not i%2]
    l.clear()
    l.extend(nl) -End,"
 print(*divmod(int(input()), 60), sep='\n') -End,"
 n = int(input())
while n <= 100:
    if n >= 10 : print(n)
    n = int(input()) -End,"
 s, n =0, int(input())
while n:
    s, n = s + n, int(input())
print(s) -End,"
 a, b, h = [int(input()) for i in range(3)]
print('Пересып' if h > b else 'Недосып' if h < a else 'Это нормально') -End,"
 lst = [int(i) for i in input().split()]
ll = len(lst)
print(*[lst[i-1] + lst[(i+1)%ll] for i in range(ll)] if ll > 1 else lst) -End,"
 lst = input().split()
print(*[i for i in set(lst) if lst.count(i)>1]) -End,"
 lst = list(input())
ans = [[lst[0]]]
for i in lst[1:]:
    if i == ans[-1][-1]: ans[-1] += i
    else: ans.append([i])
print(*[i[0] + str(len(i)) for i in ans], sep='') -End,"
 lst, ans  = list(input()), []
for i in lst:
    if not len(ans) or i!= ans[-1][-1]: ans.append([i])  
    else: ans[-1] += i
print(*[i[0] + str(len(i)) for i in ans], sep='') -End,"
 ans = [i for i in range(int(input()), int(input()) + 1) if not i % 3]
print(sum(ans)/len(ans)) -End,"
 k = int(input())
print(k in range(-14,13) or k in range(15,17) or k >= 19) -End,"
 a, b, op = float(input()), float(input()), input()
print(({'+': lambda x,y: x+y, 
        '-': lambda x,y: x-y,
        '*': lambda x,y: x*y,
        '/': lambda x,y: x/y if y != 0 else 'Деление на 0!',
        'mod': lambda x,y: x%y if y != 0 else 'Деление на 0!',
        'div': lambda x,y: x//y if y != 0 else 'Деление на 0!',
        'pow': lambda x,y: x**y,
        }[op])(a, b)) -End,"
 def fig(t):
    if t == 'треугольник':
        a, b, c = [int(input()) for i in range(3)]
        s = (a+b+c)/2
        return (s*(s-a)*(s-b)*(s-c))**(1/2)
    elif t == 'круг':
        return 3.14 * int(input())**2
    elif t == 'прямоугольник':
        return  int(input()) * int(input())
    else:
        return ('error')

print(fig(input())) -End,"
 print(*divmod((int(input())+ int(input()) * 60 + int(input())), 60), sep='\n') -End,"
 n = input()
print(n, 'программист'+{'0':'ов','5':'ов','6':'ов','7':'ов','8':'ов','9':'ов', 
                        '1':'' if len(n) == 1 else ('' if n[-2]  in [str(i) for i in range(2, 10)] or n[-2]=='0' else 'ов'),
                        '4':'а' if len(n)==1 or n[-2] != '1' else 'ов',
                        '3':'а' if len(n)==1 or n[-2] != '1' else 'ов',
                        '2':'а' if len(n)==1 or n[-2] != '1' else 'ов',
                        }[n[-1]]) -End,"
 def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    else:
        if 2*key not in d : d[2*key] = []
        update_dictionary(d, 2*key, value) -End,"
 s = [i.lower() for i in input().split()]
print(*['{} {}'.format(i, {i:s.count(i) for i in set(s)}[i]) for i in set(s)], sep='\n') -End,"
 m1, m2 = input(), input()
print((lambda s, m1, m2:''.join([m2[m1.index(i)] for i in s]))(input(), m1,m2))
print((lambda s, m1, m2:''.join([m2[m1.index(i)] for i in s]))(input(), m2,m1)) -End,"
 m1, m2 = input(), input()
print((lambda s, m1, m2:''.join([m2[m1.index(i)] for i in s]))(input(), m1,m2), (lambda s, m1, m2:''.join([m2[m1.index(i)] for i in s]))(input(), m2,m1), sep='\n') -End,"
 m1, m2 = input(), input()
print(''.join([m2[m1.index(i)] for i in input()]), ''.join([m1[m2.index(i)] for i in input()]), sep='\n') -End,"
 def mcd(b, m):
    while b%m: b, m = m, b%m
    return m
a,b = reversed([int(input()), int(input())])
print(a*b//mcd(a,b)) -End,"
 xy = [0, 0]
d={'север': (lambda xy, a: [xy[0], xy[1] + a]),
   'юг':    (lambda xy, a: [xy[0], xy[1] - a]),
   'восток':(lambda xy, a: [xy[0] + a, xy[1]]),
   'запад': (lambda xy, a: [xy[0] - a, xy[1]]),
   }
for i in range(int(input())):
    op, a = input().split()
    xy = d[op](xy, int(a))
print(*xy)     -End,"
 try:
    print(input().split('.')[1][0])
except:
    print('0') -End,"
 data, i = [], input()
while i!='end':
    data.append([int(_) for _ in i.split()])
    i = input()
ax, ay = len(data[0]), len(data)
for y in range(ay):
    for x in range(ax):
        print(data[y][(x+1)%ax] +  data[(y+1)%ay][x] + data[y][(x-1)%ax] + data[(y-1)%ay][x], '', end='')
    print()  -End,"
 print(sum([i for i in range(int(input()), int(input())+1)   ]   )) -End,"
 print(""{2}\n{0}\n{1}"".format(*sorted([int(input()) for i in range(3)]))) -End,"
 # put your python code here
arr, ans, n  = [], 0, int(input())
while n:
    arr.append(n)
    n = int(input())
for k,v in enumerate(arr[1:-1]):
    if arr[k] < v and v > arr[k+2]: ans += 1
print(ans) -End,"
 t = [ n - p for p, n in zip(*[[int(input()) for _ in '...'] for __ in '..'])]
print(t[0] * 60 * 60 + t[1] * 60 + t[2]) -End,"
 i = lambda: int(input())
print(f""{i()*60 + i()}"")




 -End,"
 print(*divmod(int(input()), 60), sep='\n') -End,"
 A = {i:int(input()) for i in 'XHM'}
A['X'] += A['H']*60 + A['M']
print(*divmod(A['X'], 60), sep='\n') -End,"
 D = {_:int(input()) for _ in 'ABH'}
if D['H'] < D['A']: print('Недосып')
elif D['H'] > D['B']: print('Пересып')
else: print('Это нормально') -End,"
 Y = int(input())
print('Високосный' if ((Y % 400 == 0) or ( Y % 4 == 0 and Y % 100 != 0)) else 'Обычный') -End,"
 from functools import reduce
D = {n:int(input()) for n in 'abc'}
def p(a=D['a'], b=D['b'], c=D['c']) -> float: return (a+b+c)/2
print(float(pow(p()*(reduce((lambda x, y: x * y), map(lambda x: p() - D[x], 'abc')) ), 0.5))) -End,"
 I = int(input())
print(True if ((-15 < I <= 12) or (14 < I < 17) or (I >= 19)) else False)




 -End,"
 D = {I:input() for I in 'ABZ'}
E = {'mod':'%','pow':'**','div':'//'}
D['Z'] = E.get(D['Z'], D['Z'])
try:
  print(float(eval(f""({float(D['A'])}) {D['Z']} {float(D['B'])}"")))
except:
  print('Деление на 0!') -End,"
 def a() -> float:
  a = int(input())
  b = int(input())
  c = int(input())
  p = 0.5*(a+b+c)
  return pow(p*(p-a)*(p-b)*(p-c), 0.5)
def b() -> float:
  a = int(input())
  b = int(input())
  return float(a*b)
def c() -> float:
  r = int(input())
  return 3.14*pow(r, 2)
F = {'треугольник': a, 'прямоугольник': b, 'круг':c}
print(F[input()]()) -End,"
 D = [int(input()) for I in 'ABC']
D.sort(key=int)
print(D[2], D[0], D[1], sep='\n') -End,"
 n = int(input())
N = int(str(n)[-2:])
if N in range(11, 15):
  print(n, 'программистов');
elif N in range(0, 11) or N in range(15, 1001):
  pN = N % 10
  if pN == 1:
    print(n, 'программист')
  elif pN in range(2, 5):
    print(n, 'программиста')
  elif pN in range(5, 10) or pN == 0:
    print(n, 'программистов') -End,"
 I = input()
print('Счастливый' if sum(map(lambda x: int(x), list(I[:3]))) == sum(map(lambda x: int(x), list(I[3:]))) else 'Обычный') -End,"
 def f(x):
  if x==0: return 0
  return x + f(int(input()))

print(f(int(input()))) -End,"
 a,b = int(input()), int(input())
for i in range(1, 10000):
    if  (not (i % a)) and (not (i % b)):
        print(i); break -End,"
 i = 0
while i <= 100:
    if i >= 10:
        print(i)
    i = int(input()) -End,"
 I = {I:int(input()) for I in 'abcd'}
D = [[str(i*j) for i in range(I['c'], I['d']+1)] for j in range(I['a'], I['b']+1)]
print('', '\t'.join([str(i) for i in range(I['c'], I['d']+1)]), sep='\t')
for i, x in enumerate(range(I['a'], I['b']+1)):
  print(x, '\t'.join(D[i]), sep='\t') -End,"
 a, b = int(input()), int(input())
print(sum([i for i in range(a, b+1) if not (i % 3)])/len([i for i in range(a, b+1) if not (i % 3)])) -End,"
 print(*map(lambda x: x.lower().replace('c', 'g').count('g')/len(x)*100, [input()])) -End,"
 I = input()
D = [' ']
t = 0
for i in I:
    if not i == D[t][0]:
        D.append(i)
        t +=1
    else:
        D[t] += i
print(''.join([i[0]+str(len(i)) for i in D[1:]])) -End,"
 print(sum([int(i) for i in input().split()])) -End,"
 a = [int(i) for i in input().split()]
if len(a) == 1:
  print(a[0]); exit()
for x, i in enumerate(a):
  print(([a[x-1] + (a[x+1] if x < len(a)-1 else a[0])] or [a[-1]+a[x+1]])[0], end=' ') -End,"
 a = [int(i) for i in input().split()]
d = {}
for i in a:
  if not d.get(i): d.update({i:0})
  d[i] += 1
for i, x in zip(d.keys(), d.values()):
  if x > 1:
    print(i, end=' ') -End,"
 I=[int(input())]
while sum(I):
    I.append(int(input()))
print(sum([i ** 2 for i in I]))     -End,"
 n = int(input())
s = []
i = 1
while not (len(s) == n):
  for _ in range(1, i+1):
    s.append(str(i)) if not (len(s) == n) else ''
  i += 1
print(' '.join(s)) -End,"
 L = [int(i) for i in input().split()]
N = int(input())
if N not in L: print('Отсутствует')
while N in L:
    print(L.index(N), end=' '); L[L.index(N)] = N-1
 -End,"
 M = [[int(i) for i in input().split()]]
I = input()
while I != 'end':
  M.append([int(i) for i in I.split()])
  I = input()
for l_n, line in enumerate(M):
  for s_n, s_z in enumerate(line):
    print((line[s_n+1] if s_n < len(line)-1 else line[0]) + line[s_n-1] + (M[l_n+1][s_n] if l_n < len(M)-1 else M[0][s_n]) + M[l_n-1][s_n], end=' ')
  print() -End,"
 D = (lambda n: [[0 for i in range(n)] for i in range(n)])(int(input()))
def srez(D, x, r, w = 'y'):
    a = [i[x] for i in D] if w=='y' else [i for i in D[x]]
    if r: a.reverse()
    c = max(a)
    for i, xx in enumerate(a):
        if xx == 0:
            c += 1
            a[i] = c
    if r: a.reverse()    
    return a 
for C in [[i, -i-1, -i-1, i] for i in range(0,len(D[0])//2+1)]:
    for i, S in enumerate(C):
        if i % 2:
            l = srez(D, S, i==3, 'y')
            for y in range(len(D[0])):
                D[y][S] = l[y]   
        else: D[S] = srez(D, S, S<0, 'x')
print('\n'.join([' '.join([str(x) for x in i]) for i in D])) -End,"
 def f(x):
    return(1-(x+2)**2 if x<=-2 else (-x/2 if -2<x<=2 else (x-2)**2+1)) -End,"
 def modify_list(l):
    i = 0
    while i < len(l):
        if (l[i] % 2)!=0: del l[i]
        else: l[i] //= 2; i+=1 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if d.get(key): d[key].append(value)
    elif d.get(key*2): d[key*2].append(value)
    else: d[key*2] = [value]

# не добавляйте кода вне функции -End,"
 # put your python code here
d = {}
for i in [i.lower() for i in input().split()]:
    if d.get(i): d[i] += 1
    else: d[i] = 1
print('\n'.join(map(lambda x: f""{x[0]} {x[1]}"", d.items()))) -End,"
 print('\n'.join(map(lambda x: f""{x[0]} {x[1]}"", ((lambda sl: {i:sl.count(i) for i in sl})(input().lower().split())).items()))) -End,"
 i, d = int(input()), {}
for i in range(i):
    c = int(input())
    if c in d: print(d[c])
    else: d[c] = f(c); print(d[c])
 -End,"
 c = {}
def rez(x, y): return [0,3] if x < y else ([1,1] if x == y else [3,0])
def up(K, r):
  if K not in c: c[K] = {'c': 1, r: 1, 's': r}
  else:
    c[K]['c'] += 1
    if r in c[K]: c[K][r] += 1
    else: c[K][r] = 1;
    c[K]['s'] += r

for i in range(int(input())):
    d = input().split(';')
    for i, x in enumerate(rez(d[1], d[3])):
      up(d[i*2], x)
for key in c:
    print(str(key) + ':' + str(c[key]['c']), c[key].get(3, 0), c[key].get(1, 0), c[key].get(0, 0), c[key]['s'])
 -End,"
 i = [input() for i in range(4)]
d = {i[0][x]:i[1][x] for x in range(len(i[0]))}
print(''.join([d.get(x, x) for x in i[2]]))
d = {v: k for k, v in d.items()}
print(''.join([d.get(x, x) for x in i[3]])) -End,"
 d, t = {input().lower() for i in range(int(input()))}, set()
for i in [input().lower().split() for i in range(int(input()))]:
    for x in i: t.update({x})
print('\n'.join([i for i in t if i not in d])) -End,"
 D, C = {'север': [1, 1], 'юг': [1, -1], 'запад': [0, -1], 'восток': [0, 1]}, [[0], [0]]
for i in range(int(input())):
    (lambda n, s: C[D[n][0]].append(D[n][1] * int(s)))(*(input().split()))
print(sum(C[0]), sum(C[1])) -End,"
 print(sum([int(input()) for i in range(int(input()))])) -End,"
 print(len({id(i) for i in objects})) -End,"
 def C(n, k):
    return 1 if k==0 else (0 if k > n else C(n - 1, k) + C(n - 1, k - 1))
print(C(*map(int, input().split())))
 -End,"
 glob = [{'global': '', 'vars': [], 'parent': None}]
def create(namespace, parent):
    glob.append({namespace: '', 'vars': [], 'parent': parent})
def add(namespace, var):
    for i in glob[::-1]:
        if namespace in i:
            i['vars'].append(var)
            break
def get(namespace, var):
    for i in glob[::-1]:
        if namespace in i:
            if var in i['vars']:
                return namespace
            else:
                return get(i['parent'], var)
        elif i['parent'] == None:
            return None
for i in range(int(input())):
    c = input().split()
    if 'get' in c:
        print(globals().get(c[0])(c[1], c[2]))
    else:
        globals().get(c[0])(c[1], c[2])
 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.money = 0
    def can_add(self, v):
        return True if self.capacity - v >= self.money else False
    def add(self, v):
        self.money += v -End,"
 class Buffer:
    def __init__(self):
      self.buf = []
    def add(self, *a):
        for i in a:
          if len(self.buf) != 5:
            self.buf.append(i)
          if len(self.buf) == 5:
            print(sum(self.buf))
            self.__init__()
    def get_current_part(self):
      return self.buf -End,"
 from functools import reduce
class ExtendedStack(list):
    def a_b(self):
      return [self.pop() for i in range(2)]
    
    def sum(self):
        self.append(reduce(lambda a, b: a+b, self.a_b()))

    def sub(self):
        self.append(reduce(lambda a, b: a-b, self.a_b()))

    def mul(self):
        self.append(reduce(lambda a, b: a*b, self.a_b()))

    def div(self):
        self.append(reduce(lambda a, b: a//b, self.a_b())) -End,"
 class LoggableList(list, Loggable):
    def append(self, x):
        super().append(x)
        self.log(x) -End,"
 d = dict()
for i in range(int(input())):
    v = input().replace(':','')
    v = v.strip()
    v = v.split()
    d.update({v[0]: list(v[1:])})
for i in range(int(input())):
    v = input().split()
    if len(v) == 1 and v[0] in d: print('Yes'); continue
    def search(F, S):
        FFF = False
        if not S in d: return False 
        if F in d[S] or F == S:
            return True
        else:
            for pr in d[S]:
                if (len(d[pr])!=0): FFF = search(F, pr) 
                if FFF: break
        return FFF
    if search(*v):
        print('Yes')
    else:
        print('No') -End,"
 try:
    foo()
except ZeroDivisionError:
    print('ZeroDivisionError')
except ArithmeticError:
    print('ArithmeticError')
except AssertionError:
    print('AssertionError') -End,"
 exceptions, trys = dict(), set()
for i in range(int(input())):
    v = input().replace(':', '').strip().split()
    exceptions.update({v[0]: list(v[1:])})
def search(lst, predok):
    for predok in exceptions[predok]:
        lst.append(predok)
        search(lst, predok)
for exc in exceptions:
    ttt = []
    for pr in exceptions[exc]:
        search(ttt, pr)
    exceptions[exc].extend(list(set(ttt)))
for i in range(int(input())):
    v = input()
    trys.add(v)
    for pr in exceptions[v]:
        if pr in trys:
            print(v)
            break -End,"
 class NonPositiveError(Exception):
    pass
class PositiveList(list):
    def append(self, x):
        if not x > 0:
            raise NonPositiveError
        else:
            super().append(x) -End,"
 import datetime
print(*[int(i) for i in str(((lambda x: datetime.date(*x))([int(i) for i in input().split()]))+datetime.timedelta(int(input()))).split('-')])
 -End,"
 class multifilter:
    def judge_half(self):
        return self.pos >= self.neg
    def judge_any(self):
        return self.pos >= 1
    def judge_all(self):
        return self.neg == 0
    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable    # - исходная последовательность
        self.funcs = funcs          # - допускающие функции
        self.judge = judge          # - решающая функция
        self.pos, self.neg = (0, 0)
    def reset(self):
        self.pos, self.neg = (0, 0)
    def __iter__(self):
        for element in self.iterable:
            self.reset()
            for func in self.funcs:
                if func(element): self.pos += 1
                else: self.neg += 1
            if self.judge(self): yield element -End,"
 import math
def primes():
    def prime(n):
        return (math.factorial(n-1)+1) % n == 0  # Теорема Вильсона
    i = 2
    while True:
        if prime(i): yield i
        i+=1 -End,"
 mod_checker = lambda x, mod=0: lambda y: y%x == mod -End,"
 inp = [input() for i in range(3)] + [0]
while inp[-1] < 1000:
    if inp[1] in inp[0]:
        inp[0] = inp[0].replace(inp[1], inp[2])
        inp[-1] += 1
    else:
        break
print(inp[-1] if inp[-1] < 999 else 'Impossible') -End,"
 print((lambda a, b : sum([1 for i in range(len(a)-len(b)+1) if a.startswith(b, i)]))(input(), input())) -End,"
 a = [print(line.rstrip()) for line in __import__(""sys"").stdin if __import__(""re"").search(""(cat.*cat)"", line.rstrip())] -End,"
 a = [print(line.rstrip()) for line in __import__(""sys"").stdin if __import__(""re"").search(r""(\bcat\b)+"", line.rstrip())] -End,"
 print(*[line.strip() for line in __import__(""sys"").stdin if __import__(""re"").search(r""(z.{3}z)"", line.strip())], sep='\n') -End,"
 print(*[line.strip() for line in __import__(""sys"").stdin if __import__(""re"").search(r""\\"", line.strip())], sep='\n') -End,"
 print(*[line.strip() for line in __import__(""sys"").stdin if __import__(""re"").search(r""\b(\w+)\1{1}\b"", line.strip())], sep='\n')
 -End,"
 print(*[__import__(""re"").sub(r""human"", ""computer"", line.strip()) for line in __import__(""sys"").stdin], sep='\n')
 -End,"
 print(*[__import__(""re"").sub(r""\b(a|A)+\b"", ""argh"", line.strip(), 1) for line in __import__(""sys"").stdin], sep='\n')





 -End,"
 print(*[__import__(""re"").sub(r""\b(\w)(\w)"", r""\2\1"", line.strip()) for line in __import__(""sys"").stdin], sep='\n') -End,"
 print(*[__import__(""re"").sub(r""(\w)\1+"", r""\1"", line.strip()) for line in __import__(""sys"").stdin], sep='\n') -End,"
 import re, requests
iurl, surl = input().strip(), input().strip()
def lr(url, g, check=False):
    if g > 2: return False
    r = requests.get(url)
    if r.ok:
        r=r.text
        urls = re.findall(r'=""(.*)""', r)
        if g == 2 and url == surl: return True
        if g < 2 and surl in re.findall(r'=""(.*)""', requests.get(surl).text): return True
        if len(urls)>0:
            for u in urls:
                if u != url:
                    check = lr(u, g + 1)
                    if check: break
    return check
print(""Yes"" if lr(iurl, 0) else ""No"") -End,"
 import re
import requests
urls = set()
for u in re.findall(r'<a.*?href=\s*[""\'][a-z]+://([a-z0-9\-]+\..+?|[a-z0-9]\..+?)[/\'"":]|<a.*?href=\s*[""\']([a-z0-9\-]+\..+?)[/\'"":]', requests.get(input().strip()).text):
    urls.update(u)
print(*[i for i in sorted(list(urls)) if i], sep='\n') -End,"
 import json
inp = json.loads(input().strip())# [{""name"": ""A"", ""parents"": []}, {""name"": ""B"", ""parents"": [""A"", ""C""]}, {""name"": ""C"", ""parents"": [""A""]}]
d, s = {}, {}
for i in inp:
    d[i['name']] = i['parents']
    s[i['name']] = 1
def search(lst, predok):
    for predok in d[predok]:
        lst.append(predok)
        search(lst, predok)
for exc in d:
    ttt = []
    for pr in d[exc]:
        search(ttt, pr)
    d[exc].extend(list(set(ttt)))
for i in d:
    if len(d[i]) >= 1:
        for p in set(d[i]):
            s[p] += 1
for x, y in sorted(s.items(), key=lambda x: x[0]):
    print(x,':',y) -End,"
 from xml.etree.ElementTree import XMLParser
class CubicRGB:
    dat = {'blue': 0, 'red': 0, 'green': 0}
    depth = 0
    def start(self, tag, attrib):
        self.depth += 1
        self.dat[attrib['color']] += self.depth
    def end(self, tag):
        self.depth -= 1
    def data(self, data):
        pass
    def close(self):
        return ' '.join(map(str, [self.dat['red'], self.dat['green'], self.dat['blue']]))
target = CubicRGB()
parser = XMLParser(target=target)
parser.feed(input().strip())
print(parser.close()) -End,"
 def nn(n):
    yield n
    while n != 1:
        n = n // 2 if n % 2 == 0 else n * 3 + 1
        yield n
for i in nn(int(input())):
    print(i) -End,"
 def nn(n, a = 1):
    for i in range(1, n+1):
        if a * (a + 1) / 2 < i: a += 1
        yield a
print(*nn(int(input()))) -End,"
 print(*(lambda x, y: [i for i, n in enumerate(x.split()) if n == y])(input(), input()) or ['None']) -End,"
 print((lambda x, data: f""{float(x[0]) * data[x[1]] / data[x[-1]]:.2e}"")(input().split(), {'mile': 1609, 'yard': 0.9144, 'foot': 0.3048, 'inch': 0.0254, 'km': 1000, 'm': 1.0, 'cm': 0.01, 'mm': 0.001})) -End,"
 from itertools import groupby
print(*[(lambda x: f""{x if x > 1 else ''}{k}"")(len(list(g))) for k, g in groupby(input())], sep='') -End,"
 print((lambda x: f""{len(__import__('re').findall('A', x))/len(x):.2f}"")(input().replace(' ', ''))) -End,"
 print(f""Hello {input('Enter your name: ')}"") -End,"
 from collections import deque
x = deque([' '] + 'a b c d e f g h i j k l m n o p q r s t u v w x y z'.split())
y = x.copy()
y.rotate(-int(input()))
print(f'Result: ""{str.translate(input().strip() , str.maketrans("""".join(x), """".join(y)))}""') -End,"
 ops = {'plus': lambda x, y: x + y, 'minus': lambda x, y: x - y, 'multiply': lambda x, y: x * y, 'divide': lambda x, y: x // y}
print((lambda x, c, y: ops[c](int(x), int(y)))(*input().split())) -End,"
 literalsInv = {'CM':900, 'CD': 400, 'XC': 90, 'XL': 40, 'IX': 9, 'IV': 4,'M':1000, 'D': 500, 'C': 100, 'L': 50, 'X': 10, 'V': 5, 'I': 1}
def roman_to_arabic(roman):
    if len(roman) == 0:
        return 0
    if len(roman) == 1:
        return literalsInv[roman]
    else:
        a, b = roman[:2]
        if a+b in literalsInv:
            return literalsInv[a+b] + roman_to_arabic(roman[2:])
        else:
            return literalsInv[a] + roman_to_arabic(roman[1:])
print(roman_to_arabic(input())) -End,"
 import re
print(re.sub(r'^(\w)|_(\w)', lambda match: match.group(1).upper() if match.group(1) else match.group(2).upper(), input())) -End,"
 literals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}
def arabic_to_roman(arabic):
    roman = ''
    for l in sorted(literals.keys(), reverse=True):
        roman += (arabic//l) * literals[l]
        arabic %= l
    return roman
print(arabic_to_roman(int(input().strip()))) -End,"
 import re
print(re.sub(r'([0-9]+[a-zA-Z])|([a-zA-Z]+)', lambda match: match.group(1)[-1]*int(match.group(1)[0:-1]) if match.group(1) else match.group(2), input())) -End,"
 import collections
print(*[x for x, y in collections.Counter(input().strip().split()).items() if y > 1]) -End,"
 def modify_list(l):
    for i in range(len(l)-1,-1,-1):
        if l[i] % 2 != 0:
            l.pop(i)
        else:
            l[i] //= 2 -End,"
 import collections
print(*[f""{x} {y}"" for x, y in collections.Counter(input().lower().split()).items()], sep='\n') -End,"
 i, d = int(input()), {}
for i in range(i):
    c = int(input())
    if c in d: print(d[c])
    else: d[c] = f(c); print(d[c]) -End,"
 [print(__import__(""re"").sub(r""(\s+)"", '_',line.rstrip())) for line in __import__(""sys"").stdin] -End,"
 print(*(lambda s, c: [i for i in range(0, len(s) - len(c) + 1) if s[i: i + len(c)] == c] or [-1])(input(), input())) -End,"
 [print(f'Processing ""{line.strip()}"" command...') if line != 'End' else print('Good bye!') for line in __import__(""sys"").stdin] -End,"
 s = list(map(int, input().strip().split()))
c = [abs(s[i] - s[i+1]) for i in range(0, len(s)-1, 1)]
print('Jolly' if sum(c) == sum([i for i in range(1, len(s))]) else 'Not jolly') -End,"
 print((lambda X, Y: f'{X} and {Y} sat in the tree.\n{X} had fallen, {Y} was stolen.\nWhat\'s remaining in the tree?')(input(), input())) -End,"
 a1 = ' -- '
a2 = '|  |'
a3 = '    '
a4 = '   |'
a5 = '|   '
d = {'0': [a1, a2, a2, a3, a2, a2, a1],
     '1': [a3, a4, a4, a3, a4, a4, a3],
     '2': [a1, a4, a4, a1, a5, a5, a1],
     '3': [a1, a4, a4, a1, a4, a4, a1],
     '4': [a3, a2, a2, a1, a4, a4, a3],
     '5': [a1, a5, a5, a1, a4, a4, a1],
     '6': [a1, a5, a5, a1, a2, a2, a1],
     '7': [a1, a4, a4, a3, a4, a4, a3],
     '8': [a1, a2, a2, a1, a2, a2, a1],
     '9': [a1, a2, a2, a1, a4, a4, a1]}
s = input().strip()
print(f""""""x{'-'*(len(s)*4+len(s)-1)}x"""""")
for y in range(7):
    print('|', end='')
    for x, i in enumerate(s):
        print(d[i][y], end='|' if x == len(s)-1 else ' ')
    print()
print(f""""""x{'-'*(len(s)*4+len(s)-1)}x"""""", end='') -End,"
 Y, X = map(int, input().split())
M = [' '.join([i for i in input().strip()]).split() for i in range(int(Y))]
D = [[] for i in range(Y)]
M = [M[-1]] + M[:] + [M[0]]
M = [[line[-1]] + line[:] + [line[0]] for line in M]
for y in range(1, len(M)-1):
    for x in range(1, len(M[y])-1):
        cont = 0
        for i in [-1, 0, 1]:
            for j in [-1, 0, 1]:
                dx = x + i
                dy = y + j
                if M[dy][dx] == 'X':
                    if j == 0 and i == 0:
                        continue
                    cont += 1
        D[y-1].append('X' if cont == 2 and M[y][x] == 'X' else ('.' if cont != 3 else 'X'))
for y in D:
    print(''.join(y)) -End,"
 A, B, D = input().split(), input(), ['6','7','8','9','10','J','Q','K','A']
if A[0][-1] == A[1][-1]:
    print('First' if D.index(A[0][:-1]) > D.index(A[1][:-1]) else 'Second')
elif A[0][-1] == B or A[1][-1] == B:
    print('First' if A[0][-1] == B else 'Second')
else:
    print('Error') -End,"
 def f(x):
    return 1 - (x + 2) ** 2 if x <= -2 else (-(x / 2) if x <= 2 else (x - 2) ** 2 + 1) -End,"
 Y, X = map(int, input().split())
M = [' '.join([i for i in input().strip()]).split() for i in range(int(Y))]
M = [['.'] + line[:] + ['.'] for line in [['.']*X] + M[:] + [['.']*X]]
for y in range(1, Y+1):
    D = []
    for x in range(1, X+1):
        cont = 0
        for i in [-1, 0, 1]:
            for j in [-1, 0, 1]:
                dx, dy = x + i, y + j
                if (M[dy][dx] == '*') and ((j, i) != (0, 0)):
                    cont += 1
        D.append('*' if M[y][x] == '*' else str(cont))
    print(''.join(D)) -End,"
 print((lambda I: True if (I == -10) or ((-5 < I <= 3) or (8 < I < 12) or (I >= 16)) else False)(int(input()))) -End,"
 for i in zip(*[input().split() for i in range(int(input().split()[0]))]):
    print(*i) -End,"
 def dvide(a, b):
    while a % b:
        yield a // b
        a, b = b, a % b
    yield a // b
print(*list(dvide(*[int(i) for i in input().split('/')]))) -End,"
 (lambda x, y: [print('FizzBuzz' if i%3==0 and i%5==0 else 'Buzz' if i%5==0 else 'Fizz' if i%3==0 else i) for i in range(x, y+1)])(*[int(i) for i in input().split()]) -End,"
 def get_int(start_message, error_message, end_message):
    print(start_message)
    while True:
        i = input()
        if i.lstrip(""-"").isdecimal(): break
        print(error_message)
    print(end_message)
    return int(i) -End,"
 a,b,c=map(int, open(0))
print(((a+b+c)*(b+c-a)*(a+c-b)*(a+b-c))**0.5/4)




 -End,"
 a=int(input())
print(a, 'программист'+('ов' if 10<a%100<15 else '' if a%10==1 else 'а' if 1<a%10<5 else 'ов'))




 -End,"
 s=int(input())
print('Обычный' if (s//100000)+(s//10000)%10+(s//1000)%10-(s//100)%10-(s//10)%10-s%10 else 'Счастливый') -End,"
 i,s=1,0
while i:
    i=int(input())
    s+=i
print(s) -End,"
 print(1.5*((int(input())+2)//3+int(input())//3)) -End,"
 s,k=0,0
while True:
    n=int(input())
    s+=n
    k+=n**2
    if not s:
        break
print(k)




 -End,"
 def update_dictionary(d, key, value): d.setdefault(key+key*(key not in d),[]).append(value) -End,"
 d={}
for s in (input().lower()).split():
    d[s]=d.setdefault(s,0)+1
for key, value in d.items():
        print(key, value) -End,"
 import sys
print(*sys.argv[1:]) -End,"
 d={}
for i in range(int(input())):
    name1,rez1,name2,rez2=input().split(';')
    rez1,rez2=int(rez1),int(rez2)
    for i in name1,name2:
        if i in d: d[i][0]+=1
        else: d[i]=[1,0,0,0,0]        
    d[name1][1]+=(rez1>rez2)
    d[name1][2]+=(rez1==rez2)
    d[name1][3]+=(rez1<rez2)
    d[name1][4]+=(rez1>rez2)*3+(rez1==rez2)
    d[name2][1]+=(rez1<rez2)
    d[name2][2]+=(rez1==rez2)
    d[name2][3]+=(rez1>rez2)
    d[name2][4]+=(rez1<rez2)*3+(rez1==rez2)    
for name1, s in d.items(): print(name1+':', *s) -End,"
 x,y=0,0
for i in range(int(input())):
    s=input().split()
    x+=int(s[1])*((s[0]=='восток')-(s[0]=='запад'))
    y+=int(s[1])*((s[0]=='север')-(s[0]=='юг'))
print(x,y)



 -End,"
 d={'global':['None']}
def create(a1,a2):
    d[a1]=[]
    d[a1].append(a2)
def add(a1,a2):
    d[a1].append(a2)
def get(a1,a2):
    while not(a1 is 'None') and not(a2 in d[a1]): a1=d[a1][0]
    print(a1)
for i in range(int(input())):
    s=input().split()
    eval(s[0])(s[1],s[2]) -End,"
 class MoneyBox:
    def __init__(self,capacity): self.capacity,self.money=capacity,0
    def can_add(self,v): return self.capacity>=(self.money+v)
    def add(self,v): self.money+=v -End,"
 class LoggableList(list,Loggable):
    def append(self,a):
        self+=[a]
        self.log(a) -End,"
 d,e={},[]
def isP(s): return (s in e) or any(map(lambda e1: isP(e1),d[s]))
for j in range(2):
    for s in [input() for i in range(int(input()))]:
        if j:
            if isP(s):
                print(s)
            else:
                e+=[s]
        else:
            s=s.split()
            d[s[0]]=s[2:]  -End,"
 def primes():
    yield 2
    x,f=3,2
    while True:
        if not (f+1)%x: yield x
        f,x=f*x*(x+1),x+2 -End,"
 s, t, n = input(), input(), 0
for i in range(len(s)): n+=(s[i:i+len(t)]==t)
print(n) -End,"
 import requests, re
s = input()
print([""No"",""Yes""][input() in (m for n in re.findall(r'href\s*=\s*""(.*)""', requests.get(s).text)
                      for m in re.findall(r'href\s*=\s*""(.*)""', requests.get(n).text))])
 -End,"
 import requests, re
print(*sorted(set(re.findall(r'''(?:<a.*?href=['|""])[\w]*?://([\w-]+(?:\.[\w-]+)*)''',
                                  requests.get(input()).text))), sep='\n') -End,"
 def f(x):
    return (1-(x+2)**2)*(x<= -2)+(-x/2)*(-2<x<=2)+((x-2)**2+1)*(2<x) -End,"
 d = {}
for i in input().lower().split(): d[i] = d.setdefault(i, 0)+1
for i in d: print(i, d[i]) -End,"
 s = input().split()
print(*[i for i in set(s) if s.count(i)-1]) -End,"
 d, s = {'mile':1609, 'yard':0.9144, 'foot':0.3048, 'inch':0.0254, 'km':1000, 'm':1, 'cm':0.01, 'mm':0.001}, input().split()
print(f'{float(s[0])*d[s[1]]/d[s[3]]:.2e}')
 -End,"
 s, j, n = input(), True, 1
for i in s:
    if i.isdigit(): n = n * 10 * (not j) + int(i)
    else: print(i * n, end=''); n = 1
    j = i.isalpha()
     -End,"
 s = list(map(len, input().split()))
for i in sorted(set(s)): print(i, ':', s.count(i))
 -End,"
 s1, s2, r =input(),input(),''
for i in range(0,len(s1)-len(s2)+1): r+=(str(i)+' ')*(s1[i:i+len(s2)]==s2) 
print(['-1', r][bool(r)])
 -End,"
 print(sorted(input().lower())==sorted(input().lower()))
 -End,"
 d, n, j = {'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}, 0, 'M' 
for i in input(): n, j = n+d[i]-d[j]*2*(d[i]>d[j]), i
print(n)
 -End,"
 n=int(input())
print(n)
while n>1:
    n=(n*3+1)*(n%2)+(n//2)*((n+1)%2)
    print(n)
     -End,"
 import operator
print((lambda a: {'plus':operator.add,'minus':operator.sub,'multiply':operator.mul,'divide':operator.floordiv}[a[1]](int(a[0]), int(a[2])))(input().split()))
 -End,"
 s=input().split()
print({""plus"":int(s[0])+int(s[2]),
       ""minus"":int(s[0])-int(s[2]),
       ""multiply"":int(s[0])*int(s[2]),
       ""divide"":int(s[0])//int(s[2])}[s[1]]) -End,"
 x, y = map(int, input().split())
m = [list(input()) for i in range(x)]
for i in range(x):
    for j in range(y):
        n = 0
        for di in [-1,0,1]:
            for dj in [-1,0,1]:
                n += m[(i+di)%x][(j+dj)%y]=='X'
        print(['.','X'][((m[i][j]=='.') and (n==3)) or ((m[i][j]=='X') and (5>n>2))], end='')
    print('', end='\n')
     -End,"
 S=((a+b+c)*(-a+b+c)*(a-b+c)*(a+b-c))**0.5/4




 -End,"
 index=[i for i in range(len(L)-1)if (L[i]-L[i+1]) in {-1,1}][0]




 -End,"
 from sys import stdin
(lambda d:print(f'{d[0]*d[3]//(d[1]+d[2])}'))([int(i) for i in stdin])
 -End,"
 n1, n2, n3 = map(int, input().split())
n4, n5, n6 = map(int, input().split())
print(f""{n1 + n2 + n3}#{n4 + n5 + n6}"")

 -End,"
 print(*[sum(map(int, input().split())) for _ in (1,2)], sep=""#"")
 -End,"
 print(*set((input()).split('&'))) -End,"
 (lambda s: print(s[1],s[2],s[-2]))((input()).split())
 -End,"
 print(*((input()).split()[::-1]), sep='-$-')
 -End,"
 (lambda s: print(len(s), s.count('one')))((input()).split())
 -End,"
 (lambda s: print(f'{int(input())/s:.1f}' if s else 'Division by zero!'))(int(input()))
 -End,"
 print({'int': lambda: (int(input()) + int(input())) or 'Empty Ints',
       'str': lambda: input() or 'Empty String',
       'list': lambda: (lambda n: n and n.split()[-1])(input()) or 'Empty List'}.setdefault(input(), (lambda: 'Unknown type'))())

 -End,"
 print(*filter(lambda i: i[0]!='*', (input()).split()), sep='\n') -End,"
 dfactorial = lambda n: (n<2)+0 or dfactorial(n-2)*n

 -End,"
 Kfactorial = lambda n, k=1: (n<1)+0 or Kfactorial(n-k, k)*n
 -End,"
 translate = lambda n, k=2: translate(n//k,k)+str(n%k) if n//k else str(n)
 -End,"
 factorial, sf = lambda n: (n<2)+0 or factorial(n-1)*n, lambda n: (n<2)+0 or sf(n-1)*factorial(n)
 -End,"
 maxId = lambda L: L.index(max(L, key=int))
 -End,"
 def kaprekar_step(L):
    L.sort()
    return (L[3]-L[0])*999+(L[2]-L[1])*90



 -End,"
 def kaprekar_step(L):
    L.sort()
    return (L[3]-L[0])*999+(L[2]-L[1])*90

def kaprekar_loop(n):
    while n!=6174:
        print(n)
        n=kaprekar_step([n//1000,(n//100)%10,(n//10)%10,n%10])
    print(6174) -End,"
 def kaprekar_loop(n):
    print('Ошибка! На вход подано число 1000'*(n==1000)+
          f'Ошибка! На вход подано число {n} - все цифры одинаковые'*(n%1111==0))
    if (n-1000)*(n%1111):
        while n!= 6174:
            print(n)
            L=sorted([n//1000,(n//100)%10,(n//10)%10,n%10])
            n=(L[3]-L[0])*999+(L[2]-L[1])*90
        print(6174) -End,"
 def numerics(n):
    return [(n//100000)%10,(n//10000)%10]*(n//10000!=0)+[(n//1000)%10]*(n//1000!=0)+[(n//100)%10,(n//10)%10,n%10]




 -End,"
 even_indeces = lambda s: s[::2]


 -End,"
 front_x = lambda s: sorted([i for i in s if i!='' and i[0]=='x'])+sorted([i for i in s if i=='' or i[0]!='x'])
 -End,"
 fib = lambda n: int(((0.5+1.25**0.5)**n-(0.5-1.25**0.5)**n)/5**0.5)
 -End,"
 n = int(input())  
print((f'Всего пончиков: {n}','Всего пончиков: много')[n>9]) -End,"
 print((lambda s: f'{"""" if len(s)<2 else s[:2]+s[-2:]}')(input())) -End,"
 print(f'{(lambda s: s[0]+s[1:].replace(s[0],""*""))(input())}') -End,"
 n,m=map(int, (input()).split())
print(['Замостить можно','Замостить нельзя'][((n*m)%2 or (n+m+1)%2 or (n==2 and m==2))])
 -End,"
 s=int(input())
print(str(s%9)+'9'*(s//9))




 -End,"
 from  scipy.optimize import golden
f = lambda x: (x+a)**2-b
g = lambda x: abs((x+a)**2-b)
print(golden(f), golden(g)) -End,"
 from  scipy.optimize import golden
print(golden(lambda x: (x+a)**2-b), golden(lambda x: abs((x+a)**2-b))) -End,"
 from  scipy.optimize import golden
print(golden((lambda x: (x+a)**2-b), brack=(-10,-4), full_output=True)[1],
      golden((lambda x: abs((x+a)**2-b)), brack=(-10,-4), full_output=True)[1]) -End,"
 def main(): print((0,1,1,2,3,5,8,3,1,4,5,9,4,3,7,0,7,7,4,1,5,6,1,7,8,5,3,8,1,9,
            0,9,9,8,7,5,2,7,9,6,5,1,6,7,3,0,3,3,6,9,5,4,9,3,2,5,7,2,9,1)[int(input())%60])
if __name__ == ""__main__"": main() -End,"
 if __name__ == ""__main__"": print((0,1,1,2,3,5,8,3,1,4,5,9,4,3,7,0,7,7,4,1,5,6,1,7,8,5,3,8,1,9,
                                  0,9,9,8,7,5,2,7,9,6,5,1,6,7,3,0,3,3,6,9,5,4,9,3,2,5,7,2,9,1)[int(input())%60]) -End,"
 a,b=map(int,(input()).split())
while b: a,b=b,a%b
print(a) -End,"
 n,v=map(int,(input()).split())
c,s=0,sorted([tuple(map(int,(input()).split())) for _ in range(n)], key=lambda i: -i[0]/i[1])
for i in s: v,c=[(0,c+i[0]*v/i[1]),(v-i[1],c+i[0])][i[1]<=v]
print(c) -End,"
 n=int(input())
k=int(0.5+(0.5+n*2)**0.5)
m=[i for i in range(1,k+1) if (k**2+k)/2-n!=i]
print(len(m),'\n',*m) -End,"
 print((input()).lower())




 -End,"
 from re import split
print(split('[^a-z]', (input()).lower()))
 -End,"
 front_x = lambda s: sorted(s, key=lambda i: (i[:1] != 'x', i)) -End,"
 L=list(map(int,(input()).split()))
print(1-sum(L[j]>L[i] for i in range(len(L)) for j in range(i))%2*2)
 -End,"
 chet = lambda L: sum(L[j]>L[i] for i in range(len(L)) for j in range(i))%2
n,m = map(int,(input()).split())
M1,M2 = [],[]
[M1.extend(list(map(int,(input()).split()))) for i in range(n)]
[M2.extend(i*m+j for j in range(m)[::1-i%2*2]) for i in range(n)]
print(('Не повезло...','Бинго!')[chet(M1)==chet(M2[:-1])])
 -End,"
 a=tuple(map(int,(input()).split()))
k=tuple(map(int,(input()).split()))
d={a[i+1]: i+1 for i in range(a[0])}
print(*[d.setdefault(k[i+1],-1) for i in range(k[0])]) -End,"
 def Merge_Sort(m):
    return m if len(m)==1 else Merge(Merge_Sort(m[:len(m)//2]), Merge_Sort(m[len(m)//2:]))
def Merge(m1,m2):
    m=[]
    global r
    while m1 and m2:
        if m1[0]>m2[0]:
            m.append(m2.pop(0))
            r+=len(m1)
        else:
            m.append(m1.pop(0))
    m.extend(m1 or m2)
    return m

r,_ = 0,input()
Merge_Sort(list(map(int,(input()).split())))
print(r) -End,"
 _,s=input(),[0,0]
for i in map(int,(input()).split()): s=[s[1],max(s)+i]
print(s[1]) -End,"
 import sys
n=int(sys.stdin.readline())
d, a = [0]*n, list(map(int,sys.stdin.readline().split()))
for i in range(n): d[i]=1+max(d[j] for j in range(i+1) if not a[i]%a[j])
print(max(d)) -End,"
 s, s1 = [], [8]*30
def find_oper(n):
    global s,s1
    s.append(n)
    if len(s)<len(s1):                  #  проверяем возможность уменьшить минимальную последовательность
        if n==1:
            s1=s[:]                     #  сохраняем найденую минимальную последовательность 
        else:
            if not n%3: find_oper(n//3) #  проверяем возможность попасть в заданную точку од-
            if not n%2: find_oper(n//2) #  -ним из трех путей. При этом утроение получает при-
            find_oper(n-1)              #  -оритет так как даёт самую короткую последовательность
    s.pop()
    return
find_oper(int(input()))                 #  ищем варианты ""с конца""
print(len(s1)-1)
print(*reversed(s1))
 -End,"
 s1,s2=input(),input()
n,m=len(s1),len(s2)
d=[[0 for j in range(m+1)] for i in range(n+1)]
for j in range(m+1): d[0][j]=j
for i in range(1,n+1):
    d[i][0]=i
    for j in range(1,m+1):
        d[i][j]=1+min(d[i-1][j],d[i][j-1],d[i-1][j-1]-(s1[i-1]==s2[j-1]))
print(d[-1][-1]) -End,"
 W,n=map(int,(input()).split())
w=list(map(int,(input()).split()))
a,b=[0]*(W+1),[0]*(W+1)
for i in w:
    for j in range(1,W+1):
        b[j]=a[j] if i>j else max(a[j],a[j-i]+i)
    a,b=b,a
print(a[-1]) -End,"
 from urllib.request import urlopen
import numpy as np
print(np.loadtxt(urlopen(input()), skiprows=1, delimiter=',').mean(axis=0)) -End,"
 from urllib.request import urlopen
import numpy as np
d = np.loadtxt(urlopen(input()), skiprows=1, delimiter=',')
Y, d[:, 0] = d[:, 0].copy(), 1
print(*np.linalg.inv(d.T @ d) @ d.T @ Y)
 -End,"
 def luka(L0, L1, n):
    while n: L0, L1, n = L1, L0 + L1, n-1
    return L0
 -End,"
 def fi(L0, L1, n):
    while n-1:
        L0, L1, n = L1, L0 + L1, n-1
    return Decimal(f'{L1}') / Decimal(f'{L0}')
 -End,"
 def super_L(n):
    for i in (6, 5, 4, 3, 2, 1):
        if not n % i:
            n, n1, L, L1 = n // i, n // i, 2, 1
            while n1:
                L, L1, n1 = L1, L + L1, n1 - 1
            return {1: L,
                    2: L**2-2*(-1)**n,
                    3: L**3-3*(-1)**n*L,
                    4: L**4-4*(-1)**n*L**2+2,
                    5: L**5-5*(-1)**n*L**3+5*L,
                    6: L**6-6*(-1)**n*L**4+9*L**2-2*(-1)**n}[i]
 -End,"
 def kaprekar(n):
    n2=str(n**2)
    return any((int(n2[i:]) and int(n2[:i])+int(n2[i:])==n) for i in range(1,len(n2))) -End,"
 d,s,r={'(':')','{':'}','[':']'},[],'Success'
for i,k in enumerate(input()):
    if k in ['(','{','[']: s.append((i,k))
    if k in [')','}',']']:
        s.pop() if s!=[] and s[-1][1] in ['(','{','['] and k==d[s[-1][1]] else s.append((i,k))
for i in s:
    if r=='Success' and i[1] in [')','}',']']: r=i[0]+1
for i in s:
    if r=='Success' and i[1] in ['(','{','[']: r=i[0]+1
print(r) -End,"
 n,s=int(input()),list(map(int, (input()).split()))
d=[-1]*n
def up(v):
    d[v]=1 if s[v]==-1 else (up(s[v])+1 if d[v]==-1 else d[v])
    return d[v]
for i in range(n): up(i)
print(max(d)) -End,"
 n,m,p,i = int(input()),0,[[int(i),1] for i in (input()).split()],0
while i<n:
    j,d=i,1
    while p[j][0]!=-1 and d==1:
        j=p[j][0]
        d=p[j][1]
        p[i][1]+=d
    m,i=max(m,p[i][1]),i+1
print(m) -End,"
 sum2 = lambda a, b: (['all arguments are not a numbers', '1st argument is not a number'], ['2nd argument is not a number', 0])[type(a) in {int, float}][type(b) in {int, float}] or (a + b)
 -End,"
 print({'int': lambda: (int(input()) + int(input())) or 'Empty Ints',
       'str': lambda: (input()) or 'Empty String',
       'list': lambda: (input().rpartition(' ')[2]) or 'Empty List'}.
      setdefault((input()), (lambda: 'Unknown type'))())
 -End,"
 import numpy as np
Z = np.zeros(int(input()))




 -End,"
 a,b = map(int,(input()).split())
print(('Такой класс не существует',f'{(a+b)//2} {(a-b)//2}')[b<=a and (a+b+1)%2])
 -End,"
 print((lambda s: (s[:2]+s[-2:],"""")[len(s)<2])(input())) -End,"
 print((lambda n: (f'Всего пончиков: {n}','Всего пончиков: много')[n>9])(int(input()))) -End,"
 print((lambda s: str(s%9)+'9'*(s//9))(int(input()))) -End,"
 def f(n):
    s0,s1 = 1,1
    for i in range(1,n):
        s0,s1 = s1,s0+s1
    return s1
print(f(int(input())))

 -End,"
 n = int(input())
def universal(n,f):
    s0,s1,s2='','0123456789abcdef',{2:'0b',8:'0o',16:'0x'}
    while n//f: s0,n=s1[n%f]+s0,n//f
    return(s2[f]+s1[n]+s0)
def bin(n):
    return(universal(n,2))
def oct(n):
    return(universal(n,8))
def hex(n):
    return(universal(n,16))
print(bin(n))
print(oct(n))
print(hex(n))




 -End,"
 s,r,n=input(),0,0
while s: r,n,s=r+2**n*(s[-1]=='1'),n+1,s[0:-1]
print(r)
    




 -End,"
 # codding: utf8
n = int(input ())
b=""программист""
e = ""!""

#for n in range (1001) :

if (n==0) : e=""ов"" ; e1=""  0""  
elif (n==1) : e="""" ; e1=""  1""  
elif (1<n<5) : e=""а"" ; e1=""..2-4""  
elif (4<n<21) : e=""ов"" ; e1=""..5-20""  
elif (110<n<121)or (210<n<221)or (310<n<321)or (410<n<421)or (510<n<521)or (610<n<621)or (710<n<721)or (810<n<821) or (910<n<921): e=""ов"" ; e1=""..111..120""  
elif (n%10==1) : e="""" ; e1=""..1""     
elif (n%10==0) : e=""ов"" ; e1=""..0""
elif (n%10==9) : e=""ов"" ; e1=""..9"" 
elif (n%10==8) : e=""ов"" ; e1=""..8"" 
elif (n%10==7) : e=""ов"" ; e1=""..7"" 
elif (n%10==6) : e=""ов"" ; e1=""..6"" 
elif (n%10==5) : e=""ов"" ; e1=""..5"" 
elif (n%10==4) : e=""а"" ; e1=""..4""
elif (n%10==3) : e=""а"" ; e1=""..3"" 
elif (n%10==2) : e=""а"" ; e1=""..2"" 
#print (str(n)+"" ""+b+e+e1)
print (str(n)+"" ""+b+e)
    
 -End,"
 # put your python code here

#codding : utf8

sum = 0
s=1

while s != 0:
    s = int(input())
    sum +=s 
print (sum)




 -End,"
 n1 = int(input())
n2 = int(input())
n = 1
while((n % n1 != 0)or(n % n2 != 0)):
    n += 1
print(n)
 -End,"
 while 1 == 1:
    n = int(input())
    if n < 10:
        continue
    if n > 100:
        break
    print(n)
 -End,"
 a, b, c, d = int(input()), int(input()), int(input()), int(input())
print('\t', end='')
for i in range(c, d + 1):
    if i == d:
        print(i, end='\n')
    else:
        print(i, end='\t')
for j in range(a, b + 1):
    print(j, end='\t')
    for z in range(c, d + 1):
        if z == d:
            print(z * j, end='\n')
        else:
            print(z * j, end='\t')
 -End,"
 a, b = int(input()), int(input())
m = 0
c = 0
for i in range(a, b + 1):
    if i % 3 == 0:
        m += 1
        c += i
print(c / m * 1.0)
 -End,"
 s = input()
s = s.upper()
print((s.count('G') + s.count('C')) / (len(s)) * 100.0)
 -End,"
 s = input()
met = 0
n = 1
code = ''
while met < len(s):
    if met + 1 < len(s):
        if s[met] == s[met + 1]:
            n += 1
        else:
            code = code + s[met] + str(n)
            n = 1
        met += 1
    else:
        code = code + s[met] + str(n)
        n = 1
        met += 1
print(code)
 -End,"
 s = input().split()
# print(s)
sum = 0
for c in s:
	# print(c)
    sum += int(c)
print(sum) -End,"
 s = input().split()
#print(s)
i = 0
sum = -1
for c in s:
	if len(s) == 1:
		print(s[i])
	else:
		if i == 0:
			#print(s[1]+s[len(s)-1]+""i(start)=""+str(i)) 
			sum = int(s[1])+int(s[len(s)-1])
			print(sum)
			sum = -1
		elif i == len(s)-1:
			#print(s[0]+s[i-1]+""i(stop)=""+str(i))
			sum = int(s[0])+int(s[i-1])
			print(sum)
			sum = -1
		else: 
			#print(s[i-1]+s[i+1]+""i=""+str(i))
			sum = int(s[i-1])+int(s[i+1])
			print(sum)
			sum = -1
	i += 1
 -End,"
 s = input().split()
u = []
ic = 0
ic1 = 0
for c in s:
    for c1 in s:
        if (c1 == c and ic != ic1):
            flag1 = False
            for au in u:
                if au == c1:
                    flag1 = True
                    break
            if not flag1:
                u.append(c1)
            else:
                flag1 = False
            break
        ic1 += 1
    ic1 = 0
    ic += 1
for e in u:
    print(e, end=' ')
 -End,"
 iSum = 0
iQ = 0
while True:
	iC = int(input())
	iSum += iC
	iQ = iQ + iC*iC
	if iSum == 0:
		break
print(iQ)
 -End,"
 n = int(input())
i = 1 
ic = 1
s = """"
met = 0
while i <= n:
	while ic <= i:
		if met == n  : break
		s = s + str(i) + "" ""
		ic += 1
		met += 1
	i += 1
	ic = 1
print (s)
 -End,"
 intS = [int(i) for i in input().split()]
intS1 = []
intF = int(input())
m = 0 
fS = """"
while m <= len(intS):
	intS1 = intS[m:len(intS)+1]
	if intF in intS1: 
		c1 = intS1.index(intF)
		if c1 == 0:
			fS = fS + str(m) + "" ""		
	m += 1
if fS == """":
	print(""Отсутствует"")
else:
	print (fS)
 -End,"
 # тестовые значения
#m = [[9, 5, 3],[0, 7, -1], [-5, 2, 9]]
#f = [[-1,-1,-1],[-1,-1,-1],[-1,-1,-1]]

#m = [[1]]
#f = [[-1]]

# заполнение двумерного массива
m = []
f = []

ii = 0
while True:
	s = [str (i) for i in input().split()]
	###print(""->"" + str(s[len(s)-1]))
	if s[len(s)-1] == ""end"":
		break
	else:
		m.append([])
		f.append([])
		for j in range(0, len(s)):
			m[ii].append(s[j])
			f[ii].append(-1)
	ii += 1	
	
row = ii-1	
col = j
###print(row, ""\t"", col)

'''
# вывод двумерного массива
print (""---------------------"")
for i in range (len (m) ):
	for j in range (len (m[i]) ):
		print (m[i][j], end =""\t"")
	print ()
# вывод двумерного массива
print (""---------------------"")
for i in range (len (m) ):
	for j in range (len (m[i]) ):
		print (f[i][j], end =""\t"")
	print ()	
row = i
col= j
print (""---------------------"")	
print(row, ""\t"", col)

'''
# обработка двумерного массива по заданию
i1=-1
j1=-1
for i in range (len (m) ):
	for j in range (len (m[i]) ):
		i1 = i
		j1 = j
		
		if i == 0: 
			m1 = m[row][j1]
		else:
			m1 = m[i1-1][j1]  # 1е слагаемое 
		###print (""m1="" + str(m1))
		
		if i == row:
			m2 = m[0][j1]
		else:
			m2 = m[i1+1][j1]  # 2е слагаемое
		###print (""m2="" + str(m2))
		
		if j == 0:
			m3 = m[i1][col]
		else:
			m3 = m[i1][j1-1]  # 3е слагаемое
		###print (""m3="" + str(m3))
		
		if j == col:
			m4 = m[i1][0]
		else:
			m4 = m[i1][j1+1]  # 4е слагаемое
		###print (""m4="" + str(m4))
			
		f[i][j] = int(m1) + int(m2) + int(m3) + int(m4)
		###print (str(m1) + ""|"" + str(m2) + ""|"" + str(m3) + ""|"" + str(m4))
	###print()

# вывод двумерного массива
###print (""---------------------"")
for i in range (len (m) ):
	for j in range (len (m[i]) ):
		print (f[i][j], end =""\t"")
	print ()
###print (""---------------------"")	
 -End,"
 # Ввод размерности матрицы
n = int(input())
# Создание и заполнение матрицы нулями
m = [[i*0 for i in range(n)] for i in range(n)]
# Обработка матрицы
a = n*n
i = 0
j = -1
r = n
s = 0
while s < a:
	#r 
	k = 1
	while k <= r:
		j += 1
		s += 1
		m[i][j] = s
		k += 1
	d = r - 1
	#d
	k = 1
	while k <= d:
		i += 1
		s += 1
		m[i][j] = s
		k += 1
	l = d 
	#l
	k = 1
	while k <= l:
		j -= 1
		s += 1
		m[i][j] = s
		k += 1
	u = l - 1
	#u
	k = 1
	while k <= u:
		i -= 1
		s += 1
		m[i][j] = s
		k += 1
	r = u
# Вывод матрицы
for i in range (len(m)):
	for j in range (len(m[i])):
		print(m[i][j], end =""\t"")
	print()
 -End,"
 def f(x):
	if x <= -2:
		return(1 - (x + 2)**2)
	elif x > 2:
		return((x-2)**2+1)
	else:
		return(-1.0*x/2) # :)  -End,"
 def modify_list(l):
	i = 0 
	while i < len(l):
		if l[i] % 2 == 0: # число четное 
			l[i] //= 2
			i += 1
		else: # число нечетное
			l.pop(i)
	return(l) -End,"
 print(sum(map(int, input().split()))) #готовый код -End,"
 print('Hello, Stepik & Coursera!')



 -End,"
 print('Hello, World!') # :) 



 -End,"
 print('Hello, BeeGeek!') # :) 




 -End,"
 def update_dictionary(d, key, value): 
	if key in d:
		d.setdefault(key, []).append(value)
	elif (2*key in d):
		d.setdefault(2*key, []).append(value)
	else:
		d.setdefault(2*key, []).append(value)
 -End,"
 import collections
c = collections.Counter()
s = input().lower().split(' ')
for word in s:
	c[word] += 1 
d = dict(c)
for key in sorted(d.keys()):
	print(str(key) + ' ' + str(d[key]))
 -End,"
 def ff(x):
	r = ''
	#print('----------------------------------------')
	#print(d)
	#print('----------------------------------------')	
	for key in sorted(d.keys()):
		if str(key) == str(x):
			r = str(d[key])
			#rr = str(r) + ""++""
			break
	if r == '':
		d[x] = f(x)
		r = d[x]
		#rr = str(r) + ""+""
	#return(rr)
	return(r)

d = {}

x = int(input())
for i in range (1,x+1):
	y = int(input())
	print(ff(y))
 -End,"
 def main():
    a, b = map(int, input().split())
    res = a + b
    print(res)


if __name__ == ""__main__"":
    main() -End,"
 def fib(n):
	m = []
	m.append([])
	m[0] = 0
	m.append([])
	m[1] = 1	
	i = 2
	f = 0
	while i <= n:
		f = m[i - 1] + m[i - 2]
		m.append([])
		m[i] = f
		i += 1
	if n == 1:
		f = 1
	return(f)
def main():
    n = int(input())
    print(fib(n))

if __name__ == ""__main__"":
    main() -End,"
 def fib_digit(n):
	m2 = 0
	m1 = 1	
	i = 2
	f = 0
	while i <= n:
		f = int(str(m1)[-1]) + int(str(m2)[-1])
		m2 = m1
		m1 = f
		i += 1
	if n == 1:
		f = 1
	return(str(f)[-1])
def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 def gcd(a, b):
	while True:
		if a == 0 : return b
		if b == 0 : return a
		if a < b : a, b = b, a
		a = a % b

def main():
    a, b = map(int, input().split())
    print(gcd(a, b))


if __name__ == ""__main__"":
    main() -End,"
 n = int(input()) 
i = 0 
ss = 0 
while i < n: 
	nn = int(input()) 
	ss += nn
	i += 1
print(ss)
 -End,"
 print(len(set(map(id,objects)))) -End,"
 s = int(input())
s *= s
print(s)
 -End,"
 a, b = int(input()), int(input())
a, b = b, a
print(a, b)

 -End,"
 a, b, c = int(input()), int(input()), int(input())
print(a+b+c, a*b*c)
 -End,"
 a, b = int(input()), int(input())
print(b // a) -End,"
 n,k = int(input()),int(input())
print(k % n)

 -End,"
 a = int(input())
print(a**2 * a**4) -End,"
 a, b, n = int(input()), int(input()), int(input())
k = b * n % 100
r = a * n + b * n // 100
print(r, k)
 -End,"
 s = input()
print(s[-1])


 -End,"
 a = input()
if(int(a) < 9):
	print(0)
elif(int(a) == 10):
	print(1)
else :
	print(int(a[-2]))




 -End,"
 a = input()
print(int(a[0])+int(a[1])+int(a[2]))


 -End,"
 a = input()
print(int(a[2] + a[1] + a[0]))




 -End,"
 a,b =int(input()),int(input())
print((a+b)/2) -End,"
 r = float(input())
s = 3.14*r**2
print(s)
 -End,"
 b = int(input())
k = b / 8192
print(k)
 -End,"
 a,b = float(input()),float(input())
c=(a**2+b**2)**0.5
print(a+b+c)
 -End,"
 x1, y1, x2, y2 = [int(input()) for i in range (4)]
print(((x2 - x1) ** 2 + (y2 - y1) ** 2 ) ** 0.5)
 -End,"
 b = float(input())
print(b - int(b))
 -End,"
 n = str(float(input())).split(sep='.')
print(n[1][0]) -End,"
 a, b = [int(input()) for i in range (2)]
print((a**2+b**2)**0.5)
 -End,"
 selected_columns = df.filter(like = '-')
 -End,"
 b = int(input())
print(b % 1000 // 100) 
 -End,"
 a, d, n = [int(input()) for i in range (3)]
print(a + d * (n - 1))
 -End,"
 n = int(input())
a = n % 1000 // 100
b = n % 100 // 10
c = n % 10 
print(a + b + c)
 -End,"
 mean_concentrations =concentrations.groupby(['genus']).aggregate({'sucrose': 'mean', 'alanin': 'mean', 'citrate': 'mean', 'glucose': 'mean', 'oleic_acid': 'mean'})
 -End,"
 a, b = [int(input()) for i in range (2)]
def pmax (a, b):
	if(a>b): m = a 
	else : m = b
	return (m)
print(pmax(a, b))
 -End,"
 x = int(input())
if(x < 0): 
	print(-1)
elif(x > 0): 
	print(1); 
elif(x == 0): 
	print(0)
     -End,"
 n = int(input())
if(n % 2 == 0):
	print(""YES"")
else:
	print(""NO"")





 -End,"
 a, b = [int(input()) for i in range (2)]
if(a % b == 0):
	print('YES')
else:
	print('NO')
 -End,"
 n = input()
if((n[0] != n[1]) & (n[1] != n[2]) & (n[0] != n[2])):
	print(""YES"")
else:
	print(""NO"")
 -End,"
 n = input()
if((int(n[0]) + int(n[1]) + int(n[2])) == (int(n[3]) + int(n[4]) + int(n[5]))):
	print(""YES"")
else:
	print(""NO"")
 -End,"
 l1 = []
for i in range(3): l1.append(int(input()))
l2 = list(set(l1))
len_ = len(l2)
if len_ == 3:
	print(0)
elif len_ == 2:
	print(2)
elif len_ == 1:
	print(3)
     -End,"
 x , y = [int(input()) for i in range(2)]
if(x == 0 and y == 0):
	print(""0"")
elif(x >= 0 and y >= 0):
	print(""1"")
elif(x <= 0 and y >= 0):
	print(""2"")
elif(x <= 0 and y <= 0):
	print(""3"")
elif(x >= 0 and y <= 0):
	print(""4"") -End,"
 a, b, c = [float(input()) for i in range(3)]
D = b**2 - 4*a*c
if(D == 0):
	x1 = -(b / (2 * a))
	print(x1)
elif(D > 0):
	x1 = (-b+D**0.5)/(2*a)
	x2 = (-b-D**0.5)/(2*a)
	print(min(x1, x2))
	print(max(x1, x2))
     -End,"
 n = input()
m = {'1': 31, '2': 29, '3': 31, '4': 30, '5': 31, '6': 30, '7': 31, '8': 31, '9': 30, '10': 31, '11': 30, '12': 31}
print(m.get(n))
 -End,"
 n = input()
m = {'1': 'Зима', '2': 'Зима', '3': 'Весна', '4': 'Весна', '5': 'Весна', '6': 'Лето', '7': 'Лето', '8': 'Лето', '9': 'Осень', '10': 'Осень', '11': 'Осень', '12': 'Зима'}
print(m.get(n))
 -End,"
 import pandas as pd 
d = {'type': ['A', 'A', 'B', 'B'], 'value': [10, 14, 12, 23]}
my_data = pd.DataFrame(data=d)





 -End,"
 import pandas as pd    
# переменная my_stat уже создана
subset_1 = my_stat.filter(items = ['V1', 'V3']).iloc[:10]
subset_2 = my_stat.drop([0, 4])[['V2','V4']]


 -End,"
 import pandas as pd    
# переменная my_stat уже создана
subset_1 = my_stat[(my_stat['V1'] > 0) & (my_stat['V3'] == 'A')]
subset_2 = my_stat[(my_stat['V2'] != 10) | (my_stat['V4'] >= 1)]



 -End,"
 import pandas as pd    
import numpy as np
my_stat['V5'] = my_stat['V1'] + my_stat['V4']
my_stat['V6'] = np.log(my_stat['V2']) -End,"
 import pandas as pd    
my_stat = my_stat.rename(index = str, columns = {""V1"": ""session_value"", ""V2"": ""group"", ""V3"": ""time"", ""V4"": ""n_users""})




 -End,"
 import pandas as pd    
my_stat.loc[my_stat['session_value'].isnull(), 'session_value'] = 0
my_stat.loc[my_stat['n_users'] < 0, 'n_users'] = np.median(my_stat.loc[my_stat.n_users >= 0]['n_users'])





 -End,"
 import pandas as pd
mean_session_value_data = my_stat.groupby('group', as_index = False).agg({'session_value': 'mean'})
mean_session_value_data = mean_session_value_data.rename(index = str, columns = {'session_value': 'mean_session_value'}) -End,"
 n = int(input())
n += 1
if n % 2 == 0:
	print(n)
else:
	n += 1
	print(n)	
     -End,"
 #2.5.13
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import precision_score
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
precision = precision_score(y_test, predictions, average = 'micro')
 -End,"
 # put your python code here
print('Я стану программистом')



 -End,"
 import pandas as pd
from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier(max_depth = 5, min_samples_split = 5) -End,"
 #2.7.6
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
iris = load_iris()
X = iris.data
y = iris.target
clf = DecisionTreeClassifier()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
dt = clf.fit(X_train, y_train)
predicted = clf.predict(X_test) -End,"
 #2.7.10
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import load_iris
iris = load_iris()
X = iris.data
y = iris.target
parameters = {
 'max_depth': (1,2,3,4,5,6,7,8,9,10), # максимальная глубина
 'min_samples_split': (2,3,4,5,6,7,8,9,10), # минимальное число проб для разделения
 'min_samples_leaf': (1,2,3,4,5,6,7,8,9,10) # минимальное число проб в листе
 }
clf = DecisionTreeClassifier()
search = GridSearchCV(clf, parameters)
best_tree = search.fit(X, y).best_estimator_ -End,"
 #2.7.11
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import RandomizedSearchCV
from sklearn.datasets import load_iris
iris = load_iris()
x = iris.data
y = iris.target
parameters = {
 'max_depth': (1,2,3,4,5,6,7,8,9,10), # максимальная глубина
 'min_samples_split': (2,3,4,5,6,7,8,9,10), # минимальное число проб для разделения
 'min_samples_leaf': (1,2,3,4,5,6,7,8,9,10) # минимальное число проб в листе
 }
clf = DecisionTreeClassifier()
search = RandomizedSearchCV(clf, parameters)
best_tree = search.fit(x, y).best_estimator_ -End,"
 #2.7.12
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV
y = train.y
x = train.drop(['y'], axis=1)
parameters = {
 'max_depth': (1,2,3,4,5,6,7,8,9,10), # максимальная глубина
 'min_samples_split': (2,3,4,5,6,7,8,9,10), # минимальное число проб для разделения
 'min_samples_leaf': (1,2,3,4,5,6,7,8,9,10) # минимальное число проб в листе
 }
clf = DecisionTreeClassifier()
search = GridSearchCV(clf, parameters)
best_tree = search.fit(x, y).best_estimator_
predictions = search.predict(test)
 -End,"
 import pandas as pd
from sklearn.metrics import confusion_matrix
conf_matrix = confusion_matrix(y, predictions)
 -End,"
 import pandas as pd
from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators = 15, max_depth = 5)
rf.fit(x_train, y_train)
predictions = rf.predict(x_test)


 -End,"
 a, b = map(int, input().split())
print (a + b) -End,"
 h = ""Hello,""
n = input()
print(h, n)
 -End,"
 a1 = input()
a2 = input()
print(""Hello,"", a1)
print(""Hello,"", a2)
 -End,"
 a1 = input()
a2 = input()
print(int(a1)+int(a2))
 -End,"
 import pandas as pd
total_birds = wintering.expanding().sum()



 -End,"
 f=input()
f=int(f)
print(f*f) -End,"
 print(""2\n4\n6\n8\n10"")


 -End,"
 for i in range(5):
	print(""hello!"") -End,"
 for number in range(10):
    if number % 2 == 0:
        print(number)




 -End,"
 #Your code. a, b, c
p = (a + b + c) / 2
S = (p * (p - a) * (p - b) * (p - c))**0.5




 -End,"
 for i in range(len(L)-1):
	if (abs(L[i] - L[i+1]) == 1):
		index = i -End,"
 import math
k = int(input())
m = int(input())
d = math.ceil(k / m)
print(d) -End,"
 print(""Привет matem.online"")
 -End,"
 L = [3, 7, 8]
print(L[1])
 -End,"
 import math
a = int(input())
b = int(input())
c = int(input())
a = math.ceil(a / 2)
b = math.ceil(b / 2)
c = math.ceil(c / 2)
print(a + b + c)
 -End,"
 while True:
    s = input()
    l = s.split(' ')
    if l[0].isdigit() and l[1].isdigit():
        break
print(int(l[0])+int(l[1]))
 -End,"
 a = input()
if(int(a[::-1][0]) % 2 == 0):
    print(""YES"")
else:
    print(""NO"")
 -End,"
 print(f""{'Привет мир!'}\n{'Hello world!'}"") -End,"
 print('\n'.join(([""Learn Python: action in progress...""] * 3) + ([""Learn Python: action completed.""] * 2))) -End,"
 print(input()[-int(input()):]) -End,"
 from functools import reduce
m = list(map(float, [input(), input(), input()]))
print((sum(m) / 2 * reduce(lambda i1, i2: i1 * i2, [sum(m) / 2 - i for i in m])) ** 0.5) -End,"
 from datetime import timedelta
t1, t2 = timedelta(minutes=int(input())), timedelta(minutes=int(input()))
t = t2 - t1 if t1 < t2 else t1 - t2
print(t.seconds // 60 // 60, t.seconds // 60 % 60) -End,"
 print(*[[i // 100, i % 100] for i in [(((int(input()) * 100) + int(input())) * int(input()))]][0]) -End,"
 from math import ceil
h, x, y = int(input()), int(input()), int(input())
print(ceil((h - x) / (x - y) + 1)) -End,"
 a, b = int(input()), int(input())
print(f""Большее число: {a if a > b else b}, меньшее число: {a if a < b else b}"") -End,"
 i = len(input())
print(""Число"", (""одно"" if i == 1 else ""дву"" if i == 2 else ""трех"") + ""значное"") -End,"
 s = [int(input()) for i in range(3)]
r = ""\n"".join([f""{n + 2} <= {n + 1}"" for n, v in enumerate(s) if n < 2 and s[n] > s[n + 1]])
print(r if r else ""Все в порядке"") -End,"
 import re
p = input().strip()
print(""Bad password"" if ""1234"" in p or ""qwerty"" in p or len(p) <= 8 or len(re.findall(""\d"", p)) == 0 else ""Good password"") -End,"
 a =  input()
print('Проходи!' if 'Арагорн' in a or 'Леголас' in a or 'Мериадок Брендибак' in a or 'Боромир' in a or 'Фродо Бэггинс' in a else 'Ты не пройдешь!') -End,"
 x, y, x1, y1 = [int(input()) for i in range(4)]
print(""YES"" if (x1, y1) in [(x + i, y + j) for i in [-1, 0, 1] for j in [-1, 0, 1] if x + i >= 1 and x + i <= 8 and y + j >= 1 and y + j <= 8 and not (x == x + i and y == y + j)] else ""NO"") -End,"
 a, b = int(input()), int(input())
print(*list([i for i in range(* (a, b) if a < b else (b, a)) if i % 2 == 0 and i % 7 == 1]), sep=""\n"") -End,"
 print(sum(range(*sorted([int(input()), int(input())])))) -End,"
 r, n = [""Красный"", ""Оранжевый"", ""Желтый"", ""Зеленый"", ""Голубой"", ""Синий"", ""Фиолетовый""], int(input())
print(* [""Радуга состоит только из семи цветов""] if n > 7 else r[:n], sep=""\n"") -End,"
 print(sum([i ** 2 for i in range(*sorted([int(input()), int(input())]))])) -End,"
 n = int(input())
[print(*i, sep=""\t"") for i in [list(range(i, i * n + 1, i)) for i in range(1, n + 1)]] -End,"
 print(min([i for i in list(int(input()) for i in range(int(input()))) if i % 10 == 4])) -End,"
 print(sum([i for i in list(int(input()) for i in range(int(input()))) if i % 6 == 0])) -End,"
 l = list(map(int, input().split()))
print(len([i for i in range(len(l)) if sum(l[i - 1:i + 1]) % 3 == 0 and sum(l[i - 1:i+1]) % 9 != 0])) -End,"
 print(max([i for i in input().split() if len(i) == 2 and int(i) % 3 != 0])) -End,"
 l = list(map(float, input().split()))
s = [sorted([l[i],  l[i + 1]])[1] - sorted([l[i],  l[i + 1]])[0] for i in range(len(l) - 1)]
print(*list((l[r], l[r + 1]) for r in ([i for i in range(len(s)) if max(s) == s[i]])[-1:])[0]) -End,"
 import sys
print(*list(reversed([i.strip() for i in sys.stdin.readlines()[:-1] if int(i) % 2 == 0]))) -End,"
 import sys
l = tuple(map(int, [i.strip() for i in sys.stdin.readlines()[:-1]]))
print((l[len(l) // 2 - 1] + l[len(l) // 2]) / 2 if len(l) % 2 == 0 else l[len(l) // 2]) -End,"
 import sys
[print(*i.upper()) for i in [i.strip() for i in sys.stdin.readlines()[:-1]]] -End,"
 import sys
l = tuple([i.strip() for i in sys.stdin.readlines()])
print(*[list((l[:l.index(""."")]))[int(i) - 1] for i in l[l.index(""."") + 2:]]) -End,"
 import sys, re
l = tuple([i.strip() for i in sys.stdin.readlines()][:-1])
print(*[i[len(tuple(j for r in l for j in re.findall(r""(!?^|\s+)python($|\s+)"", r, re.IGNORECASE))) - 1] for i in l]) -End,"
 print(*[(i.replace(""."", "" ""), sum(map(int, i.split('.')))) for i in (input(),)][0], sep=""\n"") -End,"
 import re
print(re.sub(r""[.,!?:;–]"", """", input(), 0).lower()) -End,"
 t, s, e = input(), int(input()), int(input())
l = [e] + ([s] * ((len(t.split()) - e) // s))
print(*[t.split()[sum(l[:i + 1]) - 1] for i in range(len(l))]) -End,"
 import sys
l = [i.strip() for i in sys.stdin.readlines()]
print(* [""Великолепно, пишите еще!"" if i.strip() else ""Эти строки запомнятся надолго"" for i in l] if len(l) != 1 else [""Нет вдохновения? Ну ничего, попробуйте завтра""], sep=""\n"") -End,"
 import sys, operator
p, s, *l = [[]] + [int(i.strip()) for i in sys.stdin.readlines()]
print(""Стоп, Джон!"", [sum(p) for i in l if sum(operator.iadd(p, [i])) <= s][-1], sep=""\n"") -End,"
 import sys, operator
s, *l = [[]] + list(sys.stdin.readlines())
print(s[-1] if [i for n, i in enumerate(l) if ""rat"" in i and not s and operator.iadd(s, [n])] else ""-1"") -End,"
 s = input()
print(s.strip(), len(s) - len(s.strip()), sep=""\n"") -End,"
 print(*[i for i in {i: """" for i in input()}], sep="""") -End,"
 print(*[["""".join(j), sum((int(n) for n in j if n.isnumeric()))] for j in [[str((int(i) + 1) % 10) if i.isnumeric() else i for i in input()]]][-1], sep=""\n"") -End,"
 print(*[l.count(max(set(l))) for l in [list((int(i.strip()) for i in input().split("","")))]]) -End,"
 [print(len(l[0]), min([j for j in l[0] if j > l[1]]), sep=""\n"") for l in [[{int(i.strip()) for i in input().split("","")}, int(input())]]] -End,"
 [print(""YES"" if len([i for i in range(len(l) // 2) if l[i] == l[-i - 1]]) == len(l) // 2 else ""NO"") for l in [(input().replace("" "", """").lower().strip())]] -End,"
 n1, n2, r, l = *map(int, input().split()), {""+"": ""add"", ""*"": ""mul"", ""/"": ""truediv"", ""-"": ""sub""}
z = [k for k, v in l.items() if getattr(n1, f""__{v}__"")(n2) == r]
print(f""{n1} {z[-1]} {n2} = {r}"" if z else ""Error"") -End,"
 import sys
s, *l = [[]] + sys.stdin.readlines()
[print(s[-1]) if ""GET"" in i else s.pop() if ""DELETE"" in i else s.append(i.replace(""POST "", """").strip() if ""POST"" in i else print(*s)) for i in l] -End,"
 import sys
l, s = sys.stdin.readlines(), {""@@"": ""ошибка"", ""!!"": ""предупреждение"", ""//"": ""информация"", ""**"": ""подробное сообщение""}
[print(v) for i in l for k, v in s.items() if k in i] -End,"
 import sys
print(*[i ** 2 for i in reversed(list(map(int, sys.stdin.readlines()[:-1])))]) -End,"
 print(*[j ** i[2] for i in [tuple(map(int, input().split()))] for j in range(i[0], i[1] + 1)]) -End,"
 import sys, re
print(*[j[min(j.keys())] for j in [{int(v): n for n, v in re.findall(r""(\w+)\s*(\d+)"", i)} for i in sys.stdin.readlines()[1:]]], sep="", "") -End,"
 m, l = int(input()), [""Первы{}январь"", ""Второ{}февраль"", ""Трети{}март"", ""Четверты{}апрель"", ""Пяты{}май"", ""Шесто{}июнь"", ""Седьмо{}июль"", ""Восьмо{}август"", ""Девяты{}сентябрь"", ""Десяты{}октябрь"", ""Одиннадцаты{}ноябрь"", ""Двенадцаты{}декабрь""]
print(*[i.format(""й месяц - "") for n, i in enumerate(l) if n < m] if m < 13 else [""Error""], sep=""\n"") -End,"
 a = int(input())
print(""Составное"" if any([i for i in range(2, a) if a % i == 0]) else ""Простое"") -End,"
 print(*[f'На лугу {i} коров{"""" if i in (11, 12, 13, 14) else ""а"" if i % 10 == 1 else ""ы"" if i % 10 in (2, 3, 4) else """"}' for i in range(1, int(input()) + 1)], sep=""\n"") -End,"
 print('YES' if int(input()) in [2 ** i for i in range(40)] else 'NO') -End,"
 from sys import stdin
print(sum(map(int, stdin.readlines()[:-1]))) -End,"
 from sys import stdin
l = [n + 1 for n, i in enumerate([i.strip() for i in stdin.readlines()][1:]) if ""rat"" in i]
print(* l if l else [-1], sep=""\n"") -End,"
 from sys import stdin
l, v = stdin.readlines(), (""Слабый пароль"", ""Короткий пароль"", ""Пароль должен содержать цифры"")
print(*[i for i in (v[1] if len(j) < 8 else v[0] if ""qwerty"" in j or ""1234"" in j else v[2] if j.strip().isalpha() else """" for j in l) if i], sep=""\n"") -End,"
 from math import factorial
print(sum((factorial(i) for i in range(int(input()), int(input()) + 1)))) -End,"
 a = list(map(int, input().split("", "")))
print(sum([n for n, i in enumerate(a) if i == min(a)])) -End,"
 from sys import stdin
print(*[i.swapcase().strip() for i in stdin.readlines()[:-1]], sep=""\n"") -End,"
 print(*sorted({int(i) for i in input().split("", "")}, key=abs)[-2:]) -End,"
 a = tuple(map(int, input().split()))
print(sorted(a[:len(a) // 2])[0] + sorted(a[len(a) // 2:])[0]) -End,"
 arr = list(map(int, input().split()))
j = len(arr) - 1
is_not_ordered = True
while is_not_ordered:
   is_not_ordered = False
   for i in range(j):
       if arr[i] < arr[i + 1]:
           arr[i], arr[i + 1] = arr[i + 1], arr[i]
           is_not_ordered = True
   j -= 1
print(*arr) -End,"
 from sys import stdin 
l = tuple(map(int, stdin.readlines()[1:]))
print(max([i for i in range(1, max(l) + 1) if all([j % i == 0 for j in l])])) -End,"
 from sys import stdin 

def IsPrime(n):
   if n == 1:
       return False
   d = 2
   while d * d <= n and n % d != 0:
       d += 1
   return d * d > n

l = tuple(map(int, stdin.readlines()[1:]))
r = max([i for i in range(1, max(l) + 1) if all([j % i == 0 for j in (min(l), max(l))])])

print(r, ""YES"" if IsPrime(r) else ""NO"", sep=""\n"") -End,"
 def IsPrime(n):
   if n == 1:
       return False
   d = 2
   while d * d <= n and n % d != 0:
       d += 1
   return d * d > n

print(len(list(v for v in [i if IsPrime(i) else 0 for i in range(2, int(input()) + 1)] if v != 0))) -End,"
 from math import factorial
fib = lambda n: fib(n - 1) + fib(n - 2) if n > 2 else 1
print(*[factorial(i) + fib(i) for i in [int(input())]]) -End,"
 a = [input().strip() for i in range(int(input()))]
print(max((((int("""".join(sorted((i for i in x.replace(""-"", """")), reverse=True)))), x) for x in a), key=lambda l: l[0])[1]) -End,"
 import sys, re
check_variable = lambda x: ""Можно"" if re.match(r""[^\d][a-zA-Z_\d]+$"", x.strip()) else ""Нельзя""
print(*[check_variable(i) + "" использовать"" for i in sys.stdin.readlines()[:-1]], sep=""\n"") -End,"
 v = [""Первый"", ""Второй"", ""Третий"", ""Четвертый"", ""Пятый""]
get_winner = lambda a, b, c, d=0, e=0: v[max(enumerate([a, b, c, d, e]), key=lambda x: x[1])[0]]
print(get_winner(*map(int, input().split()))) -End,"
 get_weight = lambda *a: ""П"" if sum(a) <= int(input()) else ""Не п""
print(get_weight(*map(float, input().split())) + ""овезло"") -End,"
 import sys, datetime

def check_date(a):
    try:
        return True if datetime.date(*list(reversed(list(map(int, a.strip().split(""."")))))) else False
    except Exception as e:
        return False

r = [check_date(i) for i in sys.stdin.readlines()[:-1]]

print(*[(""К"" if i else ""Нек"") + ""орректная"" for i in r], len([i for i in r if i]), sep=""\n"") -End,"
 print(*sorted(input().split(), key=lambda x: sum([int(i) for i in x]))) -End,"
 shift_list = lambda lst, shift: lst[-(shift % len(lst)):] + lst[:-(shift % len(lst))] if shift > 0 else lst[abs(shift) % len(lst):] + lst[:abs(shift) % len(lst)] -End,"
 h, l, *d = list(map(int, input().split() + input().split("", "")))
for i in range(len(d)):
    for j in range(h):
        d[i] *= 2
print(len([i for i in d if i <= l])) -End,"
 h, l, *d = list(map(int, input().split() + input().split("", "")))
for i in range(len(d)):
    for j in range(h):
        d[i] *= 2
print(*[n + 1 for n, i in enumerate(d) if i <= l], sep="", "") -End,"
 from sys import stdin
v = {""Константная"": ""O(1)"", ""Линейная"": ""O(n)"", ""Квадратичная"": ""O(n^2)"", ""Кубическая"": ""O(n^3)"", ""Логарифмическая"": ""O(log n)"", ""Я запомнил"": ""Молодец, Вася!""}
print(*[v[i.strip()] for i in stdin.readlines()], sep=""\n"") -End,"
 def f(arr):
    count = {i: 0 for i in range(min(arr), max(arr) + 1)}
    for elem in arr:
        count[elem] += 1
    arr.clear()
    for k, v in count.items():
        if v != 0:
            arr += [k] * v
    return arr
print(*f(list(map(int, input().split())))) -End,"
 y, v, n = int(input()), ""Високосный"", ""Невисокосный""
print(v if y % 4 == 0 and y % 100 != 0 or y % 400 == 0 else n) -End,"
 binary_to_decimal, decimal_to_binary = lambda n: f""{int(str(n), 2)}"", lambda n: f""{n:b}"" -End,"
 def digits(n): return f""{str(n)[0]} "" + digits(str(n)[1:]) if n else """" -End,"
 def get_length(obj): return 1 + get_length(obj[1:]) if obj else False -End,"
 def is_power(n): return True if n == 1 else is_power(n // 2) if n % 2 == 0 else False -End,"
 f = lambda m, n: n + 1 if not m and n else f(m - 1, 1) if m and not n else f(m - 1, f(m, n - 1))
print(f(*reversed([int(input()), int(input())]))) -End,"
 def get_pow(a, n): return 1 if n == 0 else 0 if a == 0 else a * get_pow(a, n - 1) if n > 1 else a -End,"
 import sys, functools
sys.setrecursionlimit(5000)
@functools.lru_cache(None)
def fib(n): return fib(n - 1) + fib(n - 2) if n > 2 else 1 -End,"
 from itertools import permutations
[print(*i) for i in permutations(range(1, int(input()) + 1))] -End,"
 from itertools import chain, combinations
p = lambda s: list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1)))
print(*[f""{{{', '.join(map(str, i))}}}"" for i in (sorted(j) for j in p(list(map(int, input().split()))))]) -End,"
 def solve_hanoi(n, start, stop):
    if n > 0:
        for z in ({1, 2, 3} - {start, stop}):
            solve_hanoi(n - 1, start, z)
            print(f""Переносим диск {n} с {start} на {stop}"")
            solve_hanoi(n - 1, z, stop) -End,"
 from sys import stdin
d, s = {}, tuple(j.strip().split() for j in stdin.readlines()[:-1])
[print(d[i[0]]) if len(i) == 1 else d.update({i[0]:i[1]}) for i in s] -End,"
 from sys import stdin
s = tuple(reversed([j.strip() for j in stdin.readlines()]))
d = {s[i].split("" – "")[0]: s[i].split("" – "")[1] for i in range(s.index(""."") + 1, len(s))}
[print(d[s[i]]) if s[i] in d else print(""Не найдено"") for i in range(s.index(""."") -2, -1, -1)] -End,"
 print(*[len(i) - len(set(i)) for i in [input().split()]]) -End,"
 import re, itertools
ls = sorted([i.lower() for i in re.split(r""[!?.,\s]"", input()) if i])
print(*max([[g, len(list(i))] for g, i in itertools.groupby(ls)], key=lambda x: x[1])) -End,"
 from sys import stdin
from typing import List, Dict
from collections import defaultdict

enum: Dict[str, int] = {
    ""ordinary"": 0,
    ""confidential"": 1,
    ""settings"": 2,
    ""system"": 3,
}

pv: Dict[str, Dict[str, List[int]]] = {
    ""admin"": {
        ""read"": [0, 1, 2, 3],
        ""edit"": [0, 1, 2, 3]
    },
    ""experienced"": {
        ""read"": [0, 2, 3],
        ""edit"": [0, 1]
    },
    ""user"": {
        ""read"": [0],
        ""edit"": [0]
    },
}

lines: List[str] = [i.strip() for i in stdin.readlines()[:-1]]
files: Dict[str, List[str]] = defaultdict(list)
[files[i.split()[-1]].append(i.split()[0]) for i in (j for j in lines[:lines.index(""."")])]

for i in lines[lines.index(""."") + 1:]:
    user_name, rw, file_name = i.split()[::-1]
    rw_file: str = [k for k, v in files.items() for s in v if file_name == s][0]
    print(f""Access {'granted' if enum.get(rw_file) in pv.get(user_name, {}).get(rw, []) else 'denied'}"") -End,"
 from sys import stdin
from typing import List, Dict

lines: List[str] = [i.strip() for i in stdin.readlines()[:-1]]
kv: Dict[str, str] = {i.split("": "")[0]: i.split("": "")[1] for i in lines[:lines.index(""."")]}
vk: Dict[str, str] = {v: k for k, v in kv.items()}
v: str = ""Нет данных""
print(*[kv.get(i, v) if i.strip() in kv else vk.get(i, v) for i in lines[lines.index(""."") + 1:]], sep=""\n"") -End,"
 from sys import stdin
from collections import defaultdict

d = defaultdict(list)
for i in [i.strip() for i in stdin.readlines()[:-1]]:
    tmp = i.split()
    if len(tmp) > 1:
        d[tmp[0]].extend([j.strip("","") for j in tmp[1:]])
    else:
        print("", "".join(d[tmp[0]]) if tmp[0] in d else ""Не найдено"") -End,"
 CODE = {
    'A': '•—',   'B': '—•••', 'C': '—•—•',
    'D': '—••',  'E': '•',    'F': '••—•',
    'G': '——•',  'H': '••••', 'I': '••',
    'J': '•———', 'K': '—•—',  'L': '•—••',
    'M': '——',   'N': '—•',   'O': '———',
    'P': '•——•', 'Q': '——•—', 'R': '•—•',
    'S': '•••',  'T': '—',    'U': '••—',
    'V': '•••—', 'W': '•——',  'X': '—••—',
    'Y': '—•——', 'Z': '——••',

    '0': '—————', '1': '•————', '2': '••———',
    '3': '•••——', '4': '••••—', '5': '•••••',
    '6': '—••••', '7': '——•••', '8': '———••',
    '9': '————•'
}
text = input().strip()
if not text[0].isalpha():
    CODE = {v: k for k, v in CODE.items()}
    print(*[''.join([CODE[i].lower() for i in j.split()]) for j in text.split(""\t"")], sep=' ')
else:
    print(*[' '.join([CODE[i.upper()] for i in j]) for j in text.split()], sep='\t') -End,"
 def verify(s: str):
    if not s or s[0] in ""}])"" or s[-1] in ""([{"" or len(s) % 2 == 1:
        return False
    g = {
        ""("": {""end"": "")"", ""l"": []},
        ""["": {""end"": ""]"", ""l"": []},
        ""{"": {""end"": ""}"", ""l"": []},
        "")"": {""end"": ""("", ""l"": []},
        ""]"": {""end"": ""["", ""l"": []},
        ""}"": {""end"": ""{"", ""l"": []}
    }
    gr = []
    for i in range(len(s)):
        tm = 0
        d = {i: []}
        for j in range(i, len(s)):
            if s[j] == s[i]:
                tm += 1
            if s[j] == g[s[i]][""end""]:
                tm -= 1
                if tm == 0:
                    d[i].append(s[j])
                    break
            d[i].append(s[j])
        if tm == 0 and d[i][0] not in "")]}"":
            gr.append(d)

    if not gr or len(gr) != len(s) // 2:
        return False

    for i in gr:
        for j in i.values():
            if len(j) % 2 == 1:
                return False
            if not all([j.count(i) == j.count(g[i][""end""]) for i in ""([{""]):
                return False

    return True

print(""YES"" if verify(input()) else ""NO"") -End,"
 from sys import stdin
prise, start_limit, users, *stav = [i.strip().split("", "") for i in stdin.readlines()[:-1]]
stav = [(f, ' '.join(s.replace(f, '').split()[:-1]), int(s.split()[-1])) for i in stav for s in i for f in users if s.startswith(f) and int(s.split()[-1]) >= int(start_limit[0])]
[print(p, *[f""{v[0]}{ f' {v[2]}' if v[2] != 0 else ''}"" for v in [max(i, key=lambda y: y[2])]]) for p in prise for i in [list(filter(lambda x: x[1] == p, stav + [(""Предложений не было"", p, 0)]))]] -End,"
 #!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re, sys, itertools, collections
from typing import List, Dict, Tuple, Set


class User:
    def __init__(self):
        self.reads: Set[str] = set()
        self.genre: Set[str] = set()
        self.count: Dict[str, int] = collections.defaultdict(int)

    def __str__(self):
        return str(dict(self.count))

GET_BOOK: str = ""Посоветуй мне книгу""
re_catalog: str = r""\s?(.+?)\s*\""(.+?)\""\s*\((.+?)\),?""
re_user_book: str = r'(.+)\s*\""(.+)\""'
re_get_user: str = f""{GET_BOOK}\s\((.+)\)""

values: List[str] = [i.strip() for i in sys.stdin.readlines()[:-1]]
catalogs: List[Tuple[str, str, str]] = re.findall(re_catalog, values[0])
users: Dict[str, User] = dict()
key2 = lambda x: x[2]


for line in values[1:]:
    if GET_BOOK in line:
        sovet: List[str] = list()
        user_name: str = re.match(re_get_user, line).group(1).strip()
        if user_name not in users:
            print(""Список пуст"")
            continue
        user: User = users[user_name]
        iter = itertools.groupby(sorted(catalogs, key=key2), key=key2)
        max_genre: int = max(user.count.items(), key=lambda x: x[1])[1]
        list_genre: list = [k for k, v in user.count.items() if v == max_genre]
        iter = [(n, list(i)) for n, i in iter if n in user.genre]
        for genre, group_catalog in iter:
            for cat in group_catalog:
                if cat[1] in user.reads:
                    pass
                else:
                    if cat[2] in list_genre:
                        sovet.append(cat[1])
        if sovet:
            print(*[f'""{i}""' for i in sovet], sep="", "")
        else:
            print(""Список пуст"")
    else:
        match = re.match(re_user_book, line)
        user_name: str = match.group(1).strip()
        book_name: str = match.group(2).strip()

        if user_name not in users:
            users[user_name] = User()

        users[user_name].reads.add(book_name)
        genre: str = [i for i in catalogs if i[1] == book_name][0][2]
        users[user_name].genre.add(genre)
        users[user_name].count[genre] += 1 -End,"
 from sys import stdin
line, *d = [i.strip() for i in stdin.readlines()[:-1]]
dd = {int(s[1]): s[0] for i in d for s in [i.split("": "")]}
print("""".join([str(dd[line.count(i)]) if i.isalpha() else i for i in line])) -End,"
 import sys, re, collections
lines, num = [i.strip() for i in sys.stdin.readlines()[:-1]], collections.defaultdict(list)
for i in lines:
	if re.match(r""^\w+\s?$"", i):
		line = "", "".join([f""+7 ({s[1:4]}) {s[4:7]}-{s[7:9]}-{s[9:11]}"" for s in num[i]])
		print(""Не найдено"" if not num.get(i) else line)
	else:
		regex = r""((?:\+7|8)\s?(?:(?=\()\(\d{3}\)|\d{3})(?:[\s-]?\d)*)""
		n = [re.sub(""[+\-\s\(\)]"", """", r) for r in re.findall(regex, i)]
		num[re.findall(r""^(\w+)\s"", i)[0]].extend([s for s in n if len(s) == 11]) -End,"
 a, b, c, d = [int(input()) for _ in range(4)]
print(a - (b + c - d))



 -End,"
 n, m, k, p, t, h = [int(input()) for _ in range(6)]
print((n + m + k) - (t + p) + h) -End,"
 # put your python code here
m = int(input())
if (m == 1) or (m == 3) or (m == 5) or (m == 7) or (m == 8) or (m == 10) or (m == 12):
    print(31)
elif (m == 4) or (m == 6) or (m == 9) or (m == 11):
    print(30)
else:
    print(29) -End,"
 m = int(input())
if (m == 1) or (m == 2) or (m == 12):
    print('Зима')
elif (m == 3) or (m == 4) or (m == 5):
    print('Весна')
elif (m == 6) or (m == 7) or (m == 8):
    print('Лето')
else:
    print('Осень') -End,"
 x = int(input())
s = 0
for i in range(1,x+1):
    if x%i == 0:
        s += 1
print(s) -End,"
 N = int(input())
sum = 0
for i in range(1,N+1):
    sum += int(input())
print(sum) -End,"
 N = int(input())
check = 0
for i in range(1,N+1):
    if int(input()) == 0:
        print('YES')
        check = 1
        break
if (check == 0):
    print('NO') -End,"
 n = int(input())
c = 1
for i in range(1,n+1):
    if i%2==0:
        c *= i
print(c) -End,"
 a = int(input())
i = 0
while (a%3 == 0):
    a = a//3
    i += 1
print(i) -End,"
 N = int(input())
if ((N//100) < (N%100//10) and (N%100//10) < (N%10)):
    print('YES')
else:
    print('NO') -End,"
 N = int(input())
i = 0
while (N>0):
    t = N%10
    if t == 4:
        i += 1
    N = N//10
print(i) -End,"
 N = int(input())
sum = 0
for i in range(1,N+1):
    for x in range(len(str(i))):
        l = str(i)
        if l[x] == '7':
            sum += 1
print(sum) -End,"
 N = int(input())
s = 0
while(N>0):
    x = int(input())
    if x%6 == 0:
        s += x
    N -= 1
print(s) -End,"
 N = int(input())
i = 0
while(N>0):
    x = int(input())
    if x%4 == 0:
        i += 1
    N -= 1
print(i) -End,"
 N = int(input())
s = 30000
while(N>0):
    x = int(input())
    if x%3 == 0 and x<s:
        s = x
    N -= 1
print(s) -End,"
 N = int(input())
s = 0
while(N>0):
    x = int(input())
    if x%3 == 0:
        s += x
    N -= 1
print(s) -End,"
 N = int(input())
s = -30000
while(N>0):
    x = int(input())
    if x%4 == 0 and x>s:
        s = x
    N -= 1
print(s) -End,"
 N = int(input())
s = 0
while(N>0):
    x = int(input())
    if x%10 == 4:
        s += x
    N -= 1
print(s) -End,"
 N,m,s = int(input()),0,'NO'
while(N>0):
    x = round(float(input()))
    if x>m:
        m = x
    if x<30:
        s = 'YES'
    N -= 1
print(m, s, sep = '\n') -End,"
 N,min,max,s = int(input()),300,0,0
while(N>0):
    x = round(float(input()))
    if x>max:
        max = x
    if x<min:
        min = x
    if x<=30:
        s += 1
    N -= 1
print(max-min, s, sep = '\n') -End,"
 N,s,x = -1,0,1
while(x!=0):
    x = int(input())
    N += 1
    if x%2 != 0 and x%3 == 0:
        s += 1
print(N, s, sep = '\n') -End,"
 N,s,x = 0,0,1
while(x!=0):
    x = int(input())
    if x>0:
        N += 1
    if x<0:
        N -= 1
    s += x
print(s, N, sep = '\n') -End,"
 N,m,s = int(input()),0,'NO'
while(N>0):
    x = round(float(input()))
    if x>m:
        m = x
    if x==0:
        s = 'YES'
    N -= 1
print(m, s, sep = '\n') -End,"
 N,min,t = int(input()),31,'NO'
while(N>0):
    x = int(input())
    if x < min:
        min = x
    if x < -15:
        t = 'YES'
    N -= 1
print(min, t, sep = '\n') -End,"
 a = [int(input()) for i in range (5)]
print(' '.join(str(x*x) for x in a)) -End,"
 n = int(input())
a = [int(n) for n in input().split()]
m = 0
for i in a:
    if i < 8:
        m += 1
print(m) -End,"
 n, x = int(input()), int(input())
print(n%10**x) -End,"
 n = int(input())
s = 0
while(n>0):
    s += (n%10)**3
    n //= 10
print(s) -End,"
 s1, s2 = input(), input()
if s1 == s2:
    print(False)
else:
    print(True) -End,"
 x1, x2 = int(input()), int(input())
if x1 > x2:
    print(x1)
else:
    print(x2) -End,"
 x1, x2 = int(input()), int(input())
if x1 < x2:
    print(x1)
else:
    print(x2) -End,"
 n = int(input())
a = [int(n) for n in input().split()]
m = 0
for i in range(n):
    if a[i] >= m:
        m = a[i]
print(m) -End,"
 n = int(input())
a = [int(n) for n in input().split()]
m, x = 0, 0
for i in a:
    m += i
for y in range(n):
    if a[y] >= m/n:
        x += 1
print(x) -End,"
 a = [int(n) for n in input().split()]
m = 0
for i in a:
    m += i
print(m) -End,"
 def search (x, a):
    i = 0
    while a[i] != x and i < len(a) - 1:
        i += 1
        if a[i] == x:
            return i
    return -1

print(search(int(input()), [3, 4, 2, 1, 0, 7, 8])) -End,"
 n, m = int(input()), int(input())
x = abs(m - n)
print(x//60, x%60) -End,"
 print(int(input()) + int(input()) + int(input())) -End,"
 r, k, x = int(input()), int(input()), int(input())
print(((r*100+k)*x)//100, ((r*100+k)*x)%100) -End,"
 a = int(input())
s1 = (3**0.5/4)*(a/2)**2
s2 = (3**0.5/4)*(3*a)**2
print(round(3*a**2 + (s2 - 6*s1))) -End,"
 sum1 = sum(map(int, input().split()))
sum2 = sum(map(int, input().split()))
print(sum1, sum2, sep = '#') -End,"
 s = input()
if s == 'int':
    a, b = int(input()), int(input())
    if a == 0 and b == 0:
        print('Empty Ints')
    else:
        print(a+b)
elif s == 'str':
    st = input()
    if not st:
        print('Empty String')
    else:
        print(st)
elif s == 'list':
    st2 = input().split()
    if not st2:
        print('Empty List')
    else:
        print(st2[-1])
else:
    print('Unknown type') -End,"
 n = int(input())
for i in range(n+1):
    print(i) -End,"
 a = int(input())
if a%2 == 0:
    print('Чет')
else:
    print('Нечет') -End,"
 x = int(input())
if abs(x) > 1000000000:
    print('Да, это большое число')
else:
    print('Нет, это не такое уж и большое число')




 -End,"
 x,y,a = float(input()), float(input()), input()
if a == '+':
    print(x+y)
else:
    print(x-y) -End,"
 x = int(input())
if x//100 != 0:
    print('Число трехзначное')
elif x//10 != 0:
    print('Число двузначное')
else:
    print('Число однозначное') -End,"
 m_list = ['Энрико Ферми', 'Нильс Бор', 'Джон фон Нейман', 'Ричард Фейнман', 'Роберт Оппенгеймер', 'Ганс Бизе', 'Ханс Бете']
name = input()
if name in m_list:
    print('Доступ разрешен')
else:
    print('Доступ запрещен') -End,"
 x,y = int(input()), int(input())
if x > 0 and y > 0:
    print(1);
elif x > 0 and y < 0:
    print(4);
elif x < 0 and y > 0:
    print(2)
else:
    print(3) -End,"
 def common(list_a, list_b):
    list_c = []
    for i in list_b:
        if list_a.count(i)>0:
            list_c.append(i)
    return list_c -End,"
 def BinToDec (bin, z):
    i = 1
    dec = 0
    while bin > 0:
        dec = dec + bin % 10 * i
        bin = bin // 10
        i = i * z
    return dec

x = int(input())
y = int(input())
print(BinToDec(y,x)) -End,"
 a=[3, 5, 65, 67, 4, 2, 3, 6, 9, -10, -27, 6, 0, 8]

def maximum(s):
    max = 0
    for i in range(len(s)):
        if max < s[i]:
            max = s[i]
    return max

def minimum(s):
    mix = 100
    for i in range(len(s)):
        if mix > s[i]:
            mix = s[i]
    return mix

print(minimum(a))
print(maximum(a)) -End,"
 def front_x(words):
    l1 = []
    l2 = []
    l3 = []
    for i in words:
        if i != '':
            if i[0] == 'x':
                l2.append(i)
    for i in words:
        if i != '':
            if i[0] != 'x':
                l3.append(i)
    for i in words:
        if i == '':
            l1.append(i)
    l2.sort()
    l3.sort()
    return l2+l1+l3 -End,"
 def numerics(n):
    x = []
    x.append(n//1000)
    x.append(n//100%10)
    x.append(n//10%10)
    x.append(n%10)
    return x -End,"
 def kaprekar_step(L):
    L.sort()
    s1=str(L[0])+str(L[1])+str(L[2])+str(L[3])
    L.reverse()
    s2=str(L[0])+str(L[1])+str(L[2])+str(L[3])
    i = int(s2)-int(s1)
    return i -End,"
 x,y,a = float(input()), float(input()), input()
if a == '+':
    print(x+y)
elif a == '-':
    print(x-y)
elif a == '*':
    print(x*y)
else:
    print(x/y) -End,"
 x = int(input())
if (x%4==0) and (x%100 != 0) or (x%400 == 0):
    print('Високосный')
else:
    print('Невисокосный') -End,"
 s = input()
if (s.find('qwerty') != -1) or (s.find('1234') != -1) or (len(s) < 8) or s.isalpha():
    print('Bad password')
else:
    print('Good password') -End,"
 t1, t2, t3, lan = input(), input(), input(), list(map(str, input().split(', ')))
if (t1 in lan) and (t2 in lan) and (t3 in lan):
    print('YES')
else:
    print('NO') -End,"
 l = ['Арагорн', 'Леголас', 'Мериадок Брендибак', 'Боромир', 'Фродо Бэггинс']
name = input()
if (name.find(l[0]) != -1) or (name.find(l[1]) != -1) or (name.find(l[2]) != -1) or (name.find(l[3]) != -1) or (name.find(l[4]) != -1):
    print('Проходи!')
else:
    print('Ты не пройдешь!') -End,"
 x1,y1 = int(input()),int(input())
x2,y2 = int(input()),int(input())
if (x2>8) or (y2>8) or (x2<1) or (y2<1) or (x1 == x2 and y1 == y2):
    print('NO')
elif ((x1+1)>=x2 and (x1-1)<=x2) and ((y1+1)>=y2 and (y1-1)<=y2):
    print('YES')
else:
    print('NO') -End,"
 a = int(input())
b = int(input())
max = 0
for i in range(a,b+1):
    if i%7 == 0 and abs(i) > max:
        max = i
if max != 0:
    print(max)
else:
    print('NO')     -End,"
 c = input()
for i in range(97, ord(c)+1):
    print(chr(i), end=' ') -End,"
 c = input()
if ord(c)<91:
    print(chr(ord(c)+32))
else:
    print(chr(ord(c)-32)) -End,"
 s, k = input(), int(input())
s2 = ''
for i in range(len(s)):
    if i != k-1:
        s2 += s[i]
print(s2) -End,"
 s = input()
s2 = s[::-1]
if s == s2:
    print('YES')
else:
    print('NO') -End,"
 s = input()
x = 0
for i in s:
    for j in s:
        if i == j:
            x += 1
    if x == 2:
        print(i)
        break
    else:
        x = 0 -End,"
 s,k = input(), int(input())
if k<=len(s):
    print(s[k-1])
else:
    print('NO') -End,"
 s = input()
s2 = ''
x = 0
for i in s:
    if (i == ' ') and (x == 0):
        s2 += i
        x += 1
    if (i != ' '):
        s2 += i
        x = 0
print(s2) -End,"
 a,b = input(), input()
if a > b:
    a,b = b,a
for i in range(ord(a), ord(b)+1):
    print(chr(i), end=' ') -End,"
 a,b,c = input(),input(),input()
print(a, ' ', b[0], '.', c[0], '.',sep='') -End,"
 s1,s2 = (input() for i in range(2))
if s1[0] == s2[len(s2)-1]:
    print('YES')
else:
    print('NO') -End,"
 summ = 0
for i in range(int(input())):
    if i%3 == 0 or i%5 == 0:
        summ += i
print(summ) -End,"
 chislo = int(input())
summ = 2
x1 = 1
x2 = 2
while chislo > x1+x2:
    if (x1+x2)%2 == 0:
        summ += x1+x2
    x1,x2 = x2,x1+x2
print(summ) -End,"
 x, y = map(int, input().split())

mat = [1] * (x+1)
for i in range(x+1):
    mat[i] = [1] * (y+1)

for i in range(1,y+1):
    for j in range(1,x+1):
        mat[i][j] = mat[i][j-1] + mat[i-1][j]
        
print(mat[x][y])





 -End,"
 import sys

x = int(input())
stroka = sys.stdin.read()
max = 0
s = ''

for i in stroka:
    if i not in ' \n':
        s += i

for i in range(len(s)-(x-1)):
    mn = 1
    for j in range(0,x):
        mn *= int(s[i+j])
    if mn > max:
        max = mn

print(max) -End,"
 x = int(input())
sumk = 0
ksum = 0
for i in range(1,x+1):
    sumk += i*i
    ksum += i
print(ksum*ksum - sumk) -End,"
 a,b = int(input()), int(input())
summ = 0
if b<a:
    a,b = b,a
for i in range(a,b):
    summ += i*i
print(summ) -End,"
 x = int(input())
z = 0
flag = 0
while x > 0:
    z += 1 
    y = input()
    if 'rat' in y:
        print(z)
        flag = 1
    x -= 1
if flag == 0:
    print(-1) -End,"
 n = 1
summ_ = 0
while n != 0:
    n = int(input())
    summ_ += n
print(summ_) -End,"
 s = input()
x = 0
if s[0] not in 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_':
    x = 1
for i in s:
    if i not in 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_1234567890':
        x = 1
        break
if x == 1:
    print('NO')
else:
    print('YES') -End,"
 h,a,b = int(input()), int(input()), int(input())
print(((h-a)+(a-b)-1)//(a-b)+1) -End,"
 n = int(input())
for i in range(1,n+1):
    if i in [1,21,31,41,51,61,71,81,91]:
        print('На лугу', i, 'корова')
    elif i%10 in [2,3,4] and i not in [12,13,14]:
        print('На лугу', i, 'коровы')
    else:
        print('На лугу', i, 'коров')
    





 -End,"
 x = []
x.append(int(input()))
x.append(int(input()))   
print(max(x)) -End,"
 x = input().split()
y = 0
for i in x:
    y += int(i)
print(y)

 -End,"
 def myf(s):
    for i in s:
        if i in '1234567890':
            return True

while True:
    s = input()
    if len(s) < 8:
        print('Короткий пароль')
    elif 'qwerty' in s or '1234' in s:
        print('Слабый пароль')
    elif myf(s) != True:
        print('Пароль должен содержать цифры')
    else:
        break




 -End,"
 print('''«Старый гений», ""После бала"", 'Ася', «Кавказ», ""Куст сирени""''')




 -End,"
 for i in range(38):
    print('«Старый гений»', end='')




 -End,"
 print('Привет, ' + input() + '!')



 -End,"
 print('Имя:',input(),sep='')
print('Фамилия:',input(),sep='')
print('Телефон:',input(),sep='')


 -End,"
 print('Привет, как тебя зовут?')
print(input(),', очень приятно познакомиться.',sep='')




 -End,"
 x = int(input())
print('Развернутая формула записи числа:')
print(x//100,'*10^2+',x//10%10,'*10^1+',x%10,'*10^0',sep='')




 -End,"
 x = int(input())
print(x%10,x//10%10,x//100%10,x//1000,sep='')


 -End,"
 s = ['zero','one','two','three','four','five','six','seven','eight','nine']
print(s[int(input())])



 -End,"
 x = int(input())
if x == 1 or (x%10 == 1 and x != 11):
    print(x, 'student')
elif x in [2,3,4] or x%10 in [2,3,4]:
    print(x, 'studenta')
else:
    print(x, 'studentov')




 -End,"
 a = int(input())
b = int(input())
c = int(input())

def myMaxOfThree(a, b, c):
    y = []
    y.append(a)
    y.append(b)
    y.append(c)
    return max(y)

print(myMaxOfThree(a, b, c)) -End,"
 x = int(input())
print(x//100+x//10%10+x%10,',',(x//100)*(x//10%10)*(x%10),sep='')




 -End,"
 x = int(input())
y = []
y.append(x//100)
y.append(x//10%10)
y.append(x%10)
print(max(y))




 -End,"
 x = input()
if x.index('м') < x.index('и') < x.index('р'):
    print('Найдено')
else:
    print('Нет')




 -End,"
 i = int(input())
if i in [12,1,2]:
    print('Зима')
elif i in [3,4,5]:
    print('Весна')
elif i in [6,7,8]:
    print('Лето')
elif i in [9,10,11]:
    print('Осень')



 -End,"
 a,b,c = map(int,input().split())

if a+b > c and a+c > b and b+c > a:
    print('YES')
else:
    print('NO')




 -End,"
 x = int(input())
if x%10 == 1 and x%100 != 11:
    print('На лугу', x, 'корова')
elif (x%10 == 2 or x%10 == 3 or x%10 == 4) and x%100 != 12 and x%100 != 13 and x%100 != 14:
    print('На лугу', x, 'коровы')
else:
    print('На лугу', x, 'коров')




 -End,"
 N = int(input())
x1 = int(input())
s = 0
for i in range(1,N):
    x2 = int(input())
    if x2<x1:
        s += 1
    x1 = x2
print(s)




 -End,"
 a = int(input())
b = int(input())
c = int(input())
if b <= a >= c and b >= c:
    print(a,c,b, sep='\n')
elif b <= a >= c and c >= b:
    print(a,b,c, sep='\n')
elif a <= b >= c and a >= c:
    print(b,c,a, sep='\n')
elif a <= b >= c and c >= a:
    print(b,a,c, sep='\n')
elif a <= c >= b and b >= a:
    print(c,a,b, sep='\n')
elif a <= c >= b and a >= b:
    print(c, b, a, sep='\n') -End,"
 uf,u,i = input(),1,1
while (u < len(uf)):
    if uf[u-1] == uf[u]:
        i += 1
        u += 1
        continue
    if uf[u-1] != uf[u]:
        print(uf[u -1 ],i, sep='',end='')
        u += 1
        i = 1
print(uf[u -1 ],i, sep='',end='') -End,"
 a, i = [int(i) for i in input().split()], 0
a.sort()
a.append('B')
for i in range(len(a)) :
    if a[i-1]==a[i] and a[i+1]!=a[i]:
        print(a[i]) -End,"
 st,num,count = [int(i) for i in input().split() ],int(input()),0
if num not in st:
    print(""Отсутствует"")
else:
    for i in st:
        if(i == num):
            print(count, end=' ')
        count += 1 -End,"
 s = input()
a = []
while s != 'end':
    a.append([int(i) for i in s.split()])
    s = input()
for i in range(len(a)) :
    for j in range(len(a[0])) : 
        print(a[i-1][j] + a[i-len(a)+1][j] + a[i][j-1] + a[i][j-len(a[0])+1], end=' ')
    print() -End,"
 s = input().lower().split()
a =set(s)
for i in a:
    print(i,s.count(i)) -End,"
 a = {}
for i in range(int(input())):
    s = int(input())
    if s not in a :
        a[s]=[f(s)]
    print(*a[s]) -End,"
 d1 = { input().lower() for i in range( int( input() ) ) }
d2 = []
for i in range( int( input() ) ):
    d2 += input().split()
for i in set(d2):
    if i.lower() not in d1:
        print(i) -End,"
 def closest_mod_5(x):
    while x % 5 != 0:
        x+=1
    return x -End,"
 print('\nLearn Python: action in progress...' * 3) 
print('Learn Python: action completed.\n' * 2) -End,"
 print(""Здравствуй,"",input()) -End,"
 print(int(input()) + int(input())) -End,"
 a,b = str(input()),int(input())
print(a[len(a) - b:]) -End,"
 a = str(input())
print(int(a[0])**3 + int(a[1])**3 + int(a[2])**3) -End,"
 print(input() != input()) -End,"
 print(len(input())) -End,"
 print(max(int(input()),int(input()))) -End,"
 print(min(int(input()),int(input()))) -End,"
 a,b,c = float(input()), float(input()), float(input())
p = 1 / 2 * ( a + b + c)
print( pow(p * (p - a) * (p - b) * (p - c), 0.5) ) -End,"
 a = ( int(input()) * 100 + (int(input())) ) * int(input())
print(a // 100, a % 100) -End,"
 h,a,b = float(input()), float(input()), float(input())
print( int( ( (h - a) + ( a - b) - 1 ) / (a - b) + 1 ) ) -End,"
 print(""Чет"" if int(input()) % 2 == 0 else ""Нечет"") -End,"
 print(  ""Да, это большое число"" if abs( int( input())) >= 1000000000 else ""Нет, это не такое уж и большое число"") -End,"
 a,b = float(input()), float(input())
print( a + b if str(input()) == '+' else a - b ) -End,"
 print(""Доступ разрешен"" if str(input()) in ""Энрико Ферми, Нильс Бор, Джон фон Нейман, Ричард Фейнман, Роберт Оппенгеймер, Ганс Бизе, Ханс Бете"" else ""Доступ запрещен"") -End,"
 a = float(input())
print( ""Високосный"" if a % 4 == 0 and a % 100 != 0 or a % 400 == 0 else ""Невисокосный"" ) -End,"
 a,b = int(input()), int(input())
print( ""Большее число:"", str(a)+"", меньшее число:"", b) if a > b else print( ""Большее число:"", str(b)+"", меньшее число:"", a) -End,"
 a = len(input())
print('Число трехзначное' if a == 3 else 'Число двузначное' if a == 2 else 'Число однозначное') -End,"
 a,b,z = float(input()), float(input()), input()
print( (a + b) if z == '+' else (a - b) if z == '-' else (a * b) if z == '*' else (a / b))




 -End,"
 x, y = int(input()), int(input())
print( 1 if x > 0 and y > 0 else 2 if x < 0 and y > 0 else 3 if  x < 0 and y < 0 else 4  ) -End,"
 p,c,l =  int(input()),input(),input()
print(""Подходит"" if (""русский"" in l or ""английский"" in l) and p >= 7 and c == ""Рим"" else ""Не подходит"")




 -End,"
 a,b=int(input()),int(input())
print( tuple ( range ( min(a,b) ,max(a,b)))) -End,"
 a = int(input())
print( tuple(range(a,a*10+1,2)) if a % 2 == 0 else tuple(range(a+1, a*10+1,2)) ) -End,"
 print( *tuple(range(int(input()),int(input()),-1)), sep='\n' )




 -End,"
 a,b = int(input()), int(input())
for i in range(min(a, b),max(a, b) + 1):
    if i % 2 == 0 and i % 7 == 1:
        print(i) -End,"
 a,b = int(input()), int(input())
print( sum(tuple(range(min(a, b),max(a, b))))) -End,"
 d = 1;
for i in range(1, int(input()) + 1):
    d *= i
print(d) -End,"
 color,num = (""Красный"", ""Оранжевый"", ""Желтый"", ""Зеленый"", ""Голубой"", ""Синий"", ""Фиолетовый""),int(input())
print( *color[:num], sep='\n') if num < 8 else print(""Радуга состоит только из семи цветов"")




 -End,"
 for i in range(1,int(input())+1):
    if i  % 10 == 1 and i % 100 != 11 :
        print(""На лугу"",i, ""корова"")
    elif 2 <= i % 10 <= 4 and  i % 100 != 12 and  i % 100 != 13 and  i % 100 != 14:
        print(""На лугу"", i, ""коровы"")
    else:
        print(""На лугу"", i, ""коров"") -End,"
 a,m = int(input()),0
for i in range(2,a):
    if a % i == 0:
        m = i
print(""Составное"" if m != 0 else ""Простое"") -End,"
 num = int(input())
for i in range(1, num + 1):
     print(*range(i, i * num + 1, i), sep='\t') -End,"
 size,s,i = int(input()),0,0
while size > s:
    s += 1
    if ""rat"" in input():
        print(s)
        i += 1
if(i == 0):
    print(-1) -End,"
 s = 0
while input():
    print(""Великолепно, пишите еще!"")
    s += 1
print(""Эти строки запомнятся надолго"" if s > 0 else ""Нет вдохновения? Ну ничего, попробуйте завтра"") -End,"
 x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input()),
print( ""NO"" if x1 == x2  and y1 == y2 else ""YES"" if abs(x2 - x1) <= 1 and abs(y2 - y1 ) <= 1 
      and 1 <= x1 + 1 <= 8 and 1 <= y1 + 1 <= 8  else ""NO"") -End,"
 m,r = (""Первый месяц - январь"", ""Второй месяц - февраль"", ""Третий месяц - март"", ""Четвертый месяц - апрель"",
     ""Пятый месяц - май"", ""Шестой месяц - июнь"", ""Седьмой месяц - июль"", ""Восьмой месяц - август"",
    ""Девятый месяц - сентябрь"", ""Десятый месяц - октябрь"", ""Одиннадцатый месяц - ноябрь"", 
     ""Двенадцатый месяц - декабрь""), int(input())
print(*m[:r], sep='\n') if r <= 12 else print(""Error"")




 -End,"
 s, a, r = int(input()),0,0
while True:
    r = int(input())
    if a + r > s :
        print(""Стоп, Джон!"", a, sep='\n') 
        break;
    else:
        a = a + r -End,"
 n, i = int(input()), 2
while True:
    if i == n:
        print(""YES"")
        break
    if i > n:
        print(""NO"")
        break
    i *= 2 -End,"
 size, m, s = int(input()), 30001, 0
while size != 0:
    size -= 1
    s = int(input())
    if s % 10 == 4 and s == min(m , s):
        m = s
print(m) -End,"
 print( sum([i for i in [int(input()) for i in range(int(input()))] if i % 6 == 0])) -End,"
 sum = 0
while True:
    s = int(input())
    if s == 0:
        break
    sum += s
print(sum) -End,"
 while True:
    a = input().upper()
    if a == '.':
        break
    print(*list(a)) -End,"
 su = []
while True:
    s = input()
    if s == '.':
        break
    su.append(s)
print(su[len(su) // 2]  if len(su) % 2 == 1 else (int(su[len(su) // 2]) + int(su[len(su) // 2 - 1])) / 2) -End,"
 s = [i for i in [int(input()) for i in range(int(input()))]]
uf = min([i for i in[i for i in s] if i % 2 == 0]) + min([i for i in[i for i in s] if i % 2 == 1])
print(*[i + uf if i < uf else i for i in s]) -End,"
 s = []
while True:
    s.append(input())
    if s[-1]=='.':
        s.pop(-1)
        break
print(*[i[1] for i in s], sep=' ') -End,"
 print(*input().split(),sep='_')




 -End,"
 su = []
while True:
    s = input()
    if s == '.':
        break
    su.append(int(s)**2)
print(*su[::-1]) -End,"
 print(''.join([i for i in input().lower() if i  not in (""."", "","", ""!"", ""?"", "":"", "";"", ""–"")])) -End,"
 while True:
    s = input()
    if s == '.':
        break
    elif s[0:2] and s[len(s)-2:len(s)] == ""@@"":
        print(""ошибка"")
    elif s[0:2] and s[len(s)-2:len(s)] == ""!!"":
        print(""предупреждение"")
    elif s[0:2] and s[len(s)-2:len(s)] == ""//"":
        print(""информация"")
    elif s[0:2] and s[len(s)-2:len(s)] == ""**"":
        print(""подробное сообщение"") -End,"
 numbers = tuple(map(int, input().split()))
count = 0
for i in range(0,len(numbers) - 1):
    if (numbers[i] + numbers[i + 1]) % 3 == 0 and (numbers[i] + numbers[i + 1]) % 9 != 0:
        count += 1
print(count) -End,"
 while True:
    s = input()
    if s == s.upper() or s == s.lower():
        break
    print(s.swapcase()) -End,"
 s = [int(i) for i in input().split()]
print(sorted(s[:(len(s)//2)])[0] + sorted(s[(len(s)//2):], reverse=True)[-1]) -End,"
 a,s,s2= [i for i in input().split(', ')], input(), []
for i in range(len(a)):
    if int(s) <= int(a[i]):
        s2.append(a[i])
print(len(set(a)), min(s2), sep='\n') -End,"
 a = input().lower().replace("" "", """")
print(""YES"" if a == a[::-1] else ""NO"" ) -End,"
 s = [int(i) for i in input().split(', ')]
print(sum([i for i in range(len(s)) if s[i] == min(s)])) -End,"
 a = [int(i) for i in input().split()]
print(*[i**a[2] for i in range(a[0],a[1]+1)]) -End,"
 s = [int(i) for i in input().split()]
for i in range(len(s) - 1):
    for j in range(len(s) - i - 1):
        if s[j] > s[j+1]:
            s[j], s[j+1] = s[j+1], s[j]
print(*s) -End,"
 s = [int(i) for i in input().split()]
for i in range(len(s) - 1):
    for j in range(len(s) - i - 1):
        if s[j] < s[j+1]:
            s[j], s[j+1] = s[j+1], s[j]
print(*s) -End,"
 s = input()
print(s.strip(),len(s)-len(s.strip()) ,sep='\n') -End,"
 s, s2, su = input(), [], 0
for i in range(len(s)):
    if '9' >= s[i] >= '0':
        s2.append((int(s[i]) + 1) % 10)
        su += (int(s[i]) + 1) % 10
    else:
        s2.append(s[i])
print(*s2, sep='')
print(su) -End,"
 def factorial(n):
    if n == 0:
        return 1
    return factorial(n-1) * n
print(sum([factorial(i) for i in range(int(input()),int(input())+1)])) -End,"
 s = [int(i) for i in input().split(',')]
a = max(s,key=abs)
s.remove(max(s,key=abs))
a2 = max(s,key=abs)
print(min(a,a2,key=abs),max(a,a2,key=abs)) -End,"
 def get_weight(n,b):
    return sum(n) < b
print(""Повезло"" if get_weight( [float(i) for i in input().split()], float(input()) ) else ""Не повезло"" ) -End,"
 def shift_list(lst, shift):
    shift %= len(lst)
    return lst[-shift:] + lst[:-shift] -End,"
 def uf(n):
    n, n2, = [sorted(list(n[i].replace(""-"","""")),reverse=True) for i in range(len(s))], []
    for i in range(len(n)):
        st = """"
        for j in range(len(n[i])):  
            st += n[i][j]
        n2.append(int(st))
    return n2.index(max(n2))

s = [input() for i in range(int(input()))]
print(s[uf(s)] ) -End,"
 t, si  = input().split()
s = [int(i) for i in input().split(', ')]
while int(t) != 0:
    s = [i * 2 for i in s]
    t = int(t) - 1
print(len([i for i in s if i <= int(si)]))


 -End,"
 t, si  = input().split()
s = [int(i) for i in input().split(', ')]
while int(t) != 0:
    s = [i * 2 for i in s]
    t = int(t) - 1
print(*[s.index(i) + 1 for i in s if i <= int(si)], sep=', ') -End,"
 def check_variable(v):
    if v[0].isdigit() or len([i for i in s if (':' <= i <= '@') or (' ' <= i <= '/') or (i > 'z') and i != '-']):
        return 'Нельзя использовать'
    return 'Можно использовать'
while True:
    s = input()
    if s == 'Поработали, и хватит':
        break
    print(check_variable(s)) -End,"
 def is_power(n):
    if n == 1:
        return True
    elif n > 1 and n < 2:
            return False
    return is_power(n / 2) -End,"
 s = [i for i in input().split()]
print(len(s) - len(set(s))) -End,"
 print( int(input()) - ( int(input()) + int(input()) - int(input()) )) -End,"
 s1, s2 = [i for i in input().split()], [i for i in input().split()]
print(""Корректно"" if len(s1) + len(s2) * 0.3 > len(set(s1 + s2)) else ""Некорректно"") -End,"
 def check_date(d):
    d = d.split('.')
    a = int(d[2]) % 4 == 0 and int(d[2]) % 100 != 0 or int(d[2]) % 400 == 0
    if int(d[1]) <= 12:
        if (d[1]in ['01','03','05','07','08','10','12'] and int(d[0]) <= 31) or(d[1]in ['04','06','09','11']
        and int(d[0]) <= 30):
            return ""Корректная""
    if a and int(d[0]) <= 29 and d[1] == '02':
        return ""Корректная""
    if a == False and int(d[0]) <= 28 and d[1] == '02':
        return ""Корректная""
    return ""Некорректная""
i = 0
while True:
    s = input()
    if s == '.':
        break
    s1 = check_date(s)
    if s1 == ""Корректная"":
        i += 1
    print(s1)
print(i) -End,"
 d = {}
while True:
    s = input().split()
    if s[0] == '.':
        break
    if len(s) == 2:
        d[s[0]] = s[1]
    if len(s) == 1 :
        print(d[s[0]]) -End,"
 d = {}
while True:
    s = input().split(' – ')
    if s[0] == '.':
        break
    d[s[0]] = s[1]
r = [input() for i in range(int(input()))]
for i in r:
    if i in d:
        print(d[i])
    else :
        print(""Не найдено"") -End,"
 s = [i.replace("","","""").replace(""."","""").replace(""?"","""").replace(""!"","""").lower()  for i in input().split()]
s1 = {i : s.count(i) for i in s}
print(max(s1, key=s1.get), max(s1.values())) -End,"
 d = {}
while True:
    s = input().split(': ')
    if s[0] == '.':
        break
    d[s[1]] = s[0]
    d[s[0]] = s[1]
while True:
    s = input()
    if s[0] == '.':
        break 
    print(d[s] if s in d  else ""Нет данных"") -End,"
 s1, s2 = input(),{}
while True:
    s = input().split(': ')
    if s[0] == '.':
        break
    s2[s[1]] = s[0]
print(*[s2[str(s1.count(i))] if i.isalpha() else i for i in s1],sep='') -End,"
 d = {}
while True:
    s = input().split()
    if s[0] == '.':
        break
    d[s[0]] = s[1]
while True:
    s = input().split()
    if s[0] == '.':
        break
    print(""Access granted"" if s[2] == ""admin"" else ""Access granted"" if s[2] == ""user"" and
         d[s[0]] not in (""confidential"",""system"",""settings"") else ""Access denied"" if s[2] == ""experienced"" and
          d[s[0]] == ""confidential"" or d[s[0]] in (""system"",""settings"") and s[1] == ""edit""
          else ""Access granted"" if s[2] == ""experienced"" else ""Access denied"") -End,"
 d = {}
while True:
    s = [i.replace(',', """") for i in input().split()]
    if s[0] == '.':
        break
    if len(s) >= 2:
        if s[0] in d:
            d[s[0]] = d[s[0]] + s[1:]
        else:
            d[s[0]] = s[1:]
    if len(s) == 1 :
        print(*d.get(s[0]),sep=', ') if d.get(s[0]) != None else print(""Не найдено"") -End,"
 s,k,n = [i for i in input().split()],int(input()),int(input())
print(*s[n-1::k]) -End,"
 s1=['a','b','w','g','d','e','v','z','i','j','k','l','m','n','o','p','r','s','t','u','f','h','c','q','y','x','1',
    '2','3','4','5','6','7','8','9','0',]
s2 = [""•—"",""—•••"",""•——"",""——•"", ""—••"",""•"", ""•••—"", ""——••"", ""••"", ""•———"", ""—•—"",""•—••"", ""——"", ""—•"", ""———"",""•——•"",""•—•"", ""•••"", ""—"", ""••—"", ""••—•"",""••••"", ""—•—•"", ""——•—"",""—•——"", ""—••—"", ""•————"", ""••———"", ""•••——"", ""••••—"", ""•••••"", ""—••••"", ""——•••"", ""———••"", ""————•"", ""—————""]
s = input().lower()
if s[0].isalpha():
    s = [i for i in s.split()]
    for i in s:
        print( *[dict(zip(s1,s2))[i] for i in[j for j in i]],end='\t')
else:
    s = [i for i in s.split('\t')]
    for i in s:
        for j in [j for j in i.split()]:
            print(dict(zip(s2,s1))[j],end='')
        print(end=' ') -End,"
 mean_concentrations = concentrations.groupby('genus').mean()



 -End,"
 def binary_to_decimal(n):
    size, res = len(str(n)), 0
    for i in range(size):
        res = res + int(str(n)[i]) * (2**(size - i - 1))
    return int(res)
def decimal_to_binary(n):
    res = """"
    while n > 0:
        res += str(int(n) % 2)
        n = n // 2
    res = res[::-1]
    return int(res) -End,"
 import pandas as pd    
subset_1 = pd.DataFrame({ ""V1"": my_stat['V1'].head(10),  ""V3"": my_stat['V3'].head(10)})
subset_2 = pd.DataFrame({ ""V2"": my_stat['V2'].drop([0, 4]), ""V4"": my_stat['V4'].drop([0, 4])})




 -End,"
 d1 = {i : [""Предложений не было"",""0""]  for i in input().split(', ')}
m, l = int(input()), input()
while True:
    s = [i for i in input().split()]
    if s[0] == ""Аукцион"" and s[1] == ""закончен!"":
        break
    if (s[0] in l) and (int(s[len(s)-1]) > m):
        if int(s[len(s)-1]) > int(d1.get(' '.join(s[1:len(s)-1]))[1]):
            d1[' '.join(s[1:len(s)-1])] = s[0],s[len(s)-1]
for i in d1:
        print(i, *d1.get(i))  if d1.get(i)[1] != ""0"" else print(i, d1.get(i)[0])  -End,"
 import pandas as pd    
my_stat['V5'] = my_stat['V1'] + my_stat['V4']
my_stat[""V6""] = my_stat['V2'].apply(np.log)




 -End,"
 import pandas as pd    
my_stat.rename(index=str, inplace=True, columns={""V1"": ""session_value"", ""V2"": ""group"", ""V3"": ""time"", ""V4"": ""n_users""})




 -End,"
 def A(m,n):
    if m == 0:
        return n + 1
    elif m > 0 and n == 0:
        return A(m - 1, 1)
    return A(m - 1, A(m, n - 1))
n, m = int(input()),int(input())
print(A(m,n)) -End,"
 import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
iris = load_iris()
X = iris.data
y = iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,)
dt = DecisionTreeClassifier()
dt.fit(X_train,y_train)
predicted = dt.predict(X_test) -End,"
 import numpy as np
print(mat.reshape(len(mat[0]) * len(mat), 1))



 -End,"
 from operator import itemgetter
from toolz import iterate, juxt

fibSeq = lambda: map(itemgetter(0), iterate(juxt(itemgetter(1), sum), (1, 1))) -End,"
 def isbaseclass(b, d):
    return b == d or any(isbaseclass(b, c) for c in cls[d])

cls = {d: b[1:] for _ in range(int(input())) for d, *b in [input().split()]}

for _ in range(int(input())):
    print(['No', 'Yes'][isbaseclass(*input().split())]) -End,"
 import operator

_binop = lambda fn: lambda self: self.append(fn(self.pop(), self.pop()))

class ExtendedStack(list):
    sum = _binop(operator.add)
    sub = _binop(operator.sub)
    mul = _binop(operator.mul)
    div = _binop(operator.floordiv) -End,"
 def checkdup(d):
    return cls[d] is None or any(map(checkdup, cls[d]))

cls = {d: set(b[1:]) for _ in range(int(input())) for d, *b in [input().split()]}

for _ in range(int(input())):
    c = input()
    if checkdup(c):
        print(c)
    cls[c] = None -End,"
 from datetime import datetime, timedelta

print(*(datetime(*map(int, input().split())) + timedelta(int(input()))).timetuple()[:3]) -End,"
 class multifilter:
    def judge_half(pos, neg):
        return pos >= neg

    def judge_any(pos, neg):
        return pos > 0

    def judge_all(pos, neg):
        return not neg

    @staticmethod
    def _judge(judge, funcs, element):
        pos = sum(bool(f(element)) for f in funcs)
        return judge(pos, len(funcs) - pos)

    def __init__(self, iterable, *funcs, judge=judge_any):
        self._it = (i for i in iterable if self._judge(judge, funcs, i))

    def __iter__(self):
        return self._it -End,"
 from itertools import count

def primes():
    return (n for n in count(2) if all(n % i for i in range(2, int(n ** .5) + 1))) -End,"
 import re, sys
sys.stdout.writelines(filter(re.compile('cat.*cat').search, sys.stdin)) -End,"
 import re, sys
sys.stdout.writelines(filter(re.compile(r'\bcat\b').search, sys.stdin)) -End,"
 import re, sys
sys.stdout.writelines(filter(re.compile('z...z').search, sys.stdin)) -End,"
 import re, sys
sys.stdout.writelines(filter(re.compile('\\\\').search, sys.stdin)) -End,"
 import re, sys
sys.stdout.writelines(filter(re.compile(r'\b(\w+)\1\b').search, sys.stdin)) -End,"
 import re, sys
sys.stdout.writelines(re.sub(r'\ba+\b', 'argh', s, 1, re.I) for s in sys.stdin) -End,"
 import re, sys
sys.stdout.writelines(re.sub(r'\b(\w)(\w)', r'\2\1', s) for s in sys.stdin) -End,"
 import re, sys
sys.stdout.writelines(re.sub(r'(\w)\1*', r'\1', s) for s in sys.stdin) -End,"
 import re, sys
sys.stdout.writelines(filter(re.compile('(1(01*0)*1|0*)*$').match, sys.stdin)) -End,"
 import re
import requests

hrefs = lambda url: re.findall(r'<a .*?\bhref=""(.*?)""', requests.get(url).text)

url1, url2 = input(), input()
print('Yes' if any(b == url2 for a in hrefs(url1) for b in hrefs(a)) else 'No') -End,"
 import re
import requests

r = re.compile(r'<a .*?\bhref=[\'""](?:\w+://)?(\w.*?)[:/\'""]')
print(*sorted(set(r.findall(requests.get(input()).text))), sep='\n') -End,"
 import json

cls = {c['name']: c['parents'] for c in json.loads(input())}

isbase = lambda b, d: b == d or any(isbase(b, c) for c in cls[d])

for p in sorted(cls):
    print(p, ':', len({c for c in cls if isbase(p, c)})) -End,"
 import xml.etree.ElementTree as ET
from collections import Counter
from operator import itemgetter

def calc(el, depth=1):
    return sum((calc(i, depth + 1) for i in el), Counter({el.get('color'): depth}))

print(*itemgetter('red', 'green', 'blue')(calc(ET.fromstring(input())))) -End,"
 import numpy as np

x, y = [np.matrix(input(), int).reshape(int(n), int(m))
        for _ in range(2) for n, m in [input().split()]]

print(x * y.T if x.shape[1] == y.shape[1] else 'matrix shapes do not match') -End,"
 from urllib.request import urlopen
import numpy as np

X = np.loadtxt(urlopen(input()), skiprows=1, delimiter=',')
Y = X[:, 0].copy()
X[:, 0] = 1
print(*np.linalg.inv(X.T @ X) @ X.T @ Y) -End,"
 import numpy as np

def train_on_single_example(self, example, y):
    diff = y - self.vectorized_forward_pass(example.T)
    self.w += example * diff
    self.b += diff -End,"
 import numpy as np

def compute_grad_numerically_2(neuron, X, y, J=J_quadratic, eps=10e-2):
    J_diff = lambda d: [J(Neuron(neuron.w + d.reshape(-1, 1),
                                 neuron.activation_function,
                                 neuron.activation_function_derivative), X, y)]

    a = np.apply_along_axis(J_diff, 0, np.eye(len(neuron.w)) * eps)
    b = np.apply_along_axis(J_diff, 0, -np.eye(len(neuron.w)) * eps)
    return ((a - b) / (2 * eps)).T -End,"
 import numpy as np
def get_error(deltas, sums, weights):
    return np.mean(deltas @ weights * sigmoid_prime(sums), axis=0) -End,"
 from operator import mul

def modmul(a, b, m):
    return [[sum(map(mul, i, j)) % m for j in a] for i in zip(*b)]

def modpow(a, n, m):
    result = [[int(i == j) for j in range(len(a))] for i in range(len(a))]
    for i in range(n.bit_length()):
        if n >> i & 1:
            result = modmul(result, a, m)
        a = modmul(a, a, m)
    return result

print(modpow(([1, 1], [1, 0]), *map(int, input().split()))[0][1]) -End,"
 points = [list(map(int, input().split())) for i in range(int(input()))]

out = []
for p in reversed(sorted(points)):
    if not out or out[-1] > p[1]:
        out.append(p[0])

print(len(out))
print(*out) -End,"
 n, sack = map(int, input().split())
items = [(c / w, w) for _ in range(n) for c, w in [map(int, input().split())]]
cost = 0

for r, w in sorted(items, reverse=True):
    cost += r * min(sack, w)
    sack -= w
    if sack <= 0:
        break

print(cost) -End,"
 from heapq import heappush, heappop
from collections import Counter

prefix = lambda a, p: [(k, p + v) for k, v in a]
merge  = lambda a, b: (a[0] + b[0], prefix(a[1], '0') + prefix(b[1], '1'))

string = input()
heap = [(v, [(k, '')]) for k, v in reversed(Counter(string).most_common())]

while len(heap) > 1:
    heappush(heap, merge(heappop(heap), heappop(heap)))

table = heap[0][1] if len(heap[0][1]) > 1 else prefix(heap[0][1], '0')
encoded = string.translate(str.maketrans(dict(table)))

print(len(table), len(encoded))
print(*map('{0[0]}: {0[1]}'.format, table), encoded, sep='\n') -End,"
 import re

n, _ = map(int, input().split())
table = (input().replace(':', ' ').split() for _ in range(n))
pattern = '|'.join('(?P<{}>{})'.format(*map(re.escape, row)) for row in table)
print(re.sub(pattern, lambda x: x.lastgroup, input())) -End,"
 from bisect import bisect_left, bisect_right

n, m = map(int, input().split())
a, b = map(sorted, zip(*(map(int, input().split()) for _ in range(n))))
print(*(bisect_right(a, p) - bisect_left(b, p) for p in map(int, input().split())))
 -End,"
 from bisect import bisect_right

_, a, d, prev = input(), list(map(int, input().split())), [], []

for i, x in enumerate(a):
    j = bisect_right(d, [-x, i])
    if j == len(d):
        d.append([-x, i])
    else:
        if -d[j][0] < x:
            d[j] = [-x, i]

    prev.append(d[j - 1][1] if j else None)

out = [d[-1][1]]
while prev[out[-1]] is not None:
    out.append(prev[out[-1]])

print(len(out), ' '.join(str(x + 1) for x in reversed(out)), sep='\n') -End,"
 _, a, d = input(), list(map(int, input().split())), []

for x in a:
    d.append(max((z for y, z in zip(a, d) if x % y == 0), default=0) + 1)

print(max(d)) -End,"
 from functools import lru_cache

@lru_cache(None)
def sack(i, j):
    if i < 0 or j < 1:
        return 0

    return max(sack(i - 1, j), sack(i - 1, j - w[i]) + w[i] if j >= w[i] else 0)

W, n = map(int, input().split())
w = list(map(int, input().split()))
print(sack(len(w) - 1, W)) -End,"
 input()
tree = {}
for i, p in enumerate(map(int, input().split())):
    tree.setdefault(p, []).append(i)

layer = [-1]
height = 0
while layer:
    layer = [j for i in layer for j in tree.get(i, [])]
    height += 1

print(height - 1) -End,"
 from collections import deque

queue = deque()
size, count = map(int, input().split())
for arrival, duration in (map(int, input().split()) for _ in range(count)):
    while queue and queue[0] <= arrival:
        queue.popleft()

    if len(queue) >= size:
        print(-1)
    else:
        start = queue[-1] if queue else arrival
        queue.append(start + duration)
        print(start) -End,"
 import sys

input()
maxstack = []
for cmd, *args in map(str.split, sys.stdin):
    if cmd == 'push':
        maxstack.append(max(maxstack[-1:] + [int(args[0])]))
    elif cmd == 'pop':
        maxstack.pop()
    else:
        print(maxstack[-1]) -End,"
 import sys

cur_and_max = lambda a, x: (x, max(x, a[-1][1]) if a else x)
n, *a, k = map(int, sys.stdin.read().split())
left, right = [], []

for i, e in enumerate(a):
    left.append(cur_and_max(left, e))
    if i + 2 > k:
        if not right:
            while left:
                right.append(cur_and_max(right, left.pop()[0]))

        print(cur_and_max(left, right.pop()[1])[1]) -End,"
 def siftpairs(a, i):
    minidx = lambda i, j: i if j >= len(a) or a[i] <= a[j] else j
    m = minidx(i, minidx((i << 1) + 1, i + 1 << 1))
    if m != i:
        a[m], a[i] = a[i], a[m]
        yield i, m
        yield from siftpairs(a, m)

n = int(input())
a = list(map(int, input().split()))
pairs = [p for i in range(n - 2 >> 1, -1, -1) for p in siftpairs(a, i)]
print(len(pairs), *map('{0[0]} {0[1]}'.format, pairs), sep='\n') -End,"
 def pos(a, b, m=1000000000091, x=37447):
    ha, hb = (sum(e * pow(x, i, m) for i, e in enumerate(s)) % m for s in [a, b[-len(a):]])
    xp = pow(x, len(a), m)
    for i in range(len(b) - len(a), -1, -1):
        if hb == ha and b.startswith(a, i):
            yield i
        hb = (b[i - 1] + hb * x - xp * b[i + len(a) - 1]) % m

print(*reversed(list(pos(input().encode(), input().encode())))) -End,"
 tree = [list(map(int, input().split())) for _ in range(int(input()))]
roots = [[0, float('-inf'), float('inf')]] if tree else []

while roots and all(low < tree[i][0] < high for i, low, high in roots):
    roots = [[child, lo, hi]
             for i, low, high in roots
             for child, lo, hi in [[tree[i][1], low, tree[i][0]],
                                   [tree[i][2], tree[i][0], high]] if child > 0]

print('INCORRECT' if roots else 'CORRECT') -End,"
 def walk(i, f):
    return () if i == -1 else \
           (i for s in f(walk(tree[i][1], f), walk(tree[i][2], f), tree[i][0]) for i in s)

tree = [list(map(int, input().split())) for _ in range(int(input()))]
print(*walk(0, lambda left, right, val: (left, [val], right)))
print(*walk(0, lambda left, right, val: ([val], left, right)))
print(*walk(0, lambda left, right, val: (left, right, [val]))) -End,"
 def insert(head, newnode, index):
    for _ in range(index - 1):
        head = head.next

    head.next, newnode.next = newnode, head.next -End,"
 def printStrings(myset):
    it = iter(sorted(myset))
    while True:
        try:
            print(next(it))
        except StopIteration:
            break -End,"
 class Dictionary:
    def __init__(self):
        self.hashMap = dict()

    # Return the definition of word if Dictionary contains word, otherwise return None
    def find(self, word):
        return self.hashMap.get(word)

    # Insert a (word, definition) pair into Dictionary (return nothing)
    def insert(self, word, definition):
        self.hashMap[word] = definition

    # Remove word from Dictionary (return nothing)
    def remove(self, word):
        del self.hashMap[word] -End,"
 class Node:
    def __init__(self):
        self.word = False
        self.children = [None] * 26

class MultiwayTrie:
    def __init__(self):
        self.root = Node()

    def _getkey(self, c):
        return ord(c) - ord('A')
        
    def _path(self, word, node):
        yield node

        for c in word:
            node = node.children[self._getkey(c)]
            if node:
                yield node
            else:
                break

    # Return True if Lexicon contains word, otherwise return False
    def find(self, word):
        path = list(self._path(word, self.root))
        return len(path) == len(word) + 1 and path[-1].word

    # Insert word into Lexicon (return nothing)
    def insert(self, word):
        path = list(self._path(word, self.root))

        for c in word[len(path) - 1:]:
            path.append(Node())
            path[-2].children[self._getkey(c)] = path[-1]

        path[-1].word = True

    # Remove word from Lexicon (return nothing)
    def remove(self, word):
        path = list(self._path(word, self.root))
        if len(path) == len(word) + 1:
            path[-1].word = False -End,"
 def encodeString(message):
    print(*message.encode()) -End,"
 def encodeString(message):
    print(''.join(map('{:02b}'.format, map('ACGT'.index, message))))




 -End,"
 def counts(input):
    return [*map(input.encode().count, range(256))]
 -End,"
 def setRightBit(input, bit):
    return input & -2 | bit -End,"
 def setLeftBit(input, bit):
    return input & 127 | bit << 7 -End,"
 def setBit(input, n, bit):
    return input & ~(1 << n) | bit << n -End,"
 print(*(int(((8 * n + 1) ** 0.5 + 1) / 2) for n in range(int(input())))) -End,"
 from functools import lru_cache

print(*map(lru_cache()(f), (int(input()) for _ in range(int(input())))), sep='\n') -End,"
 from collections import Counter

print(*(k for k, v in Counter(input().split()).items() if v > 1)) -End,"
 print(sum(map(int, iter(input, 'The End')))) -End,"
 print(next(i for n in [int(input())] for i in range(2, n + 1) if n % i == 0)) -End,"
 def kaprekar_loop(n):
    cur, done = str(n), set()
    if len(cur) in [3, 4, 6] and int(cur[::-1]) != 1 and len(set(cur)) != 1:
        while not done or cur != prev:
            if cur in done:
                print('Следующее число - {}, кажется процесс зациклился...'.format(cur))
                break

            print(cur)
            done.add(cur)
            prev, cur = cur, str(int(''.join(sorted(cur, reverse=True))) - int(''.join(sorted(cur))))
    else:
        print('Ошибка! На вход подано число {}, не удовлетворяющее условиям процесса Капрекара'.format(n)) -End,"
 import math

def def_e(x, dx=0.00001):
    return (math.exp(x + dx) - math.exp(x)) / dx -End,"
 from itertools import filterfalse

def even_elements(l):
    return list(filterfalse(2 .__rmod__, l))




 -End,"
 def front_x(words):
    return sorted(words, key=lambda x: (x[:1] != 'x', x)) -End,"
 from functools import lru_cache

@lru_cache()
def fib(n):
    return n if n < 2 else fib(n - 2) + fib(n - 1) -End,"
 def is_prime(n):
    return all(n % i for i in range(2, int(n ** .5) + 1)) -End,"
 def both_ends(s):
    return s[:2] + s[-2:] if len(s) > 1 else ''

print(both_ends(input())) -End,"
 def derivative(f, x0=0, dx=1e-6):
    return round((f(x0 + dx) - f(x0)) / dx, 3) -End,"
 def deep(a):
    return a if not isinstance(a, list) else list(map(deep, a))

L2 = deep(L1)




 -End,"
 def verbing(s):
    return s if len(s) < 3 else s + 'ing' if 'ing' not in s else s + 'ly' -End,"
 def front_back(a,b):
    return a[:-(len(a) // 2)] + b[:-(len(b) // 2)] + a[-(len(a) // 2):] + b[-(len(b) // 2):] -End,"
 def mimic_dict(string):
    s = [''] + string.split()
    return {w: [s[j] for j in range(1, len(s)) if s[j - 1] == w] for w in set(s)} -End,"
 def mimic_dict(string):
    words = [''] + string.split()
    out = {}
    for word1, word2 in zip(words, words[1:]):
        out.setdefault(word1, []).append(word2)

    return out -End,"
 from itertools import accumulate
from random import choice

def print_mimic(mimic, word):
    return ' '.join(accumulate([word] * 200, lambda x, y: choice(mimic.get(x, mimic[''])))) -End,"
 L2 = list(filter(len, L1)) -End,"
 import sys, numpy as np

print(*np.linalg.solve(*np.hsplit(np.loadtxt(sys.stdin), [2])).ravel()) -End,"
 import sys
import numpy as np

try:
    print(*np.linalg.solve(*np.hsplit(np.loadtxt(sys.stdin), [2])).ravel())
except np.linalg.LinAlgError:
    print('Система не имеет решений') -End,"
 import sys
import numpy as np

n = int(input())
try:
    print(*np.linalg.solve(*np.hsplit(np.loadtxt(sys.stdin), [n])).ravel())
except np.linalg.LinAlgError:
    print('Система не имеет решений') -End,"
 import sys
import numpy as np

n = int(input())
a = np.loadtxt(sys.stdin)
print(*np.linalg.solve(a[:, :1] ** np.arange(n), a[:, 1])) -End,"
 def f(x):
    return (x + 1) ** 2 -End,"
 import math

def S(x):
    return 72.60725303413392 * x * x

def S_ceil(x):
    return math.ceil(S(x)) -End,"
 index = next(i for i, (a, b) in enumerate(zip(L, L[1:])) if abs(a - b) == 1) -End,"
 with open(""file.txt"") as f:
    filein, fileout, line = map(str.strip, f)

with open(filein) as r, open(fileout, 'a') as w:
    w.write(list(r)[int(line)].lower()) -End,"
 a, b = divmod(int(input()), 9)
print(b, '9' * a, sep='') -End,"
 from itertools import combinations
import sys

inversions = sum(x > y for x, y in combinations(map(int, sys.stdin.read().split()), 2))
print('Не повезло...' if inversions % 2 == 0 else 'Бинго!') -End,"
 from itertools import combinations

print((-1) ** sum(x > y for x, y in combinations(map(int, input().split()), 2))) -End,"
 def list_pull(L):
    return [x for y in L for x in list_pull(y)] if isinstance(L, list) else [L] -End,"
 from toolz import cons

def euqSeq(a, b):
    if b:
        yield from cons((a, b), euqSeq(b, a % b)) -End,"
 import numpy as np

def super_L(n):
    return np.linalg.matrix_power(np.array([[0, 1], [1, 1]], 'O'), n).dot([2, 1])[0] if n else 2 -End,"
 import numpy as np

args = input().split()

try:
    Z = np.zeros(tuple(map(int, args)))
except ValueError:
    Z = np.zeros(tuple(map(int, args[:-1])), args[-1]) -End,"
 print(Z.nbytes) -End,"
 import numpy as np

Z = np.eye(1, int(input()), int(input())).ravel() -End,"
 import numpy as np

Z = np.arange(int(input()), int(input()) + 1) -End,"
 Z = np.flip(Z, 0) -End,"
 import numpy as np

Z = np.arange(int(input())).reshape(*map(int, input().split())) -End,"
 print(Z[Z > 3].ravel().tolist()) -End,"
 import numpy as np

np.random.seed(42)
Z = np.random.rand(*map(int, input().split())) -End,"
 import numpy as np

Z = np.ones(tuple(map(int, input().split())))
Z[1:-1, 1:-1] = 0 -End,"
 Z = numpy.pad(Z, 1, 'constant') -End,"
 h, x, y = (int(input()) for _ in 'hxy')
print((h - y - 1) // (x - y) + 1) -End,"
 from operator import add, sub, mul, truediv as div

x, y, op = float(input()), float(input()), input()
print({""+"": add, ""-"": sub, ""*"": mul, ""/"": div}[op](x, y)) -End,"
 isZero = lambda n: lambda t: lambda f: n(lambda _: f)(t) -End,"
 import sys
from functools import lru_cache

def sack(ws, w):
    @lru_cache(None)
    def go(i, w):
        return 0 if i < 0 or w == 0 else max(
            go(i - 1, w),
            go(i - 1, w - ws[i]) + ws[i] if w >= ws[i] else 0)

    return go(len(ws) - 1, w)

w, _, *ws = map(int, sys.stdin.read().split())
print(sack(ws, w)) -End,"
 f = input()
if f == ""треугольник"": 
  a = int(input())   
  b = int(input())
  c = int(input())
  p = (a + b + c) / 2 
  s = (p*((p - a) * (p - b) * (p - c))) ** 0.5
elif f == ""прямоугольник"":
  a = int(input()) 
  b = int(input())
  s = a * b
elif f == ""круг"":    
  r = int(input())
  s = 3.14 * r ** 2
print (s) -End,"
 a = int(input()) 
b = int(input())
c = int(input())
m = min(a, b, c)
m2 = max(a, b, c)
print(m2)
print(m)
print(a+b+c-m-m2) -End,"
 a = input()
a1 = int(a[0])
a2 = int(a[1])
a3 = int(a[2])
a4 = int(a[3])
a5 = int(a[4])
a6 = int(a[5])

if (a1 + a2 + a3) == (a4 + a5 +a6):
        result = str('Счастливый')
else:   result = str('Обычный')
print (result)
 -End,"
 n = int(input())
if ((n - 1) % 10 == 0) and (n != 11) and ((n - 11) % 100 != 0):   # правило для 1, 21, 31, 41, 101, 121 и исключение для 11, 111, 211, 311 и т.д.
    print(n, 'программист')
elif ((n - 12) % 100 == 0) or ((n - 13) % 100 == 0) or ((n - 14) % 100 == 0): # исключение с окончанием на 12, 13, 14
  print(n, 'программистов')
elif ((n - 2) % 10 == 0) or ((n - 3) % 10 == 0) or ((n - 4) % 10 == 0): # исключение с окончанием на 2, 3, 4
  print(n, 'программиста')
else: print(n, 'программистов') -End,"
 x = int
s = 0
while x != 0:
  x = int(input())
  s += x
else: print(s) -End,"
 a = int(input())
b = int(input())

if a > b :
  min = a
else: min = b

while (((min % a) != 0) or ((min % b) != 0)):
      min +=1
print(min) -End,"
 a = 0

while a <= 100 :
  a = int(input())
  if a > 100 :
    break
  if a < 10 :
    continue
  print(a) -End,"
 n = int(input())
f1 = 1
f2 = 0
fn, i = 1, 1
while (i <= n) :
  fn = f1 + f2
  f1, f2 = f2, fn
  i+=1
print(fn) -End,"
 n = int(input())
f1 = 1
f2 = 0
fn, i = 1, 1
while (i <= n):
    fn = f1 + f2
    if fn > 9:
       fn -= 10
    f1, f2 = f2, fn
    i += 1
print(fn)
 -End,"
 a, b, c, d = int(input()), int(input()), int(input()), int(input())

for j in range(c, d + 1):
    print("""", j, sep=""\t"", end="""")
print()
for i in range(a, b + 1):  
    print(i, end=""\t"")
    for j in range(c, d + 1):
        print(i*j, end=""\t"")
    print()
     -End,"
 a, b = int(input()), int(input())
a1 = 0
s = 0
count = 0
for i in range(a, b +1):
    if i % 3 == 0:
       s = s + i
       a1 = i
       count += 1
print(s/count) -End,"
 x = input()
gn = x.lower().count('g')*100
cn = x.lower().count('c')*100
print((gn + cn)/len(x))
 -End,"
 x = input()
S, single, double = str(), str(), str()
cnt = 1
prev = x[0]

if len(x) == 1:
    print(x+'1')
else:
    for i in x[1:]:
      if prev == i:
        cnt += 1
        double = prev+str(cnt)
        single = str()
      else: 
          if double != """":
              cnt = 1
              prev = i
              single = prev + '1'
              S = S + double
              double = str()
              continue
          else:
            cnt = 1
            single = prev + '1' 
            S = S + double + single
            single = i + '1'
            prev = i

print(S+double+single)
     -End,"
 x = [int(i) for i in input().split()]
print(sum(x)) -End,"
 x = [int(i) for i in input().split()]
n = len(x)
sum = int()
x1 = list()
j = 1

if n == 1:
  x1 = x[0]
  print(x1)
else: 
  for i in range(-1, n-2):
        sum = x[i] + x[j]
        x1.append(sum)
        j+=1
  sum = x[n-2] + x[0]
  x1.append(sum)  
  print(' '.join(map(str, x1)))
 -End,"
 spisok = input().split()
x = sorted(spisok)
j = 1
n = len(x)
double = False

for i in x[:n-1]:
  if i != x[j]:
    j += 1
    double = False
  else:
    if double:
      j += 1
      continue
    else:
      double = True
      print(i, end = "" "")
      j += 1
 -End,"
 a = int(input())
list = []
list.append(a)
s = a
while s != 0:
  b = int(input())
  s = s + b
  list.append(b)

print(sum([i ** 2 for i in list])) -End,"
 s = list()
b = 1
n = int(input())

if n == 1:
    print(n)
else: 
    while len(s) < n:
         c = [b for i in range(b)]
         s += c
         b += 1
for i in s[:n]:
    print(str(i), end="" "")
 -End,"
 lst = [int(i) for i in input().split()]
n = int(input())
for j in range(len(lst)):
    if lst[j] == n:
      print(j, end = "" "")
    elif lst.count(n) == 0:
      print('Отсутствует')
      break -End,"
 def f(x):
    if -2 >= x:
        return (1 - (x+2)**2)
    if -2 < x <= 2:
        return -1*(x/2)
    else:
        return ((x - 2)**2 + 1) -End,"
 def modify_list(lst):
    n = len(lst)
    for i in lst[0:n]:
      if i % 2 == 0:
        i = i // 2
        lst.append(i)
        
    del lst[0:n] -End,"
 def update_dictionary(d, key, value):
        if key in d.keys():
            d[key].append(value)
        else: 
            key = 2 * key
            if key in d.keys():
                   d[key].append(value)
            else: d[key] = [value] -End,"
 x = input()
slova = x.lower().split()
d = {}
for i in slova:
    kol = slova.count(i)
    d[i] = kol
for i, j in d.items():
    print(i, j, end="" "")
    print() -End,"
 n = int(input())
d = dict()
for i in range(n):
    x = int(input())
    if x in d.keys():
        print(d[x])
    else:
        d[x] = f(x)
        print(d[x]) -End,"
 res = list()
n = int(input())
for i in range(n):
    res.append(input().split("";""))
for i in range(len(res)):
    for j in range(4):
        if res[i][j].isdigit() == True:
            res[i][j] = int(res[i][j])

uniq = set()
for i in range(len(res)):
    for j in [0, 2]:
        uniq.add(res[i][j])
d = {}
for i in uniq:
    vsego_igr = 0
    pobed = 0
    nich = 0
    lose = 0
    vsego_och = 0
    for j in range(len(res)):
        for k in [0,2]:
            if i == res[j][k]:
                vsego_igr += res[j].count(i)
                m = max(res[j][1],res[j][3])
                if res[j][1] == res[j][3]:
                    nich += 1
                    vsego_och += 1
                elif res[j][k+1] == m:
                    pobed += 1
                    vsego_och += 3
                else: lose += 1 
    vsego_och = (pobed * 3 + nich * 1)
    d[i] = [vsego_igr, pobed, nich, lose, vsego_och]
for key, value in d.items():
    print(key, ':', ' '.join(str(i) for i in value), sep='')



 -End,"
 spisok, kod = [i for i in input()], [i for i in input()]

c, ck = [i for i in input()], [i for i in input()]
for i in c:
    for j in range(len(spisok)):
            if i == spisok[j]:
                i = kod[j]
                print(i, end = """")
                i = "" ""
print()
for i in ck:
    for j in range(len(kod)):
            if i == kod[j]:
                i = spisok[j]
                print(i, end = """")
                i = "" "" -End,"
 text = set()
dict = [i for i in range(int(input()))]
for i in range(len(dict)):
    dict[i] = input().lower()
n = int(input())
for i in range(n):
    for j in input().lower().split():
        text.add(j)
text = text - set(dict)
for i in text:
    print(i) -End,"
 import sys

for i in sys.argv[1::]:
    print(i, end="" "")




 -End,"
 mx, ln = [], []
n = input()
while n!=""end"":
    for i in n.split():
        ln.append(int(i))
    mx.append(ln)
    ln = []
    n = input()

big = [[0 for j in range(len(mx[0])+2)] for i in range(len(mx)+2)]
bgcol, bgrow = len(big[0]), len(big)

for i in range(1, bgrow -1):
    for j in range(1, bgcol -1):
        big[i][j] = mx[i-1][j-1]
        
for i in 0, -1:
    for j in range(1, bgcol-1):
        if i == 0:
            big[i][j] = big[i-2][j]
        else: big[i][j] = big[1][j]
        
for i in range(1, bgrow-1):
    for j in 0, -1:
        if j== 0:
            big[i][j] = big[i][j-2]
        else: big[i][j] = big[i][1]

for i in range(1, bgrow -1):
    for j in range(1, bgcol -1):
        mx[i-1][j-1] = big[i-1][j]+ big[i+1][j]+ big[i][j-1]+big[i][j+1]
for i in mx:
    for j in i:
        print(j, end="" "")
    print()

 -End,"
 def closest_mod_5(x):
    return ((x // 5) * 5) + 5 -End,"
 n, k = map(int, input().split())
def C(n, k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    else: 
        n, k = int(n), int(k)
        return C(n - 1, k) + C(n - 1, k - 1)
print(C(n, k)) -End,"
 class Buffer:
    
    def __init__(self):
        self.list = []
        
    def add(self, *arg):
        self.list.extend(arg)
        while len(self.list) >= 5:
            print(sum(self.list[0:5]))
            del self.list[0:5]
        return self.list
        
    def get_current_part(self):
        return self.list -End,"
 class LoggableList(list, Loggable):
    def append(self, n):
        msg = n
        x = super(LoggableList, self).append(n)
        return self.log(msg) -End,"
 class NonPositiveError(Exception):
    pass

class PositiveList(list):
    def append(self, x):
        if x > 0:
            return list.append(self, x)
        else:
            raise NonPositiveError(""Nooooo"") -End,"
 import datetime

year, month, day = map(int, input().split())

date = datetime.date(year, month, day)
date += datetime.timedelta(days = int(input()))

print(date.year, date.month, date.day) -End,"
 a, b = map(int, input().split())

def gcd(a, b):
    ma, b = max(a, b),  min(a, b)

    if ma % b == 0:
        return b
    else:
        while ma % b != 0:
            c = ma % b
            ma, b = b, c
        return b

print(gcd(a, b)) -End,"
 class multifilter:
    def judge_half(pos, neg):
        if pos >= neg:
            return True
        else: return False

    def judge_any(pos, neg):
        if pos >= 1:
            return True
        else: return False

    def judge_all(pos, neg):
        if neg == 0:
            return True
        else: return False

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.judge = judge
        self.funcs = funcs

    def __iter__(self):
        for i in self.iterable:
            pos, neg = 0, 0
            for f in self.funcs:
                if f(i):
                    pos += 1
                else: neg += 1
            if self.judge(pos, neg):
                yield i -End,"
 def primes():
    x = 1
    while True:
        x += 1
        count = 0
        for i in range(2, (int(x ** 0.5)) + 1):
            if x % i == 0:
                count += 1
        if count == 0:
            yield x -End,"
 def mod_checker(x, mod=0):
    return lambda y: y % x == mod  




 -End,"
 s, t = input(), input()

count = 0
n = 0
while n <= len(s):
    new = s[n:len(s)+1].find(t)
    if new == -1:
        break
    else: 
        n += new + 1
        count += 1
print(count) -End,"
 import sys

for line in sys.stdin:
    line = line.rstrip()
    if line.count(""cat"") >=2:
        print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.strip()
    if re.search(r'\bcat\b', line):
        print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.strip()
    if re.search(r'z...z', line):
        print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.strip()
    if re.search(r'\\', line):
        print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""human"", ""computer"", line)) -End,"
 '' INPUT in format: <number> <unit_from> in <unit_to>
Convert from one unit to another'''

value, unit_from, unit_to = [i for i in input().split() if i != ""in""]
value = float(value)

dict = dict(mile=[1609, ""m""],
            km=[1000, ""m""],
            foot=[0.3048, ""m""],
            inch=[0.0254, ""m""],
            m=[1, ""m""],
            yard=[0.9144, ""m""],
            cm=[0.01, ""m""],
            mm=[0.001, ""m""],
            )

temp = dict[unit_from]
temp_value = temp[0]*value      #calculate the result in meters
if temp[1] != unit_to:
    temp = dict[unit_to]
    temp_value = temp_value / temp[0]
    print(""{:.2e}"".format(temp_value))
else:
    print(""{:.2e}"".format(temp_value))


 -End,"
 def modify_list(x):
    x[:] = [(i//2) for i in x if i % 2 == 0]
     -End,"
 lst = [int(i) for i in input().split()]
num = int(input())
if num not in lst:
    print(""None"")
else:
    for i in range(len(lst)):
        if lst[i] == num:
            print(i, end="" "")
      
    



 -End,"
 north, vest = 0,0
n = int(input())
for i in range(n):
    direction, value = input().split()
    value = int(value)
    if direction == ""север"":
        north += value
    elif direction == ""юг"":
        north -= value
    elif direction == ""восток"":
        vest += value
    else: vest -= value

print(vest, north) -End,"
 import requests
import re

A = requests.get(str(input()))
B = str(input())
count = 0
pattern = r""\""(http\S+)\""""
linksOnA = re.findall(pattern, A.text)
for link in linksOnA:
    linksOnC = re.findall(pattern, requests.get(link).text)
    if B in linksOnC:
        print(""Yes"")
        count = 1
        break
if count == 0:
    print(""No"")

    
        
            

 -End,"
 from xml.etree import ElementTree as ET


root = ET.fromstring(input())
dict = dict(red=0, blue=0, green=0)
dict[root.attrib[""color""]] = 1
value = 2

def func(root, value):
    for child in root:
        key = child.attrib[""color""]
        dict[key] += value
        if len(child) > 0:
            func(root=child, value=value+1)
        else:
            continue

for child in root:
    key = child.attrib[""color""]
    dict[key] += value
    if len(child) > 0:
        func(root=child, value=value+1)
    else: continue

print(dict['red'], dict['green'], dict['blue'])
 -End,"
 stroka = ""_"".join(map(str,input().split()))
print(stroka)




 -End,"
 import re

print(re.sub(r""\s+"", ""_"", input()))

 -End,"
 code = [i for i in input()]
decode = []
repeat = 1
for i in range(len(code)):
    if code[i].isalpha():
        letter = code[i]
        decode.append(repeat*letter)
        repeat = 1
    else: 
        if code[i-1].isdigit():
            repeat = int(str(repeat) + code[i])
        else:
            repeat = int(code[i])
            
print("""".join(map(str, decode))) -End,"
 alphabet = ' abcdefghijklmnopqrstuvwxyz'
step = int(input())
text = input().strip()

lenght = len(alphabet)
shift = step % lenght

print(""Result: \"""", end="""")
for letter in text:
    index = (alphabet.index(letter) + shift)
    print(alphabet[index-lenght] if index >= lenght else alphabet[index], end="""")
print('""')
 -End,"
 print('{0} and {1} sat in the tree.\n{0} had fallen, {1} was stolen.\n'.format(str(input()), str(input()))+
      'What\'s remaining in the tree?') -End,"
 underscore = input().split(""_"")
for word in underscore:
    print("""".join(word[0].upper()+word[1:]), end="""")
 -End,"
 operator = {
    ""plus"": ""+"",
    ""minus"": ""-"",
    ""multiply"": ""*"",
    ""divide"": ""//""
    }

a, key, b = input().split()
print(eval(a + operator[key] + b)) -End,"
 keys = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
deck = {
    key:value
    for key, value in zip(keys, range(6,15))
    }

First, Second = input().split()
Suit = input()


if First == Second:
    print(""Error"")
elif First[-1] == Second[-1]:
    print(""First"" if deck[First[:-1]] > deck[Second[:-1]]
          else (""Error"" if deck[First[:-1]] == deck[Second[:-1]] else ""Second""))
else:
    print(""First"" if First[-1] == Suit
           else (""Second"" if Second[-1] == Suit else ""Error""))
 -End,"
 row, col = input().split()
row, col = int(row), int(col)
field = [
    [(0 if i == ""."" else 1)
        for i in input()]
        for i in range(row)
        ]

def ExtendedField(row, col):
    newfield = [[0 for i in range(col + 2)]for j in range(row + 2)]
    for i in range(row):
        newfield[i + 1][1:col + 1] = field[i][0:col]
    return newfield

newfield = ExtendedField(row, col)
for i in range(1, row+1):
    for j in range(1, col+1):
        x = newfield[i][j]
        if x == 1:
            print(""*"", end="""")
        else:
            xi = i - 1
            xj = j - 1
            res = (
                sum(newfield[xi+0][xj:(xj+3)])+
                sum(newfield[xi+1][xj:(xj+3)])+
                sum(newfield[xi+2][xj:(xj+3)])
                ) - x
            print(res, end="""")
    print() -End,"
 dict = {}

for i in range(int(input())):  
    tmp = [i for i in input().split() if i.isalpha()]
    child, parent = tmp[0], tmp[1:1000]
    if parent == []:
        parent = child
    dict.update({child:(parent)})
    
def get_parent(parent, child, visited = []):
        visited += [child]
        if child == parent:
            return ""Yes""
        elif parent in dict[child]:
            return ""Yes""
        for every in dict[child]:
            if every not in visited:
                if every in dict:
                    child = every
                    newpath = get_parent(parent, child, visited)
                    if newpath==""Yes"":
                        return ""Yes""
                else: continue
        return ""No""

for i in range(int(input())):
    parent, child = input().split()
    print(get_parent(parent, child, visited = [])) -End,"
 def filling(storage, W, backpack = 0):    
    for value, item in storage:
        if item <= W:
            W -= item 
            backpack += value * item
        elif item > W:
            backpack += value * W
            return backpack
    if W > 0: return backpack
    
n, W = map(int, input().split())
storage = []
for num in range(n):
    cost, weight = map(int, input().split())
    storage.append((cost/weight, weight))
storage = sorted(storage, reverse = True)
backpack = filling(storage, W)
print(""{:.3f}"".format(backpack))
 -End,"
 def find_dots(otrezki):
    result = []
    count, i = 0, 0
    while count < (len(otrezki)):
        if otrezki[i][0] == None:
            i += 1
            continue
        else:
            point = otrezki[i][0]
        for j in range(len(otrezki)):
            if otrezki[j][0] != None:
                if i == j:
                    otrezki[j][0], otrezki[j][1] = None, None
                    count += 1
                else:
                    if otrezki[j][0] >= point >= otrezki[j][1]:
                        otrezki[j][0], otrezki[j][1] = None, None
                        count += 1
        result.append(point)
        i += 1
    return result

otrezki = []
for count in range(int(input())):
    a, b = map(int, input().split())
    if a > b: 
        a, b = b, a
    otrezki.append([b, a])
otrezki = sorted(otrezki)
res = find_dots(otrezki)
print(len(res))
print("" "".join(str(i) for i in res)) -End,"
 n = list(map(int, input().split()))
if len(n) == 1:
    print(""Jolly"")
else:
    diff = sorted([abs(n[i-1] - n[i]) for i in range(1, len(n))])
    etalon = list(map(int, range(1, len(n))))
    if diff == etalon:
        print(""Jolly"")
    else: print(""Not jolly"") -End,"
 n = int(input())
x = [n]
while n > 1:
    if n % 2 == 0:
        n = n // 2
        x.append(n)
    else:
        n = n * 3 + 1
        x. append(n)
print(*x) -End,"
 def gen(n):
    yield n
    while n > 1:
        n = n // 2 if n % 2 == 0 else n * 3 + 1
        yield n
    return

for i in gen(int(input())):
    print(i, end="" "")
     -End,"
 import sys
n = input()
values = [int(i.strip()) for i in sys.stdin]
dict = {}
for x in values:
    if x not in dict:
        dict[x] = f(x)
    print(dict.get(x)) -End,"
 stroka = input()+'.'
x = list(stroka[::-1])
prefix = 1
mem = x.pop()
while x:
    item = x.pop()
    if item == mem:
        prefix += 1
    else:
        print(prefix if prefix != 1 else '', end='')
        print(mem, end='')
        mem = item
        prefix = 1 -End,"
 import re

def split_encode_series(string):
    pattern = r'((\w)\2*)'
    matches = re.findall(pattern, string)
    res = [(x.count(y), y) for x, y in matches]
    for (x, y) in res:
        print(str(x) + y if x > 1 else y, end="""")
    return
    
split_encode_series(input()) -End,"
 def sequence(limit, lenght = 1, repeat = 0, i = 1):
    yield str(i)
    for i in range(2, limit + 1):
        while repeat < i:
            repeat += 1
            lenght += 1
            yield str(i)
            if lenght == limit:
                return
        else: 
            repeat = 0
        
def main():
    limit = int(input())
    for item in sequence(limit):
        print(item, end = "" "")
        
main()
         -End,"
 def collect_parents(exc, dict, parents = []):
    if dict[exc] != 'None':
        if dict[exc] not in parents:
            parents.extend(dict[exc])
            for parent in dict[exc]:
                exc = parent
                collect_parents(exc, dict, parents)
                return parents
    return parents
    
def check_order(exc, parents, exceptions):
    for parent in parents:
        if parent in exceptions:
            print(exc)
            parents[:] = []
            return
    parents[:] = []

def main():
    dict = {}

    for index in range(int(input())):
        parent = ""None""
        list = input().split()
        child, parent = list[0], list[2:]
        dict.update({child: parent})
        
    exceptions = []   
    
    for index in range(int(input())):
        exc = input()
        if exc in exceptions:
            print(exc)
            continue
        check_order(exc, collect_parents(exc, dict), exceptions)
        exceptions.append(exc)
        
main() -End,"
 import json


def task(data, leaf, path):
    for i in range(len(data)):
        if leaf in data[i]['parents']:
            el = data[i]['name']
            path.add(el)
            task(data, data[i]['name'], path)
    return path


def main():
    data = json.loads(input()) 
    leaves = sorted([data[i]['name'] for i in range(len(data))])
    
    for leaf in leaves:
        ans = task(data, leaf, path = set())
        print(leaf, "":"", len(ans) + 1)
    
    
main()
 -End,"
 dict = {}
number, length = input().split()
for i in range(int(number)):
    temp = input()
    dict[temp[3:]] = temp[0]
stroka = input()
s = str()

code = """"
for letter in stroka:
    code += letter
    if code in dict:
        s += dict[code]
        code = """"
print(s)
 -End,"
 from collections import Counter


marks = Counter(input().split())
total = sum(marks[i] for i in marks)

print('{:.2f}'.format(marks['A']/total))

 -End,"
 from collections import Counter

x = Counter(input().lower())
y = Counter(input().lower())

print(""True"" if x == y else ""False"")

 -End,"
 lib = {}
for item in input().split():
    lib[len(item)] = lib.get(len(item), 0) + 1
    
for key, value in sorted(lib.items()):
    print(key, "": "", value, sep='')

 -End,"
 from collections import Counter

d = Counter([len(i) for i in input().split()])
print(*[f'{key}: {value}' for key,value in sorted(d.items())], sep='\n')
 -End,"
 x = int(input())
print(any([x == -10, -5 < x <= 3, 8 < x < 12, x >= 16])) -End,"
 def fizz_buzz(a, b, ls=[]):
    for el in range(a, b + 1):
        if el % 3 == 0 and el % 5 == 0:
            el = ""FizzBuzz""
        elif el % 5 == 0:
            el = ""Buzz""
        elif el % 3 == 0:
            el = ""Fizz""
        ls += [el]
    return ls


a, b = map(int, input().split())
ans = fizz_buzz(a, b)
print(*ans, sep='\n')

 -End,"
 def get_int(start_message: str, error_message: str, end_message: str):
    try:
        x = int(input(start_message + ""\n""))
        print(end_message)
        return int(x)
    except:
        return get_int(error_message, error_message, end_message)
       -End,"
 from collections import Counter

s = Counter(map(int, input().split()))
print(*[key for key, value in s.items() if value > 1])

 -End,"
 stroka = input().split()
print(*set([i for i in stroka if stroka.count(i) > 1]))
 -End,"
 def LCD(numbers):
    base = { 
            0: ["" -- "", ""|  |"", ""|  |"", ""    "", ""|  |"", ""|  |"", "" -- ""],
            1: [""    "", ""   |"", ""   |"", ""    "", ""   |"", ""   |"", ""    ""],
            2: ["" -- "", ""   |"", ""   |"", "" -- "", ""|   "", ""|   "", "" -- ""],
            3: ["" -- "", ""   |"", ""   |"", "" -- "", ""   |"", ""   |"", "" -- ""],
            4: [""    "", ""|  |"", ""|  |"", "" -- "", ""   |"", ""   |"", ""    ""],
            5: ["" -- "", ""|   "", ""|   "", "" -- "", ""   |"", ""   |"", "" -- ""],
            6: ["" -- "", ""|   "", ""|   "", "" -- "", ""|  |"", ""|  |"", "" -- ""],
            7: ["" -- "", ""   |"", ""   |"", ""    "", ""   |"", ""   |"", ""    ""],
            8: ["" -- "", ""|  |"", ""|  |"", "" -- "", ""|  |"", ""|  |"", "" -- ""],
            9: ["" -- "", ""|  |"", ""|  |"", "" -- "", ""   |"", ""   |"", "" -- ""]
            }
            
    print(""x"" + ""-"" * (5 * len(numbers) - 1) + ""x"")
    
    for i in range(0, 7):
        line = """"
        for num in range(len(numbers)):
            line += base[numbers[num]][i] + "" "" if num != len(numbers) - 1 else base[numbers[num]][i]
        print(""|"" + line + ""|"")
        
    print(""x"" + ""-"" * (5 * len(numbers) - 1) + ""x"")
    return


def main():
    numbers = [int(i) for i in input()]
    LCD(numbers)
                
main()
             -End,"
 def create_dict_from_pattern(values = {}):
    pattern = '''\
I = 1
V = 5
X = 10
L = 50
C = 100
D = 500
M = 1000'''.split('\n')
    
    for line in pattern:
        key, value = map(str, line.split(' = '))
        values[int(value)] = key
    return values
    
    
def convert(dec, values, temp = []):
    for num in dec:
        if num == 0:
            continue
        elif num in values:
            temp.extend(values[num])
        else:
            if num in [4, 9, 40, 90, 400, 900]:
                bigger = min([x for x in sorted(list(values)) if x > num])
                dec = [bigger - num, bigger]
                convert(dec, values, temp)
            else:
                smaller = max([x for x in sorted(list(values)) if x < num])
                dec = [smaller, num - smaller]
                convert(dec, values, temp)
    return temp
        
        
def main():
    values = create_dict_from_pattern()
    s = input()
    if int(s) in values:
        print(values[int(s)])
    else:
        row = [1000, 100, 10, 1]
        s = s.zfill(4)
        dec = [row[i] * int(s[i]) for i in range(4)]

        roman = convert(dec, values)
        print(*roman, sep="""")
        return
    
    
main()  
 -End,"
 command = input()
while command != ""End"":
    print(""Processing "" + ""\"""" + command + ""\"""" + "" command..."")
    command = input()
else:
    print(""Good bye!"")
           -End,"
 row, col = map(int, input().split())
matrix = [input().split() for i in range(row)]
for i in range(col):
    print(*[matrix[j][i] for j in range(row)]) -End,"
 n = int(input())
X = [[0] * n for i in range(n)]
row, col, point = 0, 0, 1

while point <= n * n:
    X[row][col] = point
    if row <= col + 1 and row + col < n - 1:
        col += 1
    elif row < col and row + col >= n - 1:
        row += 1
    elif row >= col and row + col > n - 1:
        col -= 1
    else:
        row -= 1
    point += 1
    
for i in range(n):
    print(*X[i]) -End,"
 stroka = input()
sub = input()
indexes = []
ans = stroka.find(sub)
if ans == -1:
    print(ans)
else:
    while ans != -1:
        indexes.extend([ans])
        ans = stroka.find(sub, ans + 1)
    print(*indexes) -End,"
 a, b = list(map(int, input().split('/')))
while True:
        res = divmod(a, b)
        print(res[0], end="" "")
        if res[1] != 0:
            a = b
            b = res[1]
        else: break -End,"
 def hanoi(n, i, k):
    if n == 1:
        return print(f""{i} - {k}"")
    else:
        tmp = 6 - i - k
        hanoi(n - 1, i, tmp)
        print(f""{i} - {k}"")
        hanoi(n - 1, tmp, k)
        
n = int(input())
i = 1
k = 3
hanoi(n, i, k) -End,"
 def curve(n):
    if n == 0:
        return
    else:
        for i in curve(n - 1):
            yield i
        for i in [60, -120, 60]:
            yield i
            for i in curve(n - 1):
                yield i

n = int(input())
for i in curve(n):
    print(""turn"", i) -End,"
 def check(pole, width, height):
    #обход всех точек поля и печать расстановки для 2 поколения
    alive = 0
    for row in range(height):  # ограничение точек перебора в высоту
        for col in range(width):  # ограничение точек перебора в ширину
            for j in [-1, 0, 1]:  # шаг движения по строкам
                for k in [-1, 0, 1]:  # шаг движения по столбцам
                        X = row + j if row + j < height else 0
                        Y = col + k if col + k < width else 0
                        alive += pole[X][Y].count(""X"")
                
            if pole[row][col] is ""."":
                print(""X"" if alive == 3 else ""."", end="""")
            elif pole[row][col] is ""X"":
                print(""X"" if 3 <= alive <= 4 else ""."", end="""")
            alive = 0
        print()
    return 

def main():
    height, width = map(int, input().split())
    pole = [[i for i in input()] for j in range(height)]

    check(pole, width, height)
    
if __name__ == ""__main__"":
    main()
     -End,"
 s, sub = input(), input()
index = s.find(sub)
while s:
    print(index, end="" "")
    index = s.find(sub, index + 1 if len(s) - index >= len(sub) else -1)
    if index == -1:
        break
         -End,"
 script = {}

s = '''
I = 1
V = 5
X = 10
L = 50
C = 100
D = 500
M = 1000'''

#создаем словарь с таблицей значений
for line in s[1:].splitlines():
    key, value = line.split(' = ')
    script[key] = int(value)

s = input()
dec = [script[i] for i in s]

res, tmp = 0, 0
for i in range(len(s) - 1):
    if dec[i] // dec[i + 1] < 10:
        if dec[i] < dec[i + 1]:
            tmp = dec[i + 1] - dec[i] if not tmp else dec[i + 1] - tmp
        else:
            tmp += dec[i + 1] + dec[i] if not tmp else dec[i + 1]
    else:
        res += dec[i] if not tmp or not i else tmp
        tmp = 0 if len(s) - 1 - i > 1 else dec[i + 1]
print(dec[0] if len(s) == 1 else res + tmp)
 -End,"
 order = ' abcdefghijklmnopqrstuvwxyz'
shift = int(input()) 
length = len(order)

indexes_in = [order.index(letter) for letter in input().strip()]  
indexes_out = [(i + shift) % length for i in indexes_in]

print('Result: ""' + """".join([order[i] for i in indexes_out]) + '""') -End,"
 def find_j(j, l, r, i, A):
    while l <= r:
        if A[j] == i:
            return j + 1
        else:
            if A[j] > i:
                r = j - 1
            else:
                l = j + 1
            j = (l + r) // 2
    else: return -1


def main():
    A = [int(i) for i in input().split()]
    b = [int(i) for i in input().split()]
    n, k = A.pop(0), b.pop(0)
    
    l, r = 0, n - 1
    j = (l + r) // 2
    
    for i in b:
        print(find_j(j, l, r, i, A), end="" "")
        
        
if __name__ == ""__main__"":
    main()
     -End,"
 import sys


def insert(h, point):
    h.append(point)
    i = len(h) - 1
    node = i // 2
    while h[node] < h[i]:
        h[node], h[i] = h[i], h[node]
        i = node
        node = i // 2
    else: 
        return h
    
def extractMax(h):
    i = 1
    while i * 2 + 1 < len(h):
        left = i * 2
        right = i * 2 + 1
        if h[right] >= h[left]:
            h[right], h[i] = h[i], h[right]
            i = right
        else:
            h[left], h[i] = h[i], h[left]
            i = left
    if h[i] != h[-1]:
        h[i], h[-1] = h[-1], h[i]
        node = i // 2
        while h[node] < h[i]:
            h[node], h[i] = h[i], h[node]
            i = node
            node = i // 2
    return h.pop(-1)
    
def main():
    h, num = [10**10], input()
    for action in sys.stdin.readlines():
        action = action.strip().split()
        if len(action) == 1:
            print(extractMax(h))
        else:
            insert(h, int(action[1]))
            
            
if __name__ == ""__main__"":
    main() -End,"
 def ab(n, k):        # n - класс 1 - предок класса 2; k - класс 2
    global dct
    return n == k

def lin(n, k):
    global dct
    return n in dct[k]

def lin2(n, k):
    global dct
    global tmp
    tmp.extend(dct[k])
    for i in tmp:
        tmp.extend(dct[i])
    
        
    
dct, tmp = {}, []

lst1 = [[i for i in input().split()] for j in range(int(input()))]
for i in lst1:
    if ':' in i:
        i.remove(':')
    dct[i[0]] = []
    if len(i) > 1:
        for j in range(1, len(i)):
            dct[i[0]].append(i[j])

lst2 = [[i for i in input().split()] for j in range(int(input()))]

for i in lst2:
    lin2(i[0], i[1])
    print('Yes' if ab(i[0], i[1]) or lin(i[0], i[1]) or i[0] in tmp else 'No')
    tmp.clear()



 -End,"
 class LoggableList(list, Loggable):
    def append(self, var):
        super().append(var)
        super().log(var)




 -End,"
 def antifoo(x):
    global dct
    global tst
    for i in dct:
        if x in dct[i]:
            tst.add(i)
            antifoo(i)

    
dct, tst = {}, set()
n = [[i for i in input().split()] for j in range(int(input()))]
for i in n:
    if ':' in i:
        i.remove(':')
    if len(i) > 1:
        top = i.pop(0)
        dct[top] = []
        dct[top].extend(i)
    else:
        dct[i[0]] = []
k = [input() for i in range(int(input()))]

for i in k:
    antifoo(i)
    if i in tst:
        print(i)
 -End,"
 class multifilter():
    def judge_half(pos, neg):
        return True if pos >= neg else False

    def judge_any(pos, neg):
        return True if pos >= 1 else False

    def judge_all(pos, neg):
        return True if neg == 0 else False

    def __init__(self, iterable, *funcs, judge = judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        for i in self.iterable:
            pos, neg = 0, 0
            for f in self.funcs:
                if f(i):
                    pos += 1
                else:
                    neg += 1
            if self.judge(pos, neg):
                pos, neg = 0, 0
                yield i
 -End,"
 def primes():
    i, k = 1, 0
    while True:
        k = 0
        i += 1
        for j in range(1, i+1):
            if i % j == 0:
                k += 1
        if k == 2:
            yield i
        else:
            continue
 -End,"
 def mod_checker(x, mod=0):
    return lambda y: y % x == mod
 -End,"
 import sys

for line in sys.stdin:
    line = line.rstrip()
    if line.count('cat') >= 2:
        print(line)
 -End,"
 import sys
import re

patt = r'(\bcat\b)|(^.cat^.)'
for line in sys.stdin:
    line = line.strip()
    rem = re.search(patt, line)
    if rem:
        print(line)
 -End,"
 import sys, re

for line in sys.stdin:
    print(re.sub(r'\b(\w)(\w)', r'\2\1', line.rstrip()))
 -End,"
 import re
import requests

adress = input()
resp = requests.get(adress)

patt = re.compile('<a[\s\w\=\""\:;/\.]*?\shref=(?:\'|\"")(?:\w+:/*)?((?:\w+\.?-?)+)')
res_temp = patt.findall(resp.text)

res_temp.sort()
result = []
for i in res_temp:
    if i not in result:
        result.append(i)
        print(i)
 -End,"
 import requests
import re

def fun(s, dct):
    r = requests.get(s)
    if r.status_code == requests.codes.ok:
        patt = re.compile('<a(?:.*?)href=(?:\""|\')(.*)(?:\""|\')')
        a = patt.findall(r.text)
        dct.extend(a)

s1, s2 = input(), input()

dct1, dct2 = [], []
fun(s1, dct1)
for i in dct1:
    fun(i, dct2)
print('Yes' if s2 in dct2 else 'No') -End,"
 import json

def foo(name):
    lst = list([name])
    sett = set()
    for i in lst:
        for j in data:
            if i in j['parents']:
                lst.append(j['name'])
        sett.add(i)
    return len(sett)

data = json.loads(input())
data = sorted(data, key=lambda data: data['name'])

for i in data:
    print(i['name'], ':', foo(i['name']))
 -End,"
 def foo(tmp2):
    last = buf[len(buf)-1][0]
    if tmp2 == ')' and last == '(':
        return True
    elif tmp2 == ']' and last == '[':
        return True
    elif tmp2 == '}' and last == '{':
        return True
    else:
        return False

buf = []
err = 0

s = input()
for i in range(len(s)):
    if s[i] in ')]}' and len(buf)==0:
        err = i+1
        break
    if s[i] in ')]}' and len(buf)>0:
        if foo(s[i]):
            buf.pop()
        else:
            err = i+1
            break
    if s[i] in '([{':
        buf.append([s[i], i+1])
if err == 0:
    if len(buf) == 0:
        print('Success')
    else:
        print(buf[len(buf)-1][1])
else:
    print(err)
     -End,"
 n = int(input())
v = [[int(i) for i in input().split()] for j in range(n)]
v = sorted(v, key=lambda x: x[1])
ans = [v[0][1]]
for i in v:
    if i[1] not in ans:
        if ans[-1]>= i[0] and ans[-1] <= i[1]:
            continue
        else:
            ans.append(i[1])
print(len(ans))
for i in ans:
    print(i, end=' ') -End,"
 n = int(input())
k = int(((1+8*n)**0.5-1)/2)
s0, s, i = 0, list(), 1
while len(s) <= k:
    s.append(i)
    s0 += i
    i += 1
s.remove(s0-n)    
print(k)
for i in s:
    print(i, end=' ') -End,"
 def foo(sym):
    tmp = ''
    for i in d2.items():
        if len(i[1]) > 0:
            if sym in i[1][1]:
                tmp = '0' + tmp
            elif sym in i[1][0]:
                tmp = '1' + tmp
        code[sym] = tmp   

stin, stout = input(), ''
d1, d2, d3, code = list(), dict(), list(), dict()

for i in stin:
    if ([i, stin.count(i)]) not in d1:
        d1.append([i, stin.count(i)])
        d2[i] = []
        d3.append(i)
while len(d1) > 1:
    d1 = list(sorted(d1, key=lambda x: x[1], reverse=True))
    t1, t2 = d1.pop(), d1.pop()
    d2[t1[0]+t2[0]] = [t1[0], t2[0]]
    d1.append([t1[0]+t2[0], t1[1]+t2[1]])
for i in d3:
    foo(i)
for i in stin:
    stout += code[i]
if len(d2) == 1:
    print(len(d2), d1[0][1])
    print(d1[0][0] + ':', '0')
    print(int(d1[0][1])*'0')
else:
    print(len(code), len(stout))
    for i in code.items():
        print(i[0] + ':', i[1])
    print(stout)
 -End,"
 def up(k):
    while k > 0 and a[int((k-1)/2)] < a[k]:
        a[k], a[int((k-1)/2)] = a[int((k-1)/2)], a[k]
        k = int((k-1)/2)

def down(k):
    while 2*k+1 < len(a):
        j = k
        if a[k] < a[2*k+1]:
            j = 2*k+1
        if 2*k+2 < len(a) and a[j] < a[2*k+2]:
            j = 2*k+2
        if j == k:
            break
        else:
            a[k], a[j] = a[j], a[k]
        k = j
            
def insert(elem):
    a.append(elem)
    up(len(a)-1)

def extractmax():
    a[0], a[len(a)-1] = a[len(a)-1], a[0]
    print(a.pop())
    down(0)

n = int(input())
a = []
for i in range(n):
    s = input()
    if s == 'ExtractMax':
        extractmax()
    else:
        t = s.split()
        insert(int(t[1])) -End,"
 def foo(key):
    l, r = 1, len(n)-1
    while l <= r:
        m = (l+r)//2
        if key == n[m]:
            return m
        else:
            if key > n[m]:
                l = m + 1
            else:
                r = m - 1
    return -1

n = list(map(int, input().split()))
k = list(map(int, input().split()))
for i in range(1, k[0]+1):
    print(foo(k[i]), end=' ')    
 -End,"
 def merge(left, right):
    global k
    result = list()
    i, j, = 0, 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            k += len(left) - i
            j += 1
    if i < len(left):
        result.extend(left[i:])
    else:
        result.extend(right[j:])
    return result

def mergesort(a):
    if len(a) > 1:
        middle = len(a) // 2
        left = a[:middle]
        right = a[middle:]
        return merge(mergesort(left), mergesort(right))
    else:
        return a

n, k = int(input()), 0
m = list(map(int, input().split()))
mergesort(m)
print(k)
 -End,"
 c1, c2 = map(int, input().split())
n = int(input())
print(c1 * n + (c2 * n) // 100, (c2 * n) % 100)
 -End,"
 s = input()
count = 0
for i in s:
    count += int(i)
print(count)
 -End,"
 n = input()
print(int(n[0]) + int(n[1]), int(n[1]) + int(n[2]), sep='')
 -End,"
 n = input()
print(int(n[0]) + int(n[2]) + int(n[4]), int(n[1]) + int(n[3]), sep='')
 -End,"
 n = int(input())
print((n - n // 3600 * 3600) // 60)
 -End,"
 def f(a, b, c):
    return (a or ((not c) and b))

StIn = [(input() == 'True') for i in range(3)]
print(f(StIn[0], StIn[1], StIn[2]))
 -End,"
 x1, y1 = int(input()), int(input())
x2, y2 = int(input()), int(input())
x3, y3 = int(input()), int(input())
a2 = (x2 - x1) ** 2 + (y2 - y1) ** 2
b2 = (x3 - x1) ** 2 + (y3 - y1) ** 2
c2 = (x3 - x2) ** 2 + (y3 - y2) ** 2
if a2 < b2:
    a2, b2 = b2, c2
if a2 < c2:
    a2, c2 = c2, a2
print('Yes' if a2 == b2 + c2 else 'No')
 -End,"
 import random
from bisect import bisect_left, bisect_right

def qsort(a):
    if len(a) < 2:
        return a
    pv = random.choice(a)
    left = [i for i in a if i < pv]
    centr = [pv] * a.count(pv)
    right = [j for j in a if j > pv]
    return qsort(left) + centr + qsort(right)


n, m = map(int, input().split())
a, b = [], []
for k in range(n):
    i, j = map(int, input().split())
    a.append(i)
    b.append(j)
vert = list(map(int, input().split()))
a1, b1 = qsort(a), qsort(b)

for v in vert:
    t1 = bisect_right(a1, v)
    t2 = bisect_left(b1, v)
    print(t1-t2, end=' ') -End,"
 def sortcount(a):
    dct = dict()
    result = list()
    for i in range(max(a)+1):
        if a.count(i) > 0:
            dct[i] = a.count(i)
    for j in dct:
        result.extend([j] * dct[j])
    return result

n = int(input())
a = list(map(int, input().split()))
for i in sortcount(a):
    print(i, end=' ') -End,"
 year = int(input())
if year % 400 == 0 or year % 4 == 0 and year % 100 != 0:
    print('Високосный')
else:
    print('Обычный')
 -End,"
 number = input()
s1 = sum(map(int, number[:3]))
s2 = sum(map(int, number[3:]))
print('Счастливый' if s1 == s2 else 'Обычный')
 -End,"
 x1 = int(input())
y1 = int(input())
x2 = int(input())
y2 = int(input())
print('YES' if abs(x2 - x1) == abs(y2 - y1) else 'NO')
 -End,"
 x1, y1 = int(input()), int(input())
x2, y2 = int(input()), int(input())
print('YES' if abs(x2 - x1) + abs(y2 - y1) == 3 else 'NO')
 -End,"
 a, b, c = float(input()), float(input()), float(input())
d = b ** 2 - 4 * a * c
if d > 0:
    x1 = (- b + d ** 0.5) / (2 * a)
    x2 = (-b - d ** 0.5) / (2 * a)
    print(x1, x2, sep='\n')
elif d == 0:
    print(- b / (2 * a))
else:
    print('Заданное уравнение не имеет решений')
 -End,"
 a, b = float(input()), float(input())
oper = input()
if oper in ['mod', '/', 'div'] and b == 0:
    print('Деление на 0!')
elif oper == '+':
    print(a + b)
elif oper == '-':
    print(a - b)
elif oper == '*':
    print(a * b)
elif oper == '/':
    print(a / b)
elif oper == 'pow':
    print(a ** b)
elif oper == 'div':
    print(a // b)
elif oper == 'mod':
    print(a % b)
 -End,"
 fig = input()
if fig == 'треугольник':
    a, b, c = int(input()), int(input()), int(input())
    p = (a + b + c) / 2
    s = (p * (p - a) * (p - b) * (p - c)) ** 0.5
    print(s)
elif fig == 'прямоугольник':
    a, b = int(input()), int(input())
    print(a * b)
elif fig == 'круг':
    r = int(input())
    print(3.14 * r ** 2)
 -End,"
 n = int(input())
if n % 100 in [11, 12, 13, 14]:
    print(n, 'программистов')
else:
    if n % 10 == 1: print(n, 'программист')
    elif 2 <= n % 10 <= 4: print(n, 'программиста')
    else: print(n, 'программистов')
 -End,"
 n, s = abs(int(input())), 0
while n > 0:
    s += n % 10
    n = n // 10
print(s)
 -End,"
 n, p = int(input()), True
m = 2
while m < n:
    if n % m == 0:
        p = False
        break
    m += 1
print('Введённое число является простым' if p else 'Введённое число не является простым')
 -End,"
 a, b = int(input()), int(input())
k = min(a, b)
while k % a != k % b:
    k += 1
print(k)
 -End,"
 while True:
    n = int(input())
    if n > 100: break
    elif n < 10: continue
    else: print(n)
 -End,"
 n, k = input(), 0
for i in n:
    k += 1
print(k) -End,"
 p = 1
for i in range(1, 11, 3):
    p *= i
print(p)
 -End,"
 for i in range(4):
    print(int(input()) ** 3)
 -End,"
 a, b, s = float(input()), int(input()), 0
if a - int(a) == 0: a = int(a)
else: a = int(a) + 1 
if a % 2 == 0:
    a += 1
for i in range(a, b + 1, 2):
    s += i
print(s)
 -End,"
 a, b = int(input()), int(input())
n, k = 0, 0
for i in range(a, b + 1):
    if i % 3 == 0:
        n += i
        k += 1
print(n / k)
 -End,"
 n = int(input())
k1 = 0
n1 = n
e = 0
while n1 > 0:
    k1 = k1 + n1 % 10
    n1 = n1 // 10
for i in range(1, n):
    k2 = 0
    i1 = i
    while i1 > 0:
        k2 = k2 + i1 % 10
        i1 = i1 // 10
    if k2 == k1:
        e += 1
        if e == 1:
            print('Найденные числа:')
        print(i)
if e == 0:
    print('Искомых чисел не найдено')
 -End,"
 s = 30000
n = int(input())
for i in range(n):
    t = int(input())
    if t % 3 == 0:
        if t < s:
            s = t
print(s)
 -End,"
 s = -30000
n = int(input())
for i in range(n):
    t = int(input())
    if t % 4 == 0:
        if t > s:
            s = t
print(s)
 -End,"
 n, s = 1, 0
while n != 0:
    n = int(input())
    if n % 6 == 0 and n % 10 == 4:
        s += n
print(s)
 -End,"
 n = int(input())
vel_max = 1
p = False
for i in range(n):
    vel = float(input())
    vel = int(round(vel))
    if vel < 30:
        p = True
    if vel > vel_max:
        vel_max = vel
print(vel_max, 'YES' if p else 'NO', sep='\n')
 -End,"
 n = int(input())
v_max = 1
v_min = 300
n1 = 0
for i in range(n):
    vel = round(float(input()))
    if vel > v_max:
        v_max = vel
    if vel < v_min:
        v_min = vel
    if vel <= 30:
        n1 += 1
print(v_max - v_min, n1, sep='\n')
 -End,"
 s, k1, k2 = 0, 0, 0
while True:
    n = int(input())
    if n == 0: break
    s += n
    if n > 0: k1 += 1
    else: k2 += 1
print(s, k1 - k2, sep = '\n')
 -End,"
 n = int(input())
lst = [int(input().strip()) for _ in range(n)]
print(max(lst), 'YES' if 0 in lst else 'NO', sep='\n')
 -End,"
 s = k = 0
p = False
while True:
    n = int(input())
    if n == 0:
        break
    if n % 8 == 0:
        p = True
        s += n
        k += 1
print(round(s / k, 1) if p else 'NO')
 -End,"
 days = int(input())
temp = [int(input()) for _ in range(days)]
er = False
for i in temp:
    if i < -15:
        er = True
        break
print(min(temp), 'YES' if er else 'NO', sep='\n')
 -End,"
 a, b = int(input()), int(input())
p = a * b
while True:
    if min(a, b) == 0:
        break
    if a > b:
        a = a % b
    else:
        b = b % a
print(p // (a + b))
 -End,"
 a = int(input())
bi = ''
while a > 0:
    bi = str(a % 2) + bi
    a = a // 2
print(bi)
 -End,"
 def fo(s):
    k = 0
    for i in range(len(s)):
        if '0' <= s[i] <= '9' or s[0] == '-' and s[i] != '.':
            k += 1
    if len(s) == k:
        return True
    else:
        return False
    
    
s = input()
print(fo(s))
 -End,"
 s0 = input().lower().split(', ')
print(*sorted(s0, reverse=True))


 -End,"
 a = [int(input()) for i in range(5)]
for i in range(5):
    a[i] = str(a[i] ** 2)
print(' '.join(a))
 -End,"
 n = int(input())
a = [int(input()) for i in range(n)]
print(sum(a) / len(a))
 -End,"
 n = int(input())
dat = [int(i) for i in input().split()]
m = 0
for i in dat:
    if i < 8:
        m += 1
print(m)
 -End,"
 p = int(input())
Dat = [int(i) for i in input().split()]
m = n = 0
for i in range(p):
    if Dat[i] >= m:
        m = Dat[i]
        n = i + 1
print(n)
 -End,"
 n = int(input())
dat = [int(i) for i in input().split()]
print(max(dat))
 -End,"
 days = int(input())
temp = [int(x) for x in input().split()]
k = 0
for day in range(days):
    if temp[day] >= sum(temp)/len(temp):
        k += 1
print(k)
 -End,"
 print(sum([int(i) for i in input().split()]))
 -End,"
 def search(x, lst):
    if x in lst:
        return lst.index(x)
    return -1


a = [3, 4, 2, 1, 0, 7, 8]
x = int(input())
print(search(x, a))
 -End,"
 a=[3, 5, 65, 67, 4, 2, 3, 6, 9, -10, -27, 6, 0, 8]
print(min(a), max(a), sep='\n')
 -End,"
 def mi(a):
    h = 100
    for i in a:
        if i < h:
            h = i
    return h        

def ma(a):
    h = -100
    for i in a:
        if i > h:
            h = i
    return h


a = [3, 5, 65, 67, 4, 2, 3, 6, 9, -10, -27, 6, 0, 8]
print(mi(a))
print(ma(a))
 -End,"
 def bubble(a):
    while True:
        p = 1
        for i in range(len(a) - 1):
            if a[i] > a[i+1]:
                p = 0
                a[i], a[i+1] = a[i+1], a[i]
        if p == 1:
            break
    

a = [int(i) for i in input().split()]
bubble(a)
print(a)
 -End,"
 def bin(a, x):
    l, r = 0, len(a)-1
    while l != r:
        m = (l + r) // 2
        if a[m] < x:
            l = m + 1
        else:
            r = m - 1
    if a[l] == x:
        return l
    else:
        return -1
    
    
f = int(input())
a = list(map(int, input().split()))
print(bin(a, f))
 -End,"
 n, k = int(input()), int(input())
print(k // n, k - k // n * n, sep='\n')
 -End,"
 p, v = 0, [int(input()) for _ in range(3)]
for i in v:
    p += i // 2 if i % 2 == 0 else i // 2 + 1
print(p)
 -End,"
 n = input()
print(""YES"" if n[:2] == n[:1:-1] else ""NO"")
 -End,"
 p, x, y = int(input()), int(input()), int(input())
f = int((x * 100 + y) * (1 + p / 100))
print(f // 100, f - f // 100 * 100)
 -End,"
 lst = list()
while True:
    n = int(input())
    if n == 0: break
    lst.append(n)
print(sum(lst), max(lst), sep='\n')
 -End,"
 sp = [int(input()) for i in range(7)]
sp.sort(reverse=True)
print(*sp[1::2], sep='\n')
 -End,"
 year = 2018
s = [i for i in input().split()]
name = s[0][:len(s[0]) - 2]
group = 'третьей секции'
if len(s) == 2:
    age = year - int(s[1][:4])
else:
    age = year - int(s[1])
if age < 18:
    group = 'первой секции (дети)'
elif 18 <= age <= 35:
    group = 'второй секции (молодежь)'
print('Привет, {}! Ждем тебя на {}'.format(name, group))
 -End,"
 def poww(a, n):
    if n == 0:
        return 1
    if n == 1:
        return a
    return a * poww(a, n - 1)


a = int(input())
n = int(input())
print(poww(a, n))
 -End,"
 x, y = int(input()), int(input())
a = [int(input()) for i in range(y)]
print(sum(a), max(a), min(a), sum(a)/y)
 -End,"
 patt = ['rock', 'paper', 'scissors']
a1 = input().lower()
a2 = input().lower()
if a1 not in patt or a2 not in patt:
    print('Invalid input! You have not entered rock, paper or scissors, try again.')
elif a1 == a2:
    print(""It's a tie!"")
else:
    if a1 == patt[0] and a2 == patt[2] or a2 == patt[0] and a1 == patt[2]:
        print('Rock wins!')
    elif a1 == patt[2] and a2 == patt[1] or a2 == patt[2] and a1 == patt[1]:
        print('Scissors win!')
    else:
        print('Paper wins!') -End,"
 def fu(x):
    x1 = (5 * x ** 2 + 4) ** 0.5
    x2 = (5 * x ** 2 - 4) ** 0.5
    if x1 == int(x1) or x2 == int(x2):
        return True
    return False


t = int(input())
t0, age = 10 ** 4, 0
for i in range(5001):
    age = i
    if fu(i):
        t0 = t0 - i 
    else:
        t0 = t0 + 1
    if t0 == t:
        break
print(age) -End,"
 data = [int(input()) for i in range(3)]
for i in range(data[2]):
    data[0] *= (1 + data[1]/100)
    print('{:.2f}'.format(data[0]))
 -End,"
 data = [int(i) for i in input().split()]
res = [sum(data[:3]), sum(data[3:6]), sum(data[6:])]
print(max(res))
 -End,"
 a, b, c = [int(input()) for i in range(3)]
print(int((c - a) / b))
 -End,"
 card = [i for i in input().split()]
ans = list()
for i in range(len(card)):
    s = card[i]
    for j in range(len(card)):
        if j == i:
            continue
        else:
            s += card[j]
    if s not in ans and int(s) > 99:
        ans.append(s)
    s = card[i]
    for j in reversed(range(len(card))):
        if j == i:
            continue
        else:
            s += card[j]
    if s not in ans and int(s) > 99:
        ans.append(s)
for i in sorted(ans):
    print(i) -End,"
 s1 = 0
s = input()
if len(s) <= 3: tmp = s
else: tmp = s[-3:]
for i in tmp:
    s1 += int(i)
print(s1) -End,"
 st = input()
dct = {}
for i in st:
    if i not in dct:
        dct[i] = st.count(i)
for i in sorted(dct):
    print(i, dct[i])
 -End,"
 n = int(input())
m = [int(i) for i in input().split()]
for i in range(n):
    for j in range(i+1, n):
        if m[i] + m[j] == 0:
            print(i, j)
            break
 -End,"
 n = int(input())
num, k = [], 0
for i in range(1,n+1):
    for j in range(i):
        if k+1 > n: break
        num.append(str(i))
        k += 1
print(' '.join(num))
 -End,"
 s0, dct = [_ for _ in input().split()], dict()
for i in range(len(s0)):
    if len(s0[i]) not in dct:
        dct[len(s0[i])] = 1
    else:
        dct[len(s0[i])] += 1
for i in sorted(dct.items()):
    print(str(i[0])+':',i[1])
 -End,"
 s, j = input(), 0
t = [s[j]]
for i in range(1,len(s)):
    if s[i] == s[i-1]:
        t[j] += s[i]
    else:
        t.append(s[i])
        j += 1
for i in t:
    if len(i) > 1:
        print(str(len(i))+i[0],end='')
    else:
        print(i[0],end='')
 -End,"
 # put your python code here
n = int(input())
if n >= 1900 and n <= 3000:
    if (n % 4 == 0) and (not n % 100 == 0) or (n % 400 == 0):
        print(""Високосный"")
    else:
        print(""Обычный"")
else:
    print(""Введите другой год"")
    n = int(input())
    


 -End,"
 # put your python code here

n1, n2, x = float(input()), float(input()), input()
if x == ""+"":
    print(n1 + n2)
elif x == ""-"":
    print(n1 - n2)
elif x == ""*"":
    print(n1 * n2)
elif x == ""pow"":
    print(n1 ** n2)
elif (n2 == 0.0) and (x == ""/"" or ""mod"" or ""div""):
    print(""Деление на 0!"")
elif x == ""/"":
    print(n1 / n2)
elif x == ""mod"":
    print(n1 % n2)
elif x == ""div"":
    print(n1 // n2)
 -End,"
 # put your python code here
n1, n2 , n3 = int(input()), int(input()), int(input())
m = n1
l = n1
e = 0

if m < n2:
    m = n2
if m < n3:
    m = n3
if l > n2:
    l = n2
if l > n3:
    l = n3
e = (n1 + n2 + n3) - (m + l)

print(m)
print(l)
print(e)




 -End,"
 # put your python code here
n = int(input())
if 0 <= n <= 1000:
    if n % 10 == 1 and n != 11 and n % 100 != 11:
        print(n,""программист"")
    elif 1 < n % 10 < 5:
        if 20 > n % 100 > 11:
            print(n,""программистов"")         
        else:
            print(n,""программиста"")
    else:
        print(n,""программистов"")


 -End,"
 # put your python code here

a, b = int(input()), int(input())
d = 0
i = 0
j = 0
result1 = 0
result2 = 1
while True:
    i += 1
    j += 1
    if result1 == result2:
        d = result1
        print(d)
        break
    if i % a == 0:
        result1 = i
    if j % b == 0:
        result2 = j


 -End,"
 # put your python code here

a, b = int(input()), int(input())
s = 0
counter = 0
for j in range (a, b + 1):
    if j % 3 == 0:
        counter += 1
        s += j      
print(s / counter)


 -End,"
 # put your python code here

gen = input()
print(((gen.count(""g"") + gen.count(""c"") + gen.count(""G"") + gen.count(""C"")) / len(gen)) * 100)


 -End,"
 # put your python code here

gen = input()
part = """"
letter = """"
code = """"
w = 1
c = 0
for i in gen:
    c += 1
    try:
        if i == gen[c]:
            w += 1
        else:
            part = i + str(w)
            code = code + part
            w = 1
    except IndexError:
        part = i + str(w)
        code = code + part
print(code)


 -End,"
 # put your python code here
a = [int(i) for i in input().split()]
n = 0
for i in a:
    n += int(i)
print(n)





 -End,"
 # put your python code here

a = [int(i)for i in input().split()]
summary = 0
n = 0

for j in a:
    n += 1
    if len(a) == 1:
        print(a[0])
        break
    try:
        summary = a[n - 2] + a[n]
        print(summary, end="" "")
    except IndexError:
        summary = a[n - 2]  + a[0]
        print(summary, end="" "")





 -End,"
 # put your python code here

num = [int(i) for i in input().split()]
num2 = num.copy()
for j in num2:
    if len(num) == 1:
        break
    elif num.count(j) > 1:
        print(j, end="" "")
        while j in num:
            num.remove(j)         
           
        
        
        

 





 -End,"
 # put your python code here

summary = 0
square = 0
while True:
    i = int(input())
    summary += i
    square += i * i
    if summary == 0:
        print(square)
        break


 -End,"
 # put your python code here
n = int(input())
c = 0
for i in range(n + 1):
    if i and n > 0:
        for j in range(i):
            c += 1 
            if c <= n:
                print(i, end="" "")





 -End,"
 lst, x = [int(i) for i in input().split()], int(input())
c = -1
if lst.count(x) > 0: 
    for i in lst:
        c += 1
        if x == i:
            print(c, end="" "")
else:
    print(""Отсутствует"")





 -End,"
 m = []
n = []
d = 0
i = ''
#ввод произвольной матрицы
while i != ""end"": 
    for i in [j for j in input().split()]:
        if i != ""end"":
            n.append(int(i))
            d = n.copy()
    if i != ""end"":
        m.append(d)
        n.clear()

#обработка
for i in range(len(m)):
    n.clear()
    for j in range(len(m[0])):
        d = m[i-1][j] + m[i][j-1] + m[(i+1)%len(m)][j] + m[i][(j+1)%len(m[0])]
        n.append(d)
    for k in n:
        print(k,end="" "")
    print()



 -End,"
 x, h, m = int(input()),int(input()),int(input())
print((x + (h * 60) + m) // 60)
print((x + (h * 60) + m) % 60)




 -End,"
 a, b ,c = int(input()),int(input()),int(input())
print((((a + b + c)/2)*(((a + b + c)/2)-a)*(((a + b + c)/2)-b)*(((a + b + c)/2)-c)) ** 0.5)



 -End,"
 n1, n2, f = float(input()), float(input()), input()

if f == 'mod'and n2 != 0:
        print(n1 % n2)
elif f == 'div' and n2 != 0:
        print(n1 // n2)
elif f == 'pow':
        print(n1 ** n2)
elif f == '/' and n2 != 0:
        print(n1 / n2)
elif f == '*':
        print(n1 * n2)
elif f == '+':
        print(n1 + n2)
elif f == '-':
        print(n1 - n2)
else:
    print('Деление на 0!')
  




 -End,"
 t = input()
if t == 'треугольник':
    a,b,c = int(input()),int(input()),int(input())
    print((((a + b + c)/2)*(((a + b + c)/2)-a)*(((a + b + c)/2)-b)*(((a + b + c)/2)-c)) ** 0.5)
elif t == 'прямоугольник':
    a,b = int(input()),int(input())
    print(a*b)
elif t == 'круг':
    r = int(input())
    print(3.14*(r*r))




 -End,"
 a,b,c = int(input()),int(input()),int(input())
m = a
l = a
if m < b:
    m = b
if m < c:
    m = c
if l > b:
    l = b
if l > c:
    l = c
print(m)
print(l)
print((a+b+c)-(m+l))
    
    
 -End,"
 a,b,c = int(input()),int(input()),int(input())
print(max(a,b,c), min(a,b,c), (a+b+c) - (max(a,b,c) + min(a,b,c)), sep='\n')



 -End,"
 [print(n,'программист'+('ов' if n % 10 in (5,6,7,8,9,0) or n % 100 in (11,12,13,14) else 'а' if n % 10 in (2,3,4) else ''))for n in [int(input())]] -End,"
 [print('Счастливый' if int(n[0]) +  int(n[1]) + int(n[2]) == int(n[3]) +  int(n[4]) + int(n[5]) else 'Обычный')for n in [input()]] -End,"
 s = 0
n = ''
while n != 0:
    n = int(input())
    s += n
print(s)   



 -End,"
 a, b = int(input()),int(input())
d = 0
remainder1 = 1
remainder2 = 1
while (remainder1 + remainder2) != 0:
    d+=1
    remainder1 = d % a
    remainder2 = d % b
print(d)
 -End,"
 a, b, c, d = int(input()),int(input()),int(input()),int(input())
print(end='\t')
for i in range(c,d+1):
    print(i,end='\t')
print()
for i in range(a,b+1):
    print(i,end='\t')
    for j in range(c,d+1):
        print(i*j,end='\t')
    print() -End,"
 a, b = int(input()),int(input())
c = 0
s = 0
for i in range(a, b+1):
    if i % 3 == 0:
        c+=1
        s+=i
print(s/c) -End,"
 [print(((i.upper().count('g'.upper()) + i.upper().count('c'.upper())) / len(i))*100) for i in [(input())]] -End,"
 gen = input()+' '
c = ' '
c1=1
for i in gen:
    c2=0
    while i == gen[c1-1] and gen[c1-1] != c:
            c2+=1
            c1+=1
    if c2 != 0:
        print(i+str(c2),end='') -End,"
 [print(sum([int(j) for j in i]))for i in[input().split()]] -End,"
 l = [i for i in input().split()]
for i in range(len(l)):
    if len(l) != 1:
        print(int(l[i-1]) + int(l[(i+1)%len(l)]),end=' ')
    else:
        print(l[i]) -End,"
 [[print(j,end=' ') for j in set(i) if i.count(j) > 1] for i in [input().split()]] -End,"
 l = [i for i in input().split()]
d = []
l.sort()
for i in l:
    if l.count(i) > 1 and i not in d:
        d.append(i)
for i in d:
    print(i, end=' ') -End,"
 l = [int(i) for i in input().split()]
c = 0
l.sort()
l.append(' ')
s = ' '
while c < len(l):
    if len(l) == 1:
        break
    n = 1
    if l[c] == l[(c+1)%len(l)]:
        if l[c+1] != s:
            while l[c] == l[(c+1)%len(l)]:
                c+=1
                n+=1
    else:
        c+=1
    if n > 1:
        print(l[c],end="" "") -End,"
 s = [int(input())]
q = s[0]*s[0]
while sum(s) != 0:
    n = int(input())
    s += [n]
    q += n*n
print(q) -End,"
 [print(*[i for i in range(1,n+1) for j in range(i)][:n]) for n in [int(input())]] -End,"
 lst, x = [i for i in input().split()], input()
print(*[i for i in range(len(lst)) if x == lst[i]] if x in lst else ['Отсутствует'])

 -End,"
 m,n=[],[]
while True:
        try:
            m.append([int(i) for i in input().split()])
        except:
            break
n = [[sum([m[i-1][j], m[(i+1)%len(m)][j], m[i][j-1], m[i][(j+1)%len(m[0])]]) for j in range(len(m[0]))] for i in range(len(m))]
for i in n:
    print(*i) -End,"
 m,n=[],[]
[(m.append([int(i) for i in x.split()]), n.append([0 for i in x.split()])) for x in iter(input, 'end')]
n = [[sum([m[i-1][j], m[(i+1)%len(m)][j], m[i][j-1], m[i][(j+1)%len(m[0])]]) for j in range(len(m[0]))] for i in range(len(m))]
[print(*i) for i in n] -End,"
 n = int(input())
m = [[0]*n for i in range(n)]
i,j,nc = 0,0,0
while nc+1 <= n*n:
    while nc < n*n and m[i][j%len(m)] == 0:
            nc+=1
            m[i][j] = nc
            j+=1
    j-=1
    i+=1
    while nc < n*n and m[i%len(m)][j] == 0:
            nc+=1
            m[i][j] = nc
            i+=1
    j-=1
    i-=1
    while nc < n*n and m[i][j%len(m)] == 0:
            nc+=1
            m[i][j] = nc
            j-=1
    i-=1
    j+=1
    while nc < n*n and m[i%len(m)][j] == 0:
            nc+=1
            m[i][j] = nc
            i-=1
    i+=1
    j+=1
[print(*i) for i in m] -End,"
 def modify_list(l):
    for i in range(len(l)-1,-1,-1):
        if l[i]%2!=0:
            l.remove(l[i])
    for i in range(len(l)):
        l[i]//=2
     
    




 -End,"
 def modify_list(l): l[:] = [i//2 for i in l if i%2==0] -End,"
 def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    elif 2*key in d:
        d[2*key].append(value)
    else:
        d[2*key] = [value] -End,"
 [[print(j,i.count(j))for j in set(i)]for i in [input().lower().split()]] -End,"
 def wcounter(d):
    new_d = {}
    for key in d:
        c = 0
        for i in range(len(d)):
            if d[i] == d[key]:
                c+=1
        new_d.update({d[key]:c})
    [print(k,v) for k,v in new_d.items()]                
d = {k:v for k, v in enumerate(input().lower().split())}
wcounter(d)
 -End,"
 d = {}
for i in range(int(input())):
    x = int(input())
    if x not in d:
        d[x] = f(x)
    print(d[x]) -End,"
 import math
print(math.pi*(float(input()))*2) -End,"
 import sys
[print(sys.argv[i], end=' ') for i in range(1,len(sys.argv))] -End,"
 l= []
[[l.append(j) for j in input().split(';')] for i in range(int(input()))]
d = {i:[l.count(i),*[sum([1 for j in range(0,len(l),4) if l[(j+1)%len(l)] > l[(j+3)%len(l)] and l[j] == i or l[(j+3)%len(l)] > l[(j+1)%len(l)] and l[j+2] == i])], *[sum([1 for j in range(0,len(l),4) if l[(j+1)%len(l)] == l[(j+3)%len(l)] and l[j] == i or l[(j+3)%len(l)] == l[(j+1)%len(l)] and l[j+2] == i])], *[sum([1 for j in range(0,len(l),4) if l[(j+1)%len(l)] < l[(j+3)%len(l)] and l[j] == i or l[(j+3)%len(l)] < l[(j+1)%len(l)] and l[j+2] == i])], sum([*[sum([3 for j in range(0,len(l),4) if l[(j+1)%len(l)] > l[(j+3)%len(l)] and l[j] == i or l[(j+3)%len(l)] > l[(j+1)%len(l)] and l[j+2] == i])], *[sum([1 for j in range(0,len(l),4) if l[(j+1)%len(l)] == l[(j+3)%len(l)] and l[j] == i or l[(j+3)%len(l)] == l[(j+1)%len(l)] and l[j+2] == i])]])] for i in set(l) if i not in '1234567890'}
[print(key+':',*value) for key,value in d.items()] -End,"
 l = [input() for i in range(4)]
[print(l[1][l[0].index(j)],end='') for i in l[2] for j in l[0] if i == j], print()
[print(l[0][l[1].index(j)],end='') for i in l[3] for j in l[1] if i == j] -End,"
 d,l = [input().lower() for _ in range(int(input()))], []
[[l.append(j) for j in input().split()] for _ in range(int(input()))]
[print(i)for i in set(j.lower() for j in l) if i not in d] -End,"
 l = [[k,int(v)] for k,v in [input().split() for i in range(int(input()))]]
x,y = 0,0
for i in l:
    if i[0] == 'север':
        y += i[1]
    elif i[0] == 'юг':
        y -= i[1]
    elif i[0] == 'восток':
        x += i[1]
    elif i[0] == 'запад':
        x -= i[1]
print(x,y) -End,"
 print(sum(int(input()) for i in range(int(input())))) -End,"
 print(len(set([id(obj)for obj in objects]))) -End,"
 def closest_mod_5(x): return (min([int(y) for y in range(1000) if y >= x and y % 5 == 0])) -End,"
 x = 0
for i in range(int(input())):
    x += int(input())
print(x) -End,"
 l =[]
for obj in objects:
    if obj not in l:
        l.append(obj)
print(len(l)) -End,"
 def closest_mod_5(x):
    while x % 5 != 0:
        x += 1
    return(x) -End,"
 def c(n,k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    else:
        return c(n - 1,k) + c(n - 1,k - 1)
n, k = map(int, input().split())
print(c(n,k)) -End,"
 def c(n,k): return 1 if n == k or k == 0 else c(n - 1, k) + c(n - 1, k - 1)
n,k = [int(i) for i in input().split()]
print(c(n,k)) -End,"
 [print(*[i//60,i%60],sep=""\n"") for i in [int(input())]] -End,"
 l = [int(input()) for i in range(3)]
print(*[(l[0]+l[1]*60+l[2]) //60, (l[0]+l[1]*60+l[2]) %60],sep='\n') -End,"
 [print('Это нормально' if a <= h <= b else 'Недосып' if h < a else 'Пересып') for a,b,h in [[int(input()) for i in range(3)]]] -End,"
 [print('Високосный' if i%4 == 0 and i%100 != 0 or i%400 == 0 else 'Обычный') for i in [int(input())]] -End,"
 [print((((a+b+c)/2)*((a+b+c)/2-a)*((a+b+c)/2-b)*((a+b+c)/2-c))**0.5) for a,b,c in [[int(input()) for _ in range(3)]]] -End,"
 [print(""Деление на 0!"" if o in (""/"", ""div"", ""mod"") and float(s) == 0 else (float(f)+float(s)) if o == '+' else (float(f)-float(s)) if o == '-' else (float(f)*float(s)) if o == '*' else (float(f)/float(s)) if o == '/' else (float(f)%float(s)) if o == 'mod' else (float(f)**float(s)) if o == 'pow' else (float(f)//float(s)) if o == 'div' else '') for f,s,o in [[input() for _ in range(3)]]] -End,"
 f = input()
if f == 'треугольник':
    [print((((a+b+c)/2)*((a+b+c)/2-a)*((a+b+c)/2-b)*((a+b+c)/2-c))**0.5) for a,b,c in [[int(input()) for _ in range(3)]]]
elif f == 'прямоугольник':
    [print(a*b) for a,b in [[int(input()) for _ in range(2)]]]
elif f == 'круг':
    [print(3.14*i*i)for i in [int(input())]] -End,"
 [print(*[max(a,b,c),min(a,b,c),sum([a,b,c])-(max(a,b,c)+(min(a,b,c)))],sep=""\n"")for a,b,c in [[int(input()) for _ in range(3)]]] -End,"
 n = int(input())
if n%10 in (0,5,6,7,8,9) or n%100 in (11,12,13,14):
    print(n, 'программистов')
elif n%10 in (2,3,4) and n%100 not in (11,12,13,14):
    print(n, 'программиста')
else:
    print(n, 'программист') -End,"
 n = int(input())
l,r =  n//1000,n%1000
ls, rs = 0,0
for i in str(l):
    ls += int(i)
for i in str(r):
    rs += int(i)
print(""Счастливый"" if ls == rs else ""Обычный"") -End,"
 [print(""Счастливый"" if int(a)+int(b)+int(c) == int(d)+int(e)+int(f) else ""Обычный"")for a, b, c, d, e, f in [input()]] -End,"
 print(sum(map(int,open(0).read().split()))) -End,"
 s, c = 0, int(input())
while c != 0:
    s,c = s + c, int(input()) #немного сахара
print(s) -End,"
 import math
[print(a * b // math.gcd(a, b))  for a,b in[[int(input()) for j in range(2)]]] -End,"
 [[print(exit(0) if int(i) > 100 else i if int(i) >= 10 else '', end=(exit(0) if int(i) > 100 else '\n' if int(i) >= 10 else '')) for i in [input()]] for _ in range(1000)] -End,"
 [print(*['\t' + str(i) for i in range(c,d+1)], *['\n' + str(j) + '\t' + '\t'.join([str(k * j) for k in range(c,d+1)]) for j in (range(a,b+1))])for a,b,c,d in [[int(input()) for _ in 'four']]] -End,"
 import statistics
print(statistics.mean([i for i in range(int(input()),int(input())+1) if i%3 == 0])) -End,"
 [print(sum(i)/len(i))for i in [[k for k in range(int(input()),int(input())+1) if k%3==0]]] -End,"
 s,c = input(),0
for i in s.lower():
    if i == 'c' or i == 'g':
        c+=1
print(c/len(s)*100) -End,"
 [print(sum([len(j)for j in i if j.lower() == 'c' or j.lower() == 'g'])/len(i)*100)for i in [input()]] -End,"
 l, l2 = [i for i in input()], []
for i in range(len(l)):
    if l[i] == l[(i+1)-len(l)]:
        l2.append(l[i])
    else:
        l2.append(l[i])
        print(f'{l2[0]}{len(l2)}',end='')
        l2.clear()
if len(l2) != 0:
    print(f'{l2[0]}{len(l2)}') -End,"
 s = 0
for i in input().split():
    s+=int(i)
print(s) -End,"
 print(sum(map(int,input().split()))) -End,"
 d,s,c,n = '',0,0,input()
while c != len(n):
    d+= n[c]
    c = c + 1
    if n[c-len(n)] == ' ' and c <= len(n):
        s+= int(d)
        d = ''
        c += 1
print(s+int(d)) -End,"
 [[print(int(i[j-1])+int(i[j+1-len(i)]) if len(i) > 1 else i[j]) for j in range(len(i))] for i in [input().split()]] -End,"
 [[print(' '.join([i[j] for j in range(len(i)) if i[j-1] != i[j] == i[j+1-len(i)]]),end=(exit(0) if len(i) < 2 else i[0] if i.count(i[0]) == len(i) else ''))] for i in [sorted(input().split())]] -End,"
 d = [int(input())]
while sum(d) != 0:
    d.append(int(input()))
print(sum(map(lambda x: x**2, d))) -End,"
 l = []
for i in range(1,int(input())+1):
    for j in range(i):
        l.append(i)
print(*[l[i] for i in range(l[-1])],sep=' ') -End,"
 c,n = 0,int(input())
for i in range(1,n+1):
    for _ in range(i):
        c+=1
        if c <= n:
            print(i,end=' ') -End,"
 [[[print(*[i for i in range(len(l)) if j == l[i]] if j in l else ['Отсутствует'])]for j in [input()]] for l in [input().split()]] -End,"
 c,n = 0,''
for k,v in enumerate(input().split()):
    if n != '':
        pass
    else:
        n = input()
    if n == v:
        c+=1
        print(k,end=' ')
if c == 0:
    print('Отсутствует') -End,"
 l,n = input().split(),input()
for i in range(len(l)):
    if n in l:
        if l[i] == n:
            print(i,end=' ')
    else:
        print('Отсутствует')
        break -End,"
 a = float(input())
b = float(input())
c = input()
if b == 0 and (c == ""/"" or c == ""mod"" or c == ""div""):
    print(""Деление на 0!"")
elif c == ""mod"":
    print(a % b)
elif c == ""pow"":
    print(a ** b)
elif c == ""div"":
    print(a // b)
elif c == ""+"":
    print(a + b)
elif c == ""-"":
    print(a - b)
elif c == ""*"":
    print(a * b)
else:
    print(a / b)
 -End,"
 form = input()
if form == ""треугольник"":
    a = float(input())
    b = float(input())
    c = float(input())
    p = (a + b + c) / 2
    print((p * (p - a) * (p - b) * (p - c)) ** 0.5)
elif form == ""прямоугольник"":
    a = float(input())
    b = float(input())
    print(a * b)
elif form == ""круг"":
    a = float(input())
    print(3.14 * a ** 2)
else: print(""Неизвестная форма"")
 -End,"
 a = int(input())
b = int(input())
c = int(input())
if a >= b and a >= c:
    if b >= c:
        print(a)
        print(c)
        print(b)
    else:
        print(a)
        print(b)
        print(c)
elif b >= a and b >= c:
    if a >= c:
        print(b)
        print(c)
        print(a)
    else:
        print(b)
        print(a)
        print(c)
else:
    if a >= b:
        print(c)
        print(b)
        print(a)
    else:
        print(c)
        print(a)
        print(b)
 -End,"
 n = int(input())
if n > 1000 or n < 0:
    print (""Не могу посчитать :("")
elif (n % 10 == 1 and n % 100 != 11) or n == 1:
    print(n, ""программист"")
elif 5 <= n % 100 <= 20 or 5 <= n % 10 <= 20 or n == 0 or n % 10 == 0:
    print(n, ""программистов"")
else:
    print(n, ""программиста"")
 -End,"
 n = int(input())
if (n % 10 == 1 and n % 100 != 11) or n == 1:
    print(n, ""программист"")
elif 5 <= n % 100 <= 20 or 5 <= n % 10 <= 20 or n == 0 or n % 10 == 0:
    print(n, ""программистов"")
else:
    print(n, ""программиста"")
 -End,"
 n = int(input())
if n % 10 + n % 100 // 10 + n % 1000 // 100 == n // 100000 + n % 100000 // 10000 + n % 10000 // 1000:
    print(""Счастливый"")
else:
    print(""Обычный"")
 -End,"
 a = int(input())
sum = 0
while a != 0:
    sum += a
    a = int(input())
print(sum)
 -End,"
 a = int(input())
b = int(input())
x = 1
while (x % a) != 0 or (x % b) != 0:
    x += 1
print(x)
 -End,"
 a = int(input())
b = int(input())
c = int(input())
d = int(input())
for i in range(a - 1, b + 1):
    if i != a - 1:
        print(i, ""\t"", end='')
    if i == a - 1:
        print(""\t"", end='')
        for j in range(c, d + 1):
            print(j, ""\t"", end='')
    else:
        for k in range(c, d + 1):
            print(i * k, ""\t"", end='')
    print()
 -End,"
 a, b = int(input()), int(input())
sum = 0
counter = 0
for i in range(a, b + 1):
    if i % 3 == 0:
        counter += 1
        sum += i
print(sum/counter)
 -End,"
 stroke = input()
print((stroke.upper().count('C')+stroke.upper().count('G'))/len(stroke)*100)
 -End,"
 s = input()
T = s[0]
count = 1
for i in s[1:]:
    if T == i:
        count += 1
    else:
        print(T + str(count), end='')
        count = 1
    T = i
print(T + str(count))
 -End,"
 n = int(input())
m = int(input())
print((max(m, n) - min(m, n))//60, (max(m, n) - min(m, n))%60)
 -End,"
 a, b, c = float(input()), float(input()), input()
print(a + b if c == ""+"" else a - b)
 -End,"
 a, b, c = int(input()), int(input()), int(input())
if a >= b:
    print(""2 <= 1"")
if b >= c:
    print(""3 <= 2"")
if a < b < c:
    print(""Все в порядке"")
 -End,"
 a, b, c = float(input()), float(input()), input()
print(a + b if c == ""+"" else a / b if c == ""/"" else a * b if c == ""*"" else a - b)
 -End,"
 a = input()
if len(a) < 8 or ""1234"" in a or ""qwerty"" in a or min(a) > ""a"":
  print(""Bad password"")
else:
  print(""Good password"") -End,"
 a, b, c, d = input(), input(), input(), input()
if a in d and b in d and c in d:
    print(""YES"")
else:
    print(""NO"")
 -End,"
 a = input()
print(""Проходи!"" if ""Арагорн"" in a or ""Леголас"" in a or ""Мериадок Брендибак"" in a or ""Боромир"" in a or ""Фродо Бэггинс"" in a else ""Ты не пройдешь!"")
 -End,"
 a, b, c, d = int(input()), int(input()), int(input()), int(input())
if a == c and b == d:
    print(""NO"")
elif 0 < c <= 8 and 0 < d <= 8:
    if (abs(c - a) < 2) and (abs(d - b) < 2):
        print(""YES"")
    else:
        print(""NO"")
else:
    print(""NO"")
 -End,"
 a, b = int(input()), int(input())
print(tuple(range(a,b)) if a < b else tuple(range(b,a)))
 -End,"
 a = int(input())
b = a
if a % 2 == 1:
    b += 1
print(tuple(range(b, a * 10 + 1, 2)))
 -End,"
 for i in range(int(input()), int(input()), -1):
    print(i)
 -End,"
 a, b = int(input()), int(input())
if b < a:
    a, b = b, a
for i in range(a, b):
    if i % 2 == 0 and i % 7 == 1:
        print(i)
 -End,"
 a, b = int(input()), int(input())
k = 0
for i in range(min(a, b), max(a, b)):
    k += i
print(k)
 -End,"
 k = 1
for i in range(1, int(input()) + 1):
    k *= i
print(k)
 -End,"
 rainbow = (""Красный"", ""Оранжевый"", ""Желтый"", ""Зеленый"", ""Голубой"", ""Синий"", ""Фиолетовый"")
n = int(input())
if n > 7:
    print(""Радуга состоит только из семи цветов"")
else:
    for i in range(n):
        print(rainbow[i])
 -End,"
 num = (""Первый"", ""Второй"", ""Третий"", ""Четвертый"", ""Пятый"", ""Шестой"", ""Седьмой"", ""Восьмой"", ""Девятый"", ""Десятый"", ""Одиннадцатый"", ""Двенадцатый"")
name = (""январь"", ""февраль"", ""март"", ""апрель"", ""май"", ""июнь"", ""июль"", ""август"", ""сентябрь"", ""октябрь"", ""ноябрь"", ""декабрь"")
n = int(input())
if n > 12:
    print(""Error"")
else:
    for i in range(n):
        print(num[i], ""месяц -"", name[i])
 -End,"
 n = int(input()) + 1
for i in range(1, n):
    if 5 > i % 10 > 1 and (i != 12) and (i != 13) and (i != 14):
        print(""На лугу"", i, ""коровы"")
    elif (i % 10 == 1) and (i != 11):
        print(""На лугу"", i, ""корова"")
    else:
        print(""На лугу"", i, ""коров"") -End,"
 n = int(input())
el1, el2, k = 1, 0, 0
for i in range(n):
    print(el1 + el2, end ="" "")
    k = el1
    el1 = el2
    el2 = k + el2
 -End,"
 n, k = int(input()), 0
for i in range(1, n + 1):
    if n % (i + 1) == 0:
        k += 1
if k == 1:
    print(""Простое"")
else:
    print(""Составное"")
     -End,"
 n = int(input())
for i in range(1, n + 1):
    for j in range(1, n + 1):
        print(i * j, end='\t')
    print()
         -End,"
 j = int(input())
k = 0
while j != 0:
  k = k + j
  j = int(input())
print(k) -End,"
 n = int(input())
j = 0
for i in range(1,n + 1):
  k = input()
  if ""rat"" in k:
    print(i)
    j = 1
if j == 0:
  print(-1)
     -End,"
 k = input()
if k == """":
    print(""Нет вдохновения? Ну ничего, попробуйте завтра"")
else:
    print(""Великолепно, пишите еще!"")
    while input() != """":
        print(""Великолепно, пишите еще!"")
if k != """":
    print(""Эти строки запомнятся надолго"") -End,"
 cash = int(input())  #Зарплата Джона
expenses = 0  #Сумма покупок
cost = 0  #Стоимость товара
while cash >= expenses:  #Проверка условия. Пока у Джона денег болше, чем затрат, выполняем действие.
    cost = int(input())  #Стоимость последнего товара положенного в корзину
    expenses += cost  #Подсчет суммы покупок
print(""Стоп, Джон!"")
print(expenses - cost)  #Отнимаем последнюю покупку, т.к. она превысила лимит Джона
 -End,"
 n = int(input())    #Вводим количество строк
i = 1   #Счетчик номера строки
trap = -1   #Переменная, содержащая два значения. 1 - крыса поймана. -1 - крысы не найдены
while (0 < i <= n) and trap == -1: #Условие. Пока счетчик строк меньше или равен заданному кол-ву строк
    k = input() #Ввод строки
    if ""rat"" in k:  #Условие. Если встретили крысу, выводим номер строки. Меняем переменную trap
        print(i)
        trap = 1
    i += 1
if trap == -1:  #Условие. Если крысы не найдены, выводим -1
    print(trap)
 -End,"
 k = 0
while k != 1:
    password = input()
    if ""qwerty"" in password or ""1234"" in password:
        print(""Слабый пароль"")
        continue
    if len(password) < 8:
        print(""Короткий пароль"")
        continue
    if min(password) > ""A"":
        print(""Пароль должен содержать цифры"")
        continue
    k = 1
 -End,"
 n = int(input())
x = 2
while n % x != 0:
    x += 1
print(x)
 -End,"
 n = int(input())
lst = []
kol = 0
for i in range(2, n + 1):
    for j in lst:
        if j > int(i ** 0.5) + 1:
            lst.append(i)
            kol += 1
            break
        if i % j == 0:
            break
    else:
        lst.append(i)
        kol += 1
print(kol) -End,"
 n = int(input())
k = 2
while k < n:
    k *= 2
if n - k == 0:
    print(""YES"")
else:
    print(""NO"")
 -End,"
 n = int(input())
first = int(input())
nod = 1
for i in range(n - 1):
    second = int(input())
    while first != 0 and second != 0:
        if first > second:
            first %= second
        else:
            second %= first
    nod = second + first
    first = nod
print(nod)
 -End,"
 n = int(input())
max = int(input())
min = max
bufer = 0
for i in range(n - 1):
    number = int(input())
    if number > max:
        max = number
    if number < min:
        min = number
while min != 0 and max != 0:
    if max > min:
        max %= min
    else:
        min %= max
nod = min + max
print(nod)
if nod == 1:
    print(""NO"")
else:
    for i in range(2, nod - 1):
        if (max + min) % i == 0:
            bufer = 1
    print(""NO"" if bufer else ""YES"")
 -End,"
 n = int(input())
first_digit = int(input())
min = 100000
if first_digit % 10 == 4:
    min = first_digit
for i in range(n - 1):
    next_digit = int(input())
    if next_digit % 10 == 4 and next_digit < min:
        min = next_digit
print(min)
 -End,"
 numbers = tuple(map(int, input().split()))
summ = 0
count = 0
for i in range(len(numbers) - 1):
    if (numbers[i] + numbers[i + 1]) % 3 == 0 and (numbers[i] + numbers[i + 1]) % 9 != 0:
        count += 1
print(count)
 -End,"
 numbers = tuple(map(int, input().split()))
buffer = 0
for i in range(len(numbers)):
    if numbers[i] < 100 and numbers[i] % 3 != 0 and numbers[i] > buffer:
        buffer = numbers[i]
print(""Не найдено"" if buffer == 0 else buffer)
 -End,"
 numbers = tuple(map(float, input().split()))
max = 0
for i in range(len(numbers)-1):
    if max <= abs(numbers[i] - numbers[i + 1]):
        max = abs(numbers[i] - numbers[i + 1])
        t1 = numbers[i]
        t2 = numbers[i + 1]
print(t1, t2)
 -End,"
 a = []
b = []
kesh = input()
while kesh != '.':
    if int(kesh) % 2 == 0:
        a.append(kesh)
    kesh = input()
for i in reversed(a):
    print(i, end=' ') -End,"
 a = []
kesh = input()
while kesh != '.':
    a.append(kesh)
    kesh = input()
if len(a) % 2 == 1:
    print(a[len(a) // 2])
else:
    print((int(a[len(a) // 2]) + int(a[len(a) // 2 - 1])) / 2)
 -End,"
 n = int(input())
a = []
min1 = 10001
min2 = 10001
for i in range(n):
    a.append(int(input()))
    if a[i] % 2 == 0:
        if a[i] < min1:
            min1 = a[i]
    elif a[i] < min2:
        min2 = a[i]
if min1 == 10001:
    min1 = 0
if min2 == 10001:
    min2 = 0
for i in range(n):
    if a[i] < (min1 + min2):
        a[i] += min1 + min2
print(*a)
 -End,"
 text = input()
a = []
while text != '.':
    a.append(text)
    text = input()
n = int(input())
for i in range(n):
    print(a[int(input()) - 1], end='')
 -End,"
 text = input()
a = []
k = -1
sub = []
word = 'python'
while text != '.':
    a.append(text)
    text = text.lower()
    if word in text.lower().split():
        k += 1
    text = input()
for i in range(len(a)):
    sub = list(a[i])
    if k != -1:
        print(*sub[k], end="" "")
         -End,"
 text = input()
a = []
k = -1
sub = []
while text != '.':
    a.append(text)
    if ""python"" in text.lower().split():
        k += 1
    text = input()
for i in range(len(a)):
    sub = list(a[i])
    print(*sub[k], end="" "")
         -End,"
 text = input()
replace = text.split()
replace = '_'.join(replace)
print(replace)
 -End,"
 text = input()
replace = text.split('.')
print(*replace)
sum = 0
for i in range(len(replace)):
    sum += int(replace[i])
print(sum)
 -End,"
 text = input()
replace = text.split('!')
replace = ''.join(replace)
replace = replace.split('.')
replace = ''.join(replace)
replace = replace.split(':')
replace = ''.join(replace)
replace = replace.split(';')
replace = ''.join(replace)
replace = replace.split('–')
replace = ''.join(replace)
replace = replace.split('?')
replace = ''.join(replace)
replace = replace.split(',')
replace = ''.join(replace)
print(replace.lower())
 -End,"
 text, n, k = input(), int(input()), int(input())
shifr = text.split()
print(*shifr[k-1::n])
 -End,"
 digits = input()
a = []
x = []
while digits != '.':
    a.append(digits)
    digits = input()
for i in a[::-1]:
    print(int(i) ** 2, end=' ')
     -End,"
 text = input()
a = []
while text != '.':
    a.append(text)
    text = input()
for i in range(len(a)):
    if '!!' in a[i]:
        print('предупреждение')
    elif '@@' in a[i]:
        print('ошибка')
    elif '**' in a[i]:
        print('подробное сообщение')
    elif '//' in a[i]:
        print('информация')
 -End,"
 text = input()
a = []
b = []
while text != '.':
    if 'GET' in text:
        print(a[-1])
    elif 'DELETE' in text:
        a.pop()
    else:
        b = text.split()
        b.pop(0)
        a.append(' '.join(b))
    text = input()
print(*a)
 -End,"
 x, y, result = tuple(map(int, input().split()))
if result == (x + y):
    print(f'{x} + {y} = {result}')
elif result == (x * y):
    print(f'{x} * {y} = {result}')
elif result == (x // y):
    print(f'{x} / {y} = {result}')
elif result == (x - y):
    print(f'{x} - {y} = {result}')
else:
    print(""Error"")
 -End,"
 s = input()
print(s.strip())
print(len(s) - len(s.strip()))
 -End,"
 s = input()
b = ''
for i in s:
    if i not in b:
        b += i
print(b)
 -End,"
 s = input().split(', ')
k = 1000000
sum = 0
for i in s:
    if int(k) > int(i):
        k = i
for i in range(len(s)):
    if k == s[i]:
        sum += i
print(sum)
 -End,"
 s = [int(i) for i in input().split(',')]
sum = 0
for i in range(len(s)):
    if min(s) == s[i]:
        sum += i
print(sum)
 -End,"
 text = input()
s = []
while text.upper() != text and text.lower() != text:
    s.append(text)
    text = input()
for i in range(len(s)):
    print(s[i].swapcase())
 -End,"
 text = input()
text2 = ''
k = 0
for i in text:
    if i.isdigit():
        if int(i) == 9:
            text2 += str(0)
        else:
            text2 += str(int(i) + 1)
            k += int(i) + 1
    else:
        text2 += i
print(text2)
print(k)
 -End,"
 s = [int(i) for i in input().split(',')]
print(s.count(max(s)))
 -End,"
 s = [int(i) for i in input().split(',')]
k1 = 0
k2 = 0
for i in s:
    if abs(i) > abs(k1):
        k1 = i
        if abs(k1) > abs(k2):
            k2, k1 = k1, k2
print(k1, k2)
 -End,"
 s = [int(i) for i in input().split()]
k1 = (sorted(s[:len(s)//2]))
k2 = (sorted(s[int(len(s)//2):]))
print(min(k1) + min(k2))
 -End,"
 s = input().upper().split()
s = ''.join(s)
print(""YES"" if s == (s[::-1]) else ""NO"")
 -End,"
 downloaded_all = input().split(', ')
downloaded_sorted = []
last_watched = int(input())
for i in downloaded_all:
    if i not in downloaded_sorted:
        downloaded_sorted.append(i)
print(len(downloaded_sorted))
for i in sorted(downloaded_sorted):
    if last_watched < int(i):
        next_episode = i
        break
print(next_episode)
 -End,"
 x, y, z = [int(i) for i in input().split()]
print(*[i ** z for i in range(x, y + 1)])
 -End,"
 n = int(input())
place = []
distance = []
result = []
for i in range(n):
    a = ''.join(input().split(',')).split()
    for j in range(len(a)):
        if j % 2 == 0:
            place.append(a[j])
        else:
            distance.append(int(a[j]))
    result.append(place[distance.index(min(distance))])
    place = []
    distance = []
print(', '.join(result))
 -End,"
 time, limit = [int(i) for i in input().split()]
konteiners = input().split(', ')
s = [int(i) for i in konteiners if (int(i)*2**time) <= limit]
print(len(s))
 -End,"
 names = (""Константная"", ""Линейная"", ""Квадратичная"", ""Кубическая"", ""Логарифмическая"", ""Я запомнил"")
indicates = (""O(1)"", ""O(n)"", ""O(n^2)"", ""O(n^3)"", ""O(log n)"", ""Молодец, Вася!"")
k = 0
while k != 5:
    k = names.index(input())
    print(indicates[k])
 -End,"
 n = [int(i) for i in input().split()]
new = []
for i in range(len(n)):
    new.append(max(n))
    n.remove(max(n))
print(*new)
 -End,"
 time, limit = [int(i) for i in input().split()]
konteiners = input().split(', ')
s = [str(konteiners.index(i) + 1) for i in konteiners if (int(i)*2**time) <= limit]
print(', '.join(s))
 -End,"
 arr = [int(i) for i in input().split()]
arrplus = []
max_elem = max(arr)
min_elem = abs(min(arr))
count = [0] * (max_elem + 1)
count_minus = [0] * (min_elem + 1)
for elem in arr:
    if elem < 0:
        count_minus[abs(elem)] += 1
    else:
        count[elem] += 1
arr.clear()
for i in reversed(range(len(count_minus))):
    arr += [i] * count_minus[i]
for i in range(len(count)):
    arrplus += [i] * count[i]
for i in arr:
    print(i*-1, end=' ')
print(*arrplus)
 -End,"
 def factorial(n, m):
    k = 0
    for i in range(n, m + 1):
        n = 1
        for j in range(1, i + 1):
            n = n * j
        k += n
    return k
print(factorial(int(input()),int(input())))
 -End,"
 def factorial(n):
    k = 1
    for i in range(1, n + 1):
        k *= i
    return k
sum = 0
for i in range(int(input()), int(input()) + 1):
    sum += factorial(i)
print(sum)
 -End,"
 def factorial(n):
    k = 1
    for i in range(1, n + 1):
        k *= i
    return k


def fib(n):
    k = 1
    m = 0
    for i in range(n - 1):
        k, m = m + k, k
    return k


n = int(input())
print(fib(n) + factorial(n))
 -End,"
 def maxabs(n):
    k = list(n)
    k = int(''.join(sorted(k, reverse=1)))
    return k

massive = [int(input()) for i in range(int(input()))]
massive2 = [maxabs(str(abs(i))) for i in massive]
print(massive[massive2.index(max(massive2))])
 -End,"
 def check_variable(v):
    s = list(v)
    t, k = 0, 0
    for i in s:
        if i >= '0' and i <= 'z' or i == '_':
            t += 0
        else:
            t += 1
    if v[0] < 'A' or ' ' in s:
        k = 1
    else:
        k = 0
    if k + t == 0:
        text = 'Можно использовать'
    else:
        text = 'Нельзя использовать'
    return text


v = input()
while v != 'Поработали, и хватит':
    print(check_variable(v))
    v = input()
 -End,"
 def get_winner(a, b, c, d, e):
    winner = [a, b, c, d, e]
    k = winner.index(max(winner))
    position = ('Первый', 'Второй', 'Третий', 'Четвертый', 'Пятый')
    return position[k]


money = input().split()
for i in range(5 - len(money)):
    money.append('0')
a, b, c, d, e = [int(i) for i in money]
print(get_winner(a, b, c, d, e))
 -End,"
 def get_weight(weight):
    k = sum(weight)
    print('Повезло' if k < int(input()) else 'Не повезло')

get_weight([float(i) for i in input().split()])
 -End,"
 def check_date(data):
    data = data.split('.')
    month = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
    if 0 < int(data[1]) < 13 and 0 < int(data[0]) <= (month[int(data[1]) - 1]):
        return True
    elif int(data[0]) == 29 and int(data[1]) == 2 and ((int(data[2]) % 4 == 0 and int(data[2]) % 100 != 0) or
                                                       int(data[2]) % 400 == 0 or int(data[2]) % 1000 == 0):
        return True
    else:
        return False

w = 0
data = input()
while data != '.':
    if check_date(data):
        print('Корректная')
        w += 1
    else:
        print('Некорректная')
    data = input()
print(w) -End,"
 def sumdig(n):
    n = list(n)
    sum = 0
    for i in n:
        sum += int(i)
    return sum


summcyfr = []
massiv = input().split()
for i in massiv:
    summcyfr.append(sumdig(i))

k = sorted(summcyfr)
for i in k:
      for j in range(len(massiv)):
            if sumdig(massiv[j]) == i:
                print(massiv[j], end = ' ')
                massiv[j] = ''
                 -End,"
 def shift_list(lst, shift):
    shift %= len(lst)
    lst2 = [0] * len(lst)
    for i in range(len(lst)):
        if (i + shift) < len(lst):
            lst2[i + shift] += lst[i]
        else:
            lst2[(i + shift) - len(lst)] += lst[i]
    return lst2
 -End,"
 def binary_to_decimal(binar):
    binar = list(binar)
    binar.reverse()
    deci = 0
    for i in range(len(binar)):
        if int(binar[i]) == 1:
            deci += 2 ** i
    return deci


def decimal_to_binary(deci):
    binar = 0
    while deci > 0:
        i = 0
        while (2 ** i) <= deci:
            i += 1
        binar += 10 ** (i - 1)
        deci -= 2 ** (i - 1)
    return binar -End,"
 def akkerman(m, n):
    if m == 0:
        return n + 1
    if m > 0 and n == 0:
        return akkerman(m - 1, 1)
    if m > 0 and n > 0:
        return akkerman(m - 1, akkerman(m, n - 1))

n, m = int(input()), int(input())
print(akkerman(m, n))
 -End,"
 # put your python code here
a, b, c = int(input()), int(input()), int(input())
M = max(a, b, c)                                  
m = min(a, b, c)                                  
print(M)                                          
print(m)                                          
print(a+b+c-M-m)                                   -End,"
 # put your python code here
c = int(input())
n = c // 10
t = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]
if  n not in t and c==(n * 10 + 1) or c == 1:
  print(c, 'программист')
elif n not in t and (n * 10 + 2) <= c <= (n * 10 + 4):
  print(c, 'программиста')
else:
  print(c, 'программистов')



 -End,"
 # put your python code here
c = int(input())
n = c//10
t = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]
print (c, 'программист' + ('' if n not in t and c == (n*10+1) or c == 1 else 'а' if n not in t and (n*10+2)<= c <= (n*10+4) else 'ов')) 



 -End,"
 # put your python code here
ticket = list(map(int, list(input())))
if sum(ticket[:3]) == sum(ticket[3:]):
    print('Счастливый')
else:
    print('Обычный')



 -End,"
 # put your python code here
a = int(input())
sum = 0
while a != 0:
    sum += a
    a = int(input())
print(sum)



 -End,"
 # put your python code here
a, b = int(input()), int(input())
if a > b:
    d = a
else:
    d = b
while d % a != 0 or d % b != 0:
    d += 1
print(d)



 -End,"
 # put your python code here
a, b = int(input()), int(input())
d = max(a, b)
while d % a != 0 or d % b != 0:
    d += 1
print(d)




 -End,"
 # put your python code here
a = 0
while a <= 100:
  a = int (input())
  if a < 10:
    continue
  if a > 100:
    break
  print(a)



 -End,"
 # put your python code here
a, b, c, d = int(input()), int(input()), int(input()), int(input())
for i in range(c, d+1):
  print('\t', i, end=' ')
for j in range(a, b+1):
    print()
    print(j, end='\t')
    for n in range(c, d+1):
        print(j*n, end='\t')



 -End,"
 # put your python code here
a, b = int(input()), int(input())
s = 0
c = 0
if a%3 == 2:
    a += 1
elif a%3 == 1:
    a += 2
for i in range(a, b+1, 3):
    c += 1
    s = s + i
print(s/c)



 -End,"
 # put your python code here
a, b = int(input()), int(input())
sum, c = 0, 0
for i in range(a, b+1):
    if i%3 == 0:
        c += 1
        sum += i
print(sum/c)



 -End,"
 # put your python code here
a = input()
print((a.upper().count('C') + a.upper().count('G')) / len(a) * 100)



 -End,"
 # put your python code here
s = input() + 's'
i = 0
c = 1
while i < len(s)-1:
    if s[i] == s[i+1]:
        i += 1
        c += 1
    else:
        print(s[i] + str(c), end='')
        i += 1
        c = 1



 -End,"
 # put your python code here
s = [int(i) for i in input().split()]
for i in range(0, len(s)):
    if len(s)>1:
        if i != len(s)-1:
            print(s[i-1]+s[i+1], end=' ')
        else:
            print(s[0]+s[-2], end=' ')
    else:
        print(s[0])
    



 -End,"
 # put your python code here
s, new_s = [int(i) for i in input().split()], []
for i in range(0, len(s)):
    n = s.count (s[i])
    if n > 1 :
        new_s.append(s[i])
for f in set(new_s):
    print(f, end = ' ')



 -End,"
 # put your python code here
a = int(input())
s, sq = a, a ** 2
while s != 0:
    a = int(input())
    sq += a ** 2
    s += a
print(sq)
    
    



 -End,"
 # put your python code here
a =[int(input())]
while sum(a) != 0:
    a.append(int(input()))
print(sum(i**2 for i in a))


 -End,"
 # put your python code here
a=[]
n, s =int(input()), 0
for i in range(1, n+1):
    a.append([i]*i)
for i in a:
    for j in i:
        s+=1
        if s <= n:
            print(j, end=' ')
        else:
            break -End,"
 # put your python code here
lst = [int(i) for i in input().split()]
g = int(input())
if g not in lst:
    print('Отсутствует')
else:
    for a in lst:
        if lst.count(g) >= 1:
            a = lst.index(g)
            print(a, end=' ')
            lst[0:a+1] = [0] * (a+1)



 -End,"
 # put your python code here
lst = [int(i) for i in input().split()]
g = int(input())
if g not in lst:
    print('Отсутствует')
for i in range(len(lst)):
    if lst[i] == g:
        print(i, end=' ')



 -End,"
 # put your python code here
a = input().split()
b = []
while a != ['end']:
    for i in range(len(a)):
        a[i] = int(a[i])
    b.append(a)
    a = input().split()
c = []
n = len(b)
m = len(b[0])
for i in range(n):
    for j in range(m):
        c.append(int(b[i][j-m+1]) + int(b[i][j-1]) + int(b[i-n+1][j]) + int(b[i-1][j]))
    for i in c:    
        print(i, end=' ')
    print()
    c = []



 -End,"
 def f(x):
    if x <= -2:
        y = 1 -(x+2)**2
    elif x > 2:
        y = (x-2)**2+1
    elif -2 < x <= 2:
        y = -x/2
    return y



 -End,"
 def modify_list(l):
    x = []
    for i in l:
        if i % 2 == 0:
            i = i // 2
            x.append(i)
    l.clear()
    l.extend(x)




 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key in d:
        d[key] += [value]
    elif 2*key in d:
        d[2*key] += [value]
    else:
        d[2*key] = [value]

# не добавляйте кода вне функции -End,"
 # put your python code here
s = [i.lower() for i in input().split()]
d = {}
for i in s:
    c = s.count(i)
    d[i] = c
for key, value in d.items():
    print(key, value)



 -End,"
 # put your python code here
s = input().lower().split()
d = {}
for i in s:
    d[i] = s.count(i)
for key, value in d.items():
    print(key, value)



 -End,"
 # put your python code here
s = input().lower().split()
for i in set(s):
    print(i, s.count(i))



 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
d = {}
n = int(input())
for count in range(n):
    count = int(input())
    if count not in d:
        d[count] = f(count)
    print(d[count])



 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
d = {}
for count in range(int(input())):
    count = int(input())
    if count not in d:
        d[count] = f(count)
    print(d[count])



 -End,"
 # put your python code here
from math import pi
print(2 * pi * float(input()))



 -End,"
 # put your python code here
n = int(input())
list = [[i for i in input().split(';')] for j in range(n)]
dict = {}
for i in range(len(list)):
    for j in range(len(list[i])):
        if list[i][j] not in dict and list[i][j].isdigit() == False:
            dict[list[i][j]] = [1, 0, 0, 0, 0]
            if int(list[i][j+1]) > int(list[i][j-1]):
                dict[list[i][j]][1] += 1
                dict[list[i][j]][4] += 3
            elif int(list[i][j+1]) == int(list[i][j-1]):
                dict[list[i][j]][2] += 1
                dict[list[i][j]][4] += 1
            else:
                dict[list[i][j]][3] += 1
        elif list[i][j] in dict and list[i][j].isdigit() == False:
            dict[list[i][j]][0] += 1
            if int(list[i][j+1]) > int(list[i][j-1]):
                dict[list[i][j]][1] += 1
                dict[list[i][j]][4] += 3
            elif int(list[i][j+1]) == int(list[i][j-1]):
                dict[list[i][j]][2] += 1
                dict[list[i][j]][4] += 1
            else:
                dict[list[i][j]][3] += 1
for k, v in dict.items():
    print(k+':', *v)



 -End,"
 # put your python code here
a = [i for i in input()]
b = [j for j in input()]
c = [f for f in input()]
e = [j for j in input()]
d = dict(zip(a, b))
for el in c:
    print(d[el], end='')
print()
for el in e:
    for k, v in d.items():
        if el == v:
            print(k, end='')



 -End,"
 # put your python code here
a, b, c, e = list(input()), list(input()), list(input()), list(input())
d = dict(zip(a, b))
for el in c:
    print(d[el], end='')
print()
for el in e:
    for k, v in d.items():
        if el == v:
            print(k, end='')



 -End,"
 # put your python code here
words = set()
for i in range(int(input())):
    words.add(input().lower())
text = set()
for i in range(int(input())):
    for j in input().lower().split():
        text.add(j)
for i in text-words:
    print(i) -End,"
 # put your python code here
a = []
for i in range(int(input())):
    a.append(input().split())
d = {'восток': 0, 'запад': 0, 'север': 0, 'юг': 0}
for i in range(len(a)):
    for j in range(0, len(a[i]), 2):
        d[a[i][0]] += int(a[i][1])
print(d['восток'] - d['запад'], d['север'] - d['юг'], end=' ') -End,"
 # put your python code here
d = {'восток': 0, 'запад': 0, 'север': 0, 'юг': 0}
for i in range(int(input())):
    n = input().split()
    d[n[0]] += int(n[1])
print(d['восток'] - d['запад'], d['север'] - d['юг'], end=' ')



 -End,"
 # put your python code here
n = int(input())
a = [[i for i in range(1, n+1)] for j in range (n)]
c, row, col = 0, 0, 0
if n % 2 != 0:
    x = int((n - 1) / 2)
    y = int((n - 1) / 2)
else:
    x = int(n / 2)
    y = int(n / 2 - 1)
while a[x][y] < n**2:
    for i in range(row+1, n-row):
        c += 1
        a[i][n - 1 - row] = a[0+row][n - 1 - row] + c
    c = 0
    for i in range(0+col, n - 1 - col):
        c += 1
        a[n - 1 - col][i] = a[n - 1 - col][n - 1 - col] + n - c - 2*col
    c = 0
    for i in range(1+row, n - 1-row):
        c += 1
        a[i][0+row] = a[n-1-row][0+row] + n - 1 - 2*row - c
    row += 1
    c = 0
    for i in range(1+col, n - 1-col):
        c += 1
        a[1+col][i] = a[1+col][0+col] + c
    col += 1
    c = 0
for i in a:
    for el in i:
        print(el, end=' ')
    print()



 -End,"
 # put your python code here
print(sum([int(input()) for i in range(int(input()))]))



 -End,"
 list = []
for i in objects:
    if id(i) not in list:
        list += [id(i)]
print(len(list))




 -End,"
 [print(len(set([id(i) for i in objects])))]




 -End,"
 def closest_mod_5(m):
    while m % 5 != 0:
        m += 1
    return m


 -End,"
 # put your python code here
n, k = map(int, input().split())
def factorial(x):
    res = 1
    for i in range(1, x+1):
        res *= i
    return res
print(factorial(n)//(factorial(k) * factorial(n-k)))



 -End,"
 # put your python code here
x, y = map(int, input().split())
def rec(n, k):
    if k == 0:return 1
    elif k > n:return 0
    else:return rec(n-1, k) + rec(n-1, k-1)
print(rec(x, y))



 -End,"
 # put your python code here
namespaces = {'global': {'parent': None, 'var': []}}
for i in range(int(input())):
    cmd, nm, var = input().split()
    if cmd == 'create':
        namespaces[nm] = {'parent': var, 'var': []}
    elif cmd == 'add':
        namespaces[nm]['var'] += [var]
    else:
        for key in namespaces.keys():
            if var in namespaces[nm]['var']:
                print(nm)
                break
            elif var not in namespaces[nm]['var'] and namespaces[nm]['parent'] != None:
                nm = namespaces[nm]['parent']
                if var in namespaces[nm]['var']:
                    print(nm)
                    break
            else:
                print(None)
                break



 -End,"
 # put your python code here
namespaces = {'global': {'parent': None, 'var': []}, None: {'parent': None, 'var': []}}
for i in range(int(input())):
    cmd, nm, var = input().split()
    if cmd == 'create':
        namespaces[nm] = {'parent': var, 'var': []}
    elif cmd == 'add':
        namespaces[nm]['var'] += [var]
    else:
        while nm and var not in namespaces[nm]['var']:
            nm = namespaces[nm]['parent']
        print(nm)



 -End,"
 # put your python code here
n = int(input())
txt = input().lower().strip()
orig = ' abcdefghijklmnopqrstuvwxyz'
new = []
for symb in txt:
    new.append(orig[(orig.index(symb) + n)%len(orig)])
print('Result: ""' + ''.join(new) + '""') -End,"
 # put your python code here
n = int(input())
txt = input().lower().strip()
o = ' abcdefghijklmnopqrstuvwxyz'
new = ''
for s in txt:
    new += o[(o.index(s) + n)%27]
print('Result: ""' + new + '""')



 -End,"
 # put your python code here
n = int(input())
matrix = [[0]*n for i in range(n)]
x, i, j = 1, 0, 0
while x <= n**2:
    matrix[i][j] = x
    if (i + j < n-1) and i <= j+1:
        j += 1
    elif (j + i >= n-1) and i < j:
        i += 1
    elif (i + j > n-1) and i >= j:
        j -= 1
    else:
        i -= 1
    x += 1
for el in matrix:
    print(*el)



 -End,"
 def f(x):
    if x <= -2:
        return 1 -(x+2)**2
    elif x > 2:
        return (x-2)**2+1
    else:
        return -x/2



 -End,"
 # put your python code here
n = input().split()
for i in set(n):
    if n.count(i) > 1:
        print(i, end=' ')



 -End,"
 # put your python code here
print('{X} and {Y} sat in the tree.\n{X} had fallen, {Y} was stolen.\nWhat\'s remaining in the tree?'.format(X = input(), Y = input()))



 -End,"
 # put your python code here
s = input().lower().split()
for i in set(s):
    print(i, s.count(i))



 -End,"
 # put your python code here
s = input().lower().split()
d = {}
for i in set(s):
    d[i] = s.count(i)
[print(key, val) for key, val in d.items()]



 -End,"
 # put your python code here
import collections
s = input().lower().split()
col = collections.Counter()
for word in s:
    col[word] += 1
[print(key, val) for key, val in col.items()]



 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.money = 0
    def can_add(self, v):
        if v <= (self.capacity - self.money):
            return True
        else:
            return False
    def add(self, v):
        if v <= (self.capacity - self.money):
            self.money += v




 -End,"
 class Buffer:
    def __init__(self):
        self.buf = []
    def add(self, *a):
        for i in a:
            self.buf = self.buf + [i]
        while len(self.buf) > 4:
            print(sum(self.buf[0:5]))
            del self.buf[0:5]
    def get_current_part(self):
        return self.buf
        # вернуть сохраненные в текущий момент элементы последовательности в порядке, в котором они были добавлены -End,"
 # put your python code here
n = int(input())
graph = {}
for i in range(n):
    s = input().split()
    if len(s) > 1:
        graph[s[0]] = s[2:]
    else:
        graph[s[0]] = [s[0]]

def Parents(graph, start, end, path=[]):
    path += [start]
    if start == end:
        return path

    for i in graph.get(start):
        if i not in path:
            newpath = Parents(graph, i, end, path)
            if newpath: return newpath
    return None

m = int(input())
for i in range(m):
    s = input().split()
    if Parents(graph, s[1], s[0], path=[]):
        print('Yes')
    else:
        print('No')



 -End,"
 # put your python code here
def find_path(start, path):
    path.add(start)
    for node in graph[start]:
        if node not in path:
            find_path(node, path)

graph = {}
for i in range(int(input())):
    s = input().split()
    graph[s[0]] = s[2:] if len(s) > 1 else [s[0]]

for i in range(int(input())):
    s = input().split()
    path = set()
    find_path(s[1], path)
    print('Yes' if s[0] in path else 'No')



 -End,"
 class ExtendedStack(list): 
    def sum(self):
        self.append(self.pop() + self.pop())
        return self
    def sub(self):
        self.append(self.pop() - self.pop())
        return self
    def mul(self):
        self.append(self.pop() * self.pop())
        return self
    def div(self):
        self.append(self.pop() // self.pop())
        return self




 -End,"
 class LoggableList(list, Loggable):
    def append(self, p):
        self += [p]
        return self.log(p) -End,"
 class NonPositiveError(Exception):
    pass

class PositiveList(list):
    def append(self, x):
        if x > 0:
            self += [x]
        else:
            raise NonPositiveError()




 -End,"
 # put your python code here
import datetime

r = (int(i) for i in input().split())
newdate = datetime.date(*r) + datetime.timedelta(int(input()))
print(newdate.year, newdate.month, newdate.day)



 -End,"
 # put your python code here
n = int(input())
print(n == -10 or -5 < n <= 3 or 8 < n < 12 or n >= 16)



 -End,"
 # put your python code here
lst = [int(i) for i in input().split()]
n = len(lst)
new_lst = set()
for i in range(n - 1):
    new_lst.add(abs(lst[i] - lst[i+1]))
print('Jolly' if set(range(1, n)) == new_lst or n == 1 else 'Not jolly')



 -End,"
 # put your python code here
n = int(input())
abc = []
c = 1
while c <= n:
    abc += str(c) * c
    c += 1
print(*abc[:n]) -End,"
 # put your python code here
str = input()
stack = []
count = []
for j, i in enumerate(str):
    if i == '(' or i == '[' or i =='{':
        stack.append(i)
        count.append(j)
    if i == ')' or i == ']' or i == '}':
        if stack:
            if i == ')' and stack[-1] == '(' or i == ']' and stack[-1] == '[' or i == '}' and stack[-1] == '{':
                stack.pop()
                count.pop()
            else:
                print(j+1)
                quit()
        else:
            stack.append(i)
            count.append(j)
            break
if stack:
    print(count[-1] + 1)
else:
    print('Success') -End,"
 class multifilter:
    def judge_half(pos, neg):
        return pos >= neg
    def judge_any(pos, neg):
        return pos >= 1
    def judge_all(pos, neg):
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable=iterable
        self.funcs=funcs
        self.judge=judge
    def __iter__(self):
        for i in self.iterable:
            pos=0
            neg=0
            for j in self.funcs:
                if j(i) == True:
                    pos += 1
                else:
                    neg += 1
            if self.judge(pos, neg):
               yield i




 -End,"
 from math import factorial
import itertools

def primes():
    a = 1
    while a:
        a += 1
        if (factorial(a-1) + 1) % a == 0:
            yield a
                



 -End,"
 def mod_checker(x, mod=0):
    return lambda y: y % x == mod




 -End,"
 # put your python code here
s, a, b = (input().strip() for i in range(3))
counter = 0
		
while True:
    if a in s:		
        if a in b:
            counter ='Impossible'
            break
        else:
            s = s.replace(a, b)
            counter += 1
    else:
        break
print(counter)



 -End,"
 # put your python code here
s, t = input(), input()
count = 0
while t in s:
    if s.endswith(t):
        s = s[:-1]
        count += 1
    elif len(s) == 0:
        break
    else:
        s = s[:-1]

print(count)



 -End,"
 # put your python code here
import re
import sys
for line in sys.stdin:
    line = line.rstrip()
    example = re.findall(r'.*cat.*cat.*', line)
    if example:
        print(*example)

 -End,"
 # put your python code here
import re
import sys
for line in sys.stdin:
    line = line.rstrip()
    example = re.search(r'\bcat\b', line)
    if example:
        print(line)



 -End,"
 # put your python code here
import re
import sys

[print (line.rstrip()) for line in sys.stdin if re.search(r'\\', line)]



 -End,"
 # put your python code here
import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r'\b(\w+)\1\b', line):
        print(line) -End,"
 # put your python code here
import sys, re
for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'human', 'computer', line))



 -End,"
 # put your python code here
import sys, re
for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'\b([a|A]+)\b', 'argh', line, count=1))



 -End,"
 # put your python code here
import sys, re
for line in sys.stdin:
    line = line.strip()
    print(re.sub(r'(\w)\1{1,}', r'\1', line))



 -End,"
 # put your python code here
import requests, re

url_2 = []
one, two = input(), input()
if requests.get(one).status_code == 200:
    url_ = re.findall(r'https?.*html', requests.get(one).text)
    for i in url_:
        url_2 += re.findall(r'https?.*html', requests.get(i).text)
if two in url_2:
    print('Yes')
else:
    print('No')

 -End,"
 # put your python code here
import json
data = json.loads(input())
dict_answer, dict2 = {}, {}
# создаем словарь предок: [потомки]
for el in data:
    if el['parents'] == [] and el['name'] not in dict2:
        dict2[el['name']] = [el['name']]
    else:
        for i in el['parents']:
            if i not in dict2:
                dict2[i] = [el['name']]
            else:
                dict2[i] += [el['name']]
# добавляем не попавших предков
for elem in data:
    if elem['name'] not in dict2:
        dict2[elem['name']] = [elem['name']]
# функция-рекурсия в глубину        
def find_path(start, path):
    path.add(start)
    for node in dict2[start]:
        if node not in path and node in dict2:
            find_path(node, path)
        else:
            path.add(node)
# добавляем ответы в словарь с ответами)
for i in dict2:
    way = set()
    find_path(i, way)
    dict_answer[i] = len(way)
# сортируем и выводим словарь с ответами
for key, value in sorted(dict_answer.items()):
    print(key, ':', value) -End,"
 # put your python code here
tree_origin, tree_parents, lst_parents = {}, {}, []
for i in range(int(input())):
    s = input().split()
    tree_origin[s[0]] = s[2:] if len(s) > 1 else []

def find_path(start, path):
    for node in tree_origin[start]:
        if node not in path:
            path.add(node)
            find_path(node, path)

for el in tree_origin:
    way = set()
    find_path(el, way)
    tree_parents[el] = list(way)

for ever in range(int(input())):
    s = input()
    if s not in lst_parents:
        lst_parents.append(s)
        for val in tree_parents[s]:
            if val in lst_parents:
                print(s)
                break

 -End,"
 # put your python code here
s = input()+' '
count = 1
s_new = ''
for i in range(len(s)-1):
    if s[i] == s[i+1]:
        count += 1
    else:
        if count == 1:
            s_new += s[i]
        else:
            s_new += str(count)
            s_new += s[i]
        count = 1
print(s_new) -End,"
 # put your python code here
card1, card2 = input().split()
trump = input()
value = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']

def cards(a, b):
	if value.index(a[:-1]) == value.index(b[:-1]) or (a[-1:] != b[-1:]):
		print('Error')
	elif value.index(a[:-1]) > value.index(b[:-1]):
		print('First')
	else:
		print('Second')
		
def trumps(a, b):
	if (a[-1:]==trump and b[-1:]==trump) or (a[-1:]!=trump and b[-1:]!=trump):
		cards(a, b)
	elif a[-1:] == trump:
		print('First')
	else:
		print('Second')
		
trumps(card1, card2)



 -End,"
 # put your python code here
from xml.etree import ElementTree

def recurcionForCubes(el, root, value):
    value += 1
    dict_value[el.attrib['color']] += [value]
    for child in el:
        if child in el:
            recurcionForCubes(child, el, value)
            
root = ElementTree.fromstring(input())

dict_value = {'red':[0], 'green':[0], 'blue':[0]}
dict_value[root.attrib['color']] += [1]

for el in root:
    value = 1
    recurcionForCubes(el, root, value)
print('{} {} {}'.format(sum(dict_value['red']), sum(dict_value['green']), sum(dict_value['blue'])))



 -End,"
 # put your python code here
import requests, re

list_url = re.findall(r'<a.*href=[\""|\'](?:https?|ftps?)://(.*?.\w+.-?\w+.)[:|/|\""]', requests.get(input()).text)

res = set()
for i in list_url:
    if i not in res:
        res.add(i.strip('/'))
[print(i) for i in sorted(res)] -End,"
 def fib(n):
    fb = [0, 1]
    a, b = fb[0], fb[1]
    while len(fb) <= n:
        x = a + b
        fb += [x]
        a, b = b, x
    return fb[n]
def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main() -End,"
 # put your python code here
d = {'mile': 1609, 'yard': 0.9144, 'foot': 0.3048, 'inch': 0.0254, 'km': 1000, 'cm': 0.01, 'mm': 0.001, 'm': 1}
tex = input().split()
res = float(tex[0])*d[tex[1]]/d[tex[3]]
print('{0:.2e}'.format(res))


 -End,"
 # put your python code here
dic = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000, ' ':0}
into = input() + ' '
result = 0
for i in range(len(into)-1):
    if dic[into[i]] < dic[into[i+1]]:
        result -= dic[into[i]]
    else:
        result += dic[into[i]]
print(result)



 -End,"
 all = float(input()) *1000
apl = (all)*0.6
muk = (all-apl) - ((all-apl)*0.3)
print (muk )




 -End,"
 a,b = list (map(int,(input().split())))
cnt = int(input()) * (a * 100 + b)
print (cnt // 100, cnt % 100)



 -End,"
 print((int(input()) % 100)//10 )




 -End,"
 a = (input())
b = int(a[:1])
c = int(a[1])
d = int(a[-1:])
print(b+c,c+d, sep=(''))


 -End,"
 a = int(input())
b = (a // 60) % 60
print (b)



 -End,"
 YEAR = int(input())
YEAR_4 = YEAR % 4
if ((YEAR_4 == 0) and (YEAR % 100 > 0)) or YEAR % 400 == 0:
    print(""Високосный"")
else:
    print(""Обычный"") -End,"
 pos_x ,pos_y, new_pos_x, new_pos_y = int(input()),int(input()),int(input()),int(input())
report = (""NO"")
if(
    (pos_x - 2 == new_pos_x and pos_y - 1 == new_pos_y or pos_x - 1 == new_pos_x and pos_y - 2 == new_pos_y) or
    (pos_x + 2 == new_pos_x and pos_y - 1 == new_pos_y or pos_x + 1 == new_pos_x and pos_y - 2 == new_pos_y) or
    (pos_x - 2 == new_pos_x and pos_y + 1 == new_pos_y or pos_x - 1 == new_pos_x and pos_y + 2 == new_pos_y) or
    (pos_x + 2 == new_pos_x and pos_y + 1 == new_pos_y or pos_x + 1 == new_pos_x and pos_y + 2 == new_pos_y)
    ):
    report = (""YES"")
print (report)




 -End,"
 x,y,x1,y1 = int(input()),int(input()),int(input()),int(input())
result = (""NO"")
if (
((x - 1) == x1 or (x + 1) == x1 or x ==x1)  and
(y == y1 or (y - 1) == y1 or (y + 1) == y1 )):
    result = (""YES"")
print(result)




 -End,"
 X,Y,Z = (int (input()) for i in range(3))
result = (""NO"")
if X*Y >= Z and (Z % X == 0 or Z % Y == 0):
    result = (""YES"")
print(result)





 -End,"
 MIN = int(input())
MAX = int(input())
H = int(input())
if MAX >= H and H >= MIN:
  print (""Это нормально"")
elif MIN > H:
  print (""Недосып"")
elif MAX < H :
  print (""Пересып"") -End,"
 from math import pow, fmod
A = float(input())
B = float(input())
oper = input()
if (B == 0 and (oper == ""/"" or oper == ""div"" or oper == ""mod"")):
    print(""Деление на 0!"")
elif oper == ""+"":
    print(A + B)
elif oper == ""-"":
    print(A - B)
elif oper == ""/"":
    print(A / B) 
elif oper == ""*"":
    print(A * B)
elif oper == ""mod"":
    print(fmod(A, B))
elif oper == ""pow"":
    print( pow(A, B))
elif oper == ""div"":
    print(A // B)




 -End,"
 from math import pi, sqrt
type_geometr = input()
if type_geometr == ""треугольник"":
    a,b,c =[int(input()) for i in range(3)]
    p = (a + b + c) / 2
    print (sqrt(p * (p - a) * (p - b) * (p - c)))
elif type_geometr == 'прямоугольник':
    a,b =[int(input()) for i in range(2)]
    print(a * b)
elif type_geometr == 'круг':
    r=int(input())
    print((round(pi, 2)) * (r**2))




 -End,"
 N = int (input())
if (N % 100) >=11 and (N % 100) <=14:
    print(N, 'программистов')
elif (N % 10) == 0 or (N % 10) >=5:
    print(N, 'программистов')
elif (N % 10) == 1:
    print(N, 'программист')
elif (N % 10) > 1 and (N % 10) <=4:
    print(N, 'программиста') -End,"
 x = int(input())
y = int(input())
cicle = True
a,b = 1,2
piece_pie=1
while cicle == True:
      if  piece_pie % x ==0:
        a = piece_pie
      if piece_pie % y ==0:
        b = piece_pie
      if a == b:
         print (piece_pie)
         cicle = False
      else: piece_pie +=1




 -End,"
 while True:
    a = int(input())
    if a < 10:
        continue
    elif a > 100:
        break
    print(a)




 -End,"
 a = int(input())
b = int(input())+1
z = 0
s = 0
while a % 3 !=0:
    a = a + 1
for i in range (a, b, 3):
    s = i + s
    z=z+1
print (s / z)




 -End,"
 sm = 0
n = int(input())
if n+ 1 <= 100 :
  for i in range (1,n+1):
    x = int (input())
    if x % 6 == 0:
      sm = sm + x
  print (sm) -End,"
 n = int(input())
n_min = 30000
if n+ 1 <= 100 :
  for i in range (1,n+1):
    x = int (input())
    if x % 3 == 0 and x <=n_min:
      n_min = x
  print (n_min)




 -End,"
 n = int(input())
sm = []
num_max = 30000
if n+ 1 <= 100 :
  for i in range (1,n+1):
    x = int (input())
    if x % 4 == 0 and x <= num_max :
      sm.append(x)
  print (max(sm))




 -End,"
 summ = 0
z = True
while z:
  x = int(input())
  if x == 0:
    z = False
  elif x % 10 == 4 and x % 6 == 0:
    summ = summ + x
print (summ)




 -End,"
 n=int(input())
sp = []
BB = (""NO"")
for i in range (1, n+1):
        speed = round(float(input()))
        sp.append(speed)
        if speed < 30:
            BB = (""YES"")
print(max(sp))
print(BB)


 -End,"
 n=int(input())
sp = []
BB = 0
for i in range (1, n+1):
        speed = round(float(input()))
        sp.append(speed)
        if speed <= 30:
            BB += 1
print(max(sp) - min(sp))
print(BB)

 -End,"
 n=int(input())
cnt3 = 0
cnt_chet = 0
cnt_nechet = 0
while n > 0:
  if n % 2 ==1:
    cnt_nechet+=1
    if n % 3 == 0:
      cnt3 +=1
  else: cnt_chet +=1
  n= int(input())
print ((cnt_chet + cnt_nechet),cnt3, sep = ('\n'))
 -End,"
 n=int(input())
summ_nmb = razn = cnt_polg = cnt_otric = 0
while n != 0:
  summ_nmb = summ_nmb + n
  if n >0:
    cnt_polg += 1
  else: cnt_otric +=1
  n= int(input())
print (summ_nmb,(cnt_polg - cnt_otric), sep = ('\n')) -End,"
 n = int(input())
min_tmp = 100 
tmp15 = ""NO""
for i in range(n):
  tmp = int(input())
  if tmp < min_tmp:
    min_tmp = tmp
  if tmp < -15:
    tmp15 = ""YES""
print(min_tmp, tmp15, sep =('\n')) -End,"
 n = int(input())
list_tmp =[] 
tmp15 = ""NO""
for i in range(n):
  tmp = int(input())
  list_tmp.append(tmp)
  if tmp < -15:
    tmp15 = ""YES""
print(min(list_tmp), tmp15, sep =('\n')) -End,"
 def DecToBin (dec):

    bin = ''

    while dec > 0:

        dec, bin = dec // 2, str (dec % 2) + bin
    return (bin)
a = DecToBin(int(input()))
print(a)





 -End,"
 def func (x):
  result = ''
  if x <= -2:
    result = 1 - (x + 2)**2
  elif  -2 < x <= 2:
    result = -(x / 2)
  elif x > 2:
    result = (x - 2)**2 + 1
  return (result)
a = func(float(input()))
print(a)




 -End,"
 def DecToBin (bi):

    dec = 0
    i = 0
    while bi > 0:
      dec,bi = (bi % 10 * (2**i)) + dec,bi // 10
      i +=1
    return (dec)
a = DecToBin(int(input()))
print(a)




 -End,"
 n = int(input())
def Sum_Dgt(n):
  if n < 10:
    return n
  else:
    return n % 10 + Sum_Dgt(n // 10)
def SQ_Dgt(n):
  if n < 10:
    return n
  else:
   return SQ_Dgt(Sum_Dgt(n))
print (SQ_Dgt(n))




 -End,"
 a = [int(input())**2 for i in range(5)]
print (' '.join (str (x) for x in (a)))




 -End,"
 p = int(input())
a = []
s=0
for i in range(p):
  a = a + [int(input())]
for x in a:
  s=s+x
res = s/len(a)
print(res)




 -End,"
 n= int(input())
m=0
Dat=input().split()
Dat= list(map(int,Dat))

for i in range (n):
  if Dat[i] < 8:
    m +=1
print(m)




 -End,"
 n= int(input())
m=0
p=0
Dat= list(map(int,input().split()))
for i in range (n):
  if Dat[i] >= m:
    m = Dat[i]
    p = i
print(p+1)




 -End,"
 a=[3, 4, 2, 1, 0, 7, 8]
rev = int(input())
z=-1
for i in range (len(a)):
  if a[i] == rev:
    z=(a.index(rev))
print(z)  




 -End,"
 a=[3, 4, 2, 1, 0, 7, 8]
def fnd (x, a):
  if x in a:
    return (a.index(x))
  else:
    return -1
print( fnd(int(input()),a))




 -End,"
 def fndmin (a):
 z=min(a)
 return z
def fndmx (a):
  x = max(a)
  return x
a=[3, 5, 65, 67, 4, 2, 3, 6, 9, -10, -27, 6, 0, 8]
print(fndmin(a),fndmx(a), sep = ('\n'))




 -End,"
 def fndmin (a):
  mn = 0
  z = a[0]
  for i in range (1,len(a)):
    if a[mn] > a [i]:
      z = a[i]
      mn = i
  return z

def fndmx (a):
  mx=0
  g=a[0]
  for i in range (1,len(a)):
    if a[mx] < a[i]:
      g = a[i]
      mx = i 
  return g

a=[3, 5, 65, 67, 4, 2, 3, 6, 9, -10, -27, 6, 0, 8]
print(fndmin(a),fndmx(a), sep = ('\n'))





 -End,"
 def srt (a):
  
  while True:
    p = True
    for i in range (0,len(a)-1):
      if a[i] > a[i+1]:
        a[i],a[i+1] = a[i+1],a[i]
        p =False
    if p == True :
      break
a = list(map(int,input().split()))
srt(a)
print (a)



 -End,"
 def FndSortLst (x,b):
  fst, lst = 0 , len(b)-1
  while fst != lst:
    if b[((fst + lst) // 2)] < x :
      fst = ((fst + lst) // 2) +1
    else :
      lst = ((fst + lst) // 2)
  if b[fst] == x:
    return fst
  else:
    return -1

def srt (a):
  
  while True:
    p = True
    for i in range (0,len(a)-1):
      if a[i] > a[i+1]:
        a[i],a[i+1] = a[i+1],a[i]
        p =False
    if p == True :
      break
  return a

x = int(input())
a = list(map(int,input().split()))
b = srt(a)


print(FndSortLst(x,a)) -End,"
 const =2
cnt = 0
for i in range (3):
  a= int(input())
  cnt = cnt + (a // const + a % const)
print(round(cnt))




 -End,"
 rub,cop,pirog = int(input()),int(input()),int(input())
all_rub = rub*pirog
all_cop = cop*pirog
if all_cop//100 >0:
  all_rub=all_rub + all_cop//100
  all_cop = all_cop % 100
print(all_rub ,all_cop)



 -End,"
 a = input()
c = a[::-1]
result = 'YES'
if a != c:
  result = 'NO'
print(result)




 -End,"
 proc_vkl,vkl_rub,vklad_kop = int(input()),int(input()),int(input())/100
sumvkl = vkl_rub + vklad_kop
itog = (sumvkl + proc_vkl*sumvkl/100)
print(round(itog // 1), round((itog % 1)*100)) -End,"
 def istriangle (AB,BC,AC):
  if AB < (BC+ AC) and BC <(AB + AC) and AC < (AB + BC):
    return 'YES'
  else :
    return 'NO'
print (istriangle(int(input()),int(input()),int(input())))




 -End,"
 i = True
summ =0
maxb = 0
while i == True:
  a = int(input())
  if a == 0:
    i = False
  else :
    summ = summ + a
  if a > maxb:
    maxb=a
print(summ, maxb, sep='\n')




 -End,"
 a=[]
for i in range(7):
  a.append(int(input()))
a.sort()
a.reverse()
for x in a[1::2]:
  print(x, sep='\n')
 -End,"
 s = input()
year = int(s[7:11])
name = s[:4]
if year >2000:
  print ('Привет, ', name,'! Ждем тебя на первой секции (дети)', sep = '')
elif year <=2000 and year >= (2018 - 35):
  print ('Привет, ', name,'! Ждем тебя на второй секции (молодежь)', sep = '')
else :
  print ('Привет, ', name,'! Ждем тебя на третьей секции', sep = '')




 -End,"
 all_pup = int(input())
all_kg=0
cnt_min= 100000
cnt_max = 0
cnt_pup = 0
for i in range (int(input())):
  kg = int(input())
  all_kg = all_kg+kg
  cnt_pup +=1
  if cnt_max < kg:
    cnt_max =kg
  if cnt_min > kg:
    cnt_min = kg
print(all_kg,cnt_max,cnt_min,all_kg/cnt_pup)




 -End,"
 kuskov = int (input())
ptic = 0
n=0
while kuskov > 0:
  n+=1
  if kuskov > ptic:
    ptic =ptic+n
  kuskov = kuskov - ptic
print (ptic)




 -End,"
 def game (a,b):
  if  (a == 'rock' or b == 'rock') and (a == 'scissors' or  b == 'scissors') :
    return 'Rock wins!'
  elif (a == 'rock' or b == 'rock') and (b == 'paper' or a == 'paper' ):
    return 'Paper wins!'
  elif (a == 'paper' or b == 'paper') and (b == 'scissors' or a == 'scissors'):
    return 'Scissors win!'
  elif a == b :
    return """"""It's a tie!""""""
  else :
    return 'Invalid input! You have not entered rock, paper or scissors, try again.'
print (game(input(),input()))




 -End,"
 pdef= 10000
p_var = int(input())
old = 0
a=5000

def fib(n):
    if n<3:
        return 1
    return fib(n-1) + fib(n-2)

s = []
for n in range (20):
  if fib(n) <= 5000 :
    s.append((fib(n)))
    #print(s)

while a != p_var and old <10000:
  old +=1
  if s.count(old) >0:
    a = pdef -old
    pdef = a
  else :
    a = pdef +1
    pdef =a
print (old) -End,"
 from decimal import Decimal
vklad = int(input())
stavka = int(input())
years = int(input())
summ=0
n = 0
while n < years:
  vklad = float ((vklad + vklad*stavka / 100))
  summ = Decimal(vklad)
  summ = summ.quantize(Decimal(""3.00""))
  n +=1
  print(summ)




 -End,"
 balls = list(map(int, input().split()))
i= sum(balls[:3])
p= sum(balls[3:6])
s= sum(balls[6:])
maks =0

if i >p:
  maks = i
else:
   maks = p
if maks >s:
  print (maks)
else:
  print (s)




 -End,"
 price_osn = int(input())
price_lop = int(input())
max_price = int(input())
cnt_lop = 0
while price_osn + price_lop * cnt_lop <= max_price:
  cnt_lop +=1
if price_osn + price_lop * cnt_lop <= max_price:
  print (cnt_lop)
else :
  print (cnt_lop -1)




 -End,"
 def numb (x):
  n=x.replace(' ','')
  n = (''.join(n[2]+n[0]+n[1]) + ''.join(n[1]+n[2]+n[0]) + ''.join(n[2]+n[1]+n[0]) + ''.join(n[0]+n[2]+n[1]) + ''.join(n[0]+n[1]+n[2]) + ''.join(n[1]+n[0]+n[2]))
  a = [n[:3], n[3:6], n[6:9], n[9:12], n[12:15], n[15:]]
  
  return sorted(a, reverse = False)
a = numb(((input())))
ai =[int(x) for x in a]
aj = []
for i in ai:
  if i // 100 >0 and i not in aj:
    aj.append(i)
    print(i)


 -End,"
 cifir = [6, 2, 5, 5, 4, 5, 6, 3, 7, 6]
numb = int(input())
summ = 0
while numb >0 :
  summ = summ + cifir[numb % 10]
  numb = numb // 10
print (summ)




 -End,"
 strng = '0'
oldstrng = strng[:]
newstrng =''
lenth = int(input())
while len(strng) <= lenth:
  for i in range (len(strng)):
    if strng[i] == '0':
      newstrng = newstrng + '1'
      strng = oldstrng + newstrng
    else:
      newstrng = newstrng + '0'
      strng = oldstrng + newstrng
print (strng[lenth-1]) -End,"
 a = int(input())
strn = (input()).split(' ')
lst = []
for i in strn:
  lst.append (int(i))
cnt = 0
tri = 0
while cnt < a:
    for i in range(a):
      if lst[i] !=  i+1:
        rem_num =lst[i]
        rem_ind = lst.index(i+1)
        lst.insert(i,lst[lst.index(i+1)])
        lst.pop(i+1)
        lst.insert(rem_ind,rem_num)
        lst.pop(rem_ind+1)
        cnt+=1
        tri+=1
      else:
        cnt+=1

print (tri)




 -End,"
 min_slp,max_slp,fact_slp = (int(input()) for i in range(3))
result = 'Это нормально'
if fact_slp < min_slp:
  result = 'Недосып'
if fact_slp > max_slp:
  result = 'Пересып'
print(result)



 -End,"
 year = int(input())
y_type = 'Обычный'
if (year % 4 == 0) == (year % 100 !=0) or year % 400 == 0 :
  y_type = 'Високосный'
print(y_type)




 -End,"
 from math import sqrt as Q
a,b,c= (int(input()) for z in range(3))
p = (a + b + c)/2
print ( Q(p * (p - a) * (p - b) * (p - c)))




 -End,"
 a= list(int(input()) for a in range(3))
a.sort()
print(a[2],a[0],a[1], sep = '\n')




 -End,"
 a= int(input())
word='программ'
z=('ист','истов','иста')
if a % 10==1 and a%100!=11:
  print(a,(word+z[0]))
elif 2 <=(a % 10) <=4 and a%100 !=12 and a%100 !=13 and a%100 !=14  :
  print(a,(word+z[2]))
elif a%10==0 or a%100==11 :
  print(a,(word+z[1]))
elif a%10 >= 5:
  print(a,(word+z[1]))
elif 11<=a%100<=19 and a%10 != 5 :
  print(a,(word+z[1]))




 -End,"
 a=input()
if (int(a[0])+int(a[1])+int(a[2])==(int(a[3])+int(a[4])+int(a[5]))):
  print('Счастливый')
else:
  print('Обычный')




 -End,"
 b = True
c=0
while b :
  a = int(input())
  c +=a
  if a ==0:
    b=False
    print (c)




 -End,"
 a,b =  (int(input()) for i in range(2))
c= max(a,b)
while (c % a) != (c % b):
  c+=1
print (c)




 -End,"
 def mult1(x,y):
  return (x * y)
a,b,c,d = (int(input()) for i in range(4))
for r in range(c,d+1):
  print('\t', r, end="""")
print()
for x in range(a,b+1):
  print(x, end="""")
  for r in range(c,d+1):
    print('\t',mult1(x,r), end="""")
  print()




 -End,"
 def srdn(a,b,sm,cnt):
  for s in range (a,b+1):
    if s % 3 ==0:
      sm +=s
      cnt +=1
  return (sm / cnt)
print (srdn(int(input()),int(input()),0,0))




 -End,"
 s = input()
st=''
digest=''
y=0
z=0
for j in (s):
  while y <= (len(s)-1) and s[z] == s[y]:
    st+=s[y]
    y+=1
  if len(st)>0:
    digest+=st[0]+str(len(st))
    st=''
  while y <= (len(s)-1) and s[z] != s[y]:
    z=y
    st+=s[y]
    y+=1
    if y < len(s) and s[z] != s[y]:
       digest+=st[0]+str(len(st))
       st=''
print(digest)




 -End,"
 print(sum(list(map(int, input().split()))))



 -End,"
 a = (list(map(int, input().split())))
b=[]
z=0
if len(a) >=2:
  while z <= (len(a) -1):
    if z == (len(a) -1):
      b.append(a[0]+a[z-1])
      z+=1
    else:
      b.append(a[z-1] + a[z+1])
      z+=1
else:
  b.append(a[0])
print(' '.join(str(v) for v in b))



 -End,"
 a = (list(map(int, input().split())))
b=[]
for v in a :
  if a.count(v) >1 and b.count(v)==0:
    b.append(v)
print (' '.join(str(s) for s in b ))




 -End,"
 a=b=c=0
while True:
  a=int(input())
  b+=a**2
  c+=a
  if c==0:
    break
print (b)




 -End,"
 stop = int(input())
b=[]
a= list(map(int, (i for i in range (1,101))))
for k in range (len(a)):
  if len(b) <=stop:
    b+=[a[k]]*(k+1)
  else:
    break
print(' '.join(str(x)for x in b[:stop]))




 -End,"
 a = list(map (int,(input().split())))
x = int(input())
b=[]
if x not in a:
  print (""Отсутствует"")
else:
  for i in range(len(a)):
    if a[i] == x:
      b+=[i]
print (' '.join(str(z) for z in b))




 -End,"
 from copy import copy,deepcopy
spisok=[]
spisok2=[]
stop=['end']
while stop not in spisok:
  spisok+=[list(input().split())]
spisok.pop()
cnt = (len(spisok))
cnt1 = (len(spisok[0]))
spisok2 =deepcopy(spisok)
if cnt==1 and cnt1==1:
  for i in range (0,-cnt,-1):
    for j in range (0,-cnt1,-1):
      spisok2[i][j]=int(spisok[i-1][j-1]) + int(spisok[i-1][j]) + int(spisok[i][j-1]) + int(spisok[i][j])
elif cnt1 >=1 and cnt <=1:
  for i in range (0,-cnt,-1):
    for j in range (0,-cnt1,-1):
      spisok2[i][j]=int(spisok[i][j]) + int(spisok[i-1][j+1]) + int(spisok[i][j-1]) + int(spisok[i][j])
elif cnt1 <=1 and cnt >=1:
  for i in range (0,-cnt,-1):
    for j in range (0,-cnt1,-1):
      spisok2[i][j]=int(spisok[i][j]) + int(spisok[i+1][j]) + int(spisok[i-1][j]) + int(spisok[i][j-1])
else:
  for i in range (0,-cnt,-1):
    for j in range (0,-cnt1,-1):
      spisok2[i][j]=int(spisok[i-1][j]) + int(spisok[i+1][j]) + int(spisok[i][j-1]) + int(spisok[i][j+1])
for zi in range (cnt):
  for zj in range (cnt1):
    #print(''.join(spisok2[zi][zj]),sep='***', end='')
    print(spisok2[zi][zj],' ',end ='')
  print() -End,"
 def f (x):
  if x<=-2:
    a = 1 - (x + 2)**2
    return a
  elif -2 < x <=2:
    a = -(x / 2)
    return a
  else :
    a = 1 + (x - 2)**2
    return a





 -End,"
 def modify_list(l):
  for i in range(len(l)-1,-1,-1):
    if l[i] % 2 ==0:
      l[i]=(l[i]//2)
    else: l.pop(i)




 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
  if key in d:
    d[key].append(value)
  else :
    if 2 * key in d:
      d[2* key].append(value)
    else:
      d[2* key]=[value]

# не добавляйте кода вне функции -End,"
 word=list(( ((input()).lower())).split())
dct={}
for g in word:
  if g in dct:
    dct[g]=dct[g]+1
  else:
    dct[g]=1
for s in dct.keys():
  print(s, dct[s])




 -End,"
 dct={}
for i in range (int(input())):
  x=int(input())
  if x in dct:
    print(dct[x])
  else:
    dct[x]=f(x)
    print (dct[x])



 -End,"
 a = int(input())
seq = 0
matrix = [list([0]*a) for i in range (a)]
for i in range (a):
    for x in range(a):
        if matrix[i][a-(a-x)]==0:
          seq += 1
          matrix[i][a-(a-x)]=str(seq)
    for x in range(a):
        if matrix[x][(a-1)-i] ==0:
          seq += 1
          matrix[x][(a-1)-i]=str(seq)
    for x in range(a):
        if matrix[a-i-1][(a-(x+1)) - a]==0:
          seq += 1
          matrix[a-i-1][(a-(x+1)) - a]=str(seq)
    for x in range(a):
        if matrix[a-i-1][(a-(x+1)) - a]==0:
          seq += 1
          matrix[a-i-1][(a-(x+1)) - a]=str(seq)
    for x in range(a):
        if matrix[a+(-1-x)][i]==0:
          seq += 1
          matrix[a+(-1-x)][i]=str(seq)
for i in range(a):
    print(' '.join(matrix[i]))
 -End,"
 cnt_game = int(input())
dict_tables={}

for i in range (cnt_game):
    name1,goals1,name2,goals2= input().split(';')
    if name1 not in dict_tables:
        dict_tables[name1] = dict(games=0,win=0,draw=0,lose=0,point=0)
    if name2 not in dict_tables:
        dict_tables[name2] = dict(games=0,win=0,draw=0,lose=0,point=0)

    dict_tables[name1]['games'] += 1
    dict_tables[name2]['games'] += 1

    if int(goals1) > int(goals2):
        dict_tables[name1]['win'] +=1
        dict_tables[name1]['point'] +=3
        dict_tables[name2]['lose'] +=1
    elif int(goals1) < int(goals2):
        dict_tables[name2]['win'] += 1
        dict_tables[name2]['point'] += 3
        dict_tables[name1]['lose'] += 1
    elif int(goals1) == int(goals2):
        dict_tables[name2]['draw'] +=1
        dict_tables[name1]['draw'] +=1
        dict_tables[name2]['point'] +=1
        dict_tables[name1]['point'] += 1

for i in dict_tables.keys():
  print( i,':', end='',sep=('')) #два принта из за заморочки с двоеточием, что бы оно писалость именно так(с отступом от названия и прилипало к статам команды)
  print(dict_tables[i]['games'], dict_tables[i]['win'], dict_tables[i]['draw'], dict_tables[i]['lose'], dict_tables[i]['point'])

 -End,"
 # put your python code here
a = [float(input("""")) for i in range(1)][0]
Sk = a*a*3
St = ((a/2)**2 * 3**(0.5))/4*30
Sum = Sk+St
print(round(Sum)) -End,"
 # put your python code here
L = [ input('') for i in range(1) ][0]
L = L.split('&')
L = set(L)
print(' '.join(L)) -End,"
 A = input("""")
A1 = A[1:-1]
A2 = A1.replace(' ', '')
A3 = A2.replace( ""'"", '')
L = A3.split(',') -End,"
 # put your python code here
n = int(input(""""))
L = [ print(i**2) for i in range(0,n,2) ] -End,"
 def common(list_a, list_b):
    m = []
    for i in list_a:
        for j in list_b:
            if i == j:
                m.append(i)
                break
    return m




 -End,"
 def front_x(words):
    m = []
    n = []
    for i in words:
        try:
            if i[0] == 'x':
                m.append(i)
            else:
                n.append(i)
        except:
            n.append(i)
    return (sorted(m)+sorted(n)) -End,"
 def is_prime(n): 
    m = [ i+2 for i in range(int((n-2)**0.5)) if n%(i+2) == 0 ]
    if m == []:
        return(True)
    else:
        return(False) -End,"
 s = input()
def fix_start(s):
    return  ( s.replace( s[0] , '*' ) ).replace( ( s.replace( s[0] , '*' ) )[0], s[0],1)
print(fix_start(s)) -End,"
 def numerics(n):
    list_n = list(str(n))
    m = []
    for l in list_n:
        m.append(int(l))
    return m -End,"
 def numerics(n):
    n = list(map(int,str(n)))
    return n

def kaprekar_step(L):
    min_digits = ''.join(map(str,sorted(L)))
    return int(min_digits[::-1]) - int(min_digits)

def kaprekar_loop(n):
    if n != 6174:
        if (n >= 1000) & (n <= 9999): 
            if len(set(numerics(n)))>=2:
                print(n)
                return kaprekar_loop(kaprekar_step(numerics(n)))
    else:
        print(n) -End,"
 def numerics(n):
    n = list(map(int,str(n)))
    return n

def kaprekar_step(L):
    min_digits = ''.join(map(str,sorted(L)))
    return int(min_digits[::-1]) - int(min_digits)

def kaprekar_loop(n):
    if n != 6174:
        if (n > 1000) & (n <= 9999): 
            if len(set(numerics(n)))>=2:
                print(n)
                return kaprekar_loop(kaprekar_step(numerics(n)))
            else:
                print( ""Ошибка! На вход подано число {} - все цифры одинаковые"".format(n))
        else:
            print( ""Ошибка! На вход подано число 1000"")
    else:
        print(n) -End,"
 def kaprekar_check(n):
    if (len(str(n)) == 3) or (len(str(n)) == 4) or (len(str(n)) == 6):
        if len(list(set(str(n)))) > 1:
            if (n != 100) & (n != 1000) & (n != 100000):
                return True
    return False -End,"
 def kaprekar_step(L):
    num = ''.join(map(str,L))
    if len(str(num)) in [3,4,6]:
        if len(list(set(str(num)))) > 1:
            if num not in [100,1000,100000]:
                return int(''.join(map(str, sorted(list(map(int,num)),reverse = True)))) - int(''.join(map(str,sorted(list(map(int,num)))))) -End,"
 def kaprekar_loop(n):
    if n not in [495,6174,549945,631764]:
        if len(str(n)) in [3,4,6]:
            if len(list(set(str(n)))) > 1:
                if n not in [100,1000,100000]:
                    if n not in Kapp:
                        Kapp.append(n)
                        Kap = int(''.join(map(str, sorted(list(map(int,str(n))),reverse = True)))) - int(''.join(map(str,sorted(list(map(int,str(n)))))))
                        print(n) 
                        return kaprekar_loop(Kap)
                    else:
                        print('Следующее число - {}, кажется процесс зациклился...'.format(n))
                        sys.exit()
        print('Ошибка! На вход подано число {}, не удовлетворяющее условиям процесса Капрекара'.format(n))
    else:    
        print(n)
        
import sys
Kapp = []    -End,"
 def luka(L0, L1, n):
    L = [ L0, L1 ]
    i = 0 
    while i != n:
        L.append( L[0] + L[1] )
        L = L[1:]
        i += 1
    return L[0]  -End,"
 def fi(L0, L1, n):
    if n >= 2:
        for i in range(n-1):
            L0 , L1 = L1, L0 + L1
    return L1/Decimal(L0) -End,"
 def L2n(n):
    return calc(n)**2 - 2 * (-1)**n

def L3n(n):
    return calc(n)**3 - 3 * (-1)**n * calc(n)

def L5n(n):
    return calc(n)**5 - 5 * (-1)**n * calc(n)**3 + 5 * calc(n)
    
def calc(n):
    L = [2,1]
    for i in range(n-1):
        L[0], L[1] = L[1], L[0] + L[1]
    return L[1]

def super_L(n):
    list_del = [ 5, 3, 2]
    for i in list_del:
        if n%i == 0:
            if i == 5:
                return L5n(int(n/i))
            elif i == 3:
                return L3n(int(n/i))
            elif i == 2:
                return L2n(int(n/i))
            break
        else:
            return(calc(n)) -End,"
 import numpy as np
L = str(input()).split(' ')
shape = []
dt = 'float'
for i in range(0,len(L)):
    if L[i].isdigit() == True:
        shape.append(int(L[i]))
    else:
        dt = L[i]   
        
Z = np.zeros(shape, dtype = dt) -End,"
 import numpy as np
n = int(input())
m = int(input())
Z = np.zeros(m-n+1,dtype=int)
for i in range(0,m+1-n):
    Z[i] = (n+i) -End,"
 import numpy as np
n = np.arange(int(input()))
m = list( map(int, input().split(' ')) )
Z = n.reshape(m) -End,"
 import numpy as np
n = int(input())
Z = np.zeros((n,n))
for i in range(0,n):
    Z[i][i]=1 -End,"
 import numpy as np
np.random.seed(42)
n,m = map(int,input().split())
Z = np.random.random((n,m))
print(np.mean(Z)) -End,"
 import numpy as np
n,m = map(int,input().split())
Z = np.zeros([n,m])
rows = range(0,n)
columns = [0, (m-1)]
Z[np.ix_(rows,columns)] = 1
rows_1 = [0,(n-1)]
columns_1 = range(0,m) 
Z[np.ix_(rows_1,columns_1)] = 1 -End,"
 Z = np.concatenate((Z[Z<=3],(-1)*(Z[(Z>3) & (Z<9)]) , Z[Z>=9]  )) -End,"
 import numpy as np
n,m = map(int,input().split())
k = int(input())
zeros = np.zeros((n,m))
vector = np.arange(k,(k+m)) 
Z = zeros + vector -End,"
 import numpy as np
start = int(input())
stop = int(input())
n = int(input())
Z = np.around(np.arange(start,stop,(stop-start)/(n+1))[1:],3)
 -End,"
 print(df[ (df['age'] >= age_between[0]) & (df['age'] <= age_between[1]) ] ) -End,"
 df.at[index,'age'] += 1
print(df)



 -End,"
 df['age'] = df['age'].apply(lambda x: x+1)
print(df)




 -End,"
 df['age'] = df['age'].fillna(0)
print(df['age'].sum())
 -End,"
 for col in df.columns:
    if ( df[col].dtype == np.float64) | (df[col].dtype == np.int64):
        print( '{}:{}'.format(col,df[col].sum()) ) -End,"
 df.loc[new_index] = new_data
df = df.drop(del_index,axis=0)
print(df) -End,"
 print( df.sort_values([sort_by[1]],ascending=True).sort_values([sort_by[0]],ascending=False) ) -End,"
 def func_lam(row):
    if row == old_value:
        return new_value
    else:
        return row
    
df[column] = df[column].apply(func_lam)
print(df) -End,"
 def func_new(row):
    if (row == 'yes') | (row == 1):
        return True
    elif (row == 'no') | (row == 0):
        return False
    
df[column] = df[column].apply(func_new)
print(df) -End,"
 # put your python code here
import numpy as np

a,b = list(map(int, input().split()))

m = np.array([[1, 1],[1, -1]], dtype = int)

n = np.array([a,b])
r = np.linalg.solve(m,n)
if (r[0]>0) and (r[1]>0) and ((int(r[0])+int(r[1]))==a):
    print(int(r[0]),int(r[1]))
else:
    print('Такой класс не существует') -End,"
 import numpy as np
def S(x):
    return 20*((3*np.sqrt(3)*x*x) / 2) + 12* x*x/4*np.sqrt(25+10*np.sqrt(5))

def S_ceil(x):
    return int(np.ceil(S(x)) ) -End,"
 # put your python code here
L = list(map(int, input().split()))

n , k = len(L), sum(L)

if n < 2:
    print('Ошибка. Кучек слишком мало, чтобы можно было решить задачу.')
elif (n == 2):
    if L[0]==L[1]:
        print('Кучки можно уравнять')
    else:
        print('Кучки нельзя уравнять') 
else:
    if (n%2==0) and (k%2==0):
        print('Кучки можно уравнять')
    elif (n%2!=0) and (k%2!=0):
        print('Кучки можно уравнять')
    elif (n%2==0) and (k%2!=0):
        print('Кучки нельзя уравнять')
    elif (n%2!=0) and (k%2==0):
        print('Кучки можно уравнять')  -End,"
 import numpy as np
L = list(map(int, input().split()))

n , k = len(L), sum(L)
# n - количество кучек
# k - сумма бумажек в кучках
if L:
    max = np.max(L)
    x = max

def funk(x, k, n):
    if (n*x - k)%2 == 0:
        print(int((n*x - k)/2), x)
        return 0
    else:
        return  x+1

if n < 2:
    print('Ошибка. Кучек слишком мало, чтобы можно было решить задачу.')
elif (n == 2):
    if L[0]==L[1]:
        print(0,L[0])
    else:
        print('Кучки нельзя уравнять') 
else:
    
    while (x!=0):
        if (n%2==0) and (k%2==0):
             x = funk(x, k, n) 
        elif (n%2!=0) and (k%2!=0):
             x = funk(x, k, n)
        elif (n%2==0) and (k%2!=0):
            print('Кучки нельзя уравнять')
            x = 0
        elif (n%2!=0) and (k%2==0):
             x = funk(x, k, n)  -End,"
 # put your python code here
n, m =list(map(int, input().split()))

if (n<3) and (m<3):
    print('Замостить нельзя') 
elif (n+m)%2!=0:    
    print('Замостить можно')
else:
    print('Замостить нельзя')  -End,"
 # put your python code here
n = int(input())
l = ''
if (n>=0) and (n<=9):
    print(n)
else:
    k = n//9
    m = n%9
    for i in range(k):
        l += '9'
    print(int(str(m)+str(l))) -End,"
 # put your python code here
import numpy as np
def funk(L):
    k = 0
    flag = 0
    while k!=(len(L)-1):
        for i in np.arange(k, len(L)-1 ):
            if L[k] > L[i+1]:
                flag+=1
        k+=1
    return (1 if flag%2==0 else -1) 

print( funk( list(map(int, input().split())) ) ) -End,"
 # put your python code here
from itertools import combinations 

L1 = [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 15, 14, 13]

L = ' '.join(input() for i in range(4))
L = list(map(int, L.split()))

chetn1 = (-1) ** sum(x > y for x, y in combinations(L, 2))
chetn2 = (-1) ** sum(x > y for x, y in combinations(L1, 2))
print('Бинго!') if chetn1 == chetn2 else print('Не повезло...') -End,"
 import itertools
import numpy as np
n, m = list(map(int, input().split()))
arr = [int(i) for s in range(n) for i in input().split()]

L1 = [i for i in np.arange(1, n*m) ] 
N = []
L2 = []
for j in range(n):
    if j%2 == 0:
        N += L1[j*m:j*m+m]
    else:
        L2 = L1[j*m:j*m+m]
        N += L2[::-1]
        L2 = []
        
first = (-1)**sum( x > y for x,y in itertools.combinations(arr,2) ) 
second = (-1)**sum( x > y for x,y in itertools.combinations(N,2) ) 

print('Бинго!') if first == second else print('Не повезло...') -End,"
 class animal():

    def __init__(self, name):
        self.name = name

    def echo(self,name):
        print(self.name.upper(), self.name, self.name.lower(),sep='\n')

dog = animal('Шарик') -End,"
 import numpy as np
def counter(T):
    L = []    # Спиок строк в нижнем регистре
    L1 = []   # Список для определения уникальны символов в списке
    N = []    # Список уникальных символов входящих в строку кортжа
    index = []  # индексы списков с максимальной длинной
    New_list = []
    # Приводим строки кортежа к нижнему регистру
    for i in np.arange(len(T)):
        L.append( T[i].lower() )

    # Находим в строках кортежа кол-во уникальных символов. 
    for i in np.arange(len(L)):  # Перебираем все элементы в кортеже
        for j in np.arange(len(L[i])):  # Перебераем все символы в элементе кортежа
            if L[i][j] not in L1 :   # Если символа нет в Словаре L1, то добавляем его всловарь
                L1.append(L[i][j])  
        N.append(L1)    # Записываем все символы в новый словарь
        L1 = []         # Обнуляем словарь для следующей строки Кортежа
    
    
    # Перебираем все списки из списка N 
    for i in range(len(N)):     
        if len(N[i]) == len(max(N)):    # Сохраняем в список index индексы элеменов в списке с максимальной длинной
            index.append(i)
    
    # Заводим новый список со значениями в словаре index
   
    for i in index:
        New_list.append(L[i])
                    
    return(len(max(New_list)))
 -End,"
 from scipy import constants
def lam(U):
    return (constants.h*constants.c) / (constants.e*U)  -End,"
 f = open('file.txt', 'r').read().splitlines()
ff = open(f[0], 'r').read().splitlines() 
s = ff[int(f[2])].lower()  
fff = open(f[1], 'a')
fff.write(s)
fff.close() -End,"
 a,b,c = [int(input()) for i in range(3)]
print((b+a//60)+(a%60+c)//60, (c+a)%60, sep='\n') -End,"
 A, B, H = [int(input()) for _ in range(3)]
if H < A:
    print(""Недосып"")
elif A<=H<=B:
    print('Это нормально')
else:
    print(""Пересып"") -End,"
 year = int(input())
print('Високосный') if (year%400 ==0) else print('Високосный') if (year%4 == 0) and (year%100!=0) else print('Обычный') -End,"
 from numpy import sqrt
a,b,c = [int(input()) for _ in range(3)]
p = (a+b+c) / 2     # полупериметр треугольника
S = sqrt(p*(p-a)*(p-b)*(p-c))
print(S) -End,"
 A = int(input())
print('True') if (-15<A<=12) or (14<A<17) or (A>=19) else print('False') -End,"
 a, b = [float(input()) for i in range(2)]
c = input()

List = { '+': a+b, '-': a-b, '*': a*b, 'pow': a**b }

if (c != 'mod') and (c != 'div') and (c != '/'):
    print(List[c])
else:
    if b == 0:
        print('Деление на 0!')
    else:
        List1 = {'mod': a%b, 'div': a//b, '/': a/b}
        print(List1[c]) -End,"
 from numpy import sqrt
A = input()
pi = 3.14

def Geron():
    a,b,c = [ float(input()) for i in range(3) ]
    p = (a+b+c)/2
    return sqrt(p*(p-a)*(p-b)*(p-c))
                 
def Rect():
    a,b = [float(input()) for i in range(2)]
    return a*b

def Circle():
    r = float(input())
    return pi*r**2

if A == 'треугольник':
    print(Geron())
    
elif A == 'прямоугольник':
    print(Rect())
    
elif A == 'круг':
    print(Circle()) -End,"
 L = list( map(int, input()))
print('Счастливый') if sum(L[:3]) == sum(L[3:]) else print('Обычный') -End,"
 n = int(input())

if (n%10 in [0,5,6,7,8,9,11,12,13,14]) or (n in [11,12,13,14]) or n%100 in [11,12,13,14]:
    print('{} программистов'.format(n))
elif (n%10 == 1):
    print('{} программист'.format(n))
elif n%10 in [2,3,4] or n in [2,3,4]:
    print('{} программиста'.format(n)) -End,"
 a, b, c, d = [ int(input()) for _ in range(4) ]

for j in range(c,d+1): print('\t {}'.format(j), end = '')
print()
for i in range(a,b+1): 
    print(i, end = '')
    for j in range(c,d+1): print('\t {}'.format(i*j), end = '')   
    print() -End,"
 s = input()
flag = 1
s1 = ''
try:
    for i in range(len(s)+1):
        if s[i] == s[i+1]:
            flag+=1
        else:
            s1+=s[i] + '{}'.format(flag)
            flag = 1
except:
    s1+=s[i] + '{}'.format(flag)
    print(s1)  -End,"
 L = list(map(int, input().split()))
dict = {}
for i in range(len(L)):
    if L[i] not in dict:
        dict[L[i]]=1
    else:
        dict[L[i]]+=1

for key,value in dict.items():
    if value>1:
        print(key, end = ' ') -End,"
 n = int(input())
s= ''
for i in range(1,n+1):
    if n > len(s)/2: 
        s+='{} '.format(i)*i
    else:
        break              
L = list(map(int, s.split()))
print(*L[:n]) -End,"
 a = []
b = ''
i = 0
sum = 0
while b != 'end':     # Ввод значений матрицы и запись в список a , до подачи строки 'end'
    try:
        a += [list(map(int, input().split()))]
        b = a[i]
        i+=1
    except:
        break   
row, col = len(a), len(max(a))   # записываем размерность матрицы row - строка, col - столбец             
B = [[0 for i in range(col)] for i in range(row)]    # Заполнение матрицы нулями
for i in range(row):
    for j in range(col):
        for di in range(-1,2):
            for dj in range(-1,2):
                ai = i + di
                aj = j + dj
                if -1<= ai < row and -1<= aj < col:
                    if (ai == i-1 and aj == j) or (ai == i and aj == j+1) or (ai == i+1 and aj == j) or (ai == i and aj == j-1):
                        sum += a[ai][aj]
                elif ai == row:
                    if (ai == i+1 and aj == j): 
                        sum += a[-row][aj]
                elif aj == col:
                    if(ai == i and aj == j+1): 
                        sum += a[ai][-col]
        print(sum, end= ' ')
        sum = 0
    print() -End,"
 n = int(input())
k,h,L = 1, 0, [[0 for j in range(n)] for i in range(1,n+1)]
while h < n:   
    for i in range(h,n-1-h):
        for j in range(h,n-1-h):
            if i == h:
                L[i][j] = k
                k+=1            
        L[i][n-1-h] = k
        k+=1          
    for i in range(h+1,n-h):
        for j in range(h+1,n-h):
            if i == h+1:
                L[-1-h][-j] = k
                k+=1
        L[-i][0+h] =k
        k+=1   
    h+=1
if n%2 == 1:
    L[int(n/2)][int(n/2)] = k
for i in L:
    print(*i, end = ' ')
    print() -End,"
 def update_dictionary(d, key, value):
    if d.get(key):
        d[key]+=[value]
    else:
        if d.get(2*key):
            d[2*key]+=[value]
        else:
            d[2*key] = [value] -End,"
 s, s1 = input(), input()
L = { s[i]:s1[i] for i in range(len(s)) }
s, s1 = input(), input()
for i in range(len(s)):
    if s[i] in L:
        print(L[s[i]], end = '')
    else:
        print(s[i], end = '')
print()
for i in range(len(s1)):
    for key, value in L.items():
        if s1[i] == value:
            print(key, end='') -End,"
 a = int(input())                                              # кол-во известных слов в словаре
L = [ input().lower() for i in range(a) ]                     # список известных слов
b = int(input())                                              # кол-во строк текста для проверки
s = ' '.join([input().lower() for i in range(b)]).split()             # список из строк с текстом
print( *set([ s[i] for i in range(len(s)) if s[i] not in L ]), sep = '\n') -End,"
 n, N = int(input()), {'север': 0, 'юг': 0, 'восток': 0, 'запад': 0}
L = [input().split() for i in range(n) ]
for i in range(len(L)):
    if L[i][0] not in N:
        N[L[i][0]] = int(L[i][1]) 
    else:
        N[L[i][0]]+=int(L[i][1])
print(N['восток']-N['запад'], N['север']-N['юг']) -End,"
 import pandas as pd
n = int(input())
L = [input().split(';') for i in range(n)]   # Выводим все данные в список
N = list(set([ L[i][0] for i in range(len(L))] + [ L[i][2] for i in range(len(L)) ]))   # Создаём список с уникальными командами
solv = {N[i]:[0, 0, 0, 0, 0] for i in range(len(N))}  # создаём словарь с уникальными командами
for i in range(len(L)):        # пробегаемся по значениям списов игр команд
    if int(L[i][1]) > int(L[i][3]):  # Если первая команда забила больше
        solv[L[i][0]][0]+=1              # Добавляем в словарь +1 сыгранную игру  (команде победителя)
        solv[L[i][0]][1]+=1              # Добавляем в словарь +1 к победам     (команде победителя)
        solv[L[i][0]][4]+=3              # Добавляем в словарь +3 очка       (команде победителя)
        
        solv[L[i][2]][0]+=1             # Добавляем в словарь +1 сыгранную игру  (команде проигравших)
        solv[L[i][2]][3]+=1             # Добавляем в словарь +1 к поражениям   (команде проигравших)
    elif int(L[i][1]) < int(L[i][3]):
        solv[L[i][0]][0]+=1            # Добавляем в словарь +1 сыгранную игру  (команде проигравших)
        solv[L[i][0]][3]+=1            # Добавляем в словарь +1 к поражениям   (команде проигравших)
        
        solv[L[i][2]][0]+=1           # Добавляем в словарь +1 сыгранную игру  (команде победителя)
        solv[L[i][2]][1]+=1           # Добавляем в словарь +1 к победам     (команде победителя)
        solv[L[i][2]][4]+=3           # Добавляем в словарь +3 очка       (команде победителя)
        
    elif int(L[i][1]) == int(L[i][3]):    
        solv[L[i][0]][0]+=1           # Добавляем 1-ой команде игру
        solv[L[i][2]][0]+=1           # Добавляем 2-ой команде игру
        
        solv[L[i][0]][2]+=1           # Добавляем 1-ой команде ничью
        solv[L[i][2]][2]+=1           # Добавляем 2-ой команде ничью
        
        solv[L[i][0]][4]+=1           # Добавляем 1-ой комнаде +1 очко
        solv[L[i][2]][4]+=1           # Добавляем 2-ой команде +1 очко
      
for i,j in solv.items():
    print('{}: {} {} {} {} {}'.format(i,j[0],j[1],j[2],j[3], j[4])) -End,"
 import numpy as np
a, b = [ list(map(int, input().split(','))) for i in range(2) ]
V1 = np.array(a)
V2 = np.array(b)
V3 = V1 + V2
V4 = V1[::2] * V2[::-2] -End,"
 def wisdom_multiplication(x, y, length_check = True):
    a, b  = 100 - ((100-x) + (100-y)), (100-x) * (100-y)  
    if length_check == True:
        if len(str(b)) == 1:
            return int(''.join(map(str, [a,0,b])))
        else:
            return int(''.join(map(str, [a,b])))
    else:
        return int(''.join(map(str, [a,b])))
    
wisdom_multiplication(x,y) -End,"
 import numpy as np
def multiplication_check_list(start=10, stop=99, length_check = True):
    L = [ simple_multiplication(i,j,length_check) for i in np.arange(start, stop+1) for j in np.arange(start, stop+1) ]
    print('Правильных результатов: {}'.format(L.count(True)) )
    print('Неправильных результатов: {}'.format(L.count(False)) )
    
def simple_multiplication(x, y, length_check):  
    a = 100 - ((100-x) + (100-y))
    b = (100-x) * (100-y)
    if length_check == True:
        if len(str(b)) == 1:
            return int(x)*int(y) == int(''.join(map(str, [a,0,b])))
        else:
            return int(x)*int(y) == int(''.join(map(str, [a,b])))
    else:
        return int(x)*int(y) == int(''.join(map(str, [a,b]))) -End,"
 def convert_10(num, to_base=10, from_base=10): 
    # заводим список для замены больих остатков
    list_row = [ 0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F','G','H','I','J','K','L',
                'M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z' ]

    num = int(num)
    s = ''   # строка в которую будем записывать результат
    if int(to_base)>=2 and int(to_base)<=36 :
        if type(num) == int:    # Проверяем тип числа
            num_a = num         # Заводим временную переменную, над которой будем производить действия в цикле  
            while num_a//to_base!=0:   # До тех пор пока целочисленное деление не равно нулю
                if num_a//to_base < to_base:   # Если целочисленное деление от степени(в которую приводим) меньше этой степени
                    if len(str(num_a%to_base))<2 and len(str(num_a//to_base))<2:  # Проверяем остаток на наличие, если остаток не 2-х значное число
                        s+=str(num_a % to_base)    # Добавляем в переменную s остаток т деление и целочисленное деление
                        s+=str(num_a // to_base)
                    else:
                        s+= str(list_row[num_a%to_base])   # Если если остаток 2-х значное число
                        if len(str(num_a // to_base))<2:
                            s+=str(num_a // to_base)            # Находим в списке соответствие числа и буквы
                        else:
                            s+=str(list_row[num_a // to_base])
                else:
                    if len(str(num_a%to_base))<2:
                        s+= str(num_a % to_base)       # Если целочисленное деление от степени(в которую приводим) больше этой степени
                    else:
                        s+= str(list_row[num_a%to_base])   # Если если остаток 2-х значное число
                num_a = num_a // to_base          # Записываем в переменную num_a остаток от деления
                
            return s[::-1]
    else:
        return ''
        
## Если число находится в десятичной системе счисления, то переводим её в заданную.
## Если число не в десятичной системе счисления, то переводим её в десятичную, а из десятичной в заданную
def convert(num, to_base=10, from_base=10):

    if from_base == 10:
        return convert_10(num, to_base, from_base)
    else:
        return convert_full(num, to_base, from_base)

        
def convert_full(num, to_base=10, from_base=10):
    list_row_1 = { 'A':10,'B':11,'C':12,'D':13,'E':14,'F':15,'G':16,'H':17,'I':18,'J':19,'K':20,'L':21,
                'M':22,'N':23,'O':24,'P':25,'Q':26,'R':27,'S':28,'T':29,'U':30,'V':31,'W':32,'X':33,'Y':34,'Z':35 }
    N = []
    if int(to_base)>=2 and int(to_base)<=36 :
        L =  [ str(num)[i] for i in range(len(str(num))) ]
        for i in range(len(L)):
            try:
                if type(int(L[i])) == int:
                    N.append(int(L[i]))
            except:
                N.append(list_row_1[L[i]])
    
        A = sum([ int(N[i]*from_base**(len(N)-1-i)) for i in range(len(N)) ])

        return convert_10(A, to_base, from_base)
    else:
        return '' -End,"
 def deep_copy(nested_content):
    if not isinstance(nested_content,list):
        return nested_content
    else:
        holder = []
        for sub_content in nested_content:
            holder.append(deep_copy(sub_content))
        return holder
    
L2 = deep_copy(L1) -End,"
 def mimic_dict(string):
    s = string.split()
    L = {'':s[0]}
    for i in range(len(s)-1):
        if s[i] not in L:
            L[s[i]] = [s[i+1]]
        else:
            L[s[i]] += [s[i+1]]
    return L    -End,"
 # create foo global
def funk_cmd(name, arg):
    if arg == 'global':
        dict_namesp[None] = [arg]
        if arg in dict_namesp:
            if name not in dict_namesp[arg]:
                dict_namesp[arg] += [name]
        else:
            dict_namesp[arg] = [name]
    else:
        if arg in dict_namesp:
            if name not in dict_namesp[arg]:
                dict_namesp[arg] += [name]
        else:
            dict_namesp[arg] = [name]
    return dict_namesp

def funk_arg(name, arg):
    if name in dict_arg:
        if arg not in dict_arg[name]:
            dict_arg[name] += [arg]
    else:
        dict_arg[name] = [arg]
    return dict_arg
    
def funk_get(name, arg):
    if name in dict_arg and arg in dict_arg[name]:
        return name
    else:
        for key, value in dict_namesp.items():
            if name in value:
                if name is not None:
                    return funk_get(key, arg)
                else:
                    return None
        
n, k = int(input()), 0
dict_namesp = {}
dict_arg = {}
while k!= n:
    cmd, namesp, arg = input().split()
    if cmd == 'create':
        funk_cmd(namesp,arg)
    elif cmd == 'add':
        funk_arg(namesp,arg)
    elif cmd == 'get':
        print(funk_get(namesp,arg))
    
    k+=1
 -End,"
 class MoneyBox:
    def __init__(self, capacity): 
        # конструктор с аргументом – вместимость копилки
        self.capacity = capacity
        self.count = 0
    def can_add(self, v):
        # True, если можно добавить v монет, False иначе
        if self.count + v <= self.capacity:
            return True
        else:
            return False
    def add(self, v):
        # положить v монет в копилку
        if self.count + v <= self.capacity:
            self.count += v -End,"
 class Buffer:
    def __init__(self):
        self.lst = []  # создание в экземпляре класса пустого листа для записи элементов
        
    def add(self, *a):
        self.lst += list(a)
        while len(self.lst) > 4:
            print(sum(self.lst[:5]))
            self.lst = self.lst[5:]
            
    def get_current_part(self):
            return self.lst -End,"
 dict = {}
for i in range(int(input())):
    s = input()
    if s.split()[0] not in dict:
        if len(s.split()) == 1: 
            dict[s] = []
        else:
            dict[s.split()[0]] = s.split()[2:]
    else:
        dict[s.split()[0]] += s.split()[2:]
        
def rec(l, r):
    try:
        if l in dict[r]:
            return 'Yes'
        elif l == r:
            return 'Yes'
        else:
            if len(dict[r]) == 1:
                return rec(l, dict[r][0])
            elif len(dict[r]) > 1:
                for i in range(len(dict[r])):
                    if rec(l, dict[r][i]) == 'Yes':
                        return 'Yes'
        return 'No'
    except:
        return 'No'
    
for i in range(int(input())): 
    L = input().split(' ')
    if len(L) > 1:
        print(rec(L[0], L[1]))
    else:
        print('Yes') -End,"
 n = int(input())
dict = {}
for i in range(n):
    k = input().split()
    # Проверка что класс не наследуется сам от себя
    if len(k)>2 and k[0] == k[2]:        
        dict[k[0]] = {}
    # Проверяется, что класс ни от чего не наследуется
    elif len(k) == 1:
        dict[k[0]] = {}
    # Проверяется ,что класс е в словаре
    elif k[0] not in dict:
        dict[k[0]] = set(k[2:]) 
    elif k[0] in dict:
        dict[k[0]].update(k[2:])    
        
m = int(input())

class Catapult(Exception):
    pass

def funс_recursion(first, lst, k, dict):
    if k in lst:
         lst.append(k)
         return k
    elif k not in lst: 
        if len(lst) == 0:
            pass
        else:
            for i in dict[k]:
                if funс_recursion(first, lst, i, dict) in lst:
                    lst.append(k)
                    return first
        

lst = []
for i in range(m):
    k = input()
    first = k
    if funс_recursion(first, lst, k, dict) is not None or funс_recursion(first, lst, k, dict) in lst:
        print(funс_recursion(first, lst, k, dict))
    if k not in lst:
        lst.append(k) -End,"
 # put your python code here
from datetime import datetime, timedelta
date = datetime.strptime( input(), '%Y %m %d') + timedelta(days = int(input()))
print(date.year, date.month, date.day) -End,"
 import itertools
import numpy as np
def primes():
    a, flag = 1, 0
    yield 2
    while True: 
        a += 1
        for i in range(2, int(np.sqrt(a-1))+2):
            if a % i == 0:
                flag += 1
        if flag == 0:
            yield a 
        flag = 0 -End,"
 # put your python code here
s, a, b = [str(input()) for i in range(3)]
i, flag = 0, 0
while i <= 1000:
    if s.find(a) != -1:
        if i < 1000:
            s = s.replace(s[s.find(a):(s.find(a)+len(a))], b)
            flag += 1
            i += 1
        else:
            print('Impossible')
            break    
    else:
        i += 1
        if i <= 1000:
            print(flag)
            break -End,"
 import requests
import re

url_1, url_2  = [input() for i in range(2)]
flag = 0
def get_request(s):
    # Переходим по перрвой ссылке, с помощью get
    res = requests.get('{}'.format(s))
    # Регулярным выраженем, формируем лист сосоящий из гиперссылок 
    pattern = '<a href=""(.+)"">'
    list_hyperlink = re.findall(pattern, res.text)
    return list_hyperlink 
       
for list in get_request(url_1):
    if flag == 0:
        if url_2 in get_request(list):
            print('Yes')
            flag = 1
            break

if flag == 0:
    print('No')
  -End,"
 # put your python code here
import re
import requests
import sys

# Подаём на ввход программе ссылку с HTML файлом
for line in sys.stdin:
    url_1 = line.rstrip()

# Переходим по ссылке  
res = requests.get('{}'.format(url_1))    

# Регулярным выраженем, формируем лист сосоящий из гиперссылок    
pattern = r'<a.+href=[""\'](\w*://)?(\w[-\w.]*)?(.*)?[""\']*.*>'
list_hyperlink = re.findall(pattern, res.text)
print( *sorted({list[1] for list in list_hyperlink if list[1] != ''}), sep ='\n') -End,"
 # put your python code here
import json
dict, graph = {}, {}
js = json.loads(input())
  
# Собираем словарь вида { ""сын"" : [ ""родитель_1"", ""родитель_2"", ...] }    
for name_class in js:
    if name_class['name'] not in dict:
        dict[name_class['name']] = name_class['parents']
    else:
        dict[name_class['name']] += name_class['parents']

#print()
#print(dict)
# Перевернём словарь сделав его вида { ""родитель"" : [""сын_1"", ""сын_2"", ... ] }
for key, values in dict.items():
    if key not in graph:
        graph[key] = []
    for val in values:
        if val not in graph:
            graph[val] = [key]
        else:
            graph[val] += [key]

#print()
#print(graph)
# Соберём список всех вершин графа
vertex = []
for key, values in graph.items():
    vertex += [key, *values]
vertex = sorted(list(set(vertex)))
#print(sorted(list(set(vertex))))

# Запишем алгоритм поска в Глубину https://pimiento.github.io/python_graphs.html
def dfs(graph, start):
    visited, stack = [], [start]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.append(vertex)
            stack.extend(set(graph[vertex]) - set(visited))
    return visited

# Распакуем решение
for vr in vertex:
    print(vr, "":"", len(dfs(graph, '{}'.format(vr)))) -End,"
 n = int(input())
k=1 #число выведенных элементов
j=1
while n>=k:
    for i in range(j):
        print(j)
        k+=1
        if k>n: break
    j+=1 -End,"
 a=[int(i) for i in input().split()]
b = int(input())
c=[]
for i in range(len(a)):
    if b==a[i]: c+=[i]
if len(c) == 0: print('Отсутствует')
else: print(*c) -End,"
 a=[]
while True:
    stroka = input()
    if stroka == 'end': break
    else:
        a+=[stroka.split()]
b = [[0 for j in range(len(a[0]))] for i in range(len(a))]        
for j in range(len(a[0])):
    for i in range(len(a)):
        b[i][j] = int(a[i-1][j]) + int(a[i+1-len(a)][j]) + int(a[i][j-1]) + int(a[i][j+1-len(a[i])])
for i in b:
    print(*i) -End,"
 n = int(input())
b = [[0 for j in range(n)] for i in range(n)]
k=0
top,bottom,left = False,False,False
right=True
yr=0 
xr1=0 
xr2=n-1
yb1=1 
yb2=n-1 
xb=n-1
yl=n-1 
xl1=2
xl2=n
yt1=2
yt2=n-1
xt=0
while True:
    if k==n**2:break
    if right:
        for j in range(xr1,xr2+1):
            k+=1
            b[yr][j] = k
        xr1+=1
        xr2-=1
        yr+=1
        right = False
        bottom = True
        continue
    if bottom:
        for i in range(yb1, yb2+1):
            k+=1
            b[i][xb] = k
        yb1+=1
        yb2-=1
        xb-=1
        bottom = False
        left = True
        continue
    if left:
        for j in range(xl1,xl2+1):
            k+=1
            b[yl][-j]=k
        xl1+=1
        xl2-=1
        yl-=1
        left = False
        top = True
        continue
    if top:
        for i in range(yt1,yt2+1):
            k+=1
            b[-i][xt] = k
        yt1+=1
        yt2-=1
        xt+=1
        top = False
        right = True
        continue
for i in b:
    print(*i) -End,"
 def modify_list(l):
    # put your python code heredef modify_list(l):
    # put your python code here
    n = len(l)
    i=0
    while i<n:
        if l[i]%2 != 0: 
            del l[i]
            n-=1
            i-=1
        else: l[i] = int(l[i]/2)
        i+=1 -End,"
 str = input().lower().split(' ')
d = dict()
for word in str:
    if word in d: d[word] +=1
    else:         d[word] = 1
for key,value in d.items():
    print(key, value, end = '\n') -End,"
 import math
print(2 * float(input()) * math.pi) -End,"
 def sumMatrix(a,b):
    c = []
    for i in range(len(a)): c.append(a[i]+b[i])
    return c

teams = dict()

n = int(input())
for i in range(n):
    teamA,goalA,teamB,goalB = input().split(';')

    a = [1,0,0,0,0]
    b = [1,0,0,0,0]

    if goalA > goalB: 
        a[1] = 1 #количество побед
        a[4] = 3 #количество очков
        b[3] = 1 #количество поражений
    elif goalA < goalB: 
        b[1] = 1
        b[4] = 3
        a[3] = 1
    elif goalA == goalB:
        a[2],a[4],b[2],b[4] = 1,1,1,1
    if teamA in teams: teams[teamA] = sumMatrix(teams[teamA],a)
    else: teams[teamA] = a
    if teamB in teams: teams[teamB] = sumMatrix(teams[teamB],b)
    else: teams[teamB] = b

for team,points in teams.items():
    print(team + ':', points[0], points[1],points[2],points[3],points[4])
 -End,"
 def addTeamData(teamName,data):
    if teamName in teams: 
        teams[teamName][0] += data[0]
        teams[teamName][1] += data[1]
        teams[teamName][2] += data[2]
        teams[teamName][3] += data[3]
        teams[teamName][4] += data[4]
    else: teams[teamName] = data
teams = dict()
n = int(input())
for i in range(n):
    teamA,goalA,teamB,goalB = input().split(';')
    if goalA > goalB: 
        addTeamData(teamA,[1,1,0,0,3])
        addTeamData(teamB,[1,0,0,1,0])
    elif goalA < goalB: 
        addTeamData(teamA,[1,0,0,1,0])
        addTeamData(teamB,[1,1,0,0,3])
    elif goalA == goalB:
        addTeamData(teamA,[1,0,1,0,1])
        addTeamData(teamB,[1,0,1,0,1])
for team,points in teams.items():
    print(team + ':', points[0], points[1],points[2],points[3],points[4]) -End,"
 s1,s2,s3,s4 = input(),input(),input(),input()
d1,d2 = dict(), dict()
for i in range(len(s1)):
    d1[s1[i]] = s2[i]
    d2[s2[i]] = s1[i]
for s in s3: print(d1[s],end = '')
print()
for s in s4: print(d2[s],end = '') -End,"
 wordsStandart = {input().lower() for i in range(int(input()))}
wordMistake = set()
for i in range(int(input())):
    words = input().split()
    for word in words:
        if word.lower() not in wordsStandart: wordMistake.add(word.lower())
print(*wordMistake, sep='\n') -End,"
 x = 0 
y = 0
for i in range(int(input())):
    command,point = input().split()
    if command == 'север': y += int(point)
    elif command == 'юг': y -= int(point)
    elif command == 'запад': x -= int(point)
    elif command == 'восток': x += int(point)
print(x, y) -End,"
 s = 0
for i in range(int(input())): s+=int(input())
print(str(s)) -End,"
 ans = set()
for obj in objects: # доступная переменная objects
    ans.add(id(obj))
print(len(ans)) -End,"
 def closest_mod_5(x):
    x1 = x%5
    if x1 == 0: return x
    else: return x+5-x1 -End,"
 def c(n,k):
    if k > n: return 0
    elif k==0: return 1
    else: return c(n-1,k) + c(n-1,k-1)

n,k = map(int, input().split())
print(c(n,k)) -End,"
 np = {'global':'none'} # namespace - parent
nv = {'global':set()} # namespace - var

def searchVar(namespace, var):
    if var in nv[namespace]: return namespace
    elif namespace == 'global': return 'None'
    return searchVar(np[namespace], var)

for i in range(int(input())):
    command, namespace, param = input().split()
    if command == 'create': 
        np[namespace] = param # param - parent
        nv[namespace] = set()
    if command == 'add': 
        nv[namespace].add(param) # param - var
    if command == 'get':
        print(searchVar(namespace, param)) # param - var -End,"
 
class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.v = 0
    def can_add(self, v):
        return self.capacity >= self.v + v
    def add(self, v):
        if self.can_add(v): self.v += v



 -End,"
 class Buffer:
    def __init__(self):
        self.tempList = []
    def add(self, *a):
        for element in a:
            self.tempList.append(element)
            if len(self.tempList) == 5:
                print(sum(self.tempList))
                self.tempList = []
    def get_current_part(self):
        return self.tempList -End,"
 def checkParent(class1,class2):
    if class1 in classes[class2] or class1 == class2: 
        return True
        
    else: 
        for classTemp in classes[class2]:
            if classTemp != 'object':
                if checkParent(class1,classTemp):
                    return True
        return False


classes = dict()

for i in range(int(input())):
    params = input().split()
    if len(params) > 1: classes[params[0]] = params[2:]
    else: classes[params[0]] = ['object']


for i in range(int(input())):
    class1,class2 = input().split()
    if checkParent(class1,class2): print('Yes')
    else: print('No') -End,"
 class ExtendedStack(list):
    def sum(self):
        # операция сложения
        self.append(self.pop() + self.pop())
    def sub(self):
        # операция вычитания
        self.append(self.pop() - self.pop())
    def mul(self):
        # операция умножения
        self.append(self.pop() * self.pop())
    def div(self):
        # операция целочисленного деления
        self.append(self.pop() // self.pop())


 -End,"
 class LoggableList(list,Loggable):
    def append(self, element):
        LoggableList.log(self,element)
        super(LoggableList, self).append(element)




 -End,"
 try:
    foo()
except ZeroDivisionError:
    print(""ZeroDivisionError"")
except ArithmeticError:
    print(""ArithmeticError"")
except AssertionError:
    print(""AssertionError"")





 -End,"
 def findParent(pretendent, child):
    if pretendent in exep[child]: return True
    else:
        for ch in exep[child]:
            if len(exep[ch]) != 0:
                if findParent(pretendent, ch):
                    return True
        return False
    
exep = dict()
answer = []
test = []
for i in range(int(input())):
    params = input().split()
    if len(params) > 1: exep[params[0]] = params[2:]
    else: exep[params[0]] = []

for i in range(int(input())):
    test+=[input()]

for i in range(1,len(test)):
    for j in range(0,i):
        if test[j] not in answer:
            if findParent(test[j], test[i]):
                answer += [test[i]]
if len(answer) > 0:
    print(answer[0])
    for i in range(1,len(answer)):
        if answer[i] != answer[i-1]:
            print(answer[i]) -End,"
 import datetime
y,m,d = input().split()
d = datetime.date(int(y),int(m),int(d)) + datetime.timedelta(days = int(input()))
print(d.year, d.month, d.day) -End,"
 class multifilter:
    def judge_half(pos, neg):
        if pos >= neg: return True
        # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)

    def judge_any(pos, neg):
        # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)
        if pos >= 1: return True

    def judge_all(pos, neg):
        # допускает элемент, если его допускают все функции (neg == 0)
        if neg == 0: return True

    def __iter__(self):
        # возвращает итератор по результирующей последовательности
        return self
    
    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge
        self.result = []
        self.i = -1
        for x in self.iterable:
            pos, neg = 0,0
            for f in self.funcs:
                if f(x): pos += 1
                else: neg += 1
            if self.judge(pos, neg): self.result.append(x)        

    def __next__(self):
        if self.i < len(self.result)-1:
            self.i += 1
            return self.result[self.i]
        else:
            raise StopIteration
 -End,"
 def primes():
    k=1
    while True:
        k += 1
        ok = True
        for delitel in [j for j in range(2,int(k**0.5)+1)]:
            if (k % delitel == 0) and (delitel != k): ok = False
        if ok: yield k




 -End,"
 


def mod_checker(x, mod=0):
    return lambda y: y%x == mod

 -End,"
 s,a,b = input(),input(),input()
if a in b and a in s:
    print('Impossible')
else:
    i = 0
    sOld = ''
    while a in s:
        s = s.replace(a, b)
        i += 1
    print(str(i)) -End,"
 s, t = input(), input()
k = 0
i = 0
while i < len(s):
    i = s.find(t,i)
    if i == -1: break
    else:
        i += 1
        k += 1
print(str(k)) -End,"
 # put your python code here
import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if len(re.findall('cat', line)) > 1: print(line)
    # process line
    



 -End,"
 # put your python code here
import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r'\bcat\b', line) != None: print(line)
    # process line -End,"
 # put your python code here
import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r'z.{3}z', line) is not None: print(line)
    # process line
 -End,"
 # put your python code here
import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if re.match(r'.*\\.*', line) is not None: print(line)
    # process line -End,"
 # put your python code here
import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r'\b(\w+)\1\b', line) is not None: print(line)
    # process line -End,"
 # put your python code here
import sys, re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'human', 'computer', line))
    # process line -End,"
 # put your python code here
import sys, re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'\ba{1,}\b', 'argh', line, 1, re.IGNORECASE))
    # process line -End,"
 # put your python code here
import sys, re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'(\b\w)(\w)', r'\2\1', line))
    # process line -End,"
 import requests, re

#метод, который получает список ссылок на странице
def getURL(link):
    res = requests.get(link)
    #получаем список ссылок
    html_text = res.text
    links = re.findall(r'<a href=""(http[^""#]+)""', html_text)
    #проверяе каждую ссылку на доступность
    good_links = []
    for link in links:
        if requests.get(link).status_code == 200:
            good_links.append(link)
    return good_links

def checkLink(link_end, links):
    if len(links) == 0:
        return False
    else:
        for link in links:
            if link_end == link:
                return True
    return False


link_start = input() #""https://stepic.org/media/attachments/lesson/24472/sample0.html""
link_end = input() #""https://stepic.org/media/attachments/lesson/24472/sample2.html""
links1 = getURL(link_start)
yes = False
for link1 in links1:
    links2 = getURL(link1)
    if checkLink(link_end, links2):
        yes = True
        break
if yes:
    print('Yes')
else:
    print('No')

 -End,"
 import requests, re

#метод, который получает список ссылок на странице
def getURL(link):
    res = requests.get(link)
    #получаем список ссылок
    html_text = res.text
    
    links = re.findall(r'<a.+href=""([^""#]+)""', html_text.replace(""'"", '""'))

    #получаем список сайтов
    site_names = []
    for link in links:
        link = link.lower().replace('ftp://', '').replace('https://', '').replace('http://', '')
        site_name = re.match(r'(\w[^/:_?]+)', link) #r'://([^/:?]+)'
        if site_name is not None:
            #print(site_name[0])
            if site_name[0] not in site_names:
                site_names.append(site_name[0])
    return site_names

link = input()
site_names = getURL(link)
site_names.sort()
for link in site_names:
    print(link)
 -End,"
 import json

def checkParent(class1, class2):
    if class1 in classes[class2] or class1 == class2:
        return True

    else:
        for classTemp in classes[class2]:
            if checkParent(class1, classTemp):
                return True
        return False


classes = dict()
classes_p = dict()

data = json.loads(input())
for cl in data:
    classes[cl['name']] = cl['parents']
    classes_p[cl['name']] = 0

for cl1 in classes_p:
    for cl2 in classes_p:
        if checkParent(cl1, cl2): classes_p[cl1] += 1

for cl in sorted(classes_p):
    print(cl, ':', classes_p[cl]) -End,"
 from xml.etree import ElementTree

colors = {'red': 0, 'green': 0, 'blue': 0}

root = ElementTree.fromstring(input())

for color in colors:
    if color == root.attrib['color']:
        colors[color] = 1

def get_value(root, color, depth):
    for child in root:
        if child.attrib['color'] == color:
            colors[color] += depth
        if len(child) != 0:
            get_value(child, color, depth + 1)

get_value(root, 'red', 2)
get_value(root, 'green', 2)
get_value(root, 'blue', 2)

print(colors['red'], colors['green'], colors['blue'])

 -End,"
 def checker(line):
    i = 0
    stek = []
    for symbol in line:
        i += 1
        if symbol in '(){}[]':
            if symbol in '{[(':
                stek.append([symbol, i])
            else:
                if len(stek) == 0:
                    return str(i)
                top = stek.pop()[0]
                if (top == '{' and symbol != '}') or (top == '[' and symbol != ']') or (top == '(' and symbol != ')'):
                   return str(i)
    if len(stek) != 0:
        return stek[-1][1]
    return 'Success'

print(checker(input())) -End,"
 # put your python code here
import sys

sys.setrecursionlimit(100000)

def height(tr, r):
    h = 1
    if r in tr:
        for c in tr[r]:
            h = max(h, 1 + height(tr,c))
    return h


tree = dict()
input()
numbers = [int(i) for i in input().split()]
for i in range(len(numbers)):
    if numbers[i] in tree:
        tree[numbers[i]].append(i)
    else:
        tree[numbers[i]] = [i]

#print(tree)

print(height(tree, -1) - 1)



 -End,"
 buffer = []
log = []

def clearBuffer(arrival, buffer):
    temp = []
    for i in range(len(buffer)):
        if buffer[i][1] > arrival:
            temp.append(buffer[i])
    return temp

size, n = map(int, input().split())

for i in range(n):
    #if i > 0: print(buffer)
    arrival, duration = map(int, input().split())

    #Удаляем все обработанные пакеты, если такие есть
    if len(buffer) > 0:
        if buffer[0][1] <= arrival:
            buffer = clearBuffer(arrival, buffer)

    #если буфер заполнен
    if len(buffer) == size:
        log.append(-1)

    if len(buffer) == 0:
        buffer.append([arrival, arrival + duration])
        log.append(arrival)
    elif len(buffer) < size:
        if buffer[-1][1] > arrival:
            arrival_new = buffer[-1][1]
        else:
            arrival_new = arrival
        buffer.append([arrival_new, arrival_new + duration])
        log.append(arrival_new)

for l in log:
    print(l)


 -End,"
 import sys

maxes = [0]
n = input()
for line in sys.stdin:
    request = line.split()
    if request[0] == 'push':
        element = int(request[1])
        if maxes[-1] < element:
            maxes += [element]
        else:
            maxes += [maxes[-1]]
    elif request[0] == 'pop':
        maxes.pop()
    else:
        print(maxes[-1])


 -End,"
 import sys

sys.stdin.readline()
mass = list(map(int,sys.stdin.readline().split()))
m = int(sys.stdin.readline())

stek_max = [0]
max = 0

for i in range(len(mass) - m + 1):
    if len(stek_max) == 1:
        for j in range(m + i - 1, i - 1, -1):
            if stek_max[-1] < mass[j]:
                stek_max.append(mass[j])
            else:
                stek_max.append(stek_max[-1])
        max = 0
        print(stek_max[-1])
    else:
        if max < mass[i+m-1]:
            max = mass[i+m-1]
        stek_max.pop()
        if max > stek_max[-1]:
            print(max)
        else:
            print(stek_max[-1])



 -End,"
 import sys

size = int(sys.stdin.readline())
H = list(map(int,sys.stdin.readline().split()))

def parent(i):
    return (i - 1) // 2

def leftChild(i):
    return 2 * i + 1

def rightChild(i):
    return 2*i+2

log = []

def shiftDown(i):
    minIndex = i
    l = leftChild(i)
    if l <= size-1 and H[l] < H[minIndex]:
        minIndex = l
    r = rightChild(i)
    if r <= size-1 and H[r] < H[minIndex]:
        minIndex = r
    if i != minIndex:
        log.append([i, minIndex])
        temp = H[i]
        H[i] = H[minIndex]
        H[minIndex] = temp
        shiftDown(minIndex)

for i in range(size, -1, -1):
    shiftDown(i)

print(len(log))
for l in log:
    print(*l)


 -End,"
 import sys

n,m = map(int,sys.stdin.readline().split())
tasks = list(map(int,sys.stdin.readline().split()))
processors = [[0,i] for i in range(n)]

def parent(i):
    return (i - 1) // 2

def leftChild(i):
    return 2 * i + 1

def rightChild(i):
    return 2*i+2

def shiftDown(i):
    minIndex = i
    l = leftChild(i)
    r = rightChild(i)
    if l <= n-1 and processors[l] < processors[minIndex]:
        minIndex = l
    if r <= n-1 and processors[r] < processors[minIndex]:
        minIndex = r

    if i != minIndex:
        temp = processors[i]
        processors[i] = processors[minIndex]
        processors[minIndex] = temp
        shiftDown(minIndex)

for task in tasks:
    print(processors[0][1], processors[0][0])
    processors[0][0] += task
    shiftDown(0) -End,"
 import sys

n,e,d = map(int, sys.stdin.readline().split())
parent = [i for i in range(n+1)]


for k in range(e):
    i,j = map(int, sys.stdin.readline().split())
    parent[j] = parent[i]

test = 1
for k in range(d):
    i, j = map(int, sys.stdin.readline().split())
    if parent[i] == parent[j]:
        test = 0
print(test)

 -End,"
 import sys
m = int(sys.stdin.readline())
hash_table = [[] for i in range(m)]

def H(s):
    a = ord(s[0]) % 1000000007
    x = 1
    for i in range(1, len(s)):
        x = x * 263 % 1000000007
        a += ord(s[i]) * x % 1000000007
    return a % 1000000007 % m

for i in range(int(sys.stdin.readline())):
    command = list(map(str, sys.stdin.readline().split()))
    h = H(command[1])

    if command[0] == 'add':
        if command[1] not in hash_table[h]:
            hash_table[h].insert(0,command[1])
    elif command[0] == 'find':
        if command[1] in hash_table[h]:
            print('yes')
        else:
            print('no')
    elif command[0] == 'del':
        if command[1] in hash_table[h]:
            hash_table[h].remove(command[1])
    elif command[0] == 'check':
        print(*hash_table[int(command[1])]) -End,"
 import sys, random

def H(s,p):
    a = ord(s[0]) % 1000000007
    x = 1
    for i in range(1, len(s)):
        x = x * p % 1000000007
        a += ord(s[i]) * x % 1000000007
    return a % 1000000007

pattern = sys.stdin.readline().strip()
text = sys.stdin.readline().strip()


def rabinKarp (text, pattern):
    answer = []
    n = len(text)
    p = len(pattern)

    x = random.randint(1,p)

    hashText = H(text[n-p:n],x)
    hashPattern = H(pattern,x)
    xp = pow(x,p-1, 1000000007)

    for i in range(n-p-1,-1,-1):
        if hashText == hashPattern:
            answer.append(i+1)
        hashText = (hashText * (x % 1000000007) - (ord(text[i + p]) % 1000000007) * xp * (x % 1000000007) + ord(text[i]) % 1000000007) % 1000000007

    if hashText == hashPattern:
        answer.append(0)
    return answer

answer = rabinKarp(text,pattern)
a = []
for i in range(len(answer)-1,-1,-1):
    a.append(answer[i])

print(*a) -End,"
 import sys, random
phone_book = ['not found'] * (10**7)
for i in range(int(sys.stdin.readline())):
    command = list(map(str, sys.stdin.readline().split()))
    if command[0] == 'add':
        phone_book[int(command[1])] = command[2]
    if command[0] == 'del':
        phone_book[int(command[1])] = 'not found'
    if command[0] == 'find':
        print(phone_book[int(command[1])]) -End,"
 import sys
tree = []

for i in range(int(sys.stdin.readline())):
    tree.append(list(map(int, sys.stdin.readline().split())))

in_order_result = []
pre_order_result = []
post_order_result = []
def order(node):
    if node == -1:
        return
    pre_order_result.append(tree[node][0])
    order(tree[node][1])
    in_order_result.append(tree[node][0])
    order(tree[node][2])
    post_order_result.append(tree[node][0])

order(0)

print(*in_order_result)
print(*pre_order_result)
print(*post_order_result) -End,"
 import sys
sys.setrecursionlimit(20000)
tree = []
for i in range(int(sys.stdin.readline())):
    tree.append(list(map(int, sys.stdin.readline().split())))

in_order_result = []

result = ['CORRECT']

def LeftChild(node):
    if tree[node][1] == -1:
        return -1
    else:
        return tree[tree[node][1]][0]

def order(node):
    if node == -1:
        return
    order(tree[node][1])

    if len(in_order_result) > 0 and tree[node][0] < in_order_result[-1] or tree[node][0] == LeftChild(node):
        result[0] = 'INCORRECT'
        return
    else:
        in_order_result.append(tree[node][0])

    order(tree[node][2])

if len(tree) > 1:
    order(0)
print(result[0])

 -End,"
 from math import atan
def f(x):
    return 2*atan(x)

x = 1
while round(f(x),10) != round(f(x-1),10):
    x+=x
print(round(f(x),3)) -End,"
 from math import exp 
dx = 0.0000001
def f(x):
    return exp(x)
def def_e(x):
    return round((f(x+dx) - f(x))/dx,3)




 -End,"
 def even_indeces(l):
    return [l[i] for i in range(0,len(l),2)] -End,"
 def even_elements(l):
    return [i for i in l if i%2==0]
 -End,"
 def last_to_first(l):
    return l[::-1]




 -End,"
 n = int(input())
s=0
for i in range(n+1):
    if i % 5 == 0 and i % 3 != 0:
        s+=i
print(s)




 -End,"
 def common(list_a, list_b):
    return set.intersection(set(list_a), set(list_b)) -End,"
 def fib(n):
    if n <= 2:
        return 1
    else:
        return fib(n-1) + fib(n-2) -End,"
 def is_prime(n):
    res = True
    for i in range(2,int(n**0.5)+1):
        if n % i == 0:
            return False
    return True -End,"
 n = int(input())
def donuts(n):
    n1 = str(n)
    if n > 9:
        n1 = 'много'
    return 'Всего пончиков: ' + n1
        
print(donuts(n)) -End,"
 s = input()
def both_ends(s):
    if len(s) >= 2:
        return s[:2]+s[-2:]
    return ''

print(both_ends(s)) -End,"
 s = input()
def fix_start(s):
    s_new = s.replace(s[0],'*')
    return s[0] + s_new[1:]
print(fix_start(s)) -End,"
 import numpy as np
values = input().split()
if values[-1].isdigit():
    Z = np.zeros(tuple(map(int,values)), dtype = np.float64)
else:
    Z = np.zeros(tuple(map(int,values[:-1])), dtype = values[-1])

 -End,"
 import numpy as np
np.info(np.add)
np.info(np.array) -End,"
 import numpy as np
size,x = [int(input()) for i in range(2)]
Z = np.zeros(size)
Z[x] = 1




 -End,"
 import numpy as np
n,m = [int(input()) for i in range(2)]
Z = np.arange(n,m+1) -End,"
 Z = Z[::-1]




 -End,"
 import numpy as np
Z = np.arange(int(input())).reshape(tuple(map(int,input().split())))




 -End,"
 import numpy as np
NonZerros = np.nonzero(Z)




 -End,"
 import numpy as np
print(list(Z[np.nonzero(Z > 3)])) -End,"
 import numpy as np
Z = np.eye(int(input()))




 -End,"
 import numpy as np
np.random.seed(42)
n,m,l = map(int,input().split())
Z = np.random.random_sample((n,m,l)) -End,"
 import numpy as np
np.random.seed(42)
n,m = map(int,input().split())
Z = np.random.random_sample((n,m))
print(np.amin(Z))
print(np.amax(Z)) -End,"
 import numpy as np
n,m = map(int,input().split())
Z = np.zeros((n,m))
Z[0:,0]=1 # первый столбец
Z[0:,-1]=1 # последний столбец
Z[0,0:]=1 # первая строка
Z[-1,0:]=1 # последняя строка




 -End,"
 import numpy as np
Z = np.pad(Z, 1, 'constant', constant_values=(0)) -End,"
 print(df.query('age != age')) -End,"
 print(df.query('%s == @filter_values[0] and %s < @filter_values[1]' % tuple(filter_names))) -End,"
 print(df.query('%s <= age <= %s' % tuple(age_between))) -End,"
 columns = df.dtypes[df.dtypes.isin([np.dtype('float64'), np.dtype('int64')])].index
for column in columns:
    print(column, df[column].sum(), sep=':') -End,"
 words = input().lower().split()
uniq = set(words)

for item in uniq:
    print(item, words.count(item))
 -End,"
 sequence = input().split()
value = input()

out = ''
for index in range(len(sequence)):
    if sequence[index] == value:
        out += str(index) + ' '

print(out or None) -End,"
 values = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']

cards, trump = input().split(), input()

card1 = values.index(cards[0][:-1])
card1suit = cards[0][-1]
card1trump = card1suit is trump

card2 = values.index(cards[1][:-1])
card2suit = cards[1][-1]
card2trump = card2suit is trump

variousSuits = card1suit is not card2suit

if variousSuits:
    if card1trump:
        print('First')
    elif card2trump:
        print('Second')
    else:
        print('Error')
else:
    if card1 > card2:
        print('First')
    elif card1 < card2:
        print('Second')
    else:
        print('Error') -End,"
 def collatz(n):
    """"""Рекурсивная""""""
    print(n, end=' ')

    if n == 1:
        return

    if n % 2:
        n *= 3
        n += 1
    else:
        n //= 2

    collatz(n)


collatz(int(input())) -End,"
 print('_'.join(input().split())) -End,"
 inp = input().split()
operation = {'plus': lambda x, y: x + y, 
             'minus': lambda x, y: x - y, 
             'multiply': lambda x, y: x * y, 
             'divide': lambda x, y: x // y}
print(operation[inp[1]](int(inp[0]), int(inp[2]))) -End,"
 print(sorted(input().upper()) == sorted(input().upper())) -End,"
 print('{0} and {1} sat in the tree.\n{0} had fallen, {1} was stolen.\nWhat\'s remaining in the tree?'.format(input(), input())) -End,"
 series = list()
for item in input():
    if len(series) and series[-1][-1] == item:
            series[-1] += item
    else:
        series.append(item)

print(''.join([str(len(c)) + c[0] if len(c) > 1 else c[0] for c in series])) -End,"
 roman = input()
numbers = {'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90, 'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1}
arabic = 0

while len(roman):
    for key in numbers:
        if not roman.find(key):
            roman = roman[len(key):]
            arabic += numbers[key]

print(arabic) -End,"
 n = int(input())
print(n == -10 or (-5 < n <= 3) or (8 < n < 12) or (16 <= n < float('inf'))) -End,"
 series = list()
for item in input():
    if len(series):
        if series[-1][-1].isdigit() and item.isdigit():
            series[-1] += item
        elif series[-1][-1].isdigit() and item.isalpha():
            series[-1] += item
        elif series[-1][-1].isalpha() and item.isalpha():
            series.append(item)
        elif series[-1][-1].isalpha() and item.isdigit():
            series.append(item)
    else:
        series.append(item)

print(''.join([c[-1]*int(c[:-1]) if c[:-1] else c for c in series])) -End,"
 def rotate(oldmatrix, matrixsize):
    newmatrix = [[0] * matrixsize for x in range(matrixsize)]
    for y in range(matrixsize):
        for x in range(matrixsize):
            newmatrix[y][x] = oldmatrix[x][matrixsize - y - 1]

    del oldmatrix
    return newmatrix


def fill(m, n):
    if n is 1:
        return [[1]]
    value = 1
    for circle in range(n - 1):
        for side in range(4):
            lastx = circle
            for x in range(circle, n - 1 - circle):
                m[circle][x] = value
                if value == n ** 2:
                    break
                value += 1
                lastx = x

            if m[circle][lastx] == 0:
                m[circle][lastx] = value
                break

            m = rotate(m, n)

    return m


size = int(input())
print('\n'.join(' '.join(map(str, c)) for c in fill([[0] * size for x in range(size)], len([[] * size] * size)))) -End,"
 step, phrase, alph = int(input()), input().strip(), ' abcdefghijklmnopqrstuvwxyz'
print('Result: ""{0}""'.format(''.join([alph[(alph.find(c) + step) % len(alph)] for c in phrase.strip()]))) -End,"
 while True:
    cmd = input()
    if cmd != 'End':
        print('Processing ""{0}"" command...'.format(cmd))
    else:
        print('Good bye!')
        break -End,"
 length = int(input())
eval(""print(' '.join([str(num) for num in range(1, length + 1) for _ in range(num)][:length]))"") -End,"
 mapping = tuple(zip([1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1], 'M CM D CD C XC L XL X IX V IV I'.split()))
num = int(input())
for pair in mapping:
    print(pair[1] * (num // pair[0]), end='')
    num -= pair[0] * (num // pair[0]) -End,"
 inp = input().split()
mlen = {'mile': 1609.0000, 'km': 1000.0000, 'm': 1.0000, 'yard': .9144, 'foot': .3048, 'inch': .0254, 'cm': .0100, 'mm': .0010}
print('%.2e' % (float(inp[0]) * mlen[inp[1]] / mlen[inp[-1]])) -End,"
 matrix = list()

for rows in range(int(input().split()[0])):
    matrix.append(input().split())

for row in list(map(list, zip(*matrix))):
    print(' '.join([item for item in row])) -End,"
 print(int(input())*60 + int(input()))




 -End,"
 print('\n'.join(str(x) for x in (lambda x: [x // 60, x % 60])(int(input())))) -End,"
 print('\n'.join(str(x) for x in (lambda x: [x[0] // 60 + x[1] + (x[0] % 60 + x[2]) // 60, (x[0] % 60 + x[2]) % 60])(list(map(int, [input(), input(), input()]))))) -End,"
 a, b, h = map(int, [input() for _ in range(3)])
if h < a:
    print('Недосып')
elif h > b:
    print('Пересып')
else:
    print('Это нормально') -End,"
 year = int(input())
if not year % 4 and year % 100 or not year % 400:
    print('Високосный')
else:
    print('Обычный') -End,"
 a, b, c = map(int, [input() for _ in range(3)])
print((lambda x: (x * (x - a) * (x - b) * (x - c)) ** .5)((a + b + c) / 2)) -End,"
 n = int(input())
print(-15 < n <= 12 or 14 < n < 17 or 19 <= n < float('inf')) -End,"
 num1, num2, op = float(input()), float(input()), input()
operations = {'+': lambda x, y: x + y,
              '-': lambda x, y: x - y,
              '/': lambda x, y: x / y,
              '*': lambda x, y: x * y,
              'mod': lambda x, y: x % y,
              'pow': lambda x, y: x ** y,
              'div': lambda x, y: x // y}
print(operations[op](num1, num2) if not ((op == '/' or op == 'mod' or op == 'div') and not num2) else 'Деление на 0!') -End,"
 squares = {
    'треугольник':   [lambda d:
                      (((d[0] + d[1] + d[2]) / 2) *
                       (((d[0] + d[1] + d[2]) / 2) - d[0]) *
                       (((d[0] + d[1] + d[2]) / 2) - d[1]) *
                       (((d[0] + d[1] + d[2]) / 2) - d[2])) ** .5, 3],
    'прямоугольник': [lambda d: d[0] * d[1], 2],
    'круг':          [lambda d: 3.14 * d[0] ** 2, 1]}

print((lambda figure: (squares[figure][0]([float(input()) for _ in range(squares[figure][1])])))(input())) -End,"
 print('\n'.join((lambda x: map(str, [x[2], x[0], x[1]]))(sorted([int(input()) for _ in range(3)])))) -End,"
 print((lambda x: '{0} программист{1}'.format(x, list([''] + ['а'] * 3 + ['ов'] * 5)[x % 10 - 1]) if x % 100 < 11 or x % 100 > 14 else '{0} программистов'.format(x))(int(input()))) -End,"
 print('Счастливый' if (lambda x: True if sum(x[3:]) == sum(x[:3]) else False)(list(map(int, list(input())))) else 'Обычный') -End,"
 inputSum = 0
while True:
    value = int(input())
    inputSum += value
    if not value:
        print(inputSum)
        break -End,"
 a, b = int(input()), int(input())
m = max(a, b)
d = m
while d % a or d % b:
    d += m
print(d) -End,"
 row, col = [range(int(input()), int(input()) + 1) for _ in range(2)]
print('\t'.join([''] + [str(k) for k in col] + ['\n']) + '\n'.join(str(i) + '\t' + '\t'.join([str(k * i) for k in col]) for i in row)) -End,"
 print((lambda x: sum(x)/len(x))([i for i in range(int(input()), int(input()) + 1) if not i % 3])) -End,"
 print((lambda x: (x.upper().count('G') + x.upper().count('C')) / len(x) * 100)(input())) -End,"
 dna = input()
parts = [dna[0]]

for char in dna[1:]:
    if char in parts[-1]:
        parts[-1] += char
    else:
        parts.append(char)

print(''.join([part[0] + str(len(part)) for part in parts])) -End,"
 print(sum([int(i) for i in input().split()])) -End,"
 print(''.join([' '.join([(lambda x, y: str(x + y))(a, b) for (a, b) in (lambda x, y: x if len(x) > 1 else zip(y, [0]))(list(zip(A, B)), A)]) for (A, B) in (lambda x: zip([x[-1:] + x[:-1]], [x[1:] + [x[0]]]))([int(n) for n in input().split()])])) -End,"
 print(' '.join((lambda x: [n for n in set(x) if x.count(n) > 1])(input().split()))) -End,"
 print(' '.join((lambda n: [str(c) for c in range(1, n + 1) for _ in range(c)][:n])(int(input())))) -End,"
 print((lambda s: s if s else 'Отсутствует')(' '.join((lambda l: [x for x in l if x])((lambda l, v: [str(i) if l[i] == v else None for i in range(len(l))])([int(n) for n in input().split()], int(input())))))) -End,"
 matrix = list()

while True:
    line = input()
    if line == 'end':
        break
    matrix.append([int(_) for _ in line.split()])

def abc(n, y, x):
    s = n[y - 1][x] + n[y][x - 1]
    s += (lambda mt, rw, cl: mt[rw + 1][cl] if rw + 1 < len(mt) else mt[0][cl])(n, y, x)
    s += (lambda mt, rw, cl: mt[rw][cl + 1] if cl + 1 < len(mt[rw]) else mt[rw][0])(n, y, x)
    return s

print('\n'.join([' '.join([str(abc(matrix, r, c)) for c in range(len(matrix[0]))]) for r in range(len(matrix))])) -End,"
 def rotate(oldmatrix, matrixsize):
    newmatrix = [[0] * matrixsize for _ in range(matrixsize)]
    for y in range(matrixsize):
        for x in range(matrixsize):
            newmatrix[y][x] = oldmatrix[x][matrixsize - y - 1]

    del oldmatrix
    return newmatrix


def fill(m, n):
    if n is 1:
        return [[1]]
    value = 1
    for circle in range(n - 1):
        for side in range(4):
            lastx = circle
            for x in range(circle, n - 1 - circle):
                m[circle][x] = value
                if value == n ** 2:
                    break
                value += 1
                lastx = x

            if m[circle][lastx] == 0:
                m[circle][lastx] = value
                break

            m = rotate(m, n)

    return m


size = int(input())
print('\n'.join(' '.join(map(str, c)) for c in fill([[0] * size for _ in range(size)], len([[] * size] * size)))) -End,"
 def update_dictionary(d, key, value):
    if key in d:
        d[key] += [value]
    elif 2 * key in d:
        d[2 * key] += [value]
    else:
        d[2 * key] = [value] -End,"
 print('\n'.join([k + ' ' + str(v) for (k, v) in (lambda d: zip(d.keys(), d.values()))((lambda s: {key: s.count(key) for key in s})(input().lower().split()))])) -End,"
 d = {}

for _ in range(int(input())):
    n = int(input())
    if n not in d:
        d[n] = f(n)
    print(d[n]) -End,"
 print(__import__('math').pi * 2 * float(input())) -End,"
 print(*__import__('sys').argv[1:]) -End,"
 inp = [input().split(';') for _ in range(int(input()))]
table = {}

for i in range(len(inp)):

    command1, score1, command2, score2 = inp[i]
    commands = [command1, command2]

    for command in commands:
        if command not in table:
            table[command] = [0, 0, 0, 0, 0]

        table[command][0] += 1

    if score1 > score2:
        table[command1][1] += 1
        table[command2][3] += 1
    elif score1 == score2:
        table[command1][2] += 1
        table[command2][2] += 1
    else:
        table[command1][3] += 1
        table[command2][1] += 1

    for command in commands:
        table[command][4] = table[command][1] * 3 + table[command][2]

print('\n'.join((lambda t: [key + ':' + ' '.join([str(c) for c in t[key]]) for key in t])(table))) -End,"
 e = {k: v for (k, v) in zip(input(), input())}
d = dict(map(reversed, e.items()))
print(''.join((lambda s: [e[c] for c in s])(input())) + '\n' + ''.join((lambda s: [d[c] for c in s])(input()))) -End,"
 x, y = 0, 0

for _ in range(int(input())):
    cmd = input().split()
    x += (lambda s: int(s[1]) if s[0] == 'восток' else 0)(cmd)
    x -= (lambda s: int(s[1]) if s[0] == 'запад' else 0)(cmd)
    y += (lambda s: int(s[1]) if s[0] == 'север' else 0)(cmd)
    y -= (lambda s: int(s[1]) if s[0] == 'юг' else 0)(cmd)

print(x, y) -End,"
 print(sum([int(input()) for _ in range(int(input()))])) -End,"
 def closest_mod_5(x):
    while x % 5 or x < 5:
        x += 1
    return x -End,"
 scopes = {'global': {'uplink': None, 'vars': []}}

def create(scope, uplink):
    scopes.update({scope: {'uplink': uplink, 'vars': []}})

def add(scope, var):
    scopes[scope]['vars'] += [var]

def get(scope, var):
    if var in scopes[scope]['vars']:
        print(scope)
    elif scopes[scope]['uplink']:
        get(scopes[scope]['uplink'], var)
    else:
        print(None)

[(lambda x: eval(x[0] + '(\'' + x[1] + '\',\'' + x[2] + '\')'))(input().split()) for _ in range(int(input()))] -End,"
 class Buffer:
    def __init__(self):
        self.seq = []

    def add(self, *a):
        self.seq += [*a]
        while len(self.seq) > 4:
            print(sum([self.seq.pop(0) for _ in range(5)]))

    def get_current_part(self):
        return self.seq -End,"
 class LoggableList(list, Loggable):
    def append(self, arg):
        super().append(arg)
        self.log(arg) -End,"
 print((__import__('datetime').date(*map(int, input().split())) + __import__('datetime').timedelta(int(input()))).strftime('%Y %-m %-d')) -End,"
 class multifilter:
    def judge_half(cnt): return cnt[0] >= cnt[1]
    def judge_any(cnt): return cnt[0] > 0
    def judge_all(cnt): return not cnt[1]

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable, self.funcs, self.judge = iterable, funcs, judge

    def __iter__(self):
        return (elem for elem in self.iterable 
                if self.judge((lambda x: (x.count(True), x.count(False)))([f(elem) for f in self.funcs]))) -End,"
 def primes():
    i = 1
    while True:
        i += 1
        for j in range(2, i):
            if not i % j:
                break
        else:
            yield i -End,"
 s, a, b = (input() for _ in range(3))

if a in b and a in s:
    print('Impossible')
else:
    cnt = 0
    while s != s.replace(a, b):
        s = s.replace(a, b)
        cnt += 1
    print(cnt) -End,"
 print((lambda s, t: [s[i:i+len(t)].find(t) for i in range(len(s))])(input(), input()).count(0)) -End,"
 [print(line.rstrip()) for line in __import__('sys').stdin if len(__import__('re').findall(r""cat"", line)) > 1] -End,"
 [print(line.rstrip()) for line in __import__('sys').stdin if __import__('re').search(r'\bcat\b', line)] -End,"
 [print(line.rstrip()) for line in __import__('sys').stdin if __import__('re').search(r'z.{3}z', line)] -End,"
 [print(line, end='') for line in __import__('sys').stdin if __import__('re').fullmatch(r'(0+|1(01*0)*1)+\s', line)] -End,"
 print((lambda where, what: 'Yes' if [1 if what in __import__('re').findall(r""<a href=\""([\w:/.]+)\"">"", __import__('requests').get(x).text) else 0 for x in where].count(1) else 'No')(__import__('re').findall(r""<a href=\""([\w:/.]+)\"">"", __import__('requests').get(input()).text), input())) -End,"
 print('\n'.join(sorted(set(__import__('re').findall(r'(?:<a[\w\s-]*[=\w\s\""\'\?]*)(?:href=[\'\""]*[\w-]+://)([\w.-]*)', __import__('requests').get(input()).text))))) -End,"
 def childs(scope, parent):
    children = []
    for cls, parents in scope.items():
        if parent in parents:
            if cls not in children:
                children.append(cls)
            children += childs(scope, cls)

    return list(set(children))

print('\n'.join(sorted((lambda s: [('{} : {}'.format(k, len(childs(s, k)) + 1)) for k in s.keys()])(dict([(i['name'], i['parents']) for i in __import__('json').loads(input())]))))) -End,"
 d, s = dict.fromkeys(['red', 'green', 'blue'], 0), input()
for l in range(100):
    for c in __import__('importlib').import_module('xml.etree.ElementTree').fromstring(s).findall('.' + '/*' * l):
        d[c.attrib['color']] += l + 1
[print(v, end=' ') for v in d.values()] -End,"
 def fib(n):
    f = []
    f.append(0)
    f.append(1)
    for i in range(2, n + 1):
        f.append(f[i - 1] + f[i - 2])
    return f[-1]

def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main() -End,"
 def fib_digit(n):
    d = [0, 1]
    [d.append((d[_-1] + d[_-2]) % 10) for _ in range(2, n + 1)]
    return d[-1]


def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 n, m = map(int, input().split())
pp = [0, 1]
for _ in range(m, 7 * m):
    pp.append((pp[-1] + pp[-2]) % m)
    if pp[-1] == 1 and not pp[-2]:
        pp.pop(-1)
        pp.pop(-1)
        print(pp[n % len(pp)])
        break -End,"
 print(' '.join(map(str, (lambda a, b: [_ for _ in range(len(a)-len(b)+1) if a[_:_+len(b)] == b])(input(), input()))) or -1) -End,"
 inp = input()
tb = 'x' + '-' * (len(inp) * 5 - 1) + 'x'
nums = {'0': [' -- ', '|  |', '|  |', '    ', '|  |', '|  |', ' -- '],
        '1': ['    ', '   |', '   |', '    ', '   |', '   |', '    '],
        '2': [' -- ', '   |', '   |', ' -- ', '|   ', '|   ', ' -- '],
        '3': [' -- ', '   |', '   |', ' -- ', '   |', '   |', ' -- '],
        '4': ['    ', '|  |', '|  |', ' -- ', '   |', '   |', '    '],
        '5': [' -- ', '|   ', '|   ', ' -- ', '   |', '   |', ' -- '],
        '6': [' -- ', '|   ', '|   ', ' -- ', '|  |', '|  |', ' -- '],
        '7': [' -- ', '   |', '   |', '    ', '   |', '   |', '    '],
        '8': [' -- ', '|  |', '|  |', ' -- ', '|  |', '|  |', ' -- '],
        '9': [' -- ', '|  |', '|  |', ' -- ', '   |', '   |', ' -- ']}

print(tb)
[print('|' * (not n) + nums[inp[n]][k], end=' ' * ((len(inp) - n) > 1) + '|\n' * ((len(inp) - n) < 2)) for k in range(7) for n in range(len(inp))]
print(tb) -End,"
 inp = int(input())
h = {1: [n for n in range(inp, 0, -1)], 2: [], 3: []}

def sw(ra, rb):
    if not len(h[ra]):
        h[ra].append(h[rb].pop(-1))
        print(str(rb) + ' - ' + str(ra))
    elif not len(h[rb]):
        h[rb].append(h[ra].pop(-1))
        print(str(ra) + ' - ' + str(rb))
    elif h[ra][-1] > h[rb][-1]:
        h[ra].append(h[rb].pop(-1))
        print(str(rb) + ' - ' + str(ra))
    else:
        h[rb].append(h[ra].pop(-1))
        print(str(ra) + ' - ' + str(rb))
    if len(h[3]) == inp:
        exit()

while True:
    if inp % 2:
        sw(1, 3)
        sw(1, 2)
        sw(2, 3)
    else:
        sw(1, 2)
        sw(1, 3)
        sw(2, 3) -End,"
 print('Jolly' if (lambda x: set(n+1 for n in range(len(x)-1)) == set(abs(x[i]-x[i+1]) for i in range(len(x)-1)))(list(map(int, input().split()))) else 'Not jolly') -End,"
 print('\n'.join((lambda w: [str(l)+': '+str(w.count(l)) for l in sorted(set(w))])([len(_) for _ in input().split()]))) -End,"
 print((lambda m: '\n'.join([''.join([str(sum([m[r][c-1] if c-1 >= 0 else 0, m[r-1][c-1] if c-1 >= 0 and r-1 >= 0 else 0, m[r-1][c] if r-1 >= 0 else 0, m[r-1][c+1] if c+1 < len(m[0]) and r-1 >= 0 else 0, m[r][c+1] if c+1 < len(m[0]) else 0, m[r+1][c+1] if c+1 < len(m[0]) and r+1 < len(m) else 0, m[r+1][c] if r+1 < len(m) else 0, m[r+1][c-1] if r+1 < len(m) and c-1 >= 0 else 0])) if not m[r][c] else '*' for c in range(len(m[0]))]) for r in range(len(m))]))([[0 if c == '.' else 1 for c in input()] for _ in range(int(input().split()[0]))])) -End,"
 print(' '.join((lambda s: [n for n in set(s) if s.count(n) > 1])(input().split()))) -End,"
 def modify_list(l):
    l[:] = [n // 2 for n in l if not n % 2] -End,"
 n, m = list(map(int, input().split()))
field = [0 if c == '.' else 1 for _ in range(n) for c in input()]
neighbors = lambda i: sum([
    field[i + (i - 1) % m - i % m],
    field[i + (i + 1) % m - i % m],
    field[(i // m - 1) % n * m + i % m],
    field[(i // m + 1) % n * m + i % m],
    field[((i + (i - 1) % m - i % m) // m - 1) % n * m + (i + (i - 1) % m - i % m) % m],
    field[((i // m - 1) % n * m + i % m) + (i + 1) % m - ((i // m - 1) % n * m + i % m) % m],
    field[((i + (i - 1) % m - i % m) // m + 1) % n * m + (i + (i - 1) % m - i % m) % m],
    field[((i + (i + 1) % m - i % m) // m + 1) % n * m + (i + (i + 1) % m - i % m) % m]])

print('\n'.join([''.join([
    'X' if [0, 1][(lambda fl, sm, ind: fl[ind] and 2 <= sm <= 3 or sm == 3)(field, neighbors(i), i)]
    else '.' for i in range(a, a + m)]) for a in range(0, len(field), m)])) -End,"
 def f(x):
    return 1-(x+2)**2 if x<=-2 else -x/2 if -2<x<=2 else 1+(x-2)**2 if 2<x else None -End,"
 def koch_turns(n):
    l = [0, 60, -120, 60]
    for i in range(n-1):
        l[:] = [it for sl in [[i, 60, -120, 60] for i in l] for it in sl]
    return l[1:]

[print('turn {}'.format(_)) for _ in koch_turns(int(input()))] -End,"
 # put your python code here
s=0
while True:
    a=int(input())
    s+=a
    if a==0:
        print(s)
        break -End,"
 # put your python code here
seq=input()
zipseq=''
cnt=1
for n in range(len(seq)-1):
    if seq[n]==seq[n+1]:
        cnt+=1
    else:
        zipseq+=seq[n]+str(cnt)
        cnt=1
zipseq+=seq[-1]+str(cnt)
print(zipseq) -End,"
 alph=list(input())
code=list(input())
encode=list(input())
decode=list(input())
encoded=[]
decoded=[]
for i in range(len(encode)):
    encoded.append(code[alph.index(encode[i])])
print(''.join(encoded))
for i in range(len(decode)):
    decoded.append(alph[code.index(decode[i])])
print(''.join(decoded))



 -End,"
 import re, requests
a, b = input(), input()
rex=r'(https?:[^>""]+)'
links=re.findall(rex, requests.get(a).text)
links2=[]
for link in links:
    links2+=re.findall(rex,requests.get(link).text)
if b in links2:
    print('Yes')
else:
    print('No') -End,"
 a, c = input(), input()
print(input().translate(str.maketrans(a,c)), input().translate(str.maketrans(c,a)), sep='\n')
 -End,"
 l=(input().split())
d={}
for i in l:
    if len(i) not in d:
        d[len(i)]=1
    else:
        d[len(i)]+=1
for j in sorted(d.keys()):
    print(f'{j}: {d[j]}') -End,"
 from xml.etree import ElementTree
dic = {'red': 0, 'green': 0, 'blue': 0}

def go_across_elements(element, level):
    dic[element.attrib['color']] += (level)
    for subelement in element:
        go_across_elements(subelement, level + 1)
        
go_across_elements(ElementTree.fromstring(input()), 1)
print(*dic.values()) -End,"
 N = input()
n = 0
for num in range(int(N)):
    if sum([int(i) for i in str(num)]) == sum([int(i) for i in N]):
        n += 1
print(n) -End,"
 num=[int(i) for i in input().split()]
print(*[(num[i-1] + num[i-len(num)+1]*(len(num)>1)) for i in range(len(num))]) -End,"
 print(sum(i//2 + i%2 for i in [int(input()) for i in range(3)])) -End,"
 from decimal import *
def gcd(a,b): # find Greatest Common Divisor (GCD) by Euclidean algorithm
    if a == 0: 
        return b 
    return gcd(b % a, a) 

  
def lcm(a,b): # find Least Common Multiplier (LCM) using GCD
    return (a*b) / gcd(a,b)


a, b = (Decimal(i) for i in input().split())
print(lcm(a,b)) -End,"
 seq=input().lower()
print(sum([100 for i in seq if (i in 'gc')])/len(seq)) -End,"
 i=0
while input()!='0':
    i+=1
print(i)



 -End,"
 def digit_sum(n):
    return sum([int(i) for i in str(n)]) -End,"
 print(input()[::2]) -End,"
 lst=sorted([int(i) for i in input().split()])
print(lst[-1], lst[0]) -End,"
 n=int(input()) #obtaining the number of games
games=[]
for c in range(n): #recording scores for games
    game=[int(i) if i.isnumeric() else i for i in input().split(';')] #scores are converted to integers at input
    games.append(game) #each game is in a separate sublist
res={} #new dict for results
for game in games:
    for i in (0,2): #selecting only teams' names in each sublist
        if game[i] not in res: #adding teams if they are not in the dict
            res[game[i]]=[0,0,0,0,0]
        res[game[i]][0]+=1 #counting games played
        if game[i+1]>game[i-1]: 
            res[game[i]][1]+=1 #counting wins
            res[game[i]][4]+=3 #adding points for a win
        elif game[i+1]==game[i-1]:
            res[game[i]][2]+=1 #counting draws
            res[game[i]][4]+=1 #adding points for a draw
        else:
            res[game[i]][3]+=1  #counting losses
for key, value in res.items():
    print(key+':',*value)



 -End,"
 print(*[ord(i) for i in input()])




 -End,"
 a = input().split()
print(f'{a[0]}, You will be 100 years old in {2016+100-int(a[1])} year.') -End,"
 n = int(input())
print(n, 'contig'+'s'*(n!=1))




 -End,"
 from math import sqrt
x = []
while True:
    i = int(input())
    if i == 0:
        break
    x.append(i)
print(sqrt(sum([(i-sum(x)/len(x))**2 for i in x])/(len(x)-1))) -End,"
 m, n = (int(i) for i in input().split())
mx=[input().split() for _ in range(m)]
i, j = sorted(int(i) for i in input().split())
for row in mx:
    if i == j:
        print(*row)
    else:
        print(*(row[:i]),row[j],*(row[i+1:j]),row[i],*(row[j+1:])) -End,"
 print('YES' if int(input()) > 0 else 'NO')




 -End,"
 d = {'A': '00', 'C': '01', 'G': '10', 'T': '11'}
print(''.join([d[i] for i in input()])) -End,"
 print(sorted(input().lower())==sorted(input().lower())) -End,"
 from functools import reduce
def f(x):
    return reduce(lambda x, y: x*y, [i for i in range(x,0,-2)]) if x>0 else 1
        




 -End,"
 a,b,c= int(input()), int(input()), int(input())
print(['NO','YES'][(c%a==0 or c%b==0) and c<a*b])  -End,"
 s = [int(i) for i in input().split()]
d = [abs(s[i]-s[i-1]) for i in range(1,len(s))]
print('Jolly' if sorted(d)==[i for i in range(1,len(s))] else ""Not jolly"") -End,"
 x1, y1, x2, y2 = map(float, [input() for _ in range(4)])
print((((x1-x2)**2+(y1-y2)**2)**0.5)) -End,"
 n = int(input())
print(n, 'programmer'+'s'*(n!=1)) -End,"
 print('0.'+str(float(input())).split('.')[1]) -End,"
 lst = input().split()
print(*sorted(set(i for i in lst if lst.count(i)>1))) -End,"
 print(input()[::-1]) -End,"
 inp = input().lower().split()
for i in set(inp):
    print(i, inp.count(i)) -End,"
 A, B = input(), input()
print(f'''{A} and {B} sat in the tree.
{A} had fallen, {B} was stolen.
What's remaining in the tree?''') -End,"
 a = int(input())
print(('NO','YES')[a/3==a//3])
 -End,"
 print((int(input())*int(input()))%109) -End,"
 s, a, b = (input() for _ in range(3))
c = 0
if a in b and a in s:
    print('Impossible')
else:
    while a in s:
        s = s.replace(a,b)
        c += 1
    print(c) -End,"
 x1, y1, x2, y2 = (int(i) for i in input().split())
print((""NO"", ""YES"")[sorted((abs(x1-x2), abs(y1-y2))) == [1,2]]) -End,"
 d = [input().lower() for _ in range(int(input()))]
t = [input().lower().split() for _ in range(int(input()))]
print(*set([i for j in t for i in j if i not in d]), sep='\n') -End,"
 def f(ls):
    return [ls[0],ls[-1]] -End,"
 m = {'North': [1,1], 'South': [1,-1], 'East': [0,1], 'West': [0,-1]}
c = [0, 0]
for i in range(int(input())):
    d = input().split()
    c[m[d[0]][0]]+=int(d[1])*m[d[0]][1]
print(*c) -End,"
 n = int(input())
l = []
for i in range(1,n+1):
    for j in range(1,i+1):
        if len(l) == n:
            break
        l.append(i)
print(*l)     -End,"
 s = [len(i) for i in input().split()]
print(*(f'{i}: {s.count(i)}' for i in sorted(set(s))), sep='\n') -End,"
 print(*(i**2 for i in range(1,int(int(input())**0.5)+1)), sep='\n')
 -End,"
 print({1: 'You have chosen a square', 2: 'You have chosen a circle', 3: 'You have chosen a triangle', 4: 'You have chosen a rhombus'}.get(int(input()), ""There is no such shape!"")) -End,"
 print(*(i.strip() for i in __import__('fileinput').input() if '\\' in i), sep='\n')  -End,"
 def f(ls):
    return set(ls)
 -End,"
 s, ss = input(), input()
print(*([[-1], [i for i in range(len(s)) if s[i:].startswith(ss)]][ss in s])) -End,"
 s, ss = input(), input()
print(*([[-1], [i for i in range(len(s)) if s[i:].startswith(ss)]][ss in s])) -End,"
 s = input()
l = [s[0]]
for i in range(1,len(s)):
    if s[i] in l[-1]:
        l[-1]+=s[i]
    else:
        l.append(s[i])
print(''.join((str(len(i))*(len(i)>1)+ i[0] for i in l))) -End,"
 n, a = int(input()), [int(i) for i in input().split()]
print(*(a.index(i)+1 for i in sorted(a)))




 -End,"
 import sys
for line in sys.stdin.readlines():
    line = line.strip()
    if all(i.isnumeric() for i in line):
        if (len(line)==1 and int(line)==0) or not (sum(int(i) for i in line[::2]) - sum(int(i) for i in line[1::2]))%3:
            print(line) -End,"
 import re, sys
print (*(i.strip() for i in sys.stdin if (re.match(r'^(0|1(01*0)*1)+$', i))), sep='\n') -End,"
 a = input().split()
m=''
for i in a:
    if len(i) > len(m):
        m = i
print(m) -End,"
 cf = []
def cofr(a,b):
    c = a//b
    cf.append(c)
    a = a%b
    if a == 0:
        return "" "".join(str(i) for i in cf)
    return cofr(b,a)
print(cofr(*(int(i) for i in input().split('/')))) -End,"
 print(sum(int(i) for i in input().split() if i.isnumeric())) -End,"
 def fib(n):
    if n in (1,2):
        return 1
    return fib(n-1)+fib(n-2)
print(fib(int(input()))) -End,"
 n = int(input().split()[1])
a  = [int(i) for i in input().split()]
print(*(a.count(x) for x in range(1,n+1))) -End,"
 n = int(input())
a = [i for i in input().split()]
print(''.join(f'{a[i]} {a[i-1]} ' for i in [j for j in range(n)][1::2])+str((a[-1])*(n%2))) -End,"
 P, X, Y, K = map(int, [input() for _ in range(4)])
Y = X*100+Y
for i in range(K):
    Y=int(Y*(1+P/100))
print(Y//100, Y%100) -End,"
 n = int(input())
i = 0
while 2**i<=n:
    print(2**i)
    i+=1 -End,"
 import math
print(math.pi*2*float(input())) -End,"
 print(*(eval(e0+{'plus':'+','minus':'-','multiply':'*','divide':'//'}[e1]+e2) for [e0,e1,e2] in [input().split()])) -End,"
 print(''.join((i[-1]*(int(i[:-1] or 1)) for i in __import__('re').findall(r'\d*\D', input()))))


 -End,"
 n, m = map(int, input().split())
mx = [[i for i in input()] for _ in range(n)]
for i in range (n):
    for j in range (m):
        if mx[i][j]!='*':
            mx[i][j]=[mx[i+di][j+dj] for di in range(-1*(i>0),1+(i<n-1)) for dj in range(-1*(j>0),1+(j<m-1))].count('*')
print('\n'.join(''.join(str(j) for j in i) for i in mx)) -End,"
 al, sh, t = 'abcdefghijklmnopqrstuvwxyz ', int(input())%27, input().strip()
print(f'''Result: ""{''.join(al[al.index(i)-27+sh] for i in t)}""''') -End,"
 print(int((float(input())*10)%10))




 -End,"
 print(-15<int(input()) not in (13,14,17,18))




 -End,"
 a = input()
arr = [i for i in input().split()]
print(arr.count(a)) -End,"
 import re
print(re.sub('\s+', '_', input())) -End,"
 print('yes' if input().isdigit() else 'no') -End,"
 print(sum(int(i) for i in input().split())) -End,"
 class Buffer(list):
    def __init__(self):
        pass
    def add(self, *a):
        self+=[i for i in a]
        while len(self) >= 5:
            print(sum(self[0:5]))
            del self[0:5]                 
    def get_current_part(self):
        return self -End,"
 t = [int(i) for i in input()]
print(['Regular','Lucky'][sum(t[:3])==sum(t[3:])]) -End,"
 x = [i for i in range(int(input()), int(input())+1) if not i%3]
print(sum(x)/len(x)) -End,"
 print('\n'.join(f'Processing ""{i[:-1]}"" command...' if i!='End' else 'Good bye!' for i in __import__('sys').stdin.readlines())) -End,"
 print(*(sorted(int(i) for i in input().split()))) -End,"
 p = [int(input()) for _ in range(int(input()))]
print(*map(p.count, (0,1,-1))) -End,"
 def min_(a,b):
    return a if a<=b else b
def min4(a, b, c, d):
    return(min_(min_(a,b), min_(c, d)))
print(min4(*(int(input()) for _ in range(4)))) -End,"
 print(input().split(', ')[1]) -End,"
 def check_anagram(a, b):
    return sorted(list(a)) == sorted(list(b))

s1 = input().lower()
s2 = input().lower()
print(check_anagram(s1, s2)) -End,"
 s = input()
print('yes' if s.isnumeric() else 'no') -End,"
 print(sum([int(i) for i in input().split()])) -End,"
 P, r, n, t = (float(input()) for _ in range(4))
amount = P * ((1 + r / n) ** (n * t))
print(amount)
 -End,"
 DIRECTIONS = {
    0: 'do not move',
    1: 'move up',
    2: 'move down',
    3: 'move left',
    4: 'move right'
}


def output_direction(d):
    try:
        print(DIRECTIONS[d])
    except KeyError:
        print('error!')


output_direction(int(input()))
 -End,"
 i = int(input()) + 1

if i & 1 == 1:
    print(i + 1)
else:
    print(i) -End,"
 def is_leap(_year):
    if _year % 400 == 0 or (_year % 4 == 0 and _year % 100 != 0):
        return True


year = int(input())
print('Leap' if is_leap(year) else 'Regular') -End,"
 def num(string):
    try:
        return int(string)
    except ValueError:
        return float(string)


def add(x, y):
    return x + y


def sub(x, y):
    return x - y


def div_norm(x, y):
    try:
        return x / y
    except ZeroDivisionError:
        return 'Division by 0!'


def div_int(x, y):
    try:
        return x // y
    except ZeroDivisionError:
        return 'Division by 0!'


def mult(x, y):
    return x * y


def mod(x, y):
    try:
        return x % y
    except ZeroDivisionError:
        return 'Division by 0!'


def _pow(x, y):
    return x ** y


OPERATIONS = {
    '+': add,
    '-': sub,
    '/': div_norm,
    '*': mult,
    'mod': mod,
    'div': div_int,
    'pow': _pow
}

a = num(input())
b = num(input())
operation = input()
print(OPERATIONS[operation](a, b))
 -End,"
 from collections import Counter

number = int(input())
sizes = (int(input()) for _ in range(number))
c = Counter(sizes)
print(c[0], c[1], c[-1])
 -End,"
 while True:
    n = int(input())
    if 100 >= n >= 10:
        print(n)
    elif n > 100:
        break -End,"
 def can_break(_n, _m, _k):
    size = _n * _m
    if _k <= size:
        if _k % _n == 0 or _k % _m == 0:
            return True


n, m, k = (int(input()) for _ in range(3))
print('YES' if can_break(n, m, k) else 'NO')

 -End,"
 from collections import Counter
numbers = input().split()
[print(elem, end=' ') for elem, cnt in Counter(numbers).items() if cnt > 1] -End,"
 number = int(input())
div = 3
cur_div = div
while cur_div != number:
    if cur_div > number:
        print('NO')
        break
    cur_div += div
else:
    print('YES') -End,"
 n = input()
print(n + ' programmer' + ('' if n == '1' else 's')) -End,"
 h1, m1, s1 = (int(input()) for _ in range(3))
h2, m2, s2 = (int(input()) for _ in range(3))
print((h2 - h1) * 60 ** 2 + (m2 - m1) * 60 + (s2 - s1)) -End,"
 import numpy as np
l = []
while True:
    n = int(input())
    if n == 0:
        break
    l.append(n)

a = np.array(l)
res = np.r_[True, a[1:] > a[:-1]] & np.r_[a[:-1] > a[1:], True]
print(np.sum(res[1:-1])) -End,"
 n_students = (int(input()) for _ in range(3))
print(sum((n // 2 + n % 2) for n in n_students))
 -End,"
 s = set()
n = -1
while n != 0:
    n = int(input())
    s.add(n)
print(max(s)) -End,"
 from math import hypot

total = int(input())
points = [[int(j) for j in input().split()] for _ in range(total)]
distances = (hypot(p[0], p[1]) for p in points)
for distance, point in sorted(zip(distances, points)):
    print(*point)
 -End,"
 try:
    print('0.{}'.format(input().split('.')[1]))
except IndexError:
    print('0.0') -End,"
 from collections import OrderedDict, Callable
from numpy import mean


class DefaultOrderedDict(OrderedDict):
    def __init__(self, default_factory=None, *a, **kw):
        if (default_factory is not None and
                not isinstance(default_factory, Callable)):
            raise TypeError('first argument must be callable')
        OrderedDict.__init__(self, *a, **kw)
        self.default_factory = default_factory

    def __missing__(self, key):
        if self.default_factory is None:
            raise KeyError(key)
        self[key] = value = self.default_factory()
        return value


def fill_mapper():
    _mapper = DefaultOrderedDict(list)
    while True:
        try:
            data = input()
            website, time = data.split()
            _mapper[website].append(int(time))
        except EOFError:
            break
    return _mapper


def print_result(_mapper):
    for website, time in _mapper.items():
        print('{}\t{}'.format(website, int(mean(time))))


mapper = fill_mapper()
print_result(mapper) -End,"
 def is_in_interval(n):
    if n > -15:
        if n not in [13, 14, 17, 18]:
            return True
    return False


print(is_in_interval(int(input()))) -End,"
 from collections import defaultdict


def get_parents(exs):
    child2parents = defaultdict(list)
    for ex in exs:
        if len(ex) == 2:
            child2parents[ex[0]] += ex[1].split()
    return child2parents


def get_excluded(exs, n_exs):
    
    def _exclude(parents, _ex):
        if parents:
            for a in parents:
                if a in caught:
                    if _ex not in excluded:
                        excluded.append(_ex)
                _exclude(child2parents.get(a, None), _ex)

    caught = set()
    excluded = []
    child2parents = get_parents(exs)

    for _ in range(n_exs):
        ex = input()
        _exclude(child2parents.get(ex, None), ex)
        caught.add(ex)
    return excluded


n_classes = int(input())
exceptions = [[l.strip() for l in input().split("":"")] for _ in range(n_classes)]
n_caught = int(input())
print(*get_excluded(exceptions, n_caught), sep='\n')

 -End,"
 class Buffer:

    def __init__(self):
        self.current_part = []

    def add(self, *a):
        self.current_part += a
        while len(self.current_part) >= 5:
            print(sum(self.current_part[:5]))
            self.current_part = self.current_part[5:]

    def get_current_part(self):
        return self.current_part -End,"
 # Posted from PyCharm Edu
# write your answer here 
n = int(input())
start = 1
series = [start]
for i in range(start, n):
    start /= 2
    series.append(start if i % 2 == 0 else -start)

print(sum(series))

 -End,"
 n, m = [int(i) for i in input().split()]
a = [[int(j) for j in input().split()] for _ in range(n)]
inv_a = a[::-1]
for i in range(m):
    for j in range(n):
        print(inv_a[j][i], end=' ')
    print() -End,"
 lst = [int(i) for i in input().split()]
x = int(input())
indices = [i for i, n in enumerate(lst) if n == x]

if not indices:
    print('Missing')
else:
    print(*indices) -End,"
 from collections import Counter

n = int(input())
grades = [input() for _ in range(n)]
c = Counter(grades)
print(*list(item[1] for item in sorted(c.items()))) -End,"
 import re
pattern = re.compile(""^19[0-9]{9}$"")
result = re.match(pattern, input())
print('Yes' if result else 'No') -End,"
 input()
elements = [int(i) for i in input().split()]
a = max(elements)
elements.remove(a)
b = max(elements)
print(int(a)*int(b)) -End,"
 def f(x):
    if x <= -2:
        return 1 - (x + 2)**2
    elif x > 2:
        return 1 + (x - 2)**2
    else:
        return - x / 2 -End,"
 k, n = [int(i) for i in input().split()]
combinations = set()


def gen_combinations(levels, k, n):
    for i in range(n):
        if k > 0:
            levels.append(i)
            gen_combinations(levels, k - 1, n)
            levels.pop(-1)
        else:
            t = tuple(sorted(levels))
            combinations.add(t)

gen_combinations([], k, n)

for item in sorted(combinations):
    if len(set(item)) == k:
        print(*item) -End,"
 def shift_right(a):
    k = a[-1]
    for i in range(0, len(a)):
        a[i], k = k, a[i]
    return a


input()
a = shift_right(input().split())
print(*a) -End,"
 numbers = [int(i) for i in input().split()]

# print numbers on even positions
for n in numbers[1::2]:
    print(n)

# print sum of the even elements:
print(sum(n for n in numbers if n % 2 == 0)) -End,"
 KEY = ''.join(chr(c) for c in range(ord('\U0001f600'), ord('\U0001f650')))
shift = int(input())
string = list(input().strip())
output = ''

for s in string:
    output += KEY[(KEY.find(s) + shift) % len(KEY)]
print('Result: ""{}""'.format(output))
 -End,"
 d = {
    1: 'I',
    5: 'V',
    10: 'X',
    50: 'L',
    100: 'C',
    500: 'D',
    1000: 'M'
}

x = int(input())

i = 1000
levels = []
vals = []
while i >= 1:
    letter = d[i]
    l = (x - sum(levels)) // i
    levels.append(l * i)
    if i == 1000:
        if 1 <= l <= 3:
            val = letter * l
        else:
            val = ''
    else:
        if 1 <= l <= 3:
            val = letter * l
        elif l == 4:
            val = letter + d[i * 5]
        elif 5 <= l <= 8:
            val = d[i * 5] + letter * (l - 5)
        elif l == 9:
            val = letter + d[i * 10]
        else:
            val = ''
    vals.append(val)
    i = int(i / 10)
print(''.join(vals)) -End,"
 from datetime import date, timedelta

year, month, day = input().split()
days = int(input())
input_date = date(day=int(day), month=int(month), year=int(year))
new_date = input_date + timedelta(days=days)
print(new_date.strftime('%Y %-m %-d'))
 -End,"
 def find_all(a_string, sub):
    result = []
    k = 0
    while k < len(a_string):
        k = a_string.find(sub, k)
        if k == -1:
            return result
        else:
            result.append(k)
            k += 1
    return result

print(len(find_all(input(), input())))
 -End,"
 from decimal import Decimal


# greatest common divisor
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a


# least common multiple
def lcm(n, m):
    return n / gcd(n, m) * m


nums = [Decimal(i) for i in input().split()]
print(int(lcm(*nums)))
 -End,"
 n = int(input())
count = 0
i = 1
summands = []

while count + i <= n:
    count += i
    summands.append(i)
    i += 1

summands[len(summands) - 1] += n - count

print(len(summands))
print(*summands)
 -End,"
 from math import sqrt


def rectangle_area():
    a, b = int(input()), int(input())
    return a * b


def triangle_area():
    a, b, c = int(input()), int(input()), int(input())
    p = (a + b + c) / 2
    return sqrt(p * (p - a) * (p - b) * (p - c))


def circle_area():
    r = int(input())
    return 3.14 * (r ** 2)


shape_fun = {'rectangle': rectangle_area,
             'circle': circle_area,
             'triangle': triangle_area}


print(shape_fun[input()]())

 -End,"
 seq = list(map(int, input().split()))

diffs = set()
for i in range(len(seq) - 1):
    diff = abs(seq[i] - seq[i + 1])
    if diff != 0:
        diffs.add(diff)

if len(seq) == 1:
    print('Jolly')
else:
    print('Jolly' if len(diffs) == len(seq) - 1 == max(diffs) else 'Not jolly') -End,"
 def catch_exception(f):
    try:
        f()
    except Exception as e:
        print('Caught {}'.format(e.__class__.__name__))

catch_exception(foo) -End,"
 import sys

lines = sys.stdin.readlines()
for line in lines:
    print(line.replace('human', 'computer'), end='')
 -End,"
 def digit_sum(n):
    s = 0
    while n:
        s += n % 10
        n //= 10
    return s -End,"
 import re

print('Yes' if re.fullmatch('[ABEKMHOPCTYX]\d{3}[ABEKMHOPCTYX]{2}', input()) else 'No')

 -End,"
 from math import factorial

k = int(input())
i = 0
while factorial(i) <= k:
    i += 1

print(i)
 -End,"
 rate, dollars, cents, years = (int(input()) for _ in range(4))

deposit = dollars * 100 + cents
for _ in range(1, years + 1):
    deposit += int(deposit / 100 * rate)

out_cents = deposit % 100
out_dollars = deposit // 100
    
print(f'{out_dollars} {out_cents}')  



 -End,"
 import re

SMILEY = re.compile(r'^([:;]|>:){1}-?(\(+|\)+|\[+|\]+|\{+|\}+|p+)$')

s = input()
print(1 if SMILEY.match(s) else 0)
 -End,"
 _, n_cols, *elements = map(int, input().split())
rows = [elements[i:i + n_cols] for i in range(0, len(elements), n_cols)]

result = []
for j in zip(*rows):
    result.extend(j)

print(*result)
 -End,"
 import numpy as np
n_eq, _ = map(int, input().split())

A = []
B = []
for i in range(n_eq):
    *coefs, b = map(int, input().split())
    A.append(coefs)
    B.append(b)

res = np.linalg.lstsq(A, B, rcond=None)
print(*res[0])
 -End,"
 n = int(input())
is_power2 = 'YES' if ((n & (n - 1)) == 0) and n > 0 else 'NO'
print(is_power2)
 -End,"
 from operator import itemgetter

input()
digits = map(int, input().split())
sorted_digits = sorted(enumerate(digits, 1), key=itemgetter(1))
indices = map(itemgetter(0), sorted_digits)
print(*indices)
 -End,"
 n_rows, _ = map(int, input().split())
rows = [input().split() for _ in range(n_rows)]
for r in zip(*rows):
    print(*r)
 -End,"
 class fibonacci_sequence:
    def __init__(self, length: int):
        self.length = length

    def __iter__(self):
        count = 0
        prev_n = 0
        cur_n = 1
        while count < self.length:
            if count == 0:
                yield 1
            else:
                cur_n, prev_n = prev_n + cur_n, cur_n
                yield cur_n
            count += 1
        else:
            raise StopIteration
 -End,"
 l = list(map(int, input().split()))
for i in range(len(l) - 1):
    cur = l[i]
    for j in range(len(l) - i - 1):
        if l[j] > l[j+1]:
            l[j], l[j+1] = l[j+1], l[j]

print(f'{l[-1]} {l[0]}')
 -End,"
 def fib_digit(n):
    a = 0
    b = 1
    for i in range(n - 1):
        a, b = b, (a + b) % 10
    return b

def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 cipher = dict(zip(list(input()), list(input())))
decipher = {v: k for k, v in cipher.items()}

encoded = ''.join([cipher[i] for i in list(input())])
decoded = ''.join([decipher[i] for i in list(input())])

print(encoded)
print(decoded)
 -End,"
 from operator import itemgetter

n_students = int(input().strip())
data = [input().strip().split() for i in range(n_students)]
av_grades = [(' '.join(j[:2]), sum(map(int, j[-3:])) / 3) for j in data]
sort_students = sorted(av_grades, key=itemgetter(1), reverse=True)
for s in sort_students:
    print(s[0], end='\n')
 -End,"
 def reverse_sequence(n, a):
    res = []
    for i in range(n):
        if len(res) < (n // 2) + (n % 2):
            next_i = n - i - 1
            if i == next_i:
                res.append(a[i])
            else:
                res.append(a[i] + a[next_i])
    return res

seq = list(map(int, input().strip().split()))
print(*reverse_sequence(seq[0], seq[1:]))
 -End,"
 import math


def get_roots(a, b, c):
    try:
        d = math.sqrt(math.pow(b, 2) - 4 * a * c)
    except ValueError:
        return None
    r1 = (- b + d) / (2 * a)
    r2 = (-b - d) / (2 * a)
    if r1 == r2:
        return r1,
    return r1, r2


abc = (float(input()) for _ in range(3))
roots = get_roots(*abc)
if roots is not None:
    print(*sorted(roots))
 -End,"
 def swap_elements(m):
    res = []
    for i in range(len(m)):
        new_row = []
        for j in range(len(m[i])):
            new_row.append(sum((m[i - 1][j], m[(i + 1) % len(m)][j],
                                m[i][j - 1], m[i][(j + 1) % len(m[i])])))
        res.append(new_row)
    return res


def read_input():
    m = []
    while True:
        line = input()
        if line == 'end':
            break
        m.append(list(map(int, line.strip().split())))
    return m


def print_result(m):
    for row in m:
        print(*row)


swapped = swap_elements(read_input())
print_result(swapped)
 -End,"
 def read_input():
    a = []
    for i in range(int(input().strip().split()[0])):
        a.append(list(map(int, input().strip().split())))
    i, j = map(int, input().strip().split())
    return a, i, j


def swap_cols(a, i, j):
    for row in a:
        row[i], row[j] = row[j], row[i]
    return a


def print_result(a):
    for row in a:
        print(*row)


print_result(swap_cols(*read_input()))
 -End,"
 size = int(input())
a = list(map(int, input().strip().split()))
n = 10
res = []
for i in range(n + 1):
    if not a:
        break
    try:
        while True:
            a.remove(i)
            res.append(i)
    except ValueError as e:
        continue
print(*res)
 -End,"
 n = int(input())
cache = {}

for i in range(n):
    x = int(input())
    try:
        print(cache[x])
    except KeyError:
        cache[x] = f(x)
        print(cache[x])
 -End,"
 def sort_by_insertion(a):
    for i in range(1, len(a)):
        key = a[i]
        j = i - 1
        while j >= 0 and a[j] > key:
            a[j + 1] = a[j]
            j = j - 1
            a[j + 1] = key
    return a


print(*sort_by_insertion(list(map(int, input().split()))))
 -End,"
 def get_arithmetic_average(a, b):
    nums = []
    start = a
    while start % 3 != 0:
        start += 1
    while start <= b:
        nums.append(start)
        start += 3
    return sum(nums) / len(nums)


print(get_arithmetic_average(*map(int, (input() for _ in range(2)))))
 -End,"
 def merge_sort(seq):
    if len(seq) < 2:
        return seq
    res = []
    med = len(seq) // 2
    left = merge_sort(seq[:med])
    right = merge_sort(seq[med:])
    while len(left) > 0 and len(right) > 0:
        if left[0] > right[0]:
            res.append(right[0])
            right.pop(0)
        else:
            res.append(left[0])
            left.pop(0)
    res += left
    res += right
    return res


input()
seq = list(map(int, input().split()))
input()
print(*merge_sort(seq))
 -End,"
 def print_matrix(n_rows, n_cols):
    numbers = list(range(1, n_rows * n_cols + 1))
    count = 0
    for i in range(0, len(numbers) + 1, n_cols):
        row = numbers[i:i+n_cols]
        if count % 2 == 1:
            row = reversed(row)
        print(*[f'{el:>4}' for el in row], sep='')
        count += 1


print_matrix(*map(int, input().split()))
 -End,"
 import sys

for line in sys.stdin:
    line = line.rstrip()
    cat_start = line.find('cat')
    if line[cat_start + 3:].find('cat') != -1:
        print(line)
 -End,"
 import sys


def get_int(start_message,
            error_message,
            end_message):
    sys.stdout.write(f'{start_message}\n')
    while True:
        try:
            n = int(input())
            sys.stdout.write(f'{end_message}\n')
            return n
        except ValueError:
            sys.stdout.write(f'{error_message}\n')
 -End,"
 numbers = [int(input()) for _ in range(int(input()))]
res = sum(n for n in numbers if n % 10 == 4)
print(res)
 -End,"
 def get_square_area(coordinates):
    x1, y1 = coordinates[0]
    x2, y2 = coordinates[1]
    s = (x2 - x1) ** 2 + (y2 - y1) ** 2
    return s


print(get_square_area([map(float, input().split()) for _ in range(4)]))
 -End,"
 def get_edit_distance(a, b):
    len_a = len(a) + 1
    len_b = len(b) + 1
    matrix = [[0 for _ in range(len_b)] for _ in range(len_a)]
    for x in range(len_a):
        matrix[x][0] = x
    for y in range(len_b):
        matrix[0][y] = y

    for x in range(1, len_a):
        for y in range(1, len_b):
            if a[x - 1] == b[y - 1]:
                matrix[x][y] = min(
                    matrix[x - 1][y] + 1,
                    matrix[x - 1][y - 1],
                    matrix[x][y - 1] + 1
                )
            else:
                matrix[x][y] = min(
                    matrix[x - 1][y] + 1,
                    matrix[x - 1][y - 1] + 1,
                    matrix[x][y - 1] + 1
                )
    return matrix[len_a - 1][len_b - 1]


print(get_edit_distance(input(), input()))
 -End,"
 def primes():
    yield 2
    i = 3
    while i > 2:
        for k in range(3, i // 2):
            if i % k == 0:
                break
        else:
            yield i
        i += 2
 -End,"
 def totient(n):
    phi = int(n > 1 and n)
    for p in range(2, int(n ** .5)):
        if n % p == 0:
            phi -= phi // p
            while n % p == 0:
                n //= p
    if n > 1:
        phi -= phi // n
    return phi


print(totient(int(input())))
 -End,"
 def distance(x1, y1, x2, y2):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** .5


nums = [float(input()) for _ in range(4)]
print(distance(*nums))
 -End,"
 class multifilter:

    def judge_half(pos, neg):
        return pos >= neg

    def judge_all(pos, neg):
        return neg == 0

    def judge_any(pos, neg):
        return pos >= 1

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        fnum = len(self.funcs)
        for i in self.iterable:
            pos = sum(f(i) for f in self.funcs)
            neg = fnum - pos
            if self.judge(pos, neg):
                yield i
 -End,"
 def IsPointInCircle(x, y, xc, yc, r):
    dist = ((x - xc) ** 2 + (y - yc) ** 2) ** .5
    return r - dist


data = [float(input()) for _ in range(5)]
print('YES' if IsPointInCircle(*data) >= 0 else 'NO')
 -End,"
 x0, y0 = 0, 0

for _ in range(int(input())):
    direction, count = input().split()
    count = int(count)
    if direction == 'North':
        y0 += count
    elif direction == 'South':
        y0 -= count
    elif direction == 'East':
        x0 += count
    elif direction == 'West':
        x0 -= count

print(x0, y0)
 -End,"
 def condition(r):
    return r % 1 == 0 and 1000 > r > 0


# if a == 0
def quadratic_roots(a, b, c):
    discr = b ** 2 - 4 * a * c
    if a != 0:
        x1 = (-b + discr ** .5) / (2 * a)
        x2 = (-b - discr ** .5) / (2 * a)
        return x1, x2
    if b != 0:
        return -c / b,
    else:
        return ()


# if a != 0
def cubic_roots(a, b, c, d):
    roots = []

    def add_root(r):
        if condition(r):
            if a * (r ** 3) + b * (r ** 2) + c * r + d == 0:
                roots.append(r)

    a_factors = list(find_factors(a))
    d_factors = list(find_factors(d))
    for f in a_factors + d_factors:
        add_root(f)
    for af in a_factors:
        for df in d_factors:
            add_root(af / df)
    return roots


def find_factors(n):
    if n < 0:
        n = -n
    for i in range(1, int(n ** .5 + 1)):
        if n % i == 0:
            yield i
            if i ** 2 != n:
                yield n / i


def find_roots(a, b, c, d):
    if a == 0:
        return quadratic_roots(b, c, d)
    if d == 0:
        return quadratic_roots(a, b, c)
    else:
        return cubic_roots(a, b, c, d)


roots = find_roots(*(int(input()) for _ in range(4)))
sorted_roots = sorted(filter(lambda x: condition(x), set(roots)))
if sorted_roots:
    print(*map(int, sorted_roots), sep='\n')
 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.coins = 0

    def can_add(self, v):
        return self.coins + v <= self.capacity

    def add(self, v):
        self.coins += v
 -End,"
 s=input().split() 
n=int(s[0]) 
m=int(s[1]) 
spisok = [[] for i in range(n)] 

for i in range(m): 
    a=([int(i) for i in input().split()]) 
    spisok[a[0]-1].append(a[1]) 
    spisok[a[1]-1].append(a[0])
    
for i in range(len(spisok)):
    for j in range(len(spisok[i])):
        spisok[i][j] = spisok[i][j]-1

visited = [False] * n
component = [-1] * n  # для каждой вершины храним номер её компоненты
num_components = 0

def dfs(v):
    component[v] = num_components
    visited[v] = True
    for w in spisok[v]:
        if visited[w] == False:
            dfs(w)

visited = [False] * n
for v in range(n):
    if not visited[v]:
        dfs(v)
        num_components += 1
        
print(num_components) -End,"
 import itertools
s= input().split(' ')
spisok=list(itertools.combinations(range(int(s[0])), int(s[1])))
print(len(spisok)) -End,"
 s = [int(i) for i in input().split()]
n = int(input())
if s.count(n) == 0:
    print ('None')
else:
    k = -1
    for i in s:
        k += 1
        if n == i:
            print(k) -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.box = 0
    def can_add(self, v):
        self.v = v
        return (v + self.box) <= self.capacity
    def add(self, v):
        if self.can_add(v):
            self.box += v -End,"
 class Buffer:
    def __init__(self):
        self.s = []
    def add(self, *a):
        # добавить следующую часть последовательности
        self.summ = 0
        for i in a:
            self.s.append(i)
        self.count = len(self.s)
        while len(self.s) >= 5:
            for x in self.s[:5]:
                self.summ += x
                self.s.remove(x)
            print(self.summ)           
            self.summ = 0
    def get_current_part(self):
        # вернуть сохраненные в текущий момент элементы последовательности в порядке, в котором они были добавлены
        return self.s -End,"
 n = int(input())
d = dict()

for i in range(n):
    matchs = input().split(';')
    if int(matchs[1]) > int(matchs[3]):
        if d.get(matchs[0]) == None:
            d[matchs[0]] = ['1','1','0','0','3']
        else:
            for i in range(len(d.get(matchs[0]))):
                d.get(matchs[0])[i] = int(d.get(matchs[0])[i]) + int(['1','1','0','0','3'][i])
        if d.get(matchs[2]) == None:
            d[matchs[2]] = ['1','0','0','1','0']
        else:
            for i in range(len(d.get(matchs[2]))):
                d.get(matchs[2])[i] = int(d.get(matchs[2])[i]) + int(['1','0','0','1','0'][i])

    elif int(matchs[1]) < int(matchs[3]):
        if d.get(matchs[0]) == None:
            d[matchs[0]] = ['1','0','0','1','0']
        else:
            for i in range(len(d.get(matchs[0]))):
                d.get(matchs[0])[i] = int(d.get(matchs[0])[i]) + int(['1','0','0','1','0'][i])
        if d.get(matchs[2]) == None:
            d[matchs[2]] = ['1','1','0','0','3']
        else:
            for i in range(len(d.get(matchs[2]))):
                d.get(matchs[2])[i] = int(d.get(matchs[2])[i]) + int(['1','1','0','0','3'][i])

    elif int(matchs[1]) == int(matchs[3]):
        if d.get(matchs[0]) == None:
            d[matchs[0]] = ['1','0','1','0','1']
        else:
            for i in range(len(d.get(matchs[0]))):
                d.get(matchs[0])[i] = int(d.get(matchs[0])[i]) + int(['1','0','1','0','1'][i])
        if d.get(matchs[2]) == None:
            d[matchs[2]] = ['1','0','1','0','1']
        else:
            for i in range(len(d.get(matchs[2]))):
                d.get(matchs[2])[i] = int(d.get(matchs[2])[i]) + int(['1','0','1','0','1'][i])
                
for i in d.keys():
    kl = []
    for j in d.get(i):
        kl.append(str(j))
    res = ' '.join(kl)
    print(i+':'+str(res)) -End,"
 dictionary1 = dict()
dictionary2 = dict()
st1 = str(input())
st2 = str(input())
for i in range(len(st1)):
    dictionary1[st1[i]] = st2[i]
for j in range(len(st2)):
    dictionary2[st2[j]] = st1[j]
st3 = str(input())
st4 = str(input())
zaf = []
ras = []

for k in st3:
    zaf.append(dictionary1.get(k))
print(''.join(zaf))
for m in st4:
    ras.append(dictionary2.get(m))
print(''.join(ras)) -End,"
 import itertools
chr = input().split()
lst = ["""".join(str(i)).replace(""("","""").replace("")"","""").replace("","","""") for i in itertools.combinations(range(int(chr[1])), int(chr[0]))]
for i in lst:
    print(i) -End,"
 cls = int(input())
dictionary, visited = dict(), dict()
for i in range(cls):
    str1 = input().split(' ')
    dictionary[str1[0]] = [i for i in str1[2:]]
    visited[str1[0]] = False
req = int(input())    
lst = []
#функция для поиска в глубину
def dfs(vertex):
    visited[vertex] = True
    for words in dictionary.get(vertex):
        lst.append(words)
        if visited[words] == False:
            dfs(words)
#цикл для считывания запросов по одному и вывод
for j in range(req): 
    for vertex in dictionary.keys():
        visited[vertex] = False
    str2 = input().split()
    dfs(str2[1])
    if (lst.count(str2[0]) > 0) or (str2[1] == str2[0]): print('Yes')
    else: print('No')
    lst.clear() -End,"
 import datetime
now = [int(i) for i in input().split()]
data_after =  datetime.timedelta(days = int(input())) + datetime.date(now[0],now[1],now[2])
print(data_after.year, data_after.month, data_after.day) -End,"
 import numpy as np
x_shape = tuple(map(int, input().split()))
X = np.fromiter(map(int, input().split()), np.int).reshape(x_shape)
y_shape = tuple(map(int, input().split()))
Y = np.fromiter(map(int, input().split()), np.int).reshape(y_shape)
if x_shape[1] == y_shape[1]:
    print(X.dot(Y.T))
else:
    print('matrix shapes do not match') -End,"
 import urllib
from urllib import request
import numpy as np
from scipy import linalg as la
f = urllib.request.urlopen(input())  # open file from URL
data = np.loadtxt(f, delimiter=',', skiprows=1)  # load data to work with
y = np.array(data[:,0])
data[:,0] = 1
bet=la.inv(data.T.dot(data)).dot(data.T).dot(y)
print(*bet) -End,"
 s, a = input(), input()
col = 0
for i in range(len(s)-len(a)+1):
    if s[i:len(a)+i] ==  a:
        col += 1
print(col) -End,"
 s, a, b = str(input()), str(input()), str(input())
c=0
bre = False
while a in s:
    s = s.replace(a,b)
    if a in b:
        bre = True
        break
    c += 1
print(c if bre == False else ""Impossible"")  -End,"
 import sys
import re
b = r'\bcat\b'
for line in sys.stdin:
    line = line.rstrip()
    if re.search(b,line):
        print(line) -End,"
 import sys
import re
for line in sys.stdin:
    line = line.rstrip()
    if re.search(r'z.{3}z',line):
        print(line) -End,"
 import sys
import re
for line in sys.stdin:
    line = line.rstrip()
    print(line.replace(""human"", ""computer"")) -End,"
 print(f""Hello, {input()}"") -End,"
 print(f""Hello, {input()}\nHello, {input()}"") -End,"
 a, b = ""Hello, "", ""input()""
print(f""{a}{eval(b)}\n{a}{eval(b)}"") -End,"
 def sum2(a,b):
    typeA = type(a)
    typeB = type(b)
    return a + b if typeA in (int, float) and typeB in (int, float)  \
    else ""2nd argument is not a number"" if typeA in (int, float) \
    else ""1st argument is not a number"" if typeB in (int, float) \
    else ""all arguments are not a numbers"" -End,"
 def counter(T):
    tlow = (t.lower() for t in T)
    tlowd = {t : len(set(t)) for t in tlow}
    return max(tlowd.values()) if set(tlowd.values()) == len(tlowd.values()) else max([len(l) for l in tlowd.keys() if tlowd.get(l) == max(tlowd.values())]) -End,"
 def lam(U):
    from scipy.constants import h, e, c
    return h * c / e / U




 -End,"
 with open('file.txt', 'r') as f:
    filenametext, filenamewhereaddanswers, numberlowerregister = f.readlines()
    with open(filenamewhereaddanswers.strip(), 'a') as fileadd:
        with open(filenametext.strip(), 'r') as filetext:
            fileadd.write(filetext.readlines()[int(numberlowerregister)].lower()) -End,"
 with open('file.txt', 'r') as f, open(f.readline().strip(), 'r') as filetext, open(f.readline().strip(), 'a') as fileadd:
    fileadd.write(filetext.readlines()[int(f.readline())].lower()) -End,"
 with open('file.txt', 'r') as f:
    fin, fout, num = map(str.strip, f)
    
with open(fin, 'r') as filetext, open(fout, 'a') as fileadd:
    fileadd.write(filetext.readlines()[int(num)].lower()) -End,"
 from sys import stdin, stdout
a, b = map(int, stdin)
stdout.write(f""{a+b}\n"")
stdout.write(f""{a-b}\n"")
stdout.write(f""{b-a}\n"")
stdout.write(f""{a*b}\n"")
stdout.write(f""{a / b}\n"")
stdout.write(f""{b % a}\n"")
stdout.write(f""{a ** b}\n"") -End,"
 from sys import stdin, stdout
a, b = map(int, stdin)
stdout.write(f""{a//b}"") -End,"
 from sys import stdin, stdout
stdout.write(f""{int(stdin.readline())//int(stdin.readline())}"")
stdout.flush() -End,"
 import math
from sys import stdin, stdout
a, b, c = map(int, stdin)
p = (a+b+c) / 2
stdout.write(f""{int(p*2)}\n{math.sqrt(p*(p-a)*(p-b)*(p-c))}"") -End,"
 from sys import stdin, stdout
a, b = map(float, map(str.strip, stdin.readlines()))
stdout.write(f""{int(a*b/2)}\n{round(a*b/2, 1)}\n{a*b/2}"") -End,"
 from sys import stdin, stdout
from numpy import sqrt
a = int(stdin.read())
stdout.write(f""{int(round(sqrt(3)*11*a**2/4))}"") -End,"
 from sys import stdin, stdout
stdout.write(f""{round(3**0.5*11*int(stdin.read())**2/4)}"") -End,"
 from sys import stdin, stdout
a_2 = int(stdin.read()) ** 2
stdout.write(f""{round(a_2 * 15*3**0.5/8 + 3 * a_2)}"") -End,"
 from sys import stdin, stdout
stdout.write(f""{round(int(stdin.read()) ** 2 * (15*3**0.5/8 + 3))}"") -End,"
 from sys import stdin, stdout
(lambda l: stdout.write(f""{3*l**2*(5*(5+2*5**0.5))**0.5:.2f}\n{l**3/4*(15+7*5**0.5):.2f}""))(int(stdin.read())) -End,"
 from sys import stdin, stdout
L, v1, v2, vm = map(int, stdin)
stdout.write(f""{int(L/(v1+v2) * vm)}"") -End,"
 from sys import stdin, stdout
(lambda l: stdout.write(f""{int(l[0]/(l[1]+l[2]) * l[3])}""))(list(map(int, stdin))) -End,"
 from sys import stdin, stdout
stdout.write(f""{sum(list(map(int, stdin.readline().split())))}"") -End,"
 from sys import stdin, stdout
stdout.write(f""{sum(list(map(int, stdin.readline().split())))}#{sum(list(map(int, stdin.readline().split())))}"")




 -End,"
 from sys import stdin,stdout 
stdout.write(f""{' '.join(set(stdin.readline().strip().split('&')))}"") -End,"
 (lambda s : print(s[1], s[2], s[-2],sep=' '))(input().split()) -End,"
 from sys import stdout
(lambda s : stdout.write(f""{s[1]} {s[2]} {s[-2]}""))(input().split()) -End,"
 from sys import stdout
(lambda s: stdout.write(f""{'-$-'.join(s[::-1])}""))(input().split()) -End,"
 (lambda s: print(len(s), s.count('one')))(input().split()) -End,"
 L = list(eval(input())) -End,"
 def sum2(a, b):
    return a + b -End,"
 def Hello(name='%UserName%'):
    print(f""Hello, {name}!"") -End,"
 sum2 = lambda a, b, c=(type(a) in {int,float})*2 + (type(b) in {int, float}): (""all arguments are not a numbers"",""1st argument is not a number"",""2nd argument is not a number"", c == 3 and a + b)[c]


 -End,"
 from numpy import arctan, Inf
def f(x):
    return 2 * arctan(x)

lim = f(Inf)
print (f""{lim}"") -End,"
 from numpy import pi
from sys import stdout
stdout.write(f""{pi}"") -End,"
 from numpy import exp
def_e = lambda x: exp(x) -End,"
 even_elements = lambda l: [x for x in l if not x % 2] -End,"
 from sys import stdin, stdout
def mys(n, s = 0, i= 5):
    while i < n + 1:
        if not i % 5 and i % 3:
            s += i
        i += 5
    return s
            
stdout.write(f""{mys(int(stdin.read()))}"") -End,"
 common = lambda list_a, list_b : set(list_a) & set(list_b) -End,"
 front_x = lambda words: sorted(words, key=lambda x: (x[:1] != 'x', x)) -End,"
 def fib(n):
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a -End,"
 from sys import stdin, stdout
n, m = int(stdin.read()), ""много""
stdout.write(f""Всего пончиков: {n if n <= 9 else m}"") -End,"
 from sys import stdin, stdout
stdout.write((lambda n=int(stdin.read()), m = ""много"": f""Всего пончиков: {n <= 9 and n or m}"")()) -End,"
 from sys import stdout
s = input()
stdout.write(f""{s[0]+s[1:].replace(s[0], '*')}"") -End,"
 from sys import stdout
numerics = lambda n: [n//1000,(n%1000)//100,(n%100)//10,n%10]
kaprekar_step = lambda a: (a[3]-a[0])*1000+(a[2]-a[1])*100+(a[1]-a[2])*10+a[0]-a[3]

def kaprekar_loop(n):
    stdout.write(f""{n}\n"")
    if n!=6174:
        return kaprekar_loop(kaprekar_step(sorted(numerics(n)))) -End,"
 from sys import stdout
kaprekar_step = lambda L: (L[3]-L[0])*999+(L[2]-L[1])*90
def kaprekar_loop(n):
    while n!=6174:
        stdout.write(f""{n}\n"")
        n=kaprekar_step(sorted([n//1000,(n//100)%10,(n//10)%10,n%10]))
    stdout.write(f""{6174}"") -End,"
 from sys import stdout
def kaprekar_loop(n):
    stdout.write('Ошибка! На вход подано число 1000'*(n==1000)+
          f'Ошибка! На вход подано число {n} - все цифры одинаковые'*(n%1111==0))
    if (n-1000)*(n%1111):
        while n!= 6174:
            stdout.write(f""{n}\n"")
            L=sorted([n//1000,(n//100)%10,(n//10)%10,n%10])
            n=(L[3]-L[0])*999+(L[2]-L[1])*90
        stdout.write(f""{6174}"") -End,"
 fib = lambda q: f""{pow(2 << q, q + 1, (4 << 2 * q) - (2 << q) - 1) % (2 << q)}"" -End,"
 sum2 = lambda a, b: (['all arguments are not a numbers', '1st argument is not a number'], ['2nd argument is not a number', 0])[isinstance(a,(float,int))][isinstance(b, (int, float))] or (a + b) -End,"
 sum2 = lambda a, b: f""{(['all arguments are not a numbers', '1st argument is not a number'], ['2nd argument is not a number', 0])[isinstance(a,(float,int))][isinstance(b, (int, float))] or (a + b)}"" -End,"
 def kaprekar(n, sn2 = str(n ** 2)):
    for i in range(len(sn2)-1):
        secondNum = int(sn2[i+1:])
        if int(sn2[:i+1]) + secondNum == n and secondNum:
            return True
    return False -End,"
 kaprekar = lambda n, n2 = f""{(n**2)}"": f""{any((int(n2[i:]) and int(n2[:i])+int(n2[i:])==n) for i in range(1,len(n2)))}"" -End,"
 print(0.667,0.667, sep='\n') -End,"
 derivative = lambda f, x0=0, dx = 0.0005: (f(x0 + dx) - f(x0)) / dx -End,"
 derivative = lambda f, x0=0, dx = 0.00001: f""{(f(x0 + dx) - f(x0)) / dx:.3f}"" -End,"
 verbing = lambda s: s + ('', ('ing', 'ly')['ing' in s])[not len(s) < 3] -End,"
 verbing = lambda s: f""{s + ('', ('ing', 'ly')['ing' in s])[not len(s) < 3]}"" -End,"
 def convert(num, to_base=10, from_base=10, alf = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""):
    n = int(num, from_base) if isinstance(num, str) else int(num)
    return alf[n] if n < to_base else convert(n // to_base, to_base) + alf[n % to_base]

def kaprekar(n, base = 10):
    n = int(convert(n, 10, base))
    sn2 = convert(n**2, base, 10)
    return any((int(convert(sn2[i:], 10, base)) and int(convert(sn2[:i], 10, base))+int(convert(sn2[i:], 10, base))==n) for i in range(1,len(sn2))) -End,"
 from functools import reduce
print(reduce(lambda x,y: x*y, [int(i) for i in input() if i != '0'])) -End,"
 print(*input().split()[::-1]) -End,"
 s = input()
iF=s.index('h') 
iL=len(s)-1-s[::-1].index('h')
print(s[:iF+1] + s[iF+1:iL][::-1] + s[iL:]) -End,"
 n = int(input())
l = list(map(int, input().split())) + [n]
i = sorted(l).index(n)
print(len(l)-i) -End,"
 def test_input_text(expected_result, actual_result):
    if expected_result != actual_result:
        raise AssertionError(f'expected {expected_result}, got {actual_result}')




 -End,"
 import numpy as np

def match(*args):
    result = []
    for arg in args:
        result.append(f""{arg[0]:.15f}"")
    return "" "".join(result)

n,m = map(int, input().split())
x = np.zeros((n, m))
y = np.zeros((n,1))
for i in range(n):
    line = np.array(list(map(int, input().split())))
    x[i] = line[:m]
    y[i] = line[-1]
print((lambda *args: match(*args))(*np.linalg.inv((x.T@x)) @ x.T @ y)) -End,"
 # put your python code here
year = int(input())
if year % 400 == 0 or year % 4 == 0 and year % 100 != 0 :
    print('Високосный')
else:
    print('Обычный')



 -End,"
 # put your python code here
num1 = float(input())
num2 = float(input())
p = input()

if p in ['mod','div','/'] and num2 == 0.0:
    print('Деление на 0!')
    
elif p == 'mod':
    print(num1 % num2)
elif p == 'pow':
    print(num1 ** num2)
elif p == 'div':
    print(int(num1) // int(num2))    
elif p == '*':
    print(num1 * num2)
elif p == '/':
    print(num1 / num2) 
elif p == '+':
    print(num1 + num2)
elif p == '-':
    print(num1 - num2)    

 -End,"
 n1 = int(input())
n2 = int(input())
n3 = int(input())
list = sorted([n1,n2,n3])
print(list[2]) #max
print(list[0]) #min
print(list[1]) -End,"
 n = int(input())
if n in([11,111,211,311,411,511,611,711,811,911,1111,12,112,
         212,312,412,512,612,712,812,912,1112,13,113,
         213,313,413,513,613,713,813,913,1113,14,114,214,
         314,414,514,614,714,814,914,1114]):
    
    print('{0} программистов'.format(n))

elif n in [i for i in range(1,1000,10)]:
    print('{0} программист'.format(n))
    
elif n in [i for i in range(2,1000,10)]:
    print('{0} программиста'.format(n))
    
elif n in [i for i in range(3,1000,10)]:
    print('{0} программиста'.format(n))
elif n in [i for i in range(4,1000,10)]:
    print('{0} программиста'.format(n))
else:
    print('{0} программистов'.format(n))
 -End,"
 
list = [int(i) for i in input()]
if sum(list[:3]) == sum(list[3:]):
    print('Счастливый')
else:
     print('Обычный')





 -End,"
 a = int(input())
b = int(input())
d = 1
while True:
    if d % a == 0 and d % b == 0:
        break;
    d += 1
print(d)


 -End,"
 while True:
    i = int(input())
    if i < 10:    continue
    elif i > 100: break
    print(i)


 -End,"
 a = int(input())
b = int(input())
c = int(input())
d = int(input())

for t in range(c, d+1): # покажем множители
    print('\t', t, end = '')

print('')

for i in range(a, b+1):
    print(i, end = '')
    for s in range(c, d+1):
        print('\t'*1, i*s, end ='')
    print('')


 -End,"
 a = int(input())
b = int(input())
avg = []
sum = 0

for i in range(a,b+1):
    if i % 3 == 0:
        avg.append(i)
        sum += i

print(sum / len(avg))


 -End,"
 genome = [i for i in input().lower()]
print(((genome.count('c')+genome.count('g')) / len(genome))* 100)




 -End,"
 dna = input()
result = ''
char = dna[0]
index = 0
start = 0
end = 0

for i in dna:
    if i == char:
         end+=1
    else:
        s = dna[start:end]
        result += '{}{}'.format(char,len(s))
        char = i
        end = 1
    if index+1 == len(dna):
        s = dna[start:end]
        result += '{}{}'.format(char,len(s))
        
    index+=1
    
print(result)

 -End,"
 list = [int(i) for i in input().split()]
result = list[:]
i = 0
while i < len(list):
    if len(list)== 1:
        break
    elif i == 0:
        result[0]=(list[-1]+list[1])
    elif i+1 == len(list):
        result[-1]=(list[0]+list[-2])
    else:
        result[i]=(list[i+1] +list[i-1])
    i+=1
                     

print(' '.join(map(str, result))) 



 -End,"
 s = input().split()
result = []

for i in s:
    if s.count(i) > 1 and i not in result:
        result.append(i)
        
result.sort()

print(' '.join(map(str, result))) 
 -End,"
 sumNumber = 0
sumSquare = 0

while True:
    a = int(input())
    square = a * a
    sumNumber +=a
    
    if sumNumber == 0:
        sumSquare += square
        break
        
    else:
        sumSquare += square
        
print(sumSquare) -End,"
 number = [int(i) for i in range(1, int(input())+1)]
result = []

for i in number:
    n = [int(str(i))] *i
    result.extend(n)
   
print(' '.join(map(str, result[:len(number)])))  -End,"
 lst = [int(i) for i in input().split()]
x = int(input())
index = 0

for i in lst:
    
    if int(i) == x:
        print(index, end =' ')
        
    if lst.count(x) == 0:
        print('Отсутствует')
        break
        
    index+=1 -End,"
 def f(x):
    
    if x <= -2:
        return 1 - (x + 2) ** 2
    
    elif x > -2 and x <= 2:
        return -x / 2
    
    elif x > 2:
        return 1 + (x - 2) ** 2


 -End,"
 def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    elif key*2 in d:
        d[key*2].append(value)
    else:
        d.setdefault(key*2,[value]) -End,"
 str = input().lower().split()
result ={}
for i in str:
    result.setdefault(i,str.count(i))
    

for k,v in result.items():
    print(k,v)



 -End,"
 x = int(input())
d = {}

for i in range(x):
    a = int(input())
    if a in d:
        print(d[a])
    else:
        d.setdefault(a,f(a))
        print(f(a))


 -End,"
 # Команда:0 Всего_игр 1 Побед  2 Ничьих 3 Поражений  4 Всего_очков
n = int(input())
table = {}

for i in range(n):
    game = input().split(';') # ['team', 'goalsOneTeam', 'team2, 'goalsTwoTeam']
    team = game[0]
    team2 = game[2]
    # Если команды нет в таблице, добавляем команду и пустой список
    table.setdefault(team, [0,0,0,0,0])
    table.setdefault(team2, [0,0,0,0,0])
    # кол-во голов
    goalsOneTeam = game[1]
    goalsTwoTeam = game[3]
    
    # прибавляем кол-во игр
    table[team][0] +=1
    table[team2][0] +=1
    
    if goalsOneTeam > goalsTwoTeam:
        table[team][1] +=1 # победа
        table[team][4] +=3 # всего очков
        table[team2][3] +=1 # поражение
    elif goalsOneTeam < goalsTwoTeam:
        table[team2][1] +=1 # победа
        table[team2][4] +=3 # всего очков
        table[team][3] +=1 # поражение
        
    elif goalsOneTeam == goalsTwoTeam:
        table[team][2] +=1 # ничья
        table[team2][2] +=1 # ничья
        table[team][4] +=1 # всего очков
        table[team2][4] +=1 # всего очков
    
for k,v in table.items():
    print('{}:{}'.format(k, ' '.join(map(str,v))))
 -End,"
 class MoneyBox:
    def __init__(self, capacity):  # вместимость
        self.capacity = capacity
        self.money = 0

    def can_add(self, v):
        if self.money + v <= self.capacity:
            return True
        else:
            return False

    def add(self, v):
        if self.can_add(v):
            self.money += v -End,"
 class Buffer:
    def __init__(self):
        self.lst = list()

    def add(self, *a):
        self.lst.extend(a)
        while len(self.lst) >= 5:
            print(sum(self.lst[0:5]))
            del self.lst[0:5]

    def get_current_part(self):
        return self.lst -End,"
 class LoggableList(list, Loggable):
    def append(self, msg):
        super().append(msg)
        self.log(msg)



 -End,"
 from datetime import datetime, timedelta
a=input().split()
b=int(input())
d = datetime(int(a[0]),int(a[1]),int(a[2])) + timedelta(b)
print(d.year,d.month,d.day)


 -End,"
 import math
def primes():
    n = 1
    while True:  # просто пример
        n += 1
        if (math.factorial(n-1)+1) % n == 0:
            yield n -End,"
 # put your python code here
ctr = 0
s, a, b = input(), input(), input()
copy = s
while ctr<1000:

    if  a in b and a in s:
        print(""Impossible"")
        break
    s = s.replace(a, b)
    if s == copy:
        print(ctr)
        break
    else:
        copy = s
        ctr+=1



 -End,"
 import sys,re

for line in sys.stdin:
    line = line.rstrip()
    if len(re.findall(""cat"",line)) > 1:
        print(line)





 -End,"
 # put your python code here
import sys,re

for line in sys.stdin:
    line = line.rstrip()
    if re.findall(r""\bcat\b"",line):
        print(line)



 -End,"
 import sys,re

for line in sys.stdin:
    line = line.rstrip()
    if re.findall(r""z\w{3}z"",line):
        print(line)






 -End,"
 import sys,re

for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(""human"",'computer', line)
    print(line)
 -End,"
 import sys,re

for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(r""a+\b"",'argh', line, 1, flags = re.IGNORECASE )
    print(line)


 -End,"
 import sys,re

for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(r""\b(\w)(\w)"",r'\2\1', line )
    print(line)

 -End,"
 import sys,re

for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(r""((\w)\2+)"",r'\2', line )
    print(line)


 -End,"
 while True:
    work = input()
    if work == 'End':
        print('Good bye!')
        break;
    print(f'Processing ""{work}"" command...')
 -End,"
 numbers = ''
n = int(input())

for i in range(1,n + 1):
    numbers += f""{i} ""* i
    
print(numbers[:n*2]) -End,"
 print( ''.join([i.capitalize() for i in input().split('_')]))




 -End,"
 n = input().split(' ')
for i in range(int(n[0]),int(n[1])+1):
    if i % 3 == 0 and i % 5 == 0:
        print(""FizzBuzz"")
    elif i % 3 == 0:
        print(""Fizz"")
    elif i % 5 == 0:
        print(""Buzz"")
    else:
        print(i) -End,"
 def calc(x,operator,y):
    return {
        'plus': lambda : x+y,
        'minus': lambda : x-y,
        'multiply': lambda : x*y,
        'divide': lambda : x//y,
    }.get(operator,lambda: None)()

x,operator,y = input().split(' ')
print(calc(int(x),operator,int(y)))




 -End,"
 n = []
for i in input():
    if i.isdigit():
        n.append(i)
        continue
    if len(n) > 0:
        print(i * int(''.join(n)), end = '')
        n.clear()
    else:
        print(i, end ='') -End,"
 # C, D, H, S
value = { '6' : 1, '7' : 2, '8' : 3, '9': 4, '10' : 5, 'J' : 6, 'Q' : 7, 'K' : 8, 'A' : 9} 
card = input().split()
w = input()
#print(card[0][:-1],card[0][-1])
#print(card[1][:-1],card[1][-1])

if card[0][-1] == w and card[1][-1] == w:
    if value[card[0][:-1]] > value[card[1][:-1]]: print(""First"")
    if value[card[1][:-1]] > value[card[0][:-1]]: print(""Second"")
    if value[card[1][:-1]] == value[card[0][:-1]]: print(""Error"")
        
elif card[0][-1] == w: print(""First"")
elif card[1][-1] == w: print(""Second"")
    
elif card[0][-1] != card[1][-1] and card[1][-1] != w and card[0][-1] != w:
    print(""Error"")

elif value[card[0][:-1]] > value[card[1][:-1]] and card[0][-1] == card[1][-1] and card[1][-1] != w:
    print(""First"")
    
elif value[card[1][:-1]] > value[card[0][:-1]] and card[0][-1] == card[1][-1] and card[0][-1] != w:
    print(""Second"")
 -End,"
 s = input().split(' ')
b = dict(m=1,mile=1609,yard=0.9144,cm=0.01,foot=0.3048,inch=0.0254,km=1000,mm=0.001)
print(""{:.2e}"".format(float(s[0])* b[s[1]]/b[s[3]]))

 -End,"
 # put your python code here
n = int(input())
print(n == -10 or -5 < n <= 3 or 8<n<12 or n >= 16)





 -End,"
 n = input().split(' ')
print(""%.2f"" % (n.count(""A"")/len(n)))




 -End,"
 from collections import Counter
x = Counter(input().lower().split()).most_common()
for k,v in x:
    print(k,v)



 -End,"
 s = [int(i) for i in input()]
print(sum(s))



 -End,"
 import math
a,b,c = int(input()), int(input()), int(input())
p = (a + b + c) // 2
s = math.sqrt(p*(p-a)*(p-b)*(p-c))
print(s)




 -End,"
 t1, v1, = map(float, input().split())
t2, v2, = map(float, input().split())
print(t1* v1 + t2 * v2)


 -End,"
 s1, t1, = map(int, input().split())
s2, t2, = map(int, input().split())
print((s1 + s2) / (t1 + t2))




 -End,"
 x, y = map(int, input().split())
v = float(input()) # скорость второй лодки
print(y/x * v)



 -End,"
 m = float(input())
print( (((m * 1000) / 100) * 40 / 100) * 70 )




 -End,"
 s = [int(i) for i in input()]
print(sum(s))




 -End,"
 n = [int(i) for i in input()]
print(sum(n[:2]), sum(n[1:]),sep='')




 -End,"
 n = [int(i) for i in input()]
print(sum(n[:2]), sum(n[2:]),sep='')




 -End,"
 l = [int(input()), int(input())]
print(max(l))



 -End,"
 n = [int(i) for i in input()]
if sum(n) % 2 == 0:
    print('Счастливый')
else:
    print('Обычный')


 -End,"
 x1,y1 = int(input()),int(input()) # левая верхняя вершина
x2,y2 = int(input()),int(input()) # правая нижняя
x3,y3 = int(input()),int(input()) # координата точки
if x3 in range(x1,x2) and y3 in range(y2,y1):
    print(""Точка принадлежит прямоугольнику"")
else:
    print(""Точка не принадлежит прямоугольнику"")


 -End,"
 import math

FIGURE = input()
PI = 3.14

def rectangle(a, b):
    return a * b

def triangle(a,b,c):
    p = (a + b + c) // 2
    return math.sqrt((p*(p-a)*(p-b)*(p-c)))
    
def circle(r):
    return r**2 * PI

if FIGURE == 'прямоугольник':
    print(rectangle(int(input()), int(input())))
          
elif FIGURE == 'треугольник':
     print(triangle(int(input()), int(input()), int(input())))
        
elif FIGURE == 'круг':
    print(circle(int(input())))



 -End,"
 import math
print(math.factorial(int(input())))




 -End,"
 from math import trunc

a, b = float (input ()),float (input ())
s = 0
if a - int (a) == 0:
    a = int (a)
else:
    a = int (a) + 1
b = int (b)

print(f'{sum([i for i in range(a, b+1) if i % 2 != 0])} ')




 -End,"
 n = [i for i in range(int(input()),int(input())+1) if i % 3 == 0]
print(sum(n) / len(n))




 -End,"
 l = v = 0
while True:
    n = int(input())
    if n == 0: break
    elif n % 2 != 0 and n % 3 == 0: v += 1
    l += 1
print(f'{l}\n{v}')
 -End,"
 s = 0
pos = neg = 0
while True:
    n = int(input())
    if n == 0: break
    elif n < 0: neg += 1
    else: pos += 1
    s += n
print(f'{s}\n{pos - neg}')




 -End,"
 s = []
while True:
    n = int(input())
    if n == 0: break
    elif n % 8 == 0:
        s.append(n)
if s:
    print(round(sum(s) / len(s),1))
else: print('NO')


 -End,"
 print(' '.join(sorted(input().lower().split(', '),reverse=True)))



 -End,"
 p = int(input())
a = []
for x in range(p):
    a.append(int(input()))
print(sum(a) / len(a))


 -End,"
 l = int(input())
print(len(list(filter(lambda x: x < 8, [int(n) for n in input().split()]))))


 -End,"
 l = input()
s = [int(n) for n in input().split()]
print(len(list(filter(lambda x: x <= (sum(s) // len(s)), s))))





 -End,"
 x=int(input())
try:
    print([3, 4, 2, 1, 0, 7, 8].index(x))
except:
    print(-1)




 -End,"
 N, K = int(input()), int(input())
print(f'{K//N}\n{K%N}')



 -End,"
 r,k,count = int(input()), int(input()), int(input())
r = r * 100 + k
total = r * count
print(f'{total // 100} {total % 100}')


 -End,"
 s = input()
if s == ''.join(reversed(s)): print('YES')
else: print('NO')




 -End,"
 from sys import stdin
game = list(map(int,stdin.read().split()))
print(f'{sum(game)}\n{max(game)}')



 -End,"
 from sys import stdin
govnoeds = sorted(map(int,stdin.read().split()), reverse=True)
print(*govnoeds[1::2], sep='\n')







 -End,"
 import re
user_data = input()
user_name = user_data.split(' ')[0][:-2]
user_year = 2018 - int(re.search(r'\d{4}', user_data)[0])
if user_year < 18:
    print(f'Привет, {user_name}! Ждем тебя на первой секции (дети)')
elif 18 <= user_year <= 35:
    print(f'Привет, {user_name}! Ждем тебя на второй секции (молодежь)')
else:
    print(f'Привет, {user_name}! Ждем тебя на третьей секции')

 -End,"
 from sys import stdin
STUDENTS = int(input())
count_students_wastepaper = int(input())
all_wastepaper = list(map(int,stdin.read().split()))
print(f'{sum(all_wastepaper)} {max(all_wastepaper)} {min(all_wastepaper)} {sum(all_wastepaper)/ count_students_wastepaper}')




 -End,"
 l = [input(), input()]
if 'rock' in l and 'paper' in l:
    print('Paper wins!')
elif 'scissors' in l and 'paper' in l:
    print('Scissors win!')
elif 'rock' in l and 'scissors' in l:
    print('Rock wins!')
else:
    print('Invalid input! You have not entered rock, paper or scissors, try again.')


 -End,"
 capital, rate, year = int(input()), int(input()), int(input())
for i in range(year):
    capital *= 1 + rate / 100
    print('%.2f' % capital)


 -End,"
 m1,n1,p1,m2,n2,p2,m3,n3,p3 = map(int,input().split())

s1=m1+n1+p1
s2=m2+n2+p2
s3=m3+n3+p3

print(max([s1,s2,s3]))



 -End,"
 from itertools import permutations as perm
s = set(filter(lambda x: x[0] != '0',[''.join(i) for i in perm(input().split(), 3)]))
print('\n'.join(sorted(s)))

 -End,"
 # put your python code here
a = float(input())
b = float(input())
opr = str(input())
# +, -, /, *, mod, pow, div, где mod — это взятие остатка от деления, pow — возведение в степень, div — целочисленное деление.
if opr == ""+"":
    print(a + b)
elif opr == ""-"":
    print(a - b)
elif opr == ""/"":
    if b != 0:
        print(a / b)
    else:
        print('Деление на 0!')
elif opr == ""*"":
    print(a * b)
elif opr == ""mod"":
    if b != 0:
        print(a % b)
    else:
        print('Деление на 0!')
elif opr == ""pow"":
    print(a ** b)
elif opr == ""div"":
    if b != 0:
        print(a // b)
    else:
        print('Деление на 0!')
 -End,"
 # put your python code here
a, b, c = (int(input()), int(input()), int(input()))
print(max(a, b, c))
print(min(a, b, c))
print(a + b + c - min(a, b, c) - max(a, b, c))
 -End,"
 x = int(input())
if 1000 >= x >= 0:
    if x % 10 == 1 and x % 10 != 4 and x % 10 != 3 and x % 10 != 2 and x % 100 != 11:
        print(str(x) + ' программист')
    elif (x % 10 == 4 or x % 10 == 3 or x % 10 == 2) and (x % 100 != 12 and x % 100 != 13 and x % 100 != 14):
        print(str(x) + ' программиста')
    else:
        print(str(x) + ' программистов')
 -End,"
 n_bilet = (input())
if len(n_bilet) == 6:
    n_bilet = int(n_bilet)
    x = (n_bilet % 1000 // 100) + (n_bilet % 1000 % 100 / 10) + (n_bilet % 1000 % 10)
    y = (n_bilet // 1000 // 100) + (n_bilet // 1000 % 100 // 10) + (n_bilet // 1000 % 10)
    if int(x) == int(y):
        print('Счастливый')
    else:
        print('Обычный')
 -End,"
 s = 0
i = 1
while i != 0:
    a = int(input())
    s += a
    i = a
print(s)
 -End,"
 a = int(input())
b = int(input())
d = 0
x = 1
while x != 0:
    d += 1
    if d % a == 0 and d % b == 0:
        print(d)
        x = 0
    else:
        x += 1
 -End,"
 a = 0
while a <= 100:
    a = int(input())
    if a > 100:
        break
    if a < 10:
        continue
    print(a)
 -End,"
 a, b, c, d = int(input()), int(input()), int(input()), int(input())
if ((a <= b) and (c <= d)):
    if a <= 10 and b <= 10 and c <= 10 and d <= 10:
        print(end='\t')
        for j in range(c, d+1):
            print(j, end='\t')
        print()
        for i in range(a, b+1):
            print(i, end='\t')
            for j in range(c, d+1):
                print(i*j, end='\t')
            print() -End,"
 a = int(input())
b = int(input())
s = 0
it = 0
for i in range(a, b+1):
    if i % 3 == 0:
        s += i
        it += 1
print(s / it)
 -End,"
 s = input()
print(((s.lower().count('c'.lower()) + s.lower().count('g'.lower())) / len(s)) * 100)
 -End,"
 DNA = str(input())
con = 0
DNA_2 = ''
x = 0
if len(DNA) < 2:
    print (DNA, len(DNA), sep='')
else:
    for i in DNA[x:]:
        con = 0
        DNA_1 = 0
        for j in DNA[x:]:
            if j == i:
                con += 1
                x += 1
            else:
                break
        if con != 0:
            con = str(con)
            DNA_1 = i+con
            con = int(con)
            DNA_2 += DNA_1
print(DNA_2) -End,"
 a = (int(i) for i in input().split( ))
print(sum(a))
 -End,"
 a = [int(i) for i in input().split()]
res = ''
if len(a) != 1:
    for j in range(len(a)-1):
        res += str(a[j-1] + a[j+1])
        res += ' '
    res += str(a[0] + a[-2])
    print(res)
else:
    print(a[0])
     -End,"
 a = (int(i) for i in input().split())
b = sorted(a)
res = 1
for j in range(len(b)-1):
    if b[j] == b[j+1] and b[j] != b[j-1]:
        res += 1
    if b[0] == b[-1]:
        print(b[0])
        break
    if res > 1:
        print(b[j], end=' ')
        res = 1
 -End,"
 s = 1
a = []
b =[]
while s != 0:
    x = int(input())
    a.append(x)
    s = sum(a)
for i in a:
    y = i**2
    b.append(y)
    s = sum(b)
print(s)
 -End,"
 n = int(input())
x = ''
for i in range(n+1):
    for j in range(i):
        x += str(j)
        if len(x) <= n:
            print(i, end =' ')
             -End,"
 n, x = int(input()), 1
for i in range(n+1):
    for j in range(i):
        if x <= n:
            print(i, end=' ')
            x += 1
 -End,"
 lst, x, y = [int(i) for i in input().split()], int(input()), 0
if x not in lst:
    print(""Отсутствует"")
else:
    for j in lst:
        if x == j:
            print(y, end=' ')
        y += 1
 -End,"
 import copy
a, b, c, z = [input().strip()], [], [], 0
while 'end' not in a:
    a += input().strip().split('\n')
for i in range(len(a)-1):
    b.append(a[i].split( ))
for i in range(len(b)):
    for j in range(len(b[i])):
        b[i][j] = int(b[i][j])
c = copy.deepcopy(b)
for i in range(len(b)):
    for j in range(len(b[i])):
        for di in range(-1, 2, 2):
#            if di == -1 and len(b) == 2:
#                di = 0
            bi = (i + di)%len(b)
            z += b[bi][j]
        for dj in range(-1, 2, 2):
#            if dj == -1 and len(b[i]) == 2:
#                dj = 0
            bj = (j + dj)%len(b[i])
            z += b[i][bj]
        c[i][j] = z
        z = 0
for i in range(len(c)):
    for j in range(len(c[i])):
        print(c[i][j], end=' ')
    print()
 -End,"
 import copy
a, b, c, z = input().split(), [], [], 0
while 'end' not in a:
    b.append(a)
    a = input().split()
for i in range(len(b)):
    for j in range(len(b[i])):
        b[i][j] = int(b[i][j])
for i in range(len(b)):
    for j in range(len(b[i])):
        for di in range(-1, 2, 2):
            bi = (i + di) % len(b)
            z += b[bi][j]
        for dj in range(-1, 2, 2):
            bj = (j + dj) % len(b[i])
            z += b[i][bj]
        print(z, end=' ')
        z = 0
    print()
 -End,"
 n, z = int(input()), 1
dy = dx = x = 0
dn = n
a = [[0 for j in range(n)] for i in range(n)]
while z <= n**2:
        for y in range(dy,dn):
            a[x][y] = z
            y += 1
            z += 1
        for x in range(dx,(dn-1)):
            x += 1
            y = dn-1
            a[x][y] = z
            z += 1
        for y in range((dn-1),dy,-1):
            y -= 1
            a[x][y] = z
            z += 1
        for x in range((dn-1),(dn-(n-1)+dy+dx),-1):
            x -= 1
            a[x][y] = z
            z += 1
        dy += 1
        dn -= 1
        dx += 1
for i in range(len(a)):
    for j in range(len(a[i])):
        print(a[i][j], end=' ')
    print()
 -End,"
 def f(x):
    if x <= -2:
        return 1 - (x + 2) ** 2
    if x > 2:
        return (x - 2) ** 2 + 1
    if -2 < x <= 2:
        return - (x / 2)
 -End,"
 def modify_list(l):
    for i in range(len(l)-1,-1,-1):
        if l[i] % 2 == 0:
            l[i] = int(l[i] / 2)
        else:
            l.remove(l[i])
 -End,"
 def update_dictionary(d, key, value):
    if d.get(key): d[key].append(value)
    elif d.get(key*2): d[key*2].append(value)
    else: d[key*2] = [value]
 -End,"
 a, b = input().lower().split(), {}
for i in a:
    b[i] = a.count(i)
for key, value in b.items():
    print(key, value)
 -End,"
 n, a = int(input()), {}
for i in range(n):
    x = int(input())
    if a.get(x): print(a[x])
    else:
        a[x] = f(x)
        print(a[x])
 -End,"
 import math
R = float(input())
P = 2*math.pi*R
print(P)
 -End,"
 from sys import argv
print(*argv[1:], end=' ')
 -End,"
 play = int(input())
res = dict()
res_temp = dict()
match = [[input()] for i in range(play)]
for i in match:
    key1, value1, key2, value2 = i[0].split(';')
    value1 = int(value1)
    value2 = int(value2)
    res[key1] = {'play_k':0, 'win':0, 'par':0, 'los':0, 'score':0}
    res[key2] = {'play_k':0, 'win':0, 'par':0, 'los':0, 'score':0}
    res.update(res_temp)
    res[key1]['play_k'] = res[key1]['play_k'] + 1
    res[key2]['play_k'] = res[key2]['play_k'] + 1
    if value1 < value2:
        res[key2]['win'] = res[key2]['win'] + 1
        res[key1]['los'] = res[key1]['los'] + 1
        res[key2]['score'] = res[key2]['score'] + 3
    if value1 > value2:
        res[key1]['win'] = res[key1]['win'] + 1
        res[key1]['score'] = res[key1]['score'] + 3
        res[key2]['los'] = res[key2]['los'] + 1
    if value1 == value2:
        res[key1]['par'] = res[key1]['par'] + 1
        res[key2]['par'] = res[key2]['par'] + 1
        res[key1]['score'] = res[key1]['score'] + 1
        res[key2]['score'] = res[key2]['score'] + 1
    res_temp = res.copy()
for key in res.keys():
    print(key+':', end='')
    print(res[key]['play_k'], res[key]['win'], res[key]['par'], res[key]['los'], res[key]['score'] )
 -End,"
 enigma_key = {}


def enigma():
    for i in range(len(key_in)):
        enigma_key.setdefault(key_in[i], value_in[i])


def encode(to_encode_line):
    encode_line = ''
    for i in to_encode_line:
        encode_line += enigma_key[i]
    return encode_line


def decode(to_decode_line):
    decode_line = ''
    for i in (to_decode_line):
        for key, value in enigma_key.items():
            if i == value:
                decode_line += key
    return decode_line


key_in = str(input())
value_in = str(input())
while len(key_in) != len(value_in):
    print('Вы ввели строки разной длинны, повторите ввод!')
    key_in = str(input('введите ключ строку: '))
    value_in = str(input('введите значение : '))
to_encode_line = str(input())
to_decode_line = str(input())
enigma()
print(encode(to_encode_line))
print(decode(to_decode_line))
 -End,"
 l = []
d = []
for i in range(int(input())) : d.extend(input().strip().split())
for j in range(int(input())) : l.extend(input().strip().split())
l1 = list(set(l))
for i in d:
    for y, j in enumerate(l1):
        i = i.lower()
        j = j.lower()
        if i == j:
            del l1[y]
print(*l1, sep='\n')
 -End,"
 l2 = []
d = []
for i in range(int(input())) : d.extend(input().lower().strip().split())
for j in range(int(input())) : l2.extend(input().lower().strip().split())
l1 = list(set(l2))
for i in d:
    if i in l1:
        l1.remove(i)
print(*l1, sep='\n')
 -End,"
 n = int(input())
x = y = 0
for i in range(n):
    a, b = input().split()
    a = a.lower()
    b = int(b)
    if a == 'север':
        y += b
    elif a == 'юг':
        y -= b
    elif a == 'запад':
        x -= b
    elif a == 'восток':
        x += b
print(x, y)
 -End,"
 # put your python code here
n, y = int(input()), 0
if 1<=n<=100:
    for i in range(n):
        x = int(input())
        y += x
    print(y)
 -End,"
 def closest_mod_5(x):
    if x % 5 == 0:
        y = x
        return y
    else:
        y = x - (x % 5) +5
        return y -End,"
 def C(n,k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    else:
        return C(n - 1, k) + C(n - 1, k - 1)
    

n, k = map(int, input().split())
x = C(n,k)
print(x) -End,"
 def create(ns, namesp, arg):
    ns[namesp] = {'parent': arg, 'vars': []}


def add(namesp, arg):
    ns[namesp]['vars'].append(arg)


def get(namesp, arg):
    if namesp in ns.keys():
        if arg in ns[namesp]['vars']:
            return print(namesp)
        elif ns[namesp]['parent'] != None:
            get(ns[namesp]['parent'], arg)
        else:
            return print(ns[namesp]['parent'])
    else:
        return print(ns['global']['parent'])


ns = {'global': {'parent': None, 'vars': []}}
n = int(input())
if 1<=n<=100:
    for i in range(n):
        cmd, namesp, arg = input().split()
        if cmd == 'get':
            get(namesp, arg)
        elif cmd == 'add':
            add(namesp, arg)
        elif cmd == 'create':
            create(ns, namesp, arg)
 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity

    def can_add(self, v):
        if (self.capacity - v) >= 0:
            return True
        else:
            return False

    def add(self, v):
        self.capacity -= v
 -End,"
 class Buffer:
    def __init__(self):
        self.list = []        
        
    def add(self, *a):
        for i in a:
            self.list.append(i)
        while len(self.list) >= 5:
            print(sum(self.list[0:5]))
            del self.list[0:5]

        # добавить следующую часть последовательности

    def get_current_part(self):
        return self.list
        # вернуть сохраненные в текущий момент элементы последовательности в порядке, в котором они были     
        # добавлены -End,"
 class Buffer:
    def __init__(self):
        self.bla = []        
        
        
    def add(self, *a):
        self.bla += a
        while len(self.bla) >= 5:
            print(sum(self.bla[0:5]))
            del self.bla[0:5]

            
    def get_current_part(self):
        return self.bla
 -End,"
 def add(spisok):
    if spisok[0] in ns.keys():
        ns[spisok[0]]['vars'].extend(spisok[2:len(spisok)])
    else:
        ns[spisok[0]] = {'vars': []}
        ns[spisok[0]]['vars'].extend(spisok[2:len(spisok)])


def get(m_parent, child):
    if child not in ns.keys():
        return 'No'
    if m_parent in ns[child]['vars'] or m_parent == child:
        return 'Yes'
    elif len(ns[child]['vars']) == 0:
        return 'No'
    else:
        for i in ns[child]['vars']:
            midl_res = get(m_parent, i)
            if midl_res == 'Yes':
                return midl_res
        return 'No'


ns = dict()
for j in range(int(input())):
    spisok=[]
    spisok.extend([i for i in (input().split())])
    if len(spisok) == 1:
        ns[spisok[0]] = {'vars': []}
    else:
        add(spisok)
        

result = []
for k in range(int(input())):
    m_parent, child = input().split()
    result.append(get(m_parent, child))
        
for i in range(len(result)):
    print(result[i])
 -End,"
 class ExtendedStack(list):
    def sum(self):
        self.append(int(self.pop()) + int(self.pop()))
        # операция сложения

    def sub(self):
        self.append(int(self.pop()) - int(self.pop()))
        # операция вычитания

    def mul(self):
        self.append(int(self.pop()) * int(self.pop()))
        # операция умножения

    def div(self):
        self.append(int(self.pop()) // int(self.pop()))
        # операция целочисленного деления
 -End,"
 class LoggableList(Loggable, list):
    def append(self, x):
        super().append(x)
        self.log(x)
 -End,"
 def add(spisok):
    if spisok[0] in ns.keys():
        ns[spisok[0]]['vars'].extend(spisok[2:len(spisok)])
    else:
        ns[spisok[0]] = {'vars': []}
        ns[spisok[0]]['vars'].extend(spisok[2:len(spisok)])


def get(m_parent, child):
    if child in m_parent[:-1]:
        return child
    else:
        for i in ns[child]['vars']:
            midl_res = get(m_parent, i)
            if midl_res == i:
                return child


ns = dict()
for j in range(int(input())):
    spisok = []
    spisok.extend([i for i in (input().split())])
    if len(spisok) == 1:
        ns[spisok[0]] = {'vars': []}
    else:
        add(spisok)


result = []
temp_in = []
for k in range(int(input())):
    a = input()
    temp_in.append(a)
    result.append(get(temp_in, a))

for i in range(len(result)):
    if result[i] is not None: print(result[i]) -End,"
 class NonPositiveError(Exception):
    pass


class PositiveList(list):
    def append(self, x):
        if x > 0:
            super().append(x)
        else:
            raise NonPositiveError()
 -End,"
 import datetime

day = datetime.datetime.strptime(input(), ""%Y %m %d"")
days = datetime.timedelta(int(input()))
now_day = day + days

print(now_day.year, now_day.month, now_day.day)
 -End,"
 class multifilter:
    def judge_half(pos, neg):
        if pos >= neg:
            return True
        else:
            return False
        # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)

    def judge_any(pos, neg):
        if pos >= 1:
            return True
        else:
            return False
        # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)

    def judge_all(pos, neg):
        if neg == 0:
            return True
        else:
            return False
        # допускает элемент, если его допускают все функции (neg == 0)

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge
        # iterable - исходная последовательность
        # funcs - допускающие функции
        # judge - решающая функция

    def __iter__(self):
        for i in self.iterable:
            pos, neg = 0, 0
            for j in self.funcs:
                if j(i):
                    pos += 1
                else:
                    neg += 1
            if self.judge(pos, neg):
                yield i
        # возвращает итератор по результирующей последовательности -End,"
 import math

def primes():
    a = 1
    while True:  # просто пример
        a += 1
        if (math.factorial(a-1)+1)%a==0:
            yield a
 -End,"
 a,b=map(int, (input().split('/')))
lst = []
while b != 0:
    c = a//b
    lst.append(c)
    a1 = b
    b = a%b
    a = a1
for i in lst: print(i, end="" "")
 -End,"
 cod = ' abcdefghijklmnopqrstuvwxyz'
dis = int(input())
word = input().strip()
result = """"
#print(len(cod))
for i in word:
    result += cod[((cod.index(i)+dis) - len(cod))%len(cod)]
print('Result: ""%s""'%result) -End,"
 cost = {'6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}

first, second = map(str, input().split())
joker = input().upper()

first = first.upper()
second = second.upper()
if (first[-1] == second[-1]) and (first != second):
    if cost[first[:-1]] > cost[second[:-1]]:
        print('First')
    else:
        print('Second')
elif (first[-1] == joker) or (second[-1] == joker):
    if first[-1] == joker:
        print('First')
    else:
        print('Second')
else:
    print('Error') -End,"
 start, end = map(int, input().split())
for i in range(start, end+1):
    if not(i%5 or i%3):
        print(""FizzBuzz"")
    elif not(i%3):
        print(""Fizz"")
    elif not(i%5):
        print(""Buzz"")
    else:
        print(i)
 -End,"
 a = str(input())
b = str(input())
i = 0
while a.find(b, i) != -1:
    i = a.find(b, i)
    print(i, end="" "")
    i += 1
if i == 0:
    print(i - 1)
 -End,"
 lst = input().split()
stat = {}

for i in lst:
    a = len(i)
    if a in stat.keys():
        stat[a] += 1
    else:
        stat[a] = 1
for key, value in sorted(stat.items()):
    print(str(key) + ': ' + str(value))
 -End,"
 

def mod_checker(x, mod=0):
    return lambda y : y % x == mod

 -End,"
 s = input()
t = input()
i = 0
cnt = 0
while s.find(t, i) != -1:
    i = s.find(t, i)
    i += 1
    cnt += 1
if (i == 0) or (i == -1):
    print(0)
else:
    print(cnt)
 -End,"
 a, op, b = map(str, input().split())
a = int(a)
b = int(b)

if op == ""plus"":
    print(a + b)
elif op == ""minus"":
    print(a - b)
elif op == ""multiply"":
    print(a * b)
elif op == ""divide"":
    print(a // b)
 -End,"
 tabl = {""mile"": [1609, ""m""], ""yard"": [0.9144, ""m""], ""foot"": [30.48, ""cm""], ""inch"": [2.54, ""cm""],
        ""km"": [1000, ""m""], ""m"": [1, ""m""], ""cm"": [0.01, ""m""], ""mm"": [0.001, ""m""]}
lst_in = input().split()

x = float(lst_in[0])
x1 = lst_in[1]
y = lst_in[-1]

res = tabl[x1][0]*x*tabl[tabl[x1][1]][0]
res1 = tabl[y][0]*tabl[tabl[y][1]][0]
print(""{:.2e}"".format(res/res1))
 -End,"
 n, m = (int(i) for i in input().split())  # чтение размеров поля и числа мин
a = [[0 for j in range(m)] for i in range(n)]  # заполнение поля нулями
for i in range(n):
    row = list(i for i in input())
    for j1, j in enumerate(row):
        if j == ""*"":
            a[i][j1] = -1  # расставляем мины
            continue


for i in range(n):
    for j in range(m):
        if a[i][j] == 0:  # в этой клетке мины нет, поэтому считаем число мин вокруг
            for di in range(-1, 2):
                for dj in range(-1, 2):
                    ai = i + di
                    aj = j + dj
                    # (ai, aj)
                    if 0 <= ai < n and 0 <= aj < m and a[ai][aj] == -1:
                        a[i][j] += 1
# вывод результата
for i in range(n):
    for j in range(m):
        if a[i][j] == -1:
            print('*', end='')
        elif a[i][j] == 0:
            print('0', end='')
        else:
            print(a[i][j], end='')
    print()
 -End,"
 import sys
import re

pattern = r""(cat)""
for line in sys.stdin:
    line = line.rstrip()
    if len(re.findall(pattern, line)) >= 2 :
        print(line)
 -End,"
 import sys
import re

pattern = r""\bcat\b""
for line in sys.stdin:
    line = line.rstrip()
    if re.findall(pattern, line):
        print(line)
 -End,"
 import sys
import re

pattern = r""z...z""
for line in sys.stdin:
    line = line.rstrip()
    if re.findall(pattern, line):
        print(line)
 -End,"
 import sys
import re

pattern = r""\\""
for line in sys.stdin:
    line = line.rstrip()
    if re.findall(pattern, line):
        print(line)
 -End,"
 import re
print(re.sub(r"" +"", ""_"", input())) -End,"
 print("""".join(i.title() for i in input().split(""_"")))
 -End,"
 import re
temp = []
a = input()
c = 0
for j, i in enumerate(a):
    if re.match(r'[0-9]', i):
        pass
    else:
        temp.append(a[c:j+1])
        c = j+1
for i in temp:
    if len(i) > 1:
        print(int(i[:-1])*(i[-1]), end="""")
    else:
        print(i, end="""")
 -End,"
 import sys
import re

pattern = r""\b(\w+)\1\b""
for line in sys.stdin:
    line = line.rstrip()
    if re.search(pattern, line):
        print(line)
 -End,"
 import sys
import re

for line in sys.stdin:
    line = re.sub(r""(human)"", ""computer"", line)
    print(line, end="""")
 -End,"
 import sys
import re

for line in sys.stdin:
    line = re.sub(r""\b[a]+\b"", ""argh"", line, 1, flags=re.IGNORECASE)
    print(line, end="""")
 -End,"
 n = int(input())

print(int(n), end="" "")

while n != 1:
    if n % 2 == 0:
        n = n / 2
        print(int(n), end="" "")
    else:
        n = (n * 3) + 1
        print(int(n), end="" "")
 -End,"
 a = sorted(input().lower())
b = sorted(input().lower())
if a == b:
    print(True)
else:
    print(False)
 -End,"
 a = list(int(i) for i in input().split())
b = ((abs(a[i]-a[i+1])) for i in range(len(a)-1))
c = (i for i in range(1, len(a)))
if sorted(list(b)) == list(c):
    print(""Jolly"")
else:
    print(""Not jolly"")
 -End,"
 import sys
import re

for line in sys.stdin:
    line = re.sub(r""\b(\w)(\w)"", r""\2\1"", line)
    print(line, end="""")
 -End,"
 import sys
import re

for line in sys.stdin:
    line = re.sub(r""(\w)\1+"", r""\1"", line)
    print(line, end="""")
 -End,"
 def rtd(num):
    num = num.upper()
    dic = {""I"": 1, ""V"": 5, ""X"": 10, ""L"": 50, ""C"": 100, ""D"": 500,""M"": 1000}
    dec = 0
    cnt = 0
    for i in num:
        if cnt == 0:
            dec += dic[i]
        else:
            if dic[i] > dic[num[cnt-1]]:
                dec += (dic[i] - dic[num[cnt - 1]] * 2)
            else:
                dec += dic[i]
        cnt += 1
    return(dec)


print(rtd(input()))
 -End,"
 n, m = (int(i) for i in input().split())  # чтение размеров поля
a = [[0 for j in range(m)] for i in range(n)]  # заполнение поля нулями
b = [[0 for j in range(m)] for i in range(n)]  # новое поле для второго цикла

for i in range(n):
    row = list(i for i in input())
    for j1, j in enumerate(row):
        a[i][j1] = j  # расставляем клетки
        continue


for i in range(n):
    for j in range(m):
        for di in range(-1, 2):
            for dj in range(-1, 2):
                ai = (i + di)%n
                aj = (j + dj)%m
                if a[ai][aj] == ""X"":
                    b[i][j] += 1
        if a[i][j] == ""X"":
            b[i][j] -= 1

# вывод результата
for i in range(n):
    for j in range(m):
        if a[i][j] == ""X"" and (b[i][j] == 2 or b[i][j] == 3):
            print('X', end='')
        elif a[i][j] == ""X"" and (b[i][j] < 2 or b[i][j] > 3):
            print('.', end='')
        elif a[i][j] == ""."" and b[i][j] == 3:
            print('X', end='')
        else:
            print('.', end='')
    print()
 -End,"
 import re
import requests

pattern = r'<a.+href\s?=[\s""\']?""?(https:/{2}|http:/{2}|ftp:/{2})?(\w[-\w.\d]+)'

a = input()
res = requests.get(a)
url = re.findall(pattern, res.text)
z = set()
for i in url:
    z.add(i[1])
for i in sorted(z): print(i, end=""\n"")
 -End,"
 def convert(n:int) -> str:
        pool = ""m2d5c2l5x2v5i""
        rep = lambda t: int(pool[t - 1])
        def roman(n, j=0, v=1000):
            while True:
                while n >= v: yield pool[j]; n -= v
                if n <= 0: return
                k = j + 2; u = v // rep(k)
                if rep(k) == 2: k += 2; u //= rep(k)
                if n + u >= v: yield pool[k]; n += u
                else: j += 2; v //= rep(j)
        return """".join(roman(n)).upper()
    
print(convert(int(input())))
 -End,"
 # put your python code here
x = int(input())
print(x == -10 or -5 < x <= 3 or 8 < x < 12 or x >= 16)
 -End,"
 def get_int(start_message, error_message, end_message):
    print(start_message)
    while True:
        res = input()
        try:
            res = int(res)
            print(end_message)
            return res
        except:
            print(error_message)
 -End,"
 # put your python code here

dreamMinutes = int(input())
hours = int(input())
minutes = int(input())
totalMinutes = dreamMinutes + 60 * hours + minutes
print(totalMinutes//60)
print(totalMinutes % 60)


 -End,"
 # put your python code here

figure = input()
a = float(input())
if figure == 'круг':
    print(3.14 * a * a)
else:
    b = float(input())
    if figure == 'прямоугольник':
        print(a*b)
    else:
        c = float(input())
        p = (a+b+c)/2
        print((p*(p-a)*(p-b)*(p-c))**0.5)



 -End,"
 # put your python code here

n = int(input())
root = 'программист'
end = 'ов'
if n // 10 % 10 != 1:
    if n % 10 == 1:
        end = ''
    if 2 <= n % 10 <= 4:
        end = 'а'
print(n, root+end)



 -End,"
 # put your python code here

a = input()
first = int(a[0]) + int(a[1]) + int(a[2])
second = int(a[3]) + int(a[4]) + int(a[5])
if first == second:
    print('Счастливый')
else:
    print('Обычный')



 -End,"
 # put your python code here

a = int(input())
b = int(input())
c = int(input())
d = int(input())
print(' ', end='\t')
for i in range(c,d+1):
    print(i, end='\t')
print()
for j in range(a,b+1):
    print(j, end='\t')
    for i in range(c,d+1):
        print(i*j, end='\t')
    print()


 -End,"
 # put your python code here

n = int(input())
i = 1
printed = 0
while printed < n:
    cnt = min(n-printed,i)
    for j in range(cnt):
        print(i,end=' ')
    printed += cnt
    i += 1


 -End,"
 # put your python code here

a = [int(i) for i in input().split()]
x = int(input())
exist = False
for i in range(len(a)):
    if a[i] == x:
        print(i, end=' ')
        exist = True
if not exist:
    print('Отсутствует')


 -End,"
 # put your python code here

a = [[int(i) for i in input().split()]]
b = input()
while b != 'end' :
    a.append([int(i) for i in b.split()])
    b = input()
rowl = len(a)
coll = len(a[0])
for i in range(rowl):
    for j in range(coll):
        print(a[i-1][j]+a[(i+1)%rowl][j]+a[i][j-1]+a[i][(j+1)%coll], end=' ')
    print()


 -End,"
 # put your python code here

n = int(input())
pos = 0
cur = 1
res = [[0] * n for i in range(n)]
while pos <= n//2:
    if pos == n-1-pos:
        res[pos][pos] = cur
    else:
        for i in range(cur,cur+n-1-2*pos):
            res[pos][pos+i-cur]=i
        cur = cur+n-1-2*pos
        for j in range(cur,cur+n-1-2*pos):
            res[pos+j-cur][n-1-pos]=j
        cur = cur+n-1-2*pos
        for i in range(cur,cur+n-1-2*pos):
            res[n-1-pos][n-1-pos+cur-i]=i
        cur = cur+n-1-2*pos
        for j in range(cur,cur+n-1-2*pos):
            res[n-1-pos+cur-j][pos]=j
        cur = cur+n-1-2*pos
    pos += 1
for i in range(n):
    for j in range(n):
        print(res[i][j], end=' ')
    print()


 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    # put your python code here
    if key in d:
        d[key].append(value)
    else:
        if 2* key in d:
            d[2*key].append(value)
        else:
            d[2*key] = [value]

# не добавляйте кода вне функции -End,"
 # put your python code here

dict = set(input().lower() for i in range(int(input())))
text = [input().split() for i in range(int(input()))]
for word in set().union(*text): 
    if word.lower() not in dict:
        print(word)


 -End,"
 # put your python code here

d = {}
games = [input().split(';') for i in range(int(input()))]
for game in games:
    team1 = game[0]
    if team1 not in d:
        d[team1] = [0, 0, 0]
    team2 = game[2]
    if team2 not in d:
        d[team2] = [0, 0, 0]
    if int(game[1]) > int(game[3]):
        d[team1][0] += 1
        d[team2][2] += 1
    if int(game[1]) < int(game[3]):
        d[team1][2] += 1
        d[team2][0] += 1
    if int(game[1]) == int(game[3]):
        d[team1][1] += 1
        d[team2][1] += 1
for key in d:
    print(key+':', sum(d[key]), *d[key], 3*d[key][0]+d[key][1])



 -End,"
 print(len(set(id(obj) for obj in objects)))




 -End,"
 def counter(T):
    #your code
    m = max(set(map(lambda x:len(set(x.lower())),T)))
    filtered = list(filter(lambda x: len(set(x.lower())) == m, T))
    return len(max(filtered,key=lambda x:len(x)))



 -End,"
 # put your python code here
d = {'global': (None, [])}
for i in range(int(input())):
    cmd, namesp, arg = input().split() 
    if cmd == 'create':
        d[namesp]=(arg,[])
    if cmd == 'add':
        d[namesp][1].append(arg)
    if cmd == 'get':
        while namesp!= None:
            if arg in d[namesp][1]:
                print(namesp)
                break
            namesp = d[namesp][0]
        if namesp == None:
            print(None)
            


 -End,"
 # put your python code here
from datetime import date, timedelta

data = date(*[int(i) for i in input().split()]) + timedelta(days=int(input()))
print(data.year, data.month, data.day, sep=' ')


 -End,"
 def primes():
    pr = []
    candidate = 2
    while True:
        isPrime = True
        for prime in pr:
            if candidate % prime == 0:
                candidate += 1
                isPrime = False
                break
        if isPrime:
            pr.append(candidate)
            yield candidate
            candidate += 1




 -End,"
 class multifilter:
    def judge_half(pos, neg):
        return pos >= neg # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)

    def judge_any(pos, neg):
        return pos >= 1   # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)

    def judge_all(pos, neg):
        return neg == 0 # допускает элемент, если его допускают все функции (neg == 0)

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable    # iterable - исходная последовательность
        self.funcs = funcs # funcs - допускающие функции
        self.judge = judge # judge - решающая функция

    def __iter__(self):
        for i in self.iterable: # возвращает итератор по результирующей последовательности
            p = sum(1 for f in self.funcs if f(i))
            if self.judge(p,len(self.funcs)-p):
                yield i




 -End,"
 # put your python code here

s, t = input(), input()
count = 0
for i in range(len(s)-len(t)+1):
    if s[i:].startswith(t):
        count += 1
print(count)


 -End,"
 # put your python code here
import requests
import re

a, b = input(), input()
found = False
res = requests.get(a)
if res.status_code != 200:
    print('No')
else:
    links = re.findall(r'<a href=\""(.*)\"">',res.text)
    for link in links:
        res = requests.get(link)
        if res.status_code == 200 and b in res.text:
            found = True
            break
    if found:
        print('Yes')
    else:
        print('No')


 -End,"
 # put your python code here
import json

def getChilds(parent):
    if parent not in d or len(d[parent]) == 0:
        return [parent]
    else:
        l = [parent];
        for child in d[parent]:
            l.extend(getChilds(child))
        return l

data = json.loads(input())
d = {}
for row in data:
    for i in row['parents']:
        if i in d:
            d[i].append(row['name'])
        else:
            d[i] = [row['name']]
    if row['name'] not in d:
        d[row['name']] = []
for key in sorted(d.keys()):
    print(key, len(set(getChilds(key))), sep=' : ')



 -End,"
 import pandas as pd    
# переменная my_stat уже создана
subset_1 = my_stat.iloc[0:10, [0, 2]]
subset_2 = my_stat.drop([0,4]).iloc[:,[1,3]]


 -End,"
 import numpy as np
l = input().split()
if l[-1].isdigit():
    Z = np.zeros(tuple(map(int,l)), dtype=np.float64)
else:
    Z = np.zeros(tuple(map(int,l[:-1])), dtype=l[-1])


 -End,"
 import numpy 
Z = numpy.arange(int(input()),int(input())+1)




 -End,"
 import numpy as np
print(list(Z[np.nonzero(Z>3)]))




 -End,"
 import numpy
numpy.random.seed(42)
Z = numpy.random.random_sample(tuple(map(int,input().split())))




 -End,"
 import numpy
numpy.random.seed(42)
Z = numpy.mean(numpy.random.random_sample(tuple(map(int,input().split()))), axis=0)
print(Z.min(), Z.max(), sep='\n')



 -End,"
 import numpy
Z = numpy.ones(tuple(map(int,input().split())))
Z[1:-1,1:-1] = 0




 -End,"
 import numpy as np
Z = np.pad(Z, 1, 'constant', constant_values=0) -End,"
 Z = (A*B).sum() -End,"
 
Z[(Z>3) & (Z<9)] *= -1



 -End,"
 Z = np.copysign(np.ceil(np.abs(A)),A)




 -End,"
 def numerics(n):
    return [int(i) for i in str(n)] 

def kaprekar_step(L):
    min_number_str = ''.join(map(str, sorted(L)))
    return int(min_number_str[::-1]) - int(min_number_str)

def kaprekar_check(n):
    if len(numerics(n)) not in [3,4,6]:
        return False
    if len(set(numerics(n))) == 1:        
        return False
    if n in [100, 1000, 100000]:
        return False
    return True

def kaprekar_loop(n):
    #your code
    if not kaprekar_check(n):
        print(""Ошибка! На вход подано число {}, не удовлетворяющее условиям процесса Капрекара"".format(n))
        return
    l = []
    while n not in l:
        l.append(n)
        n = kaprekar_step(numerics(n))
    print(*l,sep='\n')        
    if n != l[-1]:
        print('Следующее число - {}, кажется процесс зациклился...'.format(n))
    



 -End,"
 from decimal import *
getcontext().prec = 50

def fi(L0, L1, n):
    for i in range(n-1):
        L0,L1 = L1, L0+L1
    return Decimal(L1)/Decimal(L0)
    #your code




 -End,"
 
print(df[~df.age.notnull()])



 -End,"
 
q = '{} == ""{}"" & {} < {}'.format(filter_names[0],filter_values[0],filter_names[1],filter_values[1])
print(df.query(q))



 -End,"
 def convert(num, to_base=10, from_base=10):
    digits =  ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
    n_decimal = int(str(num), base=from_base)
    res = ''
    while n_decimal != 0:
        res = str(digits[n_decimal%to_base]) + res
        n_decimal //= to_base
    return res




 -End,"
 def convert(num, to_base=10, from_base=10):
    digits =  ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
    n_decimal = int(str(num), base=from_base)
    res = ''
    while n_decimal != 0:
        res = str(digits[n_decimal%to_base]) + res
        n_decimal //= to_base
    return res

def kaprekar(n, base=10):
    d = int(convert(n,10,base))
    s = convert(d**2,base,10)
    for i in range(1,len(s)):
        if int(s[i:],base) != 0 and int(s[0:i],base)+int(s[i:],base) == d:
            return True
    return False
    #your code




 -End,"
 def front_back(a,b):
    # your code
    return a[0:(len(a)+1)//2]+b[0:(len(b)+1)//2]+a[(len(a)+1)//2:]+b[(len(b)+1)//2:]



 -End,"
 import random

def print_mimic(mimic_dict, word):
    res = [word]
    i = 0
    while i < 199:
        if res[i] in mimic_dict:
            next = random.choice(mimic_dict[res[i]])
        else:
            next = random.choice(mimic_dict[""""])
        res.append(next)
        i += 1
    return ' '.join(res)



 -End,"
 # put your python code here
l = list(map(int,input().split()))
if (len(l)) < 2:
    print('Ошибка. Кучек слишком мало, чтобы можно было решить задачу.')
elif (sum(l)%2==1 and len(l)%2 == 0) or (len(l)==2 and l[0]!=l[1]):
    print('Кучки нельзя уравнять')
else:
    print('Кучки можно уравнять')
    



 -End,"
 # put your python code here

# put your python code here
l = list(map(int,input().split()))
if (len(l)) < 2:
    print('Ошибка. Кучек слишком мало, чтобы можно было решить задачу.')
elif (sum(l)%2==1 and len(l)%2 == 0) or (len(l)==2 and l[0]!=l[1]):
    print('Кучки нельзя уравнять')
else:
    n = max(l) if (max(l)*len(l)-sum(l))%2==0 else max(l)+1
    m = (n*len(l)-sum(l))//2
    print(m, n, sep=' ')


 -End,"
 # put your python code here
n = int(input())
k = n//9
print(10**k*(n-9*k)+10**k-1)



 -End,"
 # put your python code here
from sympy.combinatorics.permutations import Permutation
import numpy as np
l = np.array(list(map(int,input().split())))
p = Permutation(l-1)
if p.is_odd:
    print(-1)
else:
    print(1)




 -End,"
 # put your python code here
from sympy.combinatorics.permutations import Permutation
import numpy as np
l1 = np.array(list(map(int,input().split())))
l2 = np.array(list(map(int,input().split())))
l3 = np.array(list(map(int,input().split())))
l4 = np.array(list(map(int,input().split())))
l = np.concatenate((l1,l2,l3,l4))
p = Permutation(l-1)*Permutation([0, 1, 2, 3, 7, 6, 5, 4, 8, 9, 10, 11, 14, 13, 12])
if p.is_odd:
    print('Не повезло...')
else:
    print('Бинго!')



 -End,"
 # put your python code here
from sympy.combinatorics.permutations import Permutation
import numpy as np

n, m = list(map(int,input().split()))
p1 = [m*i + j if not i%2 else m*i + m-1-j for i in range(n) for j in range(m)]
p1.remove(n*m-1)
p2 = ' '.join(input() for i in range(n))
p2 = np.array(list(map(int, p2.split())))
p = Permutation(p2-1)*Permutation(p1)
if p.is_odd:
    print('Не повезло...')
else:
    print('Бинго!')


 -End,"
 s = df.sum(numeric_only=True)
for column in s.index:
    v = int(s[column]) if 'int64' == df[column].dtype else s[column]
    print(column, ':', v, sep='')



 -End,"
 df.loc[df[column] == old_value, column] = new_value
print(df)




 -End,"
 # your code
import numpy as np
L2 = np.concatenate(L1).ravel().tolist() if len(L1)>0 else []




 -End,"
 def S(x):
    # Your code here
    return 3*5**0.5*(5+2*5**0.5)**0.5*x**2+30*3**0.5*x**2

def S_ceil(x):
    # Your code here
    return math.ceil(S(x)) -End,"
 def wisdom_multiplication(x, y, length_check = True):
    begin = str(100-(100-x+100-y))
    end = str((100-x)*(100-y))
    if (length_check) & (len(end)==1):
        end = '0' + end
    return int(begin+end)    




 -End,"
 def multiplication_check(x, y, length_check = True):
    begin = str(100-(100-x+100-y))
    end = str((100-x)*(100-y))
    if (length_check) & (len(end)==1):
        end = '0' + end
    return int(begin+end)==x*y    

    
def multiplication_check_list(start=10, stop=99, length_check = True):
    l = [1 for i in range(start,stop+1) for j in range(start,stop+1) if multiplication_check(i, j, length_check)]
    print ('Правильных результатов:', len(l))
    print ('Неправильных результатов:', (stop + 1 - start) ** 2 - len(l))



 -End,"
 import numpy as np
print(np.linalg.norm(np.cross(A2-A1, A3-A1))/2)



 -End,"
 def fib_mod(n, m):
    pisano = [0,1]
    f0, f1 = 0,1
    for i in range(6*m):
        f0,f1=f1,(f1+f0)%m
        pisano += [f1]
        if pisano[-2:]==[0,1]:
            break
    return pisano[n%(len(pisano)-2)]


def main():
    n, m = map(int, input().split())
    print(fib_mod(n, m))


if __name__ == ""__main__"":
    main() -End,"
 # put your python code here
import math  

n = int(input())
k = int((-1+math.sqrt(1+8*n))/2)  
print(k)
for i in [x for x in range(1,k+2) if x != (k+1)*(k+2)/2-n]:
    print(i, end=' ')



 -End,"
 # put your python code here
original = [int(x) for x in input().split()]
values = [int(x) for x in input().split()]
for i in range(1,len(values)):
    l,r = 1,len(original)-1
    res = -1
    while l<=r:
        m = (l+r)//2
        if original[m]==values[i]:
            res = m
            break
        elif original[m]>values[i]:
            r = m-1
        else:
            l = m+1
    print(res, end=' ')



 -End,"
 # put your python code here
n = int(input())
arr = [int(x) for x in input().split()]
list = [0] * 11
for i in range(n):
    list[arr[i]] += 1
for i in range(11):
    for j in range(list[i]):
        print(i, end=' ')



 -End,"
 # put your python code here
from bisect import bisect_right, bisect_left

n,m = [int(x) for x in input().split()]
segments = []
for i in range(n):
    segments.append([int(x) for x in input().split()])
dots = [int(x) for x in input().split()]    
r = [seg[1] for seg in sorted(segments, key=lambda item: item[1])] 
l = [seg[0] for seg in sorted(segments, key=lambda item: item[0])]  

for i in dots:
    print(bisect_right(l,i) - bisect_left(r,i), end=' ')


 -End,"
 # put your python code here
w1 = input()
w2 = input()
res = [[0 for x in range(len(w2)+1)] for y in range(len(w1)+1)]
for i in range(len(w1)+1):
    for j in range(len(w2)+1):
        if i == 0:
            res[i][j] = j
        elif j == 0:
            res[i][j] = i
        else:
            res[i][j] = min(res[i-1][j]+1,res[i][j-1]+1,res[i-1][j-1]+int(w1[i-1]!=w2[j-1]))
print(res[-1][-1])



 -End,"
 # put your python code here
def getRes(w, i):
    if res[w][i] != -1:
        return res[w][i]
    if w == 0:
        res[w][i]=0
        return 0
    if i == 0:
        res[w][i]=0
        return 0
    if l[i-1]>w:
        res[w][i] = getRes(w,i-1)
        return res[w][i]
    res[w][i] = max(getRes(w-l[i-1],i-1)+l[i-1],getRes(w,i-1))
    return res[w][i]
        
w,n = [int(x) for x in input().split()]
l = [int(x) for x in input().split()]
res = [[-1 for x in range(n+1)] for y in range(w+1)]

print(getRes(w,n))



 -End,"
 # put your python code here

n = int(input())
a = [int(x) for x in input().split()]
res = [0]*(n+1)
res[1]=a[0]
for i in range(2,n+1):
    res[i]=a[i-1]+max(res[i-1],res[i-2])
print(res[n]) -End,"
 # put your python code here
def fill(i):
    if h[i]!=0:
        return h[i]
    if l[i]==-1:
        h[i] = 1
    else:
        h[i] = 1+fill(l[i])    
    return h[i]    


n = int(input())
l = [int(x) for x in input().split()]
h = [0]*n
for i in range(n):
    fill(i)
print(max(h))



 -End,"
 w = input()
b = ['(','{','['] 
e = [')','}',']']
s = []
isSuccess = True
for i in range(len(w)):
    if w[i] in b:
        s.append((w[i],i))
    if w[i] in e:
        index = e.index(w[i])
        if len(s)==0 or s.pop()[0]!=b[index]:
            isSuccess = False
            break
        
if isSuccess:
    if len(s)==0:
        print('Success')
    else:
        print(s[0][1]+1)
else:
    print(i+1)



 -End,"
 def shiftDown(i):
    maxIndex = i
    l = 2*i+1
    if l<n and arr[l]<arr[maxIndex]:
        maxIndex = l
    r = 2*i+2
    if r<n and arr[r]<arr[maxIndex]:
        maxIndex = r
    if i != maxIndex:
        swaps.append((i,maxIndex))
        arr[i],arr[maxIndex] = arr[maxIndex],arr[i]        
        shiftDown(maxIndex)
        
n = int(input())
arr = [int(x) for x in input().split()]
swaps = []
for i in range(n//2,-1,-1):
    shiftDown(i)
print(len(swaps))
for pair in swaps:
    print(pair[0],pair[1])



 -End,"
 def find(i):
    if i!=parent[i]:
        parent[i]=find(parent[i])
    return parent[i]

def union(i,j):
    iid = find(i)
    jid = find(j)
    if iid == jid: 
        return
    if rank[iid]>rank[jid]:
        parent[jid]=iid
    else:
        parent[iid]=jid
        if rank[iid] == rank[jid]:
            rank[jid] += 1


n,d,e = [int(x) for x in input().split()]
if e==0:
    print(1)
else:
    parent = [x for x in range(0,n+1)]
    rank = [0]*(n+1)
    for i in range(d):
        a,b=[int(x) for x in input().split()]
        union(a,b)
    isOk = True
    for i in range(e):
        a,b=[int(x) for x in input().split()]
        if find(a)==find(b):
            isOk = False
            break
    if isOk:
        print(1)
    else:
        print(0)


 -End,"
 # put your python code here
n = int(input())
d = {}
for i in range(n):
    words = input().split()
    if words[0]=='add':        
        d[int(words[1])]=words[2]
    elif words[0]=='find':
        print(d.get(int(words[1]), 'not found'))
    elif  words[0]=='del':
        d.pop(int(words[1]), 'not found')



 -End,"
 # put your python code here
from collections import defaultdict

def hash(s):
    sum = 0
    for i in range(len(s)):
        sum = (sum + (ord(s[i]) * xh[i]) % p) % p
    return sum % m

m = int(input())
n = int(input())
d = defaultdict(list)
x = 263
p = 1000000007
xh = [1]
for i in range(1,16):
    xh.append(xh[i-1]*x % p)
for i in range(n):
    words = input().split()    
    if  words[0]=='check':  print(*d[int(words[1])])
    else:
        h = hash(words[1])
        if words[0]=='add' and words[1] not in d[h]: 
            d[h].insert(0,words[1])
        elif words[0]=='find': 
            print('yes' if words[1] in d[h] else 'no')
        elif  words[0]=='del' and words[1] in d[h]:
                d[h].remove(words[1])



 -End,"
 # put your python code here
n = int(input())
a = [int(x) for x in input().split()]
m = int(input())
if m == 1:
    print(*a)
else:
    b = [0]*n
    c = [0]*n
    for i in range(n):
        b[i] = max(a[i], b[i - 1]) if (i % (m-1)) else a[i]
    c[-1]=a[-1]
    for i in range(n-2,-1,-1):
        c[i] = max(a[i], c[i + 1]) if ((i + 1) % (m-1)) else a[i]
    for i in range(n-m+1):
        print(max(c[i], b[i + m - 1]), end=' ')



 -End,"
 # put your python code here
def hash(s):
    sum = 0
    for i in range(len(s)):
        sum = (sum + (ord(s[i]) * xh[i]) % p) % p
    return sum

pattern = input()
text =  input()
x = 23
p = 1000000007
xh = [1]
for i in range(1,len(pattern)):
    xh.append(xh[i-1]*x % p)
patternh = hash(pattern)
curh = hash(text[len(text)-len(pattern):])
res = []
for i in range(len(text)-len(pattern),-1,-1):
    if curh == patternh and pattern == text[i:i+len(pattern)]:
        res.append(i)
    if i>0:
        curh = (curh - ord(text[i+len(pattern)-1])*xh[len(pattern)-1]) % p
        curh = (curh + p) % p
        curh = (curh * x) % p
        curh = (curh + ord(text[i-1])) % p
print(*res[::-1]) 




 -End,"
 import heapq

n,m = [int(x) for x in input().split()]
arr = [int(x) for x in input().split()]
l = []
for i in range(n):
    heapq.heappush(l,(0,i))
for i in range(m):
    time,number = heapq.heappop(l)
    print(number, time)
    heapq.heappush(l,(time+arr[i],number))



 -End,"
 # put your python code here
size,n = [int(x) for x in input().split()]
if size == 0:
    for i in range(n):
        print(-1)
elif n>=0:
    cur_time = 0
    buf = []
    cur_pos = 0
    buf_time = 0
    if size >= n:
        for i in range(n):
            a,d=[int(x) for x in input().split()]
            print(max(a,cur_time))
            cur_time = max(a,cur_time) + d
    else:
        for i in range(size):
            a,d=[int(x) for x in input().split()]
            print(max(a,cur_time))
            cur_time = max(a,cur_time) + d
            buf.append((a,d))
        for i in range(size,n):
            a,d=[int(x) for x in input().split()]
            if buf[cur_pos][1] + max(buf_time,buf[cur_pos][0]) > a:
                print(-1)
            else:
                print(max(a,cur_time))
                cur_time = max(a,cur_time) + d
                buf_time = max(buf_time,buf[cur_pos][0]) + buf[cur_pos][1]
                buf[cur_pos]=(a,d)
                cur_pos = (cur_pos + 1)%size



 -End,"
 n = int(input())
arr = [int(x) for x in input().split()]
d = [1]*n
for i in range(n):
    for j in range(i):
        if arr[i]%arr[j]==0 and d[j]+1>d[i]:
            d[i]=d[j]+1
print(max(d))





 -End,"
 import sys

sys.setrecursionlimit(100000)

def isCorrect(index):
    global curval
    if index == -1:
        return True
    if not isCorrect(left[index]):
        return False
    if curval>=value[index]:
        return False
    curval = value[index]
    return isCorrect(right[index])

n = int(input())
if n == 0:
    print('CORRECT')
else:
    value = []
    left = []
    right = []
    curval = -2**31-1
    for i in range(n):
        s = input().split()
        value.append(int(s[0]))
        left.append(int(s[1]))
        right.append(int(s[2]))

    if isCorrect(0):
        print('CORRECT')
    else:
        print('INCORRECT') -End,"
 import sys

sys.setrecursionlimit(100000)

def isCorrect(index):
    global curval
    if index == -1:
        return True
    if not isCorrect(left[index]):
        return False
    if curval>value[index]:
        return False
    if curval==value[index] and left[index] != - 1:
        return False
    curval = value[index]
    return isCorrect(right[index])

n = int(input())
if n == 0:
    print('CORRECT')
else:
    value = []
    left = []
    right = []
    curval = -2**31-1
    for i in range(n):
        s = input().split()
        value.append(int(s[0]))
        left.append(int(s[1]))
        right.append(int(s[2]))

    if isCorrect(0):
        print('CORRECT')
    else:
        print('INCORRECT') -End,"
 import numpy as np

def vectorized_forward_pass(self, input_matrix):        
    # your code goes here
    return input_matrix@self.w + self.b > 0
    



 -End,"
 import numpy as np

def summatory(self, input_matrix):
    return input_matrix@self.w

def activation(self, summatory_activation):
    return self.activation_function(summatory_activation)

def vectorized_forward_pass(self, input_matrix):
    return self.activation(self.summatory(input_matrix)) -End,"
 import numpy as np
def get_error(deltas, sums, weights):
    """"""
    compute error on the previous layer of network
    deltas - ndarray of shape (n, n_{l+1})
    sums - ndarray of shape (n, n_l)
    weights - ndarray of shape (n_{l+1}, n_l)
    """"""
    return ((deltas@weights)*(sigmoid_prime(sums))).mean(axis=0).T -End,"
 import numpy as np

def update_mini_batch(self, X, y, learning_rate, eps):
    # here goes your code
    loss_before = J_quadratic(self, X, y)
    grad = compute_grad_analytically(self, X, y)
    self.w -= learning_rate * grad
    loss_after = J_quadratic(self, X, y)
    return abs(loss_before - loss_after) < eps



 -End,"
 import numpy as np

def SGD(self, X, y, batch_size, learning_rate=0.1, eps=1e-6, max_steps=200):
    n = y.shape[0]        
    for i in range(max_steps):
        batch_indexes = np.random.choice(n, batch_size, replace=False)
        isFinished = self.update_mini_batch(X[batch_indexes],y[batch_indexes], learning_rate, eps)
        if isFinished:
            return 1
    return 0

def update_mini_batch(self, X, y, learning_rate, eps):
    loss_before = J_quadratic(self, X, y)
    grad = compute_grad_analytically(self, X, y)
    self.w -= learning_rate * grad
    loss_after = J_quadratic(self, X, y)
    return abs(loss_before - loss_after) < eps -End,"
 def backprop(self, x, y):
    """"""
    Возвращает кортеж ``(nabla_b, nabla_w)`` -- градиент целевой функции по всем параметрам сети.
    ``nabla_b`` и ``nabla_w`` -- послойные списки массивов ndarray,
    такие же, как self.biases и self.weights соответственно.
    """"""

    nabla_b = [np.zeros(b.shape) for b in self.biases]
    nabla_w = [np.zeros(w.shape) for w in self.weights]

    # прямое распространение (forward pass)

    activations = [x]
    sums = [x]
    for b, w in zip(self.biases, self.weights):
        # посчитать активации
        sum = np.dot(w, x)+b
        sums.append(sum)
        x = sigmoid(sum)           
        activations.append(x)
        
    # обратное распространение (backward pass)

    # ошибка выходного слоя
    delta =  self.cost_derivative(activations[-1],y) * sigmoid_prime(sums[-1]) 
        
    # производная J по смещениям выходного слоя
    nabla_b[-1] =  delta
    # производная J по весам выходного слоя
    nabla_w[-1] = np.dot(nabla_b[-1], activations[-2].T)

    # Обратите внимание, что переменная l в цикле ниже используется
    # немного иначе, чем в лекциях.  Здесь l = 1 означает последний слой, 
    # l = 2 - предпоследний и так далее.  
    # Мы перенумеровали схему, чтобы с удобством для себя 
    # использовать тот факт, что в Python к переменной типа list 
    # можно обращаться по негативному индексу.
    for l in range(2, self.num_layers):
       # дополнительные вычисления, чтобы легче записывалось
       #
       # ошибка на слое L-l
       delta = np.dot(self.weights[-l+1].T,nabla_b[-l+1]) * sigmoid_prime(sums[-l]) 
       # производная J по смещениям L-l-го слоя
       nabla_b[-l] = delta 
       # производная J по весам L-l-го слоя
       nabla_w[-l] = np.dot(nabla_b[-l], activations[-l-1].T) 
    return nabla_b, nabla_w -End,"
 def is_prime(n):
    if n < 3 or n % 2 == 0:
        return (n == 2)
    else:
        return all(n % i != 0 for i in range(3, int(n**0.5 + 2), 2))
 -End,"
 s = input()
def fix_start(s):
    return s[:1] + s[1:].replace(s[:1], '*')

print(fix_start(s)) -End,"
 from math import exp
# исходная функция
def f(x):
    return exp(x)

accur = 3
def def_e(x):
    eps = 10**(-accur)
    dx0, dx1 = eps, eps / 10
    dfx0, dfx1 = (f(x + dx0) - f(x)) / dx0,  (f(x + dx1) - f(x)) / dx1
    while abs (dfx0 - dfx1) > eps:
        # print(dx0, dfx0, dx1, dfx1)
        dx0, dx1 = dx1, dx1 / 10
        dfx0, dfx1 = dfx1, (f(x + dx1) - f(x)) / dx1
    return round(dfx1, accur)


    





 -End,"
 numerics = lambda n: [d for d in str(n)]

def kaprekar_check(n):
    ln = len(str(n))
    return False if ln not in (3, 4, 6) or len(set(numerics(n))) == 1 or n == 10**(ln - 1) else True

def kaprekar_step(L):
    Ls = sorted(L)
    return str(int(''.join(d for d in Ls[::-1])) - int(''.join(d for d in Ls))).zfill(len(L))

def kaprekar_loop(n):
    if not kaprekar_check(n):
        print(f'Ошибка! На вход подано число {n}, не удовлетворяющее условиям процесса Капрекара')
    else:
        n = str(n)
        print(n)
        d = {n}
        while n not in ('495', '6174', '549945', '631764'):
            n = kaprekar_step(numerics(n))
            if n in d:
                print(f'Следующее число - {n}, кажется процесс зациклился...')
                break
            d.add(n)
            print(n)
 -End,"
 clss = dict()
def isParent(chld, prnt):
    prnts = clss[chld]
    if chld == prnt or prnt in prnts:
        return True
    else:
        for p in prnts:
            if isParent(p, prnt):
                return True
        else:   return False

cldesc = [input().split(' : ') for i in range(int(input()))]
for cl in cldesc:
    clss[cl[0]] = [] if len(cl) == 1 else cl[1].split()

q = [input().split() for i in range(int(input()))]
for pred, cl in q:
    print('Yes' if isParent(cl, pred) else 'No')





 -End,"
 alpha = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""
d_to10 = {sym: v for v, sym in enumerate(alpha)}
d_toAZ = {v: sym for sym, v in d_to10.items()}

def convertTo10(num, from_base=10):
    result = 0
    for s in (str(num)):
        result *= from_base
        result += d_to10[s]
    return int(result)

def convert(num, to_base=10, from_base=10):
    res = ''
    num = str(num).upper()
    num10 = convertTo10(num, from_base)
    while num10:
        res = d_toAZ[num10 % to_base] + res
        num10 //= to_base
    return res
 -End,"
 def isRisedOrRisedParent(exc):
    if exc in rised:
        return True
    parents = dexc.get(exc)
    for p in parents:
        if isRisedOrRisedParent(p):
            return True
    return False

import sys
infile = sys.stdin #  open('exxx.txt') # 

n = int(infile.readline().strip())
exc = [infile.readline().strip().split(' : ') for _ in range(n)]
dexc = dict((x[0], []) if len(x) == 1 else (x[0], x[1].split()) for x in exc)

m = int(infile.readline().strip())
errs = [infile.readline().strip() for _ in range(m)]
rised = set()

for err in errs:
    if isRisedOrRisedParent(err):
        print(err)
    rised.add(err)
 -End,"
 def primes():
    yield 2
    n = 3
    while True:
        # четные делители не проверяем, т.к. n подаём только нечётное
        if not any(i for i in range(3, int(n ** 0.5) + 1, 2) if not n % i):
            yield n
        n += 2




 -End,"
 def primes():
    '''  все простые == 12k+1, 12k+5, 12k+7 или 12k+11
    '''
    for n in [2, 3, 5, 7, 11]:
        yield n
    n = 13              # k == 1   -> 12k + 1 == 13
    while True:
        if not any(i for i in range(3, int(n ** 0.5) + 1, 2) if not n % i):
            yield n
        n += 4          # 12k + 5
        if not any(i for i in range(3, int(n ** 0.5) + 1, 2) if not n % i):
            yield n
        n += 2          # 12k + 7
        if not any(i for i in range(3, int(n ** 0.5) + 1, 2) if not n % i):
            yield n
        n += 4          # 12k + 11
        if not any(i for i in range(3, int(n ** 0.5) + 1, 2) if not n % i):
            yield n
        n += 2          # 12(k+1) + 1
 -End,"
 import json

chlds, prnts = dict(), dict()

def visit_prnts(chi, prn):
    chlds[prn].add(chi)
    if prnts.get(prn):
        # заходим к родителям родителя
        for x in prnts[prn]:
            visit_prnts(chi, x)

classes = json.loads(input())

for klass in classes:
    kl_name = klass['name']
    prnts[kl_name] = klass['parents']
    chlds[kl_name] = set()

for klass in classes:
    kl_name = klass['name']
    # начинаем обход с себя, т.к. сам себе тоже родитель
    visit_prnts(kl_name, kl_name)

print(*[cl+' : '+str(len(chlds)) for cl, chlds in sorted(chlds.items())], sep='\n')
 -End,"
 a, b = [''.join(sorted(input().lower())) for _ in range(2)]
print(a == b)
 -End,"
 sign = lambda x: x and (1, -1)[x<0]
f = lambda x: -x/2 if -2 < x <= 2 else sign(x)*(abs(x)-2)**2 + 1
 -End,"
 orig = ' abcdefghijklmnopqrstuvwxyz'
# обрезаем сдвиг по длине допустимых символов
n, txt = int(input()) % len(orig), input().strip()

# разрезаем строку алфавита, так что символ n 
# теперь первый и переставляем, потом в словарь
shifted = orig[n:] + orig[:n]
caesar = dict(zip(orig, shifted))

print(f'Result: ""{"""".join([caesar[x] for x in txt])}""')
 -End,"
 orig = ''.join([chr(i) for i in range(int(0x1f600), int(0x1f64f)+1)])

# обрезаем сдвиг по длине допустимых символов
n = int(input()) % len(orig)
txt = input().strip()
# разрезаем строку (теперь символ номер n будет первым) и переставляем, потом в словарь
# для отрицательных тоже подходит, считает с конца
shifted = orig[n:] + orig[:n]
caesar = dict(zip(orig, shifted))

print(f'Result: ""{"""".join([caesar[x] for x in txt])}""')
 -End,"
 # Rome -> Arab
rome_arab = {'I': 1, 'IV': 4, 'V': 5, 'IX': 9, 'X': 10, 'XL': 40, 'L': 50,
             'XC': 90, 'C': 100, 'CD': 400, 'D': 500, 'CM': 900, 'M': 1000}

rom, decimal = input(), 0
while rom:
    if len(rom) > 1 and rom[:2] in rome_arab:
        decimal += rome_arab[rom[:2]]
        rom = rom[2:]
    elif rom[0] in rome_arab:
        decimal += rome_arab[rom[0]]
        rom = rom[1:]
    else:
        print('Bad sym', rom[0])
        rom = rom[1:]

print(decimal)
 -End,"
 oper = {'plus': int.__add__, 'minus': int.__sub__,
        'multiply': int.__mul__, 'divide': int.__floordiv__}
a, op, b = input().split()
print(oper[op](int(a), int(b)))
 -End,"
 n, m = map(int, input().split())
matrix = [input().split() for i in range(n)]
matrix = [*zip(*matrix)]
print(*[' '.join(x) for x in matrix], sep='\n')
 -End,"
 line, to_found = input().split(), input()
line = [i for i, val in enumerate(line) if val == to_found] or [None]
print(*line)
 -End,"
 from collections import Counter
s = sorted(Counter([len(x) for x in input().split()]).items())
print(*[f'{l}: {c}' for l, c in s], sep='\n')
 -End,"
 def baseRLEencode(txt):
    result, txt, pred, count = '', txt + '~~~', txt[0], 0
    for x in txt:
        if x == pred:
            count += 1
            continue
        result += (str(count) if count > 1 else '') + pred
        pred, count = x, 1
    return result

print(baseRLEencode(input()))
 -End,"
 f_in, f_what = input(), input()
print(*[i for i in range(len(f_in) - len(f_what) + 1) if f_in[i:].startswith(f_what)] or [-1], sep=' ')
 -End,"
 ch, zn = (map(int, input().split('/')))
while zn:
    a, zn, ch = *divmod(ch, zn), zn
    print(a, end=' ')
 -End,"
 def fib(n):
    # put your code here
    F1, F2 = 0, 1
    while n:
        n -= 1
        F1, F2 = F2, F1 + F2
    return F1


def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main() -End,"
 def fib_digit(n):
    F1, F2 = 0, 1
    while n:
        n -= 1
        F1, F2 = F2 % 10, F1 + F2
    return F1
    


def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 def fib_digit(n):
    # последняя цифра повторяется в 60 цикле
    fib_last = list('011235831459437077415617853819099875279651673033695493257291')
    return fib_last[n % 60]

def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 def gcd(a, b):
    while b:
        a, b = b, a%b
    return a

def main():
    a, b = map(int, input().split())
    print(gcd(a, b))


if __name__ == ""__main__"":
    main() -End,"
 n = int(input())
lines = [tuple(map(int, input().split())) for i in range(n)]
# отрезки сортируем по их правой границе
lines.sort(key=lambda x: x[1])
# print(lines)

# last_dot - значение последней точки
# начальные условия -> фиктивная точка == -1,
# алгоритм - ставим точку в правый край следующего непокрытого отрезка
dots = []
last_dot = -1

for (left, right) in lines:
    if left > last_dot:
        last_dot = right
        dots.append(last_dot)

print(len(dots))
print(*dots)
 -End,"
 n, need_weight = map(int, input().split())
#             (cost, weight)
items = [tuple(map(int, input().split())) for i in range(n)]
# предметы сортируем по их стоимость/объём
items.sort(key=lambda x: x[0]/x[1], reverse=True)

total_cost = 0
for (cost, weight) in items:
    if weight <= need_weight:
        total_cost += cost
        need_weight -= weight
        continue
    else:
        # берём часть последнего предмета
        partial_cost = need_weight/weight * cost
        total_cost += partial_cost
        break

print(f'{total_cost:.3f}')
 -End,"
 n = int(input())
k = int(((1 + 8*n)**0.5-1)/2)
print(k)
print(*[i for i in range(1, k)], end=' ')
su = (k-1)*k//2
if su < n:
   print(n-su) -End,"
 from collections import Counter

to_code = input()
c = Counter(to_code)
freq = [(su, sym) for sym, su in c.items()]
freq.sort(reverse=True)
d = dict()
if len(freq) == 1:
    d[freq[0][1]] = '0'
else:
    while len(freq) >= 2:
        node1, node2 = freq.pop(), freq.pop()
        for sym in node1[1]:
            d[sym] = '0' + d.get(sym, '')
        for sym in node2[1]:
            d[sym] = '1' + d.get(sym, '')
        sym_new = node1[1] + node2[1]
        freq_new = node1[0] + node2[0]
        freq.append((freq_new, sym_new))
        freq.sort(reverse=True)
        # print(freq, '\n', d, '\n')

total_code_len = sum([len(d[sym])*count for sym, count in c.items()])

print(len(c), total_code_len)

codes = sorted(d.items(), key= lambda x: len(x[1]))
print(*[f'{sym}: {code}' for sym, code in codes], sep='\n')

print(*[d[sym] for sym in to_code], sep='')
 -End,"
 class Tree:
    def __init__(self):
        self.left = None
        self.right = None
        self.data = None

class Huffman_Tree (Tree):
 
    def new_key(self, sym, bitcode):
        pointer = self
        for bit in bitcode:
            if bit == '0':
                if pointer.left is None:
                    pointer.left = Tree()
                pointer = pointer.left
            else:
                if pointer.right is None:
                    pointer.right = Tree()
                pointer = pointer.right
        pointer.data = sym

    def decode(self, bitseq):
        result = []
        pointer = self
        for bit in bitseq:
            pointer = (pointer.left, pointer.right)[bit == '1']
            if pointer.data is not None:
                result.append(pointer.data)
                pointer = self
        return ''.join(result)

def Huffman_decode(coded: str, d: dict) -> str:
    root = Huffman_Tree()
    for sym, code in d.items():
        root.new_key(sym, code)
    return root.decode(coded)


difsyms, codelen = map(int, input().split())
code_table = dict(input().split(': ') for _ in range(difsyms))
to_decode = input()
print(Huffman_decode(to_decode, code_table))
 -End,"
 # словарём
def Huffman_decode(bit_seq: str, d: dict) -> str:
    decode_table = dict((code, sym) for sym, code in code_table.items())
    result = []
    part_bits = ''
    for bit in bit_seq:
        part_bits += bit
        if part_bits in decode_table:
            result.append(decode_table[part_bits])
            part_bits = ''
    return ''.join(result)

difsyms, codelen = map(int, input().split())
code_table = dict(input().split(': ') for _ in range(difsyms))
to_decode = input()

print(Huffman_decode(to_decode, code_table))

 -End,"
 class My_heap():
    # выделю 1000, добавлять по 100/
    # нулевую не использую для мин-кучи изменить на 'min'
    def __init__(self, limit=1000, additions=100, type='max'):
        self.heap = [0] * (limit + 1)
        self.limit = limit
        self.nextIdx = 1
        self.addition = additions
        if type == 'max':
            self.oper = int.__lt__
        elif type == 'min':
            self.oper = int.__gt__

    def insert(self, item: int):
        self.heap[self.nextIdx] = item
        self.nextIdx += 1
        if self.nextIdx > self.limit:
            self.heap = self.heap + [0] * self.addition
            self.limit += self.addition
        self._pass_up(self.nextIdx - 1)

    def extract_max(self) -> int:
        result = self.heap[1]
        self.heap[1] = self.heap[self.nextIdx - 1]
        self.nextIdx -= 1
        self._pass_dn(1)
        return result

    def _pass_up(self, idx):
        prnt = self._parent(idx)
        if prnt and self.oper(self.heap[prnt], self.heap[idx]):
            self.heap[prnt],  self.heap[idx] = self.heap[idx], self.heap[prnt]
            self._pass_up(prnt)

    def _pass_dn(self, idx):
        chld = self._best_child(idx)
        if not chld:
            return
        if self.oper(self.heap[idx], self.heap[chld]):
            self.heap[idx], self.heap[chld] = \
                self.heap[chld], self.heap[idx]
            self._pass_dn(chld)

    def _best_child(self, idx) -> list:
        if 2 * idx + 1 > self.nextIdx - 1:
            if 2 * idx <= self.nextIdx - 1:
                # только один потомок
                return 2 * idx
            else:   # ни одного
                return []
        elif self.oper(self.heap[2*idx], self.heap[2*idx+1]):
            return 2 * idx + 1
        else:
            return 2 * idx

    def _parent(selfs, idx):
        return idx // 2

n = int(input())
heap = My_heap()
for i in range(n):
    op = input()
    if op[:6] == 'Insert':
        heap.insert(int(op[7:]))
    elif op == 'ExtractMax':
            print(heap.extract_max())

 -End,"
 massiv = tuple(map(int, input().split()))
keys = tuple(map(int, input().split()))
result = [-1] * len(keys)
# нулевые элементы не используем. там n, k
for i in range(1, len(keys)):
    L, R, key = 1, len(massiv) - 1, keys[i]
    while L <= R:
        M = (L + R) // 2
        if massiv[M] == key:
            result[i] = M
            break
        elif massiv[M] > key:
            R = M - 1
        else:
            L = M + 1
print(*result[1:])
 -End,"
 def generateX(n):
    cur, total = 1, 0
    while True:
        for _ in range(cur):
            if total == n:
                return
            total += 1
            yield cur
        cur += 1

n = int(input())
print(*generateX(n)) -End,"
 x, y, dx, dy, n = 0, 0, 1, 0, int(input())
# x - элемент в строке, y - строка, 
# dx, dy = 1, 0 => начинаем идти вправо
p = [[0] * n for i in range(n)]
bad_xy = {-1, n} # плохие индексы за границей поля

for i in range(1, n * n + 1):
    p[y][x] = i
    #   indexes out of range                  or cell already used
    if ((x+dx) in bad_xy or (y+dy) in bad_xy) or p[y + dy][x + dx]:
        # поворот направо
        # 1,0  ->  0,1  ->  -1,0  ->  0,-1  и по кругу
        dx, dy = -dy, dx
    x += dx
    y += dy

[print(*l) for l in p]
 -End,"
 def is_jolly(seq: list) -> bool:
    delta_was =  set()
    lenS = len(seq)
    if lenS == 1:
        return True
    prev = seq[0]
    for x in seq:
        delta =  x - prev
        if delta in delta_was or lenS-1 < delta < 0:
            return False
        delta_was.add(delta)
        prev = x
    return True
        

if __name__ == '__main__':
    inp_data = list(map(int, input().split()))
    print('Jolly' if is_jolly(inp_data) else 'Not jolly')
 -End,"
 from collections import Counter

c = Counter(map(int, input().split()))

print(*(key for key, count in c.items() if count > 1))
 -End,"
 
n, m = list(map(int, input().split()))
pole = [input() for _ in range(n)]
pole_new = []

for i in range(n):
    new_line = []
    for j in range(m):
        count_near = 0
        for k in (i-1, i, i+1):
            for z in (j-1, j, j+1):
                count_near += (0, 1)[pole[k%n][z%m] == 'X']
        
        if pole[i][j] == '.' and count_near == 3:
            new_line.append('X')
        elif pole[i][j] == 'X' and 2 < count_near < 5:
            # для клетки Х она тоже посчитается: 2 < count < 5
            new_line.append('X')
        else:
            new_line.append('.')
    pole_new.append(''.join(new_line))

print(*pole_new, sep='\n')
 -End,"
 H, A, B = int(input()), int(input()), int(input())
if A >= H:
    print(1)
else:
    d, part = divmod(H - A, A - B)
    print(d + 1 + (1, 0)[part == 0])
 -End,"
 print(sum(map(int, input())))
 -End,"
 n = input()
while len(n) > 1:
    n = str(sum(map(int, str(n))))
print('YES' if n in '369' else 'NO') -End,"
 N, M, K = [int(input()) for _ in range(3)]
print('YES' if (not K%M or not K%N) and K <= N*M else 'NO')
 -End,"
 print(sum(map(lambda x: x//2 + x%2, [int(input()) for _ in range(3)])))
 -End,"
 digit_sum = lambda n: sum([int(d) for d in str(n)]) -End,"
 x1, y1, x2, y2 = map(int, input().split())
print('YES' if (abs(x2-x1), abs(y2-y1)) in [(1,2), (2,1)] else 'NO')
 -End,"
 alphabet, code, to_code, to_decode = [input() for _ in range(4)]

dict_code = dict([(ord(sym), cod) for sym, cod in zip(alphabet, code)])
dict_decode = dict([(ord(sym), cod) for sym, cod in zip(code, alphabet)])

print(to_code.translate(dict_code))
print(to_decode.translate(dict_decode))
 -End,"
 while True:
    n = int(input())
    if n > 100:
        break
    if n > 9:
        print(n)
 -End,"
 def digit_sum(n): 
    return sum(map(int, str(n)))

n = int(input())
n_sum = digit_sum(n)
print(sum(digit_sum(i) == n_sum for i in range(n)))
 -End,"
 n = int(input())

print(*sorted(map(int, input().split()[:n]))) -End,"
 from collections import Counter

m, n = map(int, input().split())
counted = Counter(map(int, input().split()))

print(*[counted[i] for i in range(1, n + 1)])
 -End,"
 print(input()[::-1])
 -End,"
 print(pow(int(input()), int(input())))
 -End,"
 from collections import Counter
n = int(input())
data = Counter([int(input()) for _ in range(n)])
print(data[0], data[1], data[-1])
 -End,"
 moves = input()
current, etaji = 1, 1

for move in moves:
    if move == '1':
        current += 1
        etaji = max(etaji, current)
    if move == '2':
        if current > 1:
            current -= 1
        else:
            etaji += 1
print(etaji)
 -End,"
 def is_kvadrat(i0, j0):
    i, j = i0, j0
    while True:
        if field[i0][j] == '1' and field[i][j0] == '1':
            i, j = i+1, j+1
        elif field[i0][j] == field[i][j0] == '0':
            return True
        else:
            return False
            
        
lines, rows = map(int, input().split())
field = [input().split() for _ in range(lines)]

# add empty borders
field = [['0']*(rows+2)] + [['0'] + field[i] + ['0'] for i in range(lines)] + [['0']*(rows+2)]

count = 0
for i in range(1, lines+1):
    for j in range(1, rows+1):
        if field[i][j] == '1' and field[i-1][j] == '0' and field[i][j-1] == '0':
            count += is_kvadrat(i, j)
print(count)
 -End,"
 x1, y1, x2, y2 = map(int, input().split())
print('YES' if x1==x2 or y1==y2 or abs(x1-x2)==abs(y1-y2) else 'NO')
 -End,"
 n = int(input())
data = [int(x) for x in input().split()]
i = 1
while i < len(data):
    data[i], data[i-1] = data[i-1], data[i]
    i += 2
print(*data)
 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        # constructor with the argument – capacity of the money box 
        self.limit = capacity
        self.store = 0

    def can_add(self, v):
        # True, if you can add v coins, otherwise - False
        return self.store + v <= self.limit

    def add(self, v):
        # put v coins into the money box 
        if self.can_add(v):
            self.store += v
 -End,"
 N, M, X, Y = [int(input()) for _ in range(4)]

long_side, short_side = (N, M) if N >= M else (M, N)

x_min = min(X, short_side - X)
y_min = min(Y, long_side - Y)

print(min(x_min, y_min))
 -End,"
 data = list(map(int, input().split()))

for i in range(1, len(data)):
    for j in range(i, 0, -1):

        if data[j-1] <= data[j]:
            break
        data[j-1], data[j] = data[j], data[j-1]
        
print(*data)
 -End,"
 def isRisedOrRisedParent(exc):
    if exc in rised:
        return True
    parents = dexc.get(exc)
    for p in parents:
        if isRisedOrRisedParent(p):
            return True
    return False

import sys
infile = sys.stdin #  open('exxx.txt') # 

n = int(infile.readline().strip())
exc = [infile.readline().strip().split(' : ') for _ in range(n)]
dexc = dict((x[0], []) if len(x) == 1 else (x[0], x[1].split()) for x in exc)

m = int(infile.readline().strip())
errs = [infile.readline().strip() for _ in range(m)]
rised = set()

for err in errs:
    if isRisedOrRisedParent(err):
        print(err)
    rised.add(err)
 -End,"
 n_bits = bin(int(input()))[2:]
print('YES' if n_bits.count('1') == 1 else 'NO')




 -End,"
 data = input().strip().lower()

gc_count = 0
for x in data:
    gc_count += x in 'gc'
gc_content = gc_count / len(data) * 100

print(f'{gc_content}')
 -End,"
 print(sum([int(x) for x in input().split() if x.isdecimal() or x[0]=='-' and x[1:].isdecimal()]))
 -End,"
 def primes():
    '''  все простые == 12k+1, 12k+5, 12k+7 или 12k+11
    '''
    # при k == 0 обрабатываем отдельно, т.к. 1 - не простое, а 2 и 3 наоборот - простые
    for n in [2, 3, 5, 7, 11]: yield n
    n = 13              # k == 1   -> 12k + 1 == 13
    while True:
        if not any(i for i in range(3, int(n ** 0.5) + 1, 2) if not n % i): yield n
        n += 4          # 12k + 5
        if not any(i for i in range(3, int(n ** 0.5) + 1, 2) if not n % i): yield n
        n += 2          # 12k + 7
        if not any(i for i in range(3, int(n ** 0.5) + 1, 2) if not n % i): yield n
        n += 4          # 12k + 11
        if not any(i for i in range(3, int(n ** 0.5) + 1, 2) if not n % i): yield n
        n += 2          # 12(k+1) + 1
 -End,"
 n, m = map(int, input().split())
data = [input().split() for _ in range(n)]

data_rotated = [' '.join([data[i][j] for i in range(n-1, -1, -1)]) for j in range(m)]
print(*data_rotated, sep='\n')




 -End,"
 def GCD(a, b):
    while b: a, b = b, a%b
    return a

a, b = int(input()), int(input())
print(a*b//GCD(a, b))

'''
result = max(a, b)
while True:
    if result%a + result%b:
        result += 1
    else:
        print(result)
        break
''' -End,"
 allowed = set(input().lower() for _ in range(int(input())))

text_words = set()
[text_words.update(input().lower().split()) for _ in range(int(input()))]

errors = text_words - allowed

print(*errors, sep='\n')
 -End,"
 data = list(map(int, input().split()))

print(*data[1::2], sum([x for x in data if not x%2]), sep='\n')
 -End,"
 lin, col = map(int, input().split())
data = [input().split() for _ in range(lin)]

sw1, sw2 = map(int, input().split())
for ln in data:
    ln[sw1], ln[sw2] = ln[sw2], ln[sw1]

print(*[' '.join(ln) for ln in data], sep='\n')
 -End,"
 _, data, max_prod = int(input()), list(map(int, input().split())), 0

# find 2 max elements
m1 = max(data)
data.remove(m1)
m2 = max(data)
max_prod = m1 * m2
'''
# Failed test #4. Time limit exceeded    
# O(N**2)
for i in range(len(data)-1):
    for j in range(i+1, len(data)):
        max_prod = max(data[i]*data[j], max_prod)
'''
print(max_prod)
 -End,"
 w1, w2 = input().lower(), input().lower()
print(sorted(w1) == sorted(w2))
 -End,"
 rows, cols = map(int, input().split())
data = [input().split() for _ in range(rows)]

for j in range(cols):
    print(*[data[i][j] for i in range(rows)])
 -End,"
 class LoggableList(Loggable, list):
    def append(self, *items):
        self.log(*items)
        super().append(*items)
 -End,"
 from sys import stdin
import re

print(*[line.strip('\n') for line in stdin if re.search(r'\bcat\b', line)], sep='\n')
 -End,"
 import time

t1 = time.mktime(time.strptime(input(), '%d.%m.%Y %H:%M:%S'))
t2 = time.mktime(time.strptime(input(), '%d.%m.%Y %H:%M:%S'))

print(int(t2-t1))
 -End,"
 first_primes_up2m = [
     2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
     73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,
     157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
     239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
     331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,
     421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
     509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
     613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
     709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,
     821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
     919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013,
     1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091,
     1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181,
     1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277,
     1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361,
     1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447]

def is_prime_under_2m(n):
    if n in first_primes_up2m:
        return True
    stop = int(n**0.5 +1)
    for p in first_primes_up2m:
        if p > stop:
            return True
        if not n%p:
            return False
    return True

n = int(input())

print(sum(is_prime_under_2m(i) for i in range(n+1, 2*n)))
 -End,"
 n = input().zfill(4)
print(1 if n == n[::-1] else 0)
 -End,"
 # n долек в длинну
n = int(input())
# m в ширину
m = int(input())
# k кусочков
k = int(input())

if (k < n * m) and ( (k % n == 0) or (k % m == 0) ): 
    print('YES')
else:
    print('NO')




 -End,"
 
null = 0 

while True:
    i = int(input())
    if i == 0: 
        break
    null += i 
print(null)









 -End,"
 a = int(input())
b = int(input())

while a !=0 and b != 0:
    if a > b: a = a % b
    else: b = b % a
gcd = a + b
print(gcd)
 -End,"
 s = ''

while True:
    s = int(input())
    if s < 10 and s < 100:
        continue
    elif s > 100:
        break
    print(s) -End,"
 from math import sqrt

a = float(input())
b = float(input())
c = float(input())
d = float(input())

s1 = a * b / 2
t = sqrt(a ** 2 + b ** 2)
p = (c + d + t) / 2

s2 = sqrt(p * (p - c) * (p - d) * (p - t))

s = s1 + s2
print(int(s)) -End,"
 def dec_To_Bin(dec):
    bin = ''
    while dec > 0:
        dec, bin = dec // 2, str(dec % 2) + bin
    print(bin)

x = int(input())
bin = dec_To_Bin(x)





 -End,"
 def dec_To_Bin(dec):
    bin = ''
    while dec > 0:
        dec, bin = dec // 2, str(dec % 2) + bin
    return int(bin)

x = int(input())
print(dec_To_Bin(x))
 -End,"
 def dec_To_Bin(dec):
    bin = ''
    while dec > 0:
        dec, bin = dec // 2, str(dec % 2) + bin
    return int(bin)


def bin_To_Dec(bin):
    i = 1
    dec = 0
    while bin > 0:
        dec = dec + bin % 10 * 2 ** (i - 1)
        bin = bin // 10
        i = i + 1
    return dec

x = int(input())
print(bin_To_Dec(x))
 -End,"
 def gcd(a, b):
    """"""НОД""""""
    while a != 0 and b != 0:
        if a > b:
            a %= b
        else:
            b %= a
    return a + b
 
def lcm(a, b):
    """"""НОК""""""
    return abs(a*b)/gcd(a, b)

a, b = int(input()), int(input())
print(int(lcm(a, b)))




 -End,"
 def fibon(n):
    if n < 2:
        return n
    else:
        return (fibon(n-1)+fibon(n-2))

x = int(input())
print(fibon(x))
 -End,"
 N = int(input())
p = int(input()) * 5
ch = int(input()) * 4
t = int(input()) * 3
d = int(input()) * 2

sredny_Bal = p + ch + t + d
print(sredny_Bal / N)
 -End,"
 

print('Hello,', input())



 -End,"
 x = int(input())
h = int(input())
m = int(input())

print((h * 60 + m + x) // 60, (h * 60 + m + x) % 60, sep='\n')
 -End,"
 #дано:
trees = input()  # деревья, посаженные первым классом
trees = int(trees)
v = trees * (80 / 100)
v = v
t = v + 5

print(trees + v + t) -End,"
 #дано:
v = 8000 #скорость спутника в метрах в секунду
s = input() #пройденный путь километрах
#преобразовать данные в целые числа
s = int(s)
#решение: написать алгебраическое выражение для вычисления времени t в секундах
t = s / (v / 1000)
#ответ: вывести значение времени, хранящейся в переменной t
print(t) -End,"
 #дано:
v = input() #расход горючего на каждую 1000 км
s = input() #пройденный путь километрах
#преобразовать данные в целые числа
v = int(v)
s = int(s)
#решение и ответ: написать алгебраическое выражение для решения этой задачи
print( round( ((v / 1000) * s), 3) )     -End,"
 #дано:
v = int(26)  # число кубометров воды
n = int(input())  # число суток работы доменной печи
h = int(24)  # число часов в одних сутках
m = int(60) # число минут в одном часе
# преобразовать данные в целые числа
n = int(n)
#решение и ответ: написать алгебраическое выражение для решения этой задачи
print( (v * 60 * 24) * n ) -End,"
 #дано:
a, b = map(int, input().split()) #число киловатт-часов потребляемых холодильником и телевизором в сутки
n = input() #число суток
#преобразуем введённые данные в числа с плавающей точкой
a, b = float(a), float(b)
#преобразуем введённые данные в целые числа
n = int(n)
#решение и ответ: написать алгебраическое выражение для решения этой задачи
print( ((a + b) * 2.7) * n ) -End,"
 #дано:
a = input()  # длина стороны квадрата

# преобразуем введённые данные в целые числа
a = int(a)

# решение: написать алгебраические выражения для решения этой задачи
# периметр прямоуольника

p = ((a + 8) + (a - 4)) * 2
#площадь прямоугольника
s = ((a + 8) * (a - 4))
print(p, s) -End,"
 #дано:
n = int(input()) #сумма вклада банк
x = int(input()) #годовой процент
#преобразуем введённые данные в целые числа
print( n + (n * (x / 100)) )
 -End,"
 # дано:
n = int(input())  # количество мороженого
x = int(input())  # процент воды

# решение и ответ: написать алгебраическое выражение для решения задачи
print( x * (n / 100) ) -End,"
 pkv = input()            
pkv = float(pkv)         
s1pr = (pkv / 4) * 2     
s2pr = pkv / 4           
print(float(s1pr * s2pr)) -End,"
 print(int(input()) // 1000)
 -End,"
 x = int(input())
y = int(input())

print( y // x, y % x)
 -End,"
 
x, y = input().split()
x, y = float(x), float(y)
print((x * 4), (y * 4))




 -End,"
 x = input()
x = str(x)
print(x[-1]) -End,"
 a = input()
print(a[0])




 -End,"
 a = input()
print(a[-2])




 -End,"
 n = int(input())
sum = 0
while n > 0:
    x = n % 10
    n = n // 10
    sum += x
print(sum)
 -End,"
 n = int(input())
sum = 0
while n > 0:
    sum += n % 10
    n //= 10
print(sum)


 -End,"
 n = input()
x = str(n[0:2])
n = int(n)
y = n % 100
x = int(x)
z = x + y
print(z)
 -End,"
 n = input()
x = n[0:1]
x1 = n[3:4]
y = n[1:2]
y1 = n[2:3]
x, x1 = int(x), int(x1)
y, y1 = int(y), int(y1)
print(x + x1, y + y1, sep="""")
 -End,"
 n = input()
x1 = n[0:1]
x3 = n[2:3]
x5 = n[4:5]
x2 = n[1:2]
x4 = n[3:4]

x1 = int(x1)
x3 = int(x3)
x5 = int(x5)
x2 = int(x2)
x4 = int(x4)
print(x1 + x3 + x5, x2 + x4, sep="""")
 -End,"
 n = int(input())
n1 = n % 3600
n2 = n1 // 60
print(n2)
 -End,"
 x = int(input())
col = 0

while True:
    col += 1
    x //= 10
    if x == 0:
        break
    else:
        continue
print(col)
 -End,"
 b = int(input())
o = int(input())
print(o // b)
print(o % b)
 -End,"
 part = (((int(input()) - 1) / 2 + 1) + ((int(input()) - 1) / 2 + 1) + ((int(input()) - 1) / 2 + 1))
print(int(part) - 1) -End,"
 r = int(input())
k = int(input())
n = int(input())
cost = ((r * 100) + k) * n
koop = cost % 100
rubl = cost // 100
print(rubl, koop)
 -End,"
 n = int(input())

a = n // 1000
# print(a)
b = n // 100 % 10
# print(b)
c = n //10 % 10
# print(c)
d = n % 10
# print(d)

if a + b == c + d:
    print('YES')
else:
    print('NO') -End,"
 p = int(input())  # процент годовых по вкладу
rub = int(input())  # вклад в рублях
kop = int(input())  # и копейках
vkld = (rub * 100) + kop  # сумма вклада в копейках
proc = (vkld * (p / 100))
itog = vkld + proc
itog = int(itog)
irub = itog // 100
itog = str(itog)
ikop1 = itog[-2:]
print(irub, ikop1)
 -End,"
 A = int(input())
B = int(input())
C = int(input())

if (C >= (A + B)) or (B >= (A + C)) or (A >= (B + C)):
    print('NO')
else:
    print('YES')
     -End,"
 sm = 0
mx = []

while True:
    x = int(input())
    mx.append(x)
    if x == 0:
        break
    else:
        sm += x
print(sm)
print(max(mx))
 -End,"
 x = int(input())
y = int(input())
print(x**y)
 -End,"
 a = int(input())
n = int(input())

if n % 2 == 0:
    a = (a**2) * n // 2
else:
    a = a * a**(n-1)
print(a)




 -End,"
 a, b, x = int(input()), int(input()), int(input())

Y = (a/b)**x + (a**(x+1))/(b**x)
print(abs(Y))
 -End,"
 t1, v1 = map(float, input().split())
t2, v2 = map(float, input().split())

print(t1 * v1 + t2 * v2)
 -End,"
 


s1, t1 = map(float, input().split())
s2, t2 = map(float, input().split())

print(((s2 + s1) / (t2 + t1)))

 -End,"
 x = int(input())  # доля суток для сна
h, m = map(int, input().split())  # количество часов и минут, расходуемых на еду
n = int(input())  # количество часов, затрачиваемых на учёбу

x = (24 / x) * 60
# print(x)

food = (h * 60) + m
# print(food)

teach = 60 * n
# print(teach)

print( 1440 - (x + food + teach) ) -End,"
 a, b = map(int, input().split())
n = int(input())

print(
    a * n + (b * n) // 100, (b * n) % 100
)
 -End,"
 a = list(map(int, input()))
print('Счастливый' if sum(a[:3]) == sum(a[3:]) else 'Обычный')
 -End,"
 x, x1  = int(input()), int(input())
y, y1  = int(input()), int(input())

print(
    'YES' if x + 1 != y else 'NO'
)




 -End,"
 x1, y1, x2, y2 = [int(input()) for i in range(4)]
print('YES' if x1 + 1 != y2 else 'NO')




 -End,"
 

n = int(input())
print(
    'Yes' if (-15<n<=12) or (14<n<17) or (n>=19) else 'No'
)


 -End,"
 
x1, y1, x2, y2 = [int(input()) for i in range(4)]
print('YES' if abs(x1 - x2) == abs(y1 - y2) else 'NO')








 -End,"
 x1, y1, x2, y2 = [int(input()) for i in range(4)]
print('YES' if abs(x1 - x2) == abs(y1 - y2)
            or x1 == x2 or y1 == y2 else 'NO'
) -End,"
 m1, m2 = map(float, input().split())
print( float(input()) / (m1 / m2))
 -End,"
 print( int(input()) * int(input()) + int(input()) ) -End,"
 m = float(input())
m = m * 1000
# print(m)
jab = m * 0.6
# print(jab)
tes = m * 0.4
# print(tes)
muk = tes * 0.7
print(muk)
 -End,"
 x = int(input())
print(x - (x * 0.13))

 -End,"
 coordinates = [int(input()) for _ in range(4)]
print('YES' if 1 <= (coordinates[0] - coordinates[2])**2 + (coordinates[1] - coordinates[3])**2 <= 2 else 'NO')




 -End,"
 a, b, c = float (input ()), float (input ()), float (input ())
D = b ** 2 - 4 * a * c
from math import sqrt
if D < 0:
    print ('Заданное уравнение не имеет решений')
elif D == 0:
    x = -b / (2 * a)
    print ('x =', x)
else:
    x1 = (-b + sqrt (D)) / (2 * a)
    x2 = (-b - sqrt (D)) / (2 * a)
    print(x1, x2, sep=""\n"")
     -End,"
 a, b, c = float(input()), float(input()), input()
if (c == '/' or c == 'div' or c == 'mod') and (b == 0.0):
    print('Деление на 0!')
elif c == '+':
    print(a + b)
elif c == '-':
    print(a - b)
elif c == '/':
    print(a / b)
elif c == '*':
    print(a * b)
elif c == 'mod':
    print(a % b)
elif c == 'pow':
    print(a ** b)
elif c == 'div':
    print(a // b)
 -End,"
 n = float(input())
x = (1 - 0.13) * n      # Зарплата после вычета налога
print(x * 0.2) -End,"
 text = input()
if text == 'прямоугольник':
    print(int(input()) * int(input()))
if text == 'треугольник':
    print( (int(input()) + int(input()) + int(input())) / 2 )
if text ==""круг"":
    a = int(input())
    print( float(3.14 * (a**2)) )



#print('Всё!') -End,"
 n = int(input())
if n in range(11, 15):
    print(n, 'программистов')
else:
    temp = n % 10
    if temp in list(range(5, 10))+[0]:
        print(n, 'программистов')

    if temp == 1:
        print(n, 'программист')

    if temp in range(2, 5):
        print(n, 'программиста')
 -End,"
 n = int(input())
i = 2
b = False
while i < n:
    i += 1
    if n % 2 == 0:
        b = True
if b == True:
    print('Введённое число не является простым')
else:
    print('Введённое число является простым') -End,"
 mnts = int(input())
print( (mnts // 60), (mnts % 60), sep=""\n"")
 -End,"
 slp = int(input())
hrs = int(input())
mnt = int(input())

gosleep = (hrs * 60) + mnt
timeup = gosleep + slp
print( timeup // 60 )  # часы подъема
print( timeup % 60 )  # минуты подъема -End,"
 A = int(input())
B = int(input())
H = int(input())

if H >= A and H <= B:
    print('Это нормально')
elif A <= B >= H:
    print('Недосып')
else:
    print('Пересып')
     -End,"
 # put your python code here


s = input()
if s == 'треугольник':
    a, b, c = (int(input()) for _ in range(3))
    p = (a + b + c) / 2
    print((p * (p - a) * (p - b) * (p - c))**0.5)

if s == 'прямоугольник':
    a, b = (int(input()) for _ in range(2))
    print (float(a * b))

if s == 'круг':
    a = int(input())
    print (float(3.14 * (a**2)))



 -End,"
 a, b = (int(input()) for _ in range(2))
x = a * b
while a !=0 and b !=0:
    if a > b:
        a %= b
    else:
        b %= a
print(x // (a + b))
 -End,"
 i = []
n = 0
while int(n) < 101:
    n = input()
    if int(n) <= 9:
        continue
    elif int(n) >= 101:
        print(""\n"".join(i))
        break
    i.append(n) -End,"
 a, b, c, d = (int(input()) for _ in range(4))
spr = '\t'

for x in range (c, d+1):  # слева на право
    print(spr + str(x), end='')
print(end='\n')

for y in range (a, b+1):  # сверху вниз
    print(str(y) + spr, end='')
    for j in range (c, d+1):
        print(str(y * j), end=spr)  # заполняем таблицу
    print(end='\n')



# a, b = от и до вертикаль
# с, d = от и до горизонт




# for i in range(a-1, b):
#     i += 1
#     print(i)
#
# for x in range(c-1, d):
#     x += 1
#     print(x, end='\t') -End,"
 def f(x):
    if x <= -2:
        f = 1 - (x + 2)**2
    elif -2 < x <= 2:
        f = -(x / 2)
    elif x > 2:
        f = (x - 2)**2 + 1
    return f
 -End,"
 def modify_list(l):
    for i in range(len(l) - 1, -1, -1):
        if l[i] % 2 == 0:
            l[i] //= 2
        else:
            l.pop(i)



 -End,"
 a = input().split()
b = 0
for i in a:
    s = int(i)
    b += s

print(b)




 -End,"
 
def closest_mod_5(x):
    return x + 5 - x % 5



 -End,"
 n = int(input())

list = []
for x in range(0, n):
    i = int(input())
    if i <= 100 and i % 3 == 0:
        list.append(i)
    else:
        continue
print(sum(list)) -End,"
 def is_true(x):
    return x == -10 or -5 < x <= 3 or 8 < x < 12 or x >= 16


print(is_true(int(input())))
 -End,"
 print(''.join(list(map(lambda x: x.title(), input().split('_')))))
 -End,"
 s = input()
t = input()
count = 0
while t in s:
    count += 1
    ind = s.find(t) + 1
    s = s[ind::]
print(count)
 -End,"
 print(10 + 2, 10 - 2, 10 * 2, 10 / 2, 10 ** 2, sep='\n')
 -End,"
 N, p, ch, t, d = int(input()), int(input()), int(input()), int(input()), int(input())
print((p * 5 + ch * 4 + t * 3 + d * 2) / N)
 -End,"
 a, b = int(input()), int(input())
print(a + b, a - b, a * b, a / b, sep='@')



 -End,"
 a, b = int(input()), int(input())
print('{:9.5f}'.format(a / b), '{:9.5f}'.format(b / a), sep='***')




 -End,"
 print('{1},{0}'.format(input(), input()))




 -End,"
 a, b, x = int(input()), int(input()), int(input())
print(abs((a / b) ** x + a ** (x + 1) / b ** x))




 -End,"
 a, b = abs(int(input())), abs(int(input()))
print(a * b, (a + b) * 2, sep='\n')



 -End,"
 xx = int(input())
print(xx // 60, xx % 60, sep='\n')



 -End,"
 xx, hh, mm = int(input()), int(input()), int(input())
print((xx + hh * 60 + mm) // 60, (xx + hh * 60 + mm) % 60, sep='\n')



 -End,"
 a, b, c = int(input()), int(input()), int(input())
p = (a + b + c) / 2
print((p * (p - a) * (p - b) * (p - c)) ** 0.5)



 -End,"
 print(2 * (float(input()) / 4) ** 2)




 -End,"
 t1, v1 = list(map(float, input().split()))
t2, v2 = list(map(float, input().split()))
print(t1 * v1 + t2 * v2)


 -End,"
 t1, v1 = list(map(float, input().split()))
t2, v2 = list(map(float, input().split()))
print((t1 * v1 + t2 * v2) / (t1 + t2))



 -End,"
 l1, l2 = list(map(int, input().split()))
print(l1 // l2, l1 % l2)



 -End,"
 a, b = list(map(int, input().split()))
n = int(input())
print((a * 100 + b) * n // 100, (a * 100 + b) * n % 100)


 -End,"
 a = int(input())
s = 0
for i in range(6):
    s += a % 10
    a //= 10
print(s)




 -End,"
 n = int(input())
print(n // 1000 + n % 10, n // 100 % 10 + n // 10 % 10, sep='')




 -End,"
 a, b, c = bool(input()), bool(input()), bool(input())
print(a or (not c and b))



 -End,"
 print(max(int(input()), int(input())))




 -End,"
 a, b = int(input()), int(input())
print(a if a > b else b)



 -End,"
 n = int(input())
s1 = n // 100000 + n // 10000 % 10 + n // 1000 % 10
s2 = n // 100 % 10 + n // 10 % 10 + n % 10
print('Счастливый' if s1 == s2 else 'Обычный')




 -End,"
 x1, y1, x2, y2, x3, y3 = int(input()), int(input()), int(input()), int(input()), int(input()), int(input())
a = ((x1 - x2) ** 2 + (y1 - y2) ** 2)
b = ((x1 - x3) ** 2 + (y1 - y3) ** 2)
c = ((x3 - x2) ** 2 + (y3 - y2) ** 2)
c1 = max(a, b, c)
a1 = min(a, b)
b1 = min(b, c)
print('Yes' if c1 == b1 + a1 else 'No') -End,"
 year = int(input())
print('Високосный' if year % 4 == 0 and year % 100 != 0 or year % 400 == 0 else 'Обычный')




 -End,"
 x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
print('YES' if x1 == x2 or y1 == y2 else 'NO')



 -End,"
 x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
print('YES' if abs(x1 - x2) == abs(y1 - y2) else 'NO')



 -End,"
 x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
print('YES' if x1 == x2 or y1 == y2 or abs(x1 - x2) == abs(y1 - y2) else 'NO')



 -End,"
 x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
print('YES' if abs(x1 - x2) == 2 and abs(y1 - y2) == 1 or abs(x1 - x2) == 1 and abs(y1 - y2) == 2 else 'NO')



 -End,"
 x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
x, y = int(input()), int(input())
print('Точка принадлежит прямоугольнику' if x1 <= x <= x2 and y2 <= y <= y1 else 'Точка не принадлежит прямоугольнику')


 -End,"
 n, m, k = int(input()), int(input()), int(input())
print('YES' if k % m == 0 and k // m <= n or k % n == 0 and k // n <= m else 'NO')




 -End,"
 a, b, h = int(input()), int(input()), int(input())
if a <= h <= b:
    print('Это нормально')
elif h < a:
    print('Недосып')
else:
    print('Пересып')




 -End,"
 s = input()
if s == 'прямоугольник':
    a, b = int(input()), int(input())
    print(a * b)
elif s == 'круг':
    r = int(input())
    print(3.14 * r ** 2)
else:
    a, b, c = int(input()), int(input()), int(input())
    p = 0.5 * (a + b + c)
    print((p * (p - a) * (p - b) * (p - c)) ** 0.5)

 -End,"
 n = abs(int(input()))
s = 0
while n > 0:
    s += n % 10
    n //= 10
print(s)



 -End,"
 n = int(input())
p = True
m = 2
while m <= n ** 0.5:
    if n % m == 0:
        p = False
        break
    m += 1
print('Введённое число является простым' if p else 'Введённое число не является простым')



 -End,"
 a, b = int(input()), int(input())
while a:
    a, b = b % a, a
print(abs(b))



 -End,"
 number = int(input())
while number < 100:
    if number > 10:
        print(number)
    number = int(input())




 -End,"
 print(len(str(input())))





 -End,"
 print(len(input()))




 -End,"
 n = int(input())
i = 1
n //= 10
while n != 0:
    i += 1
    n //= 10
print(i)


 -End,"
 print(len(input()))




 -End,"
 p = 1
for i in range(1, 11, 3):
    p *= i
print(p)




 -End,"
 print(int(input()) ** 3, int(input()) ** 3, int(input()) ** 3, int(input()) ** 3, sep='\n')




 -End,"
 def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(int(input())))




 -End,"
 def fib(n):
    if n<3:
        return 1
    return fib(n-1) + fib(n-2)


print(fib(int(input())))

 -End,"
 def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)


print(factorial(int(input())))

 -End,"
 def mul(x, y):
    return x * y


def gcd(x, y):
    while y != 0:
        x, y = y, x % y
    return abs(x)


def nok(x, y):
    return mul(x, y) // gcd(x, y)


print(nok(int(input()), int(input())))


 -End,"
 def f(x):
    if x <= -2:
        return 1 - (x + 2) ** 2
    elif x > 2:
        return (x - 2) ** 2 + 1
    return -x / 2


print(f(float(input())))

 -End,"
 print(*[int(input()) ** 2 for i in range(5)])




 -End,"
 print(*[int(input()) ** 2 for i in range(5)])




 -End,"
 p = int(input())
print(sum([int(input()) for i in range(p)]) / p)




 -End,"
 print(' '.join(sorted(input().split(', '), reverse=True)))




 -End,"
 s = input()
a, b, c, d = int(input()), int(input()), int(input()), int(input())
print(s[a:b + 1], s[c:d + 1])




 -End,"
 print(sum(list(map(int, input().split()))))




 -End,"
 a = [3, 4, 2, 1, 0, 7, 8]
try:
    print(a.index(int(input())))
except ValueError:
    print(-1)


 -End,"
 a = [3, 5, 65, 67, 4, 2, 3, 6, 9, -10, -27, 6, 0, 8]
print(min(a), max(a), sep='\n')



 -End,"
 def SearchInSortedList (x, a):
    f, l = 0, len (a) - 1
    if x not in a:
        return -1
    else:
        while a[f] != x:
            if a[(f + l) // 2] < x:
                f = (f + l) // 2 + 1
            else:
                f = (f + l) // 2
    return f


print(SearchInSortedList(int(input()), list(map(int, input().split()))))




 -End,"
 a, b, c = int(input()), int(input()), int(input())
p = a + b + c
print(p // 2 + p % 2)




 -End,"
 a, b, n = int(input()), int(input()), int(input())
print(a * n + b * n // 100, b * n % 100)



 -End,"
 n = int(input())
my_list = list(map(int, input().split()))
m = 0
k = 0
for i in range(n):
    if my_list[i] >= m:
        m = my_list[i]
        k = i
print(k + 1)

 -End,"
 n = int(input())
print(max(list(map(int, input().split()))))




 -End,"
 n = int(input())
my_list = list(map(int, input().split()))
print(len(list(filter(lambda x: x >= sum(my_list) / n, my_list))))




 -End,"
 x, y, z = int(input()), int(input()), int(input())
for i in range(z):
    x += y * x / 100
    print('{:.2f}'.format(x))


 -End,"
 a = list(map(int, input().split()))
print(max(sum(a[0:3]), sum(a[3:6]), sum(a[6:])))




 -End,"
 print('Hello, {}\nHello, {}'.format(input(), input()))




 -End,"
 def sum2(a, b):
    if type(a) == str and type(b) == str:
        return ""all arguments are not a numbers""
    elif type(a) == str:
        return ""1st argument is not a number"" 
    elif type(b) == str:
        return ""2nd argument is not a number"" 
    return a + b


 -End,"
 from scipy.constants import Planck, c, e

def lam(U):
    return Planck * c / (e * U)




 -End,"
 print(round((int(input()) ** 2) * 3 * 3 ** 0.5 * 11 / 12))




 -End,"
 print('-$-'.join(input().split()[::-1]))




 -End,"
 my_dict = {1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M'}
print(my_dict[int(input())])



 -End,"
 a = int(input())
print('Division by zero!' if a == 0 else round(int(input()) / a, 1))




 -End,"
 def numerics(n):
    return list(map(int, ' '.join(str(n)).split()))




 -End,"
 print(*[i ** 2 for i in range(int(input())) if i % 2 == 0], sep='\n' )




 -End,"
 def front_x(words):
    x = [word for word in words if word != '' and word[0] == 'x']
    x.sort()
    y = [word for word in words if word == '' or word[0] != 'x']
    y.sort()
    return x + y
    




 -End,"
 def mimic_dict(string):
    string = string.split()
    my_dict = {"""": [string[0]]}
    for i in range(0, len(string) - 1):
        my_dict[string[i]] = [string[i + 1]]
    return my_dict




 -End,"
 import urllib
from urllib import request
import numpy as np

fname = input()  # read file name from stdin
f = urllib.request.urlopen(fname)  # open file from URL
data = np.loadtxt(f, delimiter=',', skiprows=1)  # load data to work with
y = np.copy(data[:, 0])
data[: , 0] = [1] * len(data)
print(*np.linalg.inv(data.T.dot(data)).dot(data.T).dot(y))

# here goes your solution -End,"
 number = int(input())
numbers = [int(numbers) for numbers in input().split(' ', maxsplit = number)]
buffers = []
result = 'NO'
for counter in range(len(numbers)):
    buffers.append(numbers[counter])
    for counter2 in range(len(numbers)):
        if counter != counter2 and buffers[counter] == numbers[counter2]:
            result = 'YES'
print(result)
 -End,"
 size = int(input())
number = size
matrix = []
for counter in range(number):
    matrix.append([])
    for counter2 in range(number):
        matrix[counter].append(0)
directions = []
for counter in range(1, number):
    directions.append('right')
for counter in range(1, number):
    directions.append('down')
for counter in range(1, number):
    directions.append('left')
number -= 1
while number > 1:
    if directions[-1] == 'left':
        for counter in range(1, number):
            directions.append('up')
        for counter in range(1, number):
            directions.append('right')
    elif directions[-1] == 'up':
        for counter in range(1, number):
            directions.append('right')
        for counter in range(1, number):
            directions.append('down')
    elif directions[-1] == 'right':
        for counter in range(1, number):
            directions.append('down')
        for counter in range(1, number):
            directions.append('left')
    elif directions[-1] == 'down':
        for counter in range(1, number):
            directions.append('left')
        for counter in range(1, number):
            directions.append('up')
    number -= 1
rows = 0
columns = 0
matrix[0][0] = 1
value = 1
for counter in range(len(directions)):
    value += 1
    if directions[counter] == 'right':
        columns += 1
    elif directions[counter] == 'down':
        rows += 1
    elif directions[counter] == 'left':
        columns -= 1
    elif directions[counter] == 'up':
        rows -= 1
    matrix[rows][columns] = value
for counter in range(size):
    for counter2 in range(size):
        print(matrix[counter][counter2], end = ' ')
    print()
 -End,"
 def modify_list(l):
    m = []
    for counter in range(len(l)):
        m.append(l[counter])
    l.clear()
    for counter in range(len(m)):
        if m[counter] % 2 == 0:
            l.append(m[counter] // 2)
 -End,"
 def modify_list(l):
    for counter in range(len(l) - 1, -1, -1):
        if l[counter] % 2 == 1:
            l.remove(l[counter])
        else:
            l[counter] = l[counter] // 2





 -End,"
 string = [x.lower() for x in input().split()]
words = {}
for counter in string:
    if counter not in words.keys():
        words[counter] = 1
    else:
        words[counter] += 1
for counter in words.keys():
    print(counter, words[counter], end = '\n')
 -End,"
 number = int(input())
matrix = []
teams = {}
for counter in range(number):
    string = [x for x in input().split(';', maxsplit = 4)]
    for counter in string[::2]:
        if counter not in teams.keys():
            teams[counter] = [0, 0, 0, 0, 0]
    if int(string[1]) > int(string[3]):
        teams[string[0]][0] += 1
        teams[string[0]][1] += 1
        teams[string[0]][4] += 3
        teams[string[2]][0] += 1
        teams[string[2]][3] += 1
    elif int(string[1]) == int(string[3]):
        teams[string[0]][0] += 1
        teams[string[0]][2] += 1
        teams[string[0]][4] += 1
        teams[string[2]][0] += 1
        teams[string[2]][2] += 1
        teams[string[2]][4] += 1
    elif int(string[1]) < int(string[3]):
        teams[string[0]][0] += 1
        teams[string[0]][3] += 1
        teams[string[2]][0] += 1
        teams[string[2]][1] += 1
        teams[string[2]][4] += 3
matrix = teams.keys()
for counter in matrix:
    print(counter + ':', end = '')
    for counter2 in teams[counter]:
        print(counter2, end = ' ')
    print()
 -End,"
 def closest_mod_5(x):
    if x % 5 != 0:
        while True:
            x += 1
            if x % 5 == 0:
                break
    return x
 -End,"
 def desks(desktops):
    x = desktops // 2 + desktops % 2
    return x
a, b, c = int(input()), int(input()), int(input())
x = desks(a) + desks(b) + desks(c)
print(x)
 -End,"
 a, b, c = int(input()), int(input()), int(input())
totalcents = (a * 100 + b) * c
print(totalcents // 100, totalcents % 100)
 -End,"
 a = [int(x) for x in input().split()]
starting = 1
ending = len(a) - 1
while starting != ending:
    print(a[starting] + a[ending], end = ' ')
    starting += 1
    ending -= 1
    if starting >= ending:
        break
if starting == ending:
    print(a[starting])
 -End,"
 shape = {1 : 'square', 2 : 'circle', 3 : 'triangle', 4 : 'rhombus'}
number = int(input())
if number in shape.keys():
    print('You have chosen a', shape[number])
else:
    print('There is no such shape!')
 -End,"
 def decypher(word, starting, ending):
    result = ''
    for counter in range(len(word)):
        if word[counter] not in starting:
            result += word[counter]
        else:
            for counter2 in range(len(starting)):
                if word[counter] == starting[counter2]:
                    result += ending[counter2]
    return result
start1, start2, string1, string2 = [input() for x in range(4)]
print(decypher(string1, start1, start2))
print(decypher(string2, start2, start1))
 -End,"
 number = int(input())
dictionary = []
english = {}
spanish = {}
for counter in range(number):
    dictionary.append([x for x in input().split(' - ')])
    english[dictionary[-1][0]] = dictionary[-1][1].split(', ')
for counter in english.keys():
    for counter2 in english[counter]:
        if counter2 not in spanish.keys():
            spanish[counter2] = [counter]
        else:
            spanish[counter2].append(counter)
print(len(spanish))
for counter in sorted(spanish.keys()):
    spanish[counter].sort()
    print(counter + ' -', end = ' ')
    for counter2 in range(len(spanish[counter])):
        if len(spanish[counter]) == 1:
            print(spanish[counter][counter2], end = '')
        elif counter2 == len(spanish[counter]) - 1:
            print(spanish[counter][counter2], end = '')
        else:
            print(spanish[counter][counter2] + ',', end = ' ')
    print()
 -End,"
 number = int(input())
arabtoroman = {1 : 'I', 5 : 'V', 10 : 'X', 50 : 'L', 100 : 'C', 500 : 'D', 1000 : 'M'}
roman = ''
divider = 1000
while divider > 0:
    if number // divider < 4:
        roman += arabtoroman[divider] * (number // divider)
    elif number // divider == 4:
        roman = roman + arabtoroman[divider] + arabtoroman[divider * 5]
    elif number // divider == 5:
        roman += arabtoroman[divider * 5]
    elif 5 < (number // divider) < 9:
        roman = roman + arabtoroman[divider * 5] + arabtoroman[divider] * (number // divider - 5)
    elif number // divider == 9:
        roman = roman + arabtoroman[divider] + arabtoroman[divider * 10]
    number = number % divider
    divider = divider // 10
print(roman) -End,"
 commands = []
while True:
    commands.append(input())
    if commands[-1] == 'End':
        break
for counter in commands:
    if counter != 'End':
        print('Processing \""{}\"" command...'.format(counter))
    else:
        print('Good bye!')
 -End,"
 rows, columns = [int(x) for x in input().split(maxsplit = 2)]
matrix = []
for counter in range(rows):
    matrix.append([])
    matrix[-1] = [int(x) for x in input().split(maxsplit = columns)]
for counter in range(columns):
    for counter2 in range(rows - 1, -1, -1):
        print(matrix[counter2][counter], end = ' ')
    print()
 -End,"
 rows, columns = [int(x) for x in input().split(maxsplit = 2)]
matrix = []
buffer = 0
for counter in range(rows):
    matrix.append([])
    for counter2 in range(columns):
        if counter % 2 == 0:
            if counter2 % 2 == 0:
                buffer += 1
                matrix[counter].append(buffer)
            else:
                matrix[counter].append(0)
        else:
            if counter2 % 2 == 0:
                matrix[counter].append(0)
            else:
                buffer += 1
                matrix[counter].append(buffer)
        print('{0:4}'.format(matrix[counter][counter2]), end = '')
    print()
 -End,"
 string, substring = input(), input()
buffer = ''
summ = 0
for counter in range(len(string) - len(substring) + 1):
    buffer = string[counter : counter + len(substring)]
    if buffer == substring:
        summ += 1
        print(counter, end = ' ')
if summ == 0:
    print(-1)
 -End,"
 n = int(input())
matrix = {}
for counter in range(n):
    m = int(input())
    if m in matrix.keys():
        print(matrix[m])
    else:
        matrix[m] = f(m)
        print(matrix[m])




 -End,"
 def Avrg(x):
    return (int(x[2]) + int(x[3]) + int(x[4])) / 3
number = int(input())
strings = []
for counter in range(number):
    strings.append([])
    strings[-1] = [x for x in input().split()]
matrix = {}
name = ''
for counter in range(number):
    name = strings[counter][0] + ' ' + strings[counter][1]
    average = Avrg(strings[counter])
    if average not in matrix.keys():
        matrix[average] = [name]
    else:
        matrix[average].append(name)
for counter in sorted(matrix.keys(), reverse = True):
    for counter2 in matrix[counter]:
        print(counter2)
 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.money = 0
    def can_add(self, v):
        if self.money + v <= self.capacity:
            return True
        else:
            return False
    def add(self, v):
        if self.can_add(v):
            self.money += v
 -End,"
 percents, dollars, cents, years = [int(input()) for x in range(4)]
buffer = dollars * 100 + cents
for counter in range(years):
    buffer += int(buffer * percents / 100)
print(buffer // 100, buffer % 100) -End,"
 pole, up, down = [int(input()) for x in range(3)]
height = 0
days = 0
while True:
    days += 1
    height += up
    if height >= pole:
        break
    height -= down
print(days)
 -End,"
 starting, ending = [int(x) for x in input().split()]
for counter in range(starting, ending + 1):
    if counter % 3 == 0:
        if counter % 5 == 0:
            print('FizzBuzz')
        else:
            print('Fizz')
    elif counter % 5 == 0:
        print('Buzz')
    else:
        print(counter)
 -End,"
 def digit_summ(x):
    buffer = x
    summ = 0
    while buffer != 0:
        summ += buffer % 10
        buffer = buffer // 10
    return summ

number = int(input())
quantity = 0
for counter in range(number - 1, 0, -1):
    if digit_summ(counter) == digit_summ(number):
        quantity += 1
print(quantity)
 -End,"
 number = input()
phone = 'Yes'
if len(number) != 11:
    phone = 'No'
elif int(number[0]) != 1 or int(number[1]) != 9:
    phone = 'No'
else:
    for counter in number[2:]:
        if counter not in '1234567890':
            phone = 'No'
print(phone)
 -End,"
 units = {'mile' : 1609, 'yard' : 0.9144, 'foot' : 0.3048, 'inch' : 0.0254, 'km' : 1000, 'm': 1, 'cm' : 0.01, 'mm' : 0.001}
string = [x for x in input().split()]
print('{:.2e}'.format(float(string[0]) * units[string[1]] / units[string[3]]))
 -End,"
 words = [x for x in input().split()]
lengths = {}
for counter in words:
    if len(counter) not in lengths.keys():
        lengths[len(counter)] = 1
    else:
        lengths[len(counter)] += 1
for counter in sorted(lengths.keys()):
    print(counter, ': ', lengths[counter], sep = '')
 -End,"
 rubs, cops, pies = [int(input()) for x in range(3)]
nrubs = (rubs * 100 + cops) * pies // 100
ncops = (rubs * 100 + cops) * pies % 100
print(nrubs, ncops)
 -End,"
 matrix = []
summ = 0
while True:
    matrix.append(int(input()))
    summ += matrix[-1]
    if matrix[-1] == 0:
        break
matrix = sorted(matrix)
print(summ, matrix[-1], sep = '\n')
 -End,"
 def degree(a, b):
    if b == 0:
        return 1
    elif b == 1:
        return a
    else:
        return a * degree(a, b - 1)

    
basis, indicator = int(input()), int(input())
print(degree(basis, indicator))
 -End,"
 pole, ups, downs = int(input()), int(input()), int(input())
print((pole - ups) // (ups - downs) + int((pole - ups) % (ups - downs) != 0) + 1)
 -End,"
 a, b = int(input()), int(input())
if a > b:
    a, b = b, a
print('Большее число: {1}, меньшее число: {0}'.format(a, b))
 -End,"
 password = input()
result = 'Good password'
buffer = 10
if '0' not in password:
    buffer -= 1
if '1' not in password:
    buffer -= 1
if '2' not in password:
    buffer -= 1
if '3' not in password:
    buffer -= 1
if '4' not in password:
    buffer -= 1
if '5' not in password:
    buffer -= 1
if '6' not in password:
    buffer -= 1
if '7' not in password:
    buffer -= 1
if '8' not in password:
    buffer -= 1
if '9' not in password:
    buffer -= 1
if 'qwerty' in password or '1234' in password:
    result = 'Bad password'
if len(password) < 8 or buffer == 0:
    result = 'Bad password'
print(result)
 -End,"
 first, second, third, catalogue = input(), input(), input(), input()
f, s, t = first in catalogue, second in catalogue, third in catalogue
print('YES' if f and s and t else 'NO') -End,"
 hor1, ver1, hor2, ver2 = [int(input()) for x in range(4)]
result = ''
if abs(hor1 - hor2) == 1 and abs(ver1 - ver2) <= 1:
    if 1 <= hor1 <= 8 and 1 <= hor2 <= 8 and 1 <= ver1 <= 8 and 1 <= ver2 <= 8:
        result = 'YES'
    else:
        result = 'NO'
elif abs(hor1 - hor2) <= 1 and abs(ver1 - ver2) == 1:
    if 1 <= hor1 <= 8 and 1 <= hor2 <= 8 and 1 <= ver1 <= 8 and 1 <= ver2 <= 8:
        result = 'YES'
    else:
        result = 'NO'
else:
    result = 'NO'
print(result)
 -End,"
 x, y = int(input()), int(input())
if x < y:
    print(tuple([x for x in range(x, y)]))
if x > y:
    print(tuple([x for x in range(y, x, 1)]))




 -End,"
 number = int(input())
print(tuple(range(number // 2 * 2 + number % 2 * 2, number * 10 + 1, 2))) -End,"
 a, b = int(input()), int(input())
for counter in range(a, b, -1):
    print(counter)
 -End,"
 number = int(input())
colors = {1 : 'Красный', 2 : 'Оранжевый', 3 : 'Желтый', 4 : 'Зеленый', 5 : 'Голубой', 6 : 'Синий', 7 : 'Фиолетовый'}
if number in colors.keys():
    for counter in range(1, number + 1):
        print(colors[counter])
else:
    print('Радуга состоит только из семи цветов')
 -End,"
 number = int(input())
sequence = []
for counter in range(number):
    if counter < 2:
        sequence.append(1)
    else:
        sequence.append(sequence[counter - 2] + sequence[counter - 1])
    print(sequence[-1], end = ' ')
 -End,"
 number = int(input())
result = 'Простое'
for counter in range(number // 2 + number % 2 + 1, 1, -1):
    if number % counter == 0:
        result = 'Составное'
        break
print(result)




 -End,"
 number = int(input())
strs = [input() for x in range(number)]
rats = 0
allrats = 0
for coun in range(len(strs)):
    for coun2 in range(len(strs[coun]) - 2):
        if strs[coun][coun2] + strs[coun][coun2 + 1] + strs[coun][coun2 + 2] == 'rat':
            rats = 1
    if rats == 1:
        print(coun + 1)
        allrats += 1
        rats = 0
if allrats == 0:
    print(-1)
 -End,"
 number = int(input())
strings = [input() for x in range(number)]
buffer = -1
for counter in range(len(strings)):
    if 'rat' in strings[counter]:
        buffer = counter + 1
        break
print(buffer)
 -End,"
 number = int(input())
nod = number
for counter in range(2, number // 2 + number % 2 + 1):
    if number % counter == 0:
        nod = counter
        break
print(nod)
 -End,"
 number = int(input())
numbers = sorted(tuple([int(input()) for x in range(number)]))
result = numbers[0]
for counter in numbers:
    if counter % numbers[0] != 0:
        result = 1
        break
buffer = 1
if result == 1:
    for counter in range(2, round(numbers[0] ** 0.5) + 1):
        buffer = 1
        for counter2 in numbers:
            if counter2 % counter != 0:
                buffer = 0
        if buffer == 1:
            result = counter
print(result)
 -End,"
 number = int(input())
numbers = tuple([int(input()) for x in range(number)])
maxn, minn, nod = numbers[0], numbers[0], 1
for counter in numbers:
    if counter < minn:
        minn = counter
    if counter > maxn:
        maxn = counter
if maxn % minn == 0:
    nod = minn
else:
    for counter in range(2, round(minn ** 0.5) + 1):
        if minn % counter == maxn % counter == 0:
            nod = counter
print(nod)
simple = 'YES'
if nod == 1:
    simple = 'NO'
for counter in range(2, round(nod ** 0.5) + 1):
    if nod % counter == 0:
        simple = 'NO'
print(simple)
 -End,"
 # Числа, введенные через пробел, сохраняются в кортеж numbers. 
# Используются еще не пройденные функции, поэтому данная строчка написана за вас.
numbers = tuple(map(int, input().split()))
# Поместите ваш код ниже
result = numbers[0]
for counter in numbers:
    if 100 > counter >= 10 and counter % 3 != 0 and counter > result:
        result = counter
print(result if (result % 3 != 0 and 100 > result >= 10) else 'Не найдено')
 -End,"
 # Числа, введенные через пробел, сохраняются в кортеж numbers. 
# Используются еще не пройденные функции, поэтому данная строчка написана за вас.
numbers = tuple(map(float, input().split()))
# Поместите ваш код ниже
first, second, diff = numbers[0], numbers[1], abs(numbers[0] - numbers[1])
for counter in range(1, len(numbers) - 1):
    if abs(numbers[counter] - numbers[counter + 1]) >= diff:
        first, second, diff = numbers[counter], numbers[counter + 1], abs(numbers[counter] - numbers[counter + 1])
print(first, second)
 -End,"
 numbers = []
while True:
    numbers.append(input())
    if numbers[-1] != '.':
        numbers[-1] = int(numbers[-1])
    else:
        break
for counter in range(len(numbers) - 2, -1, -1):
    if numbers[counter] % 2 == 0:
        print(numbers[counter], end = ' ')
 -End,"
 numbers = []
while True:
    numbers.append(input())
    if numbers[-1] != '.':
        numbers[-1] = int(numbers[-1])
    else:
        break
if len(numbers) % 2 == 0:
    print(numbers[(len(numbers) - 1) // 2])
else:
    print((numbers[(len(numbers) - 1) // 2 - 1] + numbers[(len(numbers) - 1) // 2]) / 2) -End,"
 print('_'.join(input().split()))
 -End,"
 words = [x for x in input().split()]
step, start = int(input()), int(input())
for counter in range(start - 1, len(words), step):
    print(words[counter], end = ' ')
 -End,"
 string = input()
start, ending = 0, 0
for counter in string:
    if counter not in ' \t':
        break
    else:
        start += 1
for counter in string[-1::-1]:
    if counter not in ' \t':
        break
    else:
        ending += 1
print(string[start:len(string) - ending], start + ending, sep = '\n')
 -End,"
 commands, strings = [], []
while True:
    commands.append(input().split(maxsplit = 1))
    if commands[-1][0] == '.':
        break
    else:
        if 'POST' in commands[-1]:
            strings.append(commands[-1][1])
        elif 'GET' in commands[-1]:
            print(strings[-1])
        else:
            del(strings[-1])
print(*strings)
 -End,"
 numbers = [int(x) for x in input().split(', ')]
maxnum, result = numbers[0], 1
for counter in numbers[1:]:
    if counter == maxnum:
        result += 1
    if counter > maxnum:
        result = 1
        maxnum = counter
print(result)
 -End,"
 numbers = [int(x) for x in input().split(', ')]
first = numbers[0]
if first > 0:
    second = first - 1
elif first == 0:
    second = 0
else:
    second = first + 1
for counter in numbers:
    if abs(counter) > abs(first):
        first = counter
for counter in numbers:
    if abs(counter) > abs (second) and abs(counter) < abs(first):
        second = counter
print(second, first)
 -End,"
 series = [int(x) for x in input().split(', ')]
last = int(input())
uniques = []
summ = 0
for counter in series:
    if counter not in uniques:
        uniques.append(counter)
        summ += 1
uniques = sorted(uniques)
for counter in range(len(uniques)):
    if uniques[counter] > last:
        print(summ, uniques[counter], sep = '\n')
        break
 -End,"
 a, b, c = [int(x) for x in input().split()]
numbers = [x ** c for x in range(a, b + 1)]
print(*numbers)
 -End,"
 matrix = [['Константная', 'O(1)'], ['Линейная', 'O(n)'], ['Квадратичная', 'O(n^2)'], ['Кубическая', 'O(n^3)'], ['Логарифмическая', 'O(log n)']]
while True:
    string = input()
    if string == 'Я запомнил':
        print('Молодец, Вася!')
        break
    else:
        for counter in range(len(matrix)):
            if string == matrix[counter][0]:
                print(matrix[counter][1])
 -End,"
 numbers = [int(x) for x in input().split()]
while True:
    backsorted = 1
    for counter in range(len(numbers) - 1):
        if numbers[counter] < numbers[counter + 1]:
            numbers[counter], numbers[counter + 1] = numbers[counter + 1], numbers[counter]
            backsorted = 0
    if backsorted == 1:
        break
print(*numbers)
 -End,"
 # используйте функцию factorial(n)
def factorial(n):
    if n == 1:
        return 1
    else:
        return n * (factorial(n - 1))

matrix = [factorial(int(x)) for x in range(int(input()), int(input()) + 1)]
print(sum(matrix))
 -End,"
 def rplc(n):
    buffer = list(str(abs(n)))
    while True:
        flag = True
        for counter in range(len(buffer) - 1):
            if int(buffer[counter]) < int(buffer[counter + 1]):
                buffer[counter], buffer[counter + 1] = buffer[counter + 1], buffer[counter]
                flag = False
        if flag:
            break
    return int(''.join(buffer))

numbers = [int(input()) for x in range(int(input()))]
buffer = numbers[0]
for counter in numbers:
    if abs(rplc(buffer)) < abs(rplc(counter)):
        buffer = counter
print(buffer)
 -End,"
 def summa(n):
    summ = 0
    while n > 0:
        summ += n % 10
        n //= 10
    return summ

matrix = [int(x) for x in input().split()]
while True:
    flag = True
    for counter in range(len(matrix) - 1):
        if summa(matrix[counter]) > summa(matrix[counter + 1]):
            matrix[counter], matrix[counter + 1] = matrix[counter + 1], matrix[counter]
            flag = False
    if flag:
        break
print(*matrix)
 -End,"
 def binary_to_decimal(bin_n):
    basis = 0
    result = 0
    for counter in str(bin_n)[-1::-1]:
        result += int(counter) * 2 ** basis
        basis += 1
    return result


def decimal_to_binary(n):
    basis = 0
    result = ''
    while n > 0:
        result = str(n % 2) + result
        n //= 2
        basis += 1
    return result -End,"
 def ackerman(m, n):
    if m == 0:
        return n + 1
    if m > 0 and n == 0:
        return ackerman(m - 1, 1)
    return ackerman(m - 1, ackerman(m, n - 1))

second, first = int(input()), int(input())
print(ackerman(first, second))
 -End,"
 def get_length(obj):
    if obj == '':
        return 0
    if obj == []:
        return 0
    if obj == ():
        return 0
    return 1 + get_length(obj[1:])

 -End,"
 def fib(n):
    global fibdic
    if n < 3:
        return 1
    if n in fibdic.keys():
        return fibdic[n]
    fibdic[n] = fib(n - 1) + fib(n - 2)
    return fibdic[n]


fibdic = {} -End,"
 figures = [input() for x in range(2)]
if figures[0] == figures[1] and figures[0] in ['paper', 'rock', 'scissors']:
    print(""It's a tie!"")
elif 'rock' in figures and 'paper' in figures:
    print('Paper wins!')
elif 'rock' in figures and 'scissors' in figures:
    print('Rock wins!')
elif 'scissors' in figures and 'paper' in figures:
    print('Scissors win!')
else:
    print('Invalid input! You have not entered rock, paper or scissors, try again.')
 -End,"
 words = {}
string = input().lower().replace(',', '').replace('.', '').replace('?', '').replace('!', '').split()
word, number = '', 0
for counter in string:
    words[counter] = 1 if counter not in words else words[counter] + 1
    if words[counter] > number:
        word, number = counter, words[counter]
print(word, number)
 -End,"
 files = {}
while True:
    string = input()
    if string == '.':
        break
    string = string.split()
    files[string[0]] = string[1]
while True:
    string = input()
    if string == '.':
        break
    string = string.split()
    if string[2] == 'admin':
        print('Access granted')
    if string[2] == 'experienced':
        if string[1] == 'read' and files[string[0]] != 'confidential':
            print('Access granted')
        elif string[1] == 'edit' and files[string[0]] not in ['settings', 'system']:
            print('Access granted')
        else:
            print('Access denied')
    if string[2] == 'user':
        if files[string[0]] == 'ordinary':
            print('Access granted')
        else:
            print('Access denied')
 -End,"
 phones = {}
while True:
    string = input()
    if string == '.':
        break
    string = string.split(maxsplit = 1)
    if len(string) < 2:
        if string[0] not in phones:
            print('Не найдено')
        else:
            print(*phones[string[0]], sep = ', ')
    else:
        if string[0] not in phones:
            phones[string[0]] = [x for x in string[1].split(', ')]
        else:
            for counter in string[1].split(', '):
                phones[string[0]].append(counter)
 -End,"
 # для Вашего удобства словарь вида ""буква: код Морзе"" уже готов
morze = {'a': '•—', 'b': '—•••', 'c': '—•—•', 'd': '—••', 'e': '•', 'f': '••—•', 'g': '——•', 'h': '••••', 'i': '••', 'j': '•———', 'k': '—•—', 'l': '•—••', 'm': '——', 'n': '—•', 'o': '———', 'p': '•——•', 'q': '——•—', 'r': '•—•', 's': '•••', 't': '—', 'u': '••—', 'v': '•••—', 'w': '•——', 'x': '—••—', 'y': '—•——', 'z': '——••'}
def convert(d, x):
    if x in d.keys():
        return d[x]
    for a, b in d.items():
        if b == x:
            return a

result = ''
string = input().lower()
if '—' not in string and '•' not in string:
    for counter in range(len(string) - 1):
        if string[counter] != ' ':
            result += convert(morze, string[counter])
            if string[counter + 1] != ' ':
                result += ' '
        else:
            result += '\t'
    result += convert(morze, string[-1])
else:
    buffer = string.split('\t')
    for counter in buffer:
        for counter2 in counter.split():
            result += convert(morze, counter2)
        result += ' '
print(result)
 -End,"
 bets = {x : ['Предложений не было'] for x in input().split(', ')}
start = int(input())
names = [x for x in input().split(', ')]
for counter in iter(input, 'Аукцион закончен!'):
    if counter.split()[0] in names and int(counter.split()[-1]) >= start:
        for counter2 in bets:
            if counter2 in counter:
                if str(bets[counter2][0]) not in names:
                    bets[counter2].insert(0, counter.split()[0])
                    bets[counter2][1] = int(counter.split()[-1])
                elif int(bets[counter2][1]) < int(counter.split()[-1]):
                    bets[counter2][0] = (counter.split()[0])
                    bets[counter2][1] = int(counter.split()[-1])
for counter in bets:
    print(counter, *bets[counter])
 -End,"
 def check_number(n):
    matrix = '+- ()1234567890'
    digits = 0
    if n.startswith('+7') or n.startswith('8'):
        for counter in n:
            if counter not in matrix:
                return False
            if counter in '1234567890':
                digits +=1
        if digits != 11:
            return False
        else:
            return True
    else:
        return False

def mod_number(n):
    n = n.replace('+', '').replace('(', '').replace(')', '').replace(' ', '').replace('-', '')
    number = '+7 (' + n[1:4] + ') ' + n[4:7] + '-' + n[7:9] + '-' + n[9:]
    return number

phonebook = {}
for counter in iter(input, '.'):
    if ' ' in counter:
        if counter.split()[0] not in phonebook:
            phonebook[counter.split()[0]] = []
        phones = counter.split(maxsplit = 1)[1]
        for phone in phones.split(', '):
            if check_number(phone):
                phonebook[counter.split()[0]].append(mod_number(phone))
    else:
        if counter.split()[0] not in phonebook or phonebook[counter.split()[0]] == []:
            print('Не найдено')
        else:
            print(*phonebook[counter.split()[0]], sep = ', ')
 -End,"
 excluded = '.,;:""!?()-\' \t1234567890'
letters = {}
string = input()
result = ''
for counter in iter(input, '.'):
    letters[counter.split(': ')[0]] = int(counter.split(': ')[1])

def check_number(n):
    global letters, excluded, string
    for letter, number in letters.items():
        if string.count(n) == number:
            return letter

for counter in string:
    if counter in excluded:
        result += counter
    else:
        result += check_number(counter)
print(result)
 -End,"
 a = int(input())
print(a//60)
print(a%60)




 -End,"
 a = int(input())
hours = int(input())
mins = int(input())
a = a + hours * 60 + mins
print(a // 60)
print(a % 60)




 -End,"
 y = int(input())
if y % 400 == 0:
  print('Високосный')
elif y % 100 == 0:
  print('Обычный')
elif y % 4 == 0:
  print('Високосный')
else:
  print('Обычный')



 -End,"
 a = int(input())
if (-15 < a <= 12) or (14 < a < 17) or (19 <= a):
  print('True')
else:
    print('False')



 -End,"
 a = float(input())
b = float(input())
c = input()
if c == '+':
  print(a + b)
elif c == '-':
    print(a - b)
elif c == '/':
  if b == 0:
    print(""Деление на 0!"")
  else:
    print(a / b)
elif c == '*':
  print(a * b)
elif c == 'mod':
  if b == 0:
    print(""Деление на 0!"")
  else:
    print(a % b)
elif c == 'pow':
  print (a ** b)
elif c == 'div':
  if b == 0:
    print(""Деление на 0!"")
  else:
    print(a // b)




 -End,"
 tip = str(input())
if tip == 'треугольник':
  a = int(input())
  b = int(input())
  c = int(input())
  p = (a + b + c)/2
  print((p*(p-a)*(p-b)*(p-c))**0.5)
elif tip == 'прямоугольник':
  a = int(input())
  b = int(input())
  print(float(a*b))
elif tip == 'круг':
  r = int(input())
  print(3.14*r**2)



 -End,"
 a = int(input())
b = int(input())
c = int(input())
if a > b:
  max = a
  if b > c:
    min = c
    ost = b
  else:
    min = b
    if a > c:
      ost = c
    else:
      max = c
      ost = a
elif b > c:
  max = b
  if a > c:
    min = c
    ost = a
  else:
    min = a
    ost = c
else:
  max = c
  min = a
  ost = b
print(max)
print(min)
print(ost) -End,"
 n = int(input())
t1 = n % 10
t2 = n % 100
if (t1 == 1) and not (t2 == 11):
  print(n, ""программист"")
elif (1 < t1 < 5) and not (11 < t2 < 15):
  print(n, ""программиста"")
else:
  print(n, ""программистов"")





 -End,"
 n = int(input())
if (n//100000 + (n//10000 - (n//100000 * 10)) + (n//1000 - (n//10000 * 10))) == ((n//100 - (n//1000 * 10)) + (n//10 - (n//100 * 10)) + n%10):
  print(""Счастливый"")
else:
  print(""Обычный"")





 -End,"
 a = int(input())
s = 0
while a != 0:
  s = s + a
  a = int(input())
print(s)
 -End,"
 a = int(input())
b = int(input())
gr = min(a,b)
i = 1
nod = 1
while i <= gr:
  if (a%i == 0) and (b%i == 0):
    nod = i
  i += 1
d = int((a*b)/nod)
print(d)
 -End,"
 a = 0
while a <= 100:
  if a >= 10:
    print(a)
  a = int(input())
 -End,"
 N = int(input())
p = int(input())
ch = int(input())
t = int(input())
d = int(input())
print((p*5 + ch*4 + t*3 + d*2)/N)
 -End,"
 a = int(input())
b = int(input())
c = int(input())
d = int(input())
print('', end='\t')
for i in range(c, d+1):
  print(i, end='\t')
print()
for j in range(a, b+1):
  print(j, end='\t')
  for k in range(c, d+1):
    print(j*k, end='\t')
  print()
 -End,"
 a = int(input())
b = int(input())
s = 0
n = 0
for j in range(a, b+1):
  if j%3 == 0:
    s = s + j
    n = n + 1
print(s/n)
 -End,"
 a = input().lower()
print((a.count('c') + a.count('g'))/len(a)*100)
 -End,"
 s = input()
j = s[0]
n = 0
t = ''
for i in s:
  if i == j:
    n += 1
  else:
    t = t + j + str(n)
    j = i
    n = 1
t = t + j + str(n)
print(t)
 -End,"
 a = abs(int(input()))
b = abs(int(input()))
P = (a + b) * 2
S = a * b
print(S)
print(P)
 -End,"
 print(int(input()) * 60 + int(input()))
 -End,"
 print(sum(int(i) for i in input().split()))
 -End,"
 a = int(input())
b = int(input())
c = int(input())
p = (a + b + c)/2
S = (p*(p-a)*(p-b)*(p-c))**0.5
print(S)
 -End,"
 a = [int(i) for i in input().split()]
b = ''
if len(a) == 1:
  b = str(a[0])
else:
  for i in range(0, len(a)):
    b = b + str(a[i-1] + a[(i+1)%len(a)]) + ' '
print(b)
 -End,"
 a = [i for i in input().split()]
a.sort()
b = ''
n = 0
j = ''
for i in a:
  if j == i:
    n += 1
  else:
    if n > 0:
      b = b + j + ' '
      n = 0
    j = i
if n > 0:
  b = b + j
print(b)
 -End,"
 a = [i for i in input().split()]
b = []
for i in a:
  if (a.count(i) > 1) and (i not in b):
    b.append(i)
    print(i, end=' ')
 -End,"
 #дано:
a, b = input().split() #число киловатт-часов потребляемых холодильником и телевизором в сутки
n = input() #число суток 
#преобразуем введённые данные в числа с плавающей точкой
a, b = float(a), float(b)
#преобразуем введённые данные в целые числа
n = int(n)
#решение и ответ: написать алгебраическое выражение для решения этой задачи
print((a+b)*n*2.7) -End,"
 #дано:
n = input() #сумма вклада банк
x = input() #годовой процент
#преобразуем введённые данные в целые числа
n = int(n)
x = int(x)
#решение и ответ: написать алгебраическое выражение для решения этой задачи
print(int((n*(1 + x/100)*100))/100) -End,"
 t1,v1 = (float(i) for i in input().split())
t2,v2 = (float(i) for i in input().split())
print(t1*v1 + t2*v2)
 -End,"
 s1,t1 = (int(i) for i in input().split())
s2,t2 = (int(i) for i in input().split())
print((s1 + s2) / (t1 + t2))
 -End,"
 t1,v1 = (float(i) for i in input().split())
t2,v2 = (float(i) for i in input().split())
print((t1*v1 + t2*v2) / (t1 +t2))
 -End,"
 n = int(input())
i = 1
j = 1
if n != 0:
  while i <= n:
    for k in range(1, j+1):
      print(str(j), end=' ')
      i += 1
      if i > n:
        break
    j += 1

 -End,"
 x,y = (int(i) for i in input().split())
print(x//y, x%y)
 -End,"
 a,b = (int(i) for i in input().split())
n = int(input())
price = a*100 + b
print(price*n//100, price*n%100)
 -End,"
 print(input()[0])
 -End,"
 a,b,c,d,e,f = input()
print(int(a) + int(b) + int(c) + int(d) + int(e) + int(f))
 -End,"
 a,b,c = input()
print(int(a) + int(b), int(b) + int(c), sep='')




 -End,"
 a,b,c,d = input()
print(int(a) + int(b), int(c) + int(d), sep='')
 -End,"
 a,b,c,d = input()
print(int(a) + int(d), int(b) + int(c), sep='')





 -End,"
 a, b, c, d, e = input()
print(int(a) + int(c) + int(e), int(b) + int(d), sep='')
 -End,"
 n = int(input())
print(n//(60*60))
 -End,"
 n = int(input())
print((n - n//3600*3600)//60)
 -End,"
 A = bool(input() == ""False"")
B = bool(input() == ""True"")
C = bool(input() == ""False"")
print(A or ( not C and B))
 -End,"
 a = int(input())
if (-15 < a <= 12) or (14 < a < 17) or (19 <= a):
    print ('Yes')
else:
    print('No')
 -End,"
 a,b,c,d,e,f = input()
if (int(a) + int(b) + int(c)) == (int(d) + int(e) + int(f)):
    print('Счастливый')
else:
    print('Обычный')
 -End,"
 x1 = int (input ())
y1 = int (input ())
x2 = int (input ())
y2 = int (input ())
if (x1 == x2) or (y1 == y2):
    print('YES')
else:
    print('NO')
 -End,"
 n = int(input())
if n%400 != 0:
  if n%100 == 0:
    print('Обычный')
  else:
    if n%4 != 0:
      print('Обычный')
    else:
      print('Високосный')
else:
  print('Високосный')
 -End,"
 x1 = int(input())
y1 = int(input())
x2 = int(input())
y2 = int(input())
if (abs(x1-x2) == 2 and abs(y1-y2) == 1) or (abs(x1-x2) == 1 and abs(y1-y2) == 2):
    print('YES')
else:
    print('NO')
 -End,"
 x1 = int(input())
y1 = int(input())
x2 = int(input())
y2 = int(input())
x3 = int(input())
y3 = int(input())
if (x1 <= x3 <= x2) and (y1 >= y3 >= y2):
    print('Точка принадлежит прямоугольнику')
else:
    print('Точка не принадлежит прямоугольнику')
 -End,"
 x1 = int(input())
y1 = int(input())
x2 = int(input())
y2 = int(input())
if (abs(x1 - x2) <= 1) and (abs(y1 - y2) <= 1):
    print('YES')
else:
    print('NO')
 -End,"
 N = int(input())
M = int(input())
K = int(input())
if (K%N == 0) or (K%M == 0):
    print('YES')
else:
    print('NO')
 -End,"
 lst = input().split()
x = input()
n = 0
for i in range(0, len(lst)):
  if lst[i] == x:
    n = 1
    print(i, end=' ')
if n == 0:
  print('Отсутствует')
 -End,"
 lst = input().split()
x = input()
if x in lst:
  for i in range(0, len(lst)):
    if lst[i] == x:
      print(i, end=' ')
else:
  print('Отсутствует')
 -End,"
 b = []
c = []
d = []
a = input()
while a != 'end':
  b = a.split()
  for i in range(0, len(b)):
    b[i] = int(b[i])
  c.append(b)
  d.append([0]*len(b))
  a = input()
for i in range(0, len(c)):
  for j in range(0, len(c[i])):
    d[i][j] = c[(i-1)%len(c)][j] + c[(i+1)%len(c)][j] + c[i][(j-1)%len(c[i])] + c[i][(j+1)%len(c[i])]
for i in range(0, len(d)):
  for j in range(0, len(d[i])):
    print(d[i][j], end=' ')
  print()
 -End,"
 A = int(input())
B = int(input())
H = int(input())
if A <= H <= B:
    print(""Это нормально"")
elif H < A:
    print(""Недосып"")
elif H > B:
    print(""Пересып"")
     -End,"
 x = float(input())
y = float(input())
op = input()
if (op == '/' or op == 'mod' or op == 'div') and (y == 0.0):
    print('Деление на 0!')
elif op == '+':
    print(x+y)
elif op == '-':
    print(x-y)
elif op == '/':
    print(x/y)
elif op == '*':
    print(x*y)
elif op == 'mod':
    print(x%y)
elif op == 'pow':
    print(x**y)
elif op == 'div':
    print(x//y)
 -End,"
 tip = input()
if tip == 'треугольник':
  a = int(input())
  b = int(input())
  c = int(input())
  p = (a + b + c)/2
  print((p*(p-a)*(p-b)*(p-c))**0.5)
elif tip == 'прямоугольник':
  a = int(input())
  b = int(input())
  print(a*b)
elif tip == 'круг':
  r = int(input())
  print(3.14*r**2)
 -End,"
 n = int(input())
t1 = n % 10
t2 = n % 100
if (t1 == 1) and not (t2 == 11):
  print(n, ""программист"")
elif (1 < t1 < 5) and not (11 < t2 < 15):
  print(n, ""программиста"")
else:
  print(n, ""программистов"")
 -End,"
 n=int(input())
a=[[0 for j in range(n)] for i in range(n)]
x1=0
x2=n
y1=0
y2=n
b=1
c=n**2
while b<=c:
  for i in range(y1,y2):
    a[x1][i]=b
    b+=1
  y2-=1
  if b>c:
    break
  for i in range(x1+1,x2):
    a[i][y2]=b
    b+=1
  x2-=1
  if b>c:
    break 
  for i in range(y2-1,y1-1,-1):
    a[x2][i]=b
    b+=1
  if b>c:
    break
  for i in range(x2-1,x1,-1):
    a[i][y1]=b
    b+=1
  y1+=1
  x1+=1
for i in range(0, n):
  for j in range(0, n):
    print(a[i][j], end=' ')
  print()
 -End,"
 def f(x):
    if x <= -2:
        return 1 - (x+2)**2
    elif -2 < x <= 2:
        return -x/2
    elif x> 2:
        return (x-2)**2 + 1
 -End,"
 def modify_list(l):
    for i in range(len(l)-1, -1, -1):
      if l[i]%2 != 0:
          l.remove(l[i])
      else:
          l[i] = int(l[i]/2)
 -End,"
 n = abs(int(input()))
s = 0
while n > 0:
    s = s + n%10
    n = n//10
print(s)
 -End,"
 n = int(input())
s = 1
if n == 2:
  s = 0
else:
  if n%2 != 0:
    s = 0
    for i in range(3, int(n**0.5) + 2, 2):
      if n%i == 0:
        s = 1
        break
  else:
    s = 1  
if s == 0:
    print('Введённое число является простым')
else:
    print('Введённое число не является простым')
 -End,"
 s = 0
while True:
    a = int(input())
    if a == 0:
        break
    else:
        s = s + a
print(s)
 -End,"
 x = int(input())
y = int(input())
p = min(x, y)
n = 2
m = x * y
while n <= p:
  if (x%n == 0) and (y%n == 0):
    m = m/n
    x = x/n
    y = y/n
  else:
    n += 1
print(int(m))
 -End,"
 x = int(input())
y = int(input())
while True:
  if (x == 0) or (y == 0):
    break
  if x > y:
    x = x%y
  else:
    y = y%x
print(int(x+y))
 -End,"
 n = int(input())
while n <= 100:
    if n >= 10:
        print(n)
    n = int(input())
 -End,"
 n = int(input())
length = 0
while True:
    length += 1
    n //= 10
    if n != 0:
      continue
    else:
      break
print(length)
 -End,"
 n = int(input())
length = 1 if n == 0 else 0
while n !=0:
    length += 1
    n //= 10
print(length)
 -End,"
 s = 1
for i in (1, 4, 7, 10):
    s = s * i
print(s)
 -End,"
 a,b,c,d = int(input()), int(input()), int(input()), int(input())
for i in (a, b, c, d):
    print(i**3)
 -End,"
 a = int(float(input()))
b = int(float(input()))
s = 0
n = 0
if a%3 != 0:
    a = a + 1
    if a%3 != 0:
        a = a + 1
for i in range(a, b+1, 3):
    s = s + i
    n = n + 1
print(s/n)
 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
      if key in d:
          d[key].append(value)
      else:
          if 2*key in d:
              d[2*key].append(value)
          else:
              d[2*key] = [value]
                 -End,"
 b = input().lower().split()
d = {key: b.count(key) for key in b}
for key, value in d.items():
  print(key, value)
 -End,"
 n = int(input())
d = {}
while n > 0:
  a = int(input())
  if a in d.keys():
    print(d[a])
  else:
    d[a] = f(a)
    print(d[a])
  n = n -1
 -End,"
 def f(x):
    if x <= -2:
        return 1 - (x+2)**2
    elif -2 < x <= 2:
        return -x/2
    else:
        return (x-2)**2 + 1
a = f(float(input()))
print(a)
 -End,"
 num = int(input())
phrase = input().strip()

alphabet = ' abcdefghijklmnopqrstuvwxyz'
print('Result: ""{}""'.format(''.join((alphabet[(alphabet.find(c) + num) % len(alphabet)] for c in phrase))))
 -End,"
 lst = input().split()
print(' '.join(sorted(set(filter(lambda x: lst.count(x) > 1, lst)))))
 -End,"
 start, end = map(int, input().split())
for i in range(start, end + 1):
    print('Fizz' * (i % 3 == 0) + 'Buzz' * (i % 5 == 0) or i) -End,"
 n, m = map(int, input().split())
matrix = ((input().split()) for i in range(n))
print('\n'.join((' '.join(t) for t in zip(*matrix))))
 -End,"
 height, width = map(int, input().split())
field = [list(input()) for i in range(height)]
solution = [['.'] * width for j in range(height)]


def get_count(h, w):
    return len(list(filter(lambda x: x == 'X',
                           (field[row][col] for col in ((w - 1) % width, w, (w + 1) % width)
                            for row in ((h - 1) % height, h, (h + 1) % height)))))


for i in range(height):
    for j in range(width):
        if field[i][j] == '.':
            if get_count(i, j) == 3:
                solution[i][j] = 'X'
        else:
            if (get_count(i, j) - 1) in (2, 3):
                solution[i][j] = 'X'

print('\n'.join(''.join(solution[i]) for i in range(height)))
 -End,"
 def encode(input_string):
    start = 0
    for i in range(1, len(input_string)):
        if input_string[i - 1] != input_string[i]:
            yield (i - start, input_string[start])
            start = i
    yield (len(source) - start, input_string[start])


source = input()
print(''.join(('{}{}'.format(l if l != 1 else '', r) for l, r in encode(source)))) -End,"
 num = int(input())
phrase = input().strip()

alphabet = ''.join(map(chr, range(int('1F600', 16), int('1F650', 16))))
print('Result: ""{}""'.format(''.join((alphabet[(alphabet.find(c) + num) % len(alphabet)] for c in phrase))))
 -End,"
 def run(string):
    braces = {')': '(', '}': '{', ']': '['}
    stack = []
    for i, c in enumerate(string, start=1):
        if c in braces.values():
            stack.append((c, i))
        if c in braces and (not stack or braces[c] != stack.pop()[0]):
            return i
    return stack.pop()[1] if stack else 'Success'


if __name__ == '__main__':
    print(run(input()))
 -End,"
 def run():
    size, num_packets = map(int, input().split())
    processing_time = [None] * num_packets
    buffer = []
    total_processing_time = 0
    for i in range(num_packets):
        arrival, duration = map(int, input().split())
        # start of current package processing
        start_time = total_processing_time if total_processing_time > arrival else arrival
        if buffer and arrival >= buffer[0][1]:
            buffer.pop(0)
        if len(buffer) == size:
            processing_time[i] = -1
        else:
            total_processing_time = start_time + duration
            buffer.append((i, total_processing_time))
            processing_time[i] = start_time

    if processing_time:
        for time in processing_time:
            print(time)


if __name__ == '__main__':
    run()
 -End,"
 class Heap:
    def __init__(self, size, heap):
        self.size = size
        self.heap = heap
        self.swaps = []

    @staticmethod
    def parent(i):
        return (i - 1) // 2

    @staticmethod
    def left(i):
        return 2 * i + 1

    @staticmethod
    def right(i):
        return 2 * i + 2

    def __swap(self, i, j):
        self.heap[i], self.heap[j] = self.heap[j], self.heap[i]
        self.swaps.append((i, j))

    def sift_up(self, i):
        while i > 0:
            parent = self.parent(i)
            if self.heap[parent] > self.heap[i]:
                self.__swap(i, parent)
                i = parent
            else:
                break

    def sift_down(self, i):
        while self.left(i) < self.size:
            min_index = i
            left = self.left(i)
            if self.heap[left] < self.heap[min_index]:
                min_index = left
            right = self.right(i)
            if right < self.size and self.heap[right] < self.heap[min_index]:
                min_index = right
            if i != min_index:
                self.__swap(i, min_index)
                i = min_index
            else:
                break

    def build_heap(self):
        for i in range((self.size - 1) // 2, -1, -1):
            self.sift_down(i)

        self.__print_result()

    def __print_result(self):
        print(len(self.swaps))
        for pair in self.swaps:
            print(*pair)


def run():
    size = int(input())
    array = list(map(int, input().split()))
    heap = Heap(size, array)
    heap.build_heap()


if __name__ == '__main__':
    run()
 -End,"
 class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.parent = None
        self.sum = key

    def __str__(self):
        return str(self.key)

    def __repr__(self):
        return self.key


def key_func(x, last_sum):
    return (x + last_sum) % 1000000001


def update_sum(node):
    sum_left = sum_right = 0
    if node is not None:
        if node.left is not None:
            sum_left = node.left.sum
        if node.right is not None:
            sum_right = node.right.sum
        node.sum = node.key + sum_left + sum_right


def set_parent(child, parent):
    if child is not None:
        child.parent = parent


def keep_parent(v):
    set_parent(v.left, v)
    set_parent(v.right, v)


def rotate(parent, child):
    grandparent = parent.parent
    if grandparent:
        if grandparent.left == parent:
            grandparent.left = child
        else:
            grandparent.right = child

    if parent.left == child:
        parent.left, child.right = child.right, parent
    else:
        parent.right, child.left = child.left, parent
    update_sum(parent)
    update_sum(child)
    keep_parent(child)
    keep_parent(parent)
    child.parent = grandparent


def splay(v):
    while v.parent:
        parent = v.parent
        grandparent = parent.parent
        if grandparent is None:
            rotate(parent, v)
            break
        else:
            if (grandparent.left == parent) and (parent.left == v) \
                    or (grandparent.right == parent) and (parent.right == v):
                rotate(grandparent, parent)
                rotate(parent, v)
            else:
                rotate(parent, v)
                rotate(grandparent, v)
    return v


def find(v, key):
    while v:
        if key < v.key and v.left:
            v = v.left
        elif key > v.key and v.right:
            v = v.right
        else:
            return splay(v)
    return v


def split(root, key):
    if root is None:
        return None, None
    root = find(root, key)
    if root.key <= key:
        right, root.right = root.right, None
        set_parent(right, None)
        update_sum(root)
        return root, right
    else:
        left, root.left = root.left, None
        set_parent(left, None)
        update_sum(root)
        return left, root


def insert(root, key):
    left, right = split(root, key)
    root = Node(key)
    root.left, root.right = left, right
    keep_parent(root)
    update_sum(root)
    return root


def get_max(root):
    while root.right:
        root = root.right
    return root


def merge(left, right):
    if right is None:
        return left
    if left is None:
        return right
    left = get_max(left)
    splay(left)
    left.right = right
    set_parent(right, left)
    update_sum(left)
    return left


def remove(root, key):
    root = find(root, key)
    set_parent(root.left, None)
    set_parent(root.right, None)
    root = merge(root.left, root.right)
    return root


def sum_of_seg(root, l, r):
    left_left, right_left = split(root, l - 1)
    left_right, right_right = split(right_left, r)
    res = 0
    if left_right:
        res = left_right.sum
    return res, merge(left_left, merge(left_right, right_right))


def run():
    number = int(input())
    last_sum = 0
    root = None
    cache = set()
    for _ in range(number):
        parts = input().split()
        if parts[0] == '+':
            val = key_func(int(parts[1]), last_sum)
            if val not in cache:
                cache.add(val)
                root = insert(root, val)
        elif parts[0] == '-':
            val = key_func(int(parts[1]), last_sum)
            if val in cache:
                cache.remove(val)
                root = remove(root, val)
        elif parts[0] == '?':
            val = key_func(int(parts[1]), last_sum)
            root = find(root, val)
            if root and root.key == val:
                print('Found')
            else:
                print('Not found')
        elif parts[0] == 's':
            left = key_func(int(parts[1]), last_sum)
            right = key_func(int(parts[2]), last_sum)
            last_sum, root = sum_of_seg(root, left, right)
            print(last_sum)


if __name__ == '__main__':
    run()
 -End,"
 class Node:
    """""" Класс для представления узла дерева Хаффмана """"""
    def __init__(self, key, value=0):
        self.key = key
        self.value = value
        self.left = None
        self.right = None

    def __eq__(self, other):
        if not isinstance(other, Node):
            return False
        return self.value.__eq__(other.value)

    def __lt__(self, other):
        if not isinstance(other, Node):
            return False
        return self.value.__lt__(other.value)

    def __repr__(self):
        return 'key: {}, value: {}, left: {}, right: {}'.format(self.key, self.value, self.left, self.right)


def build_tree(freq):
    """""" Постоение двоичного дерева Хаффмана """"""
    from heapq import heappush, heappop
    heap = []
    for k, v in freq.items():
        heappush(heap, Node(k, v))
    while len(heap) > 1:
        left = heappop(heap)
        right = heappop(heap)
        parent = Node(None, left.value + right.value)
        parent.left = left
        parent.right = right
        heappush(heap, parent)
    return heappop(heap)


def build_code_map(root):
    """""" In-order обход дерева для построения кодов символов""""""
    code_map = {}
    stack = []
    path = ''
    node = root
    while len(stack) or node:
        if node:
            stack.append((node, path))
            node = node.left
            path += '0'
        else:
            node, path = stack.pop()
            if node.key:
                code_map[node.key] = path or '0'
            node = node.right
            path += '1'
    return code_map


def run():
    freq = {}
    source = input()
    for c in source:
        freq[c] = freq.get(c, 0) + 1
    root = build_tree(freq)
    code_map = build_code_map(root)
    result = ''.join((code_map[c] for c in source))
    print(len(code_map), len(result))
    for c in sorted(code_map.keys()):
        print(c, code_map[c])
    print(result)


if __name__ == '__main__':
    run()
 -End,"
 def main():
    n = int(input())
    array = list(map(int, input().split()))
    d = [1] * n
    for i in range(n):
        for j in range(i):
            if not array[i] % array[j]:
                d[i] = max(d[i], d[j] + 1)
    print(max(d))


if __name__ == '__main__':
    main()
 -End,"
 def main():
    _ = int(input())
    stairs = [0] + list(map(int, input().split()))
    for i in range(2, len(stairs)):
        stairs[i] += max(stairs[i - 1], stairs[i - 2])
    return stairs[-1]


if __name__ == '__main__':
    print(main())
 -End,"
 def main():
    n = int(input())

    """""" Заполняем массив со значениями минимального количества операций """"""
    d = [0] * (n + 1)
    for i in range(2, n + 1):
        d[i] = d[i - 1]
        if i % 2 == 0:
            d[i] = min(d[i], d[i // 2])
        if i % 3 == 0:
            d[i] = min(d[i], d[i // 3])
        d[i] += 1
    print(d[n])

    """""" Восстанавливаем последовательность промежуточных чисел """"""
    i = n
    ans = [i]
    while i > 1:
        if d[i] == d[i - 1] + 1:
            ans.append(i - 1)
            i -= 1
            continue
        if i % 2 == 0 and d[i] == d[i // 2] + 1:
            ans.append(i // 2)
            i //= 2
            continue
        if i % 3 == 0 and d[i] == d[i // 3] + 1:
            ans.append(i // 3)
            i //= 3
            continue
    print(' '.join(map(str, reversed(ans))))


if __name__ == '__main__':
    main()
 -End,"
 # put your python code here
def move_tower(height, source, target, helper):
    if height >= 1:
        move_tower(height - 1, source, helper, target)
        print('{} - {}'.format(source, target))
        move_tower(height - 1, helper, target, source)

if __name__ == '__main__':
    move_tower(int(input()), 1, 3, 2) -End,"
 # put your python code here
import sys


def area_of_triangle(a, b, c):
    p = (a + b + c) / 2
    return (p * (p - a) * (p - b) * (p - c)) ** 0.5


def area_of_rectangle(a, b):
    return a * b


def area_of_circle(r):
    pi = 3.14
    return pi * r * r


AREAS = {'triangle': area_of_triangle,
         'rectangle': area_of_rectangle,
         'circle': area_of_circle}

shape, *sides = sys.stdin.read().splitlines()
sides = tuple(map(float, sides))
print(AREAS[shape](*sides))
 -End,"
 # put your python code here
def is_jolly(array):
    diffs = set()
    for i in range(len(array)-1):
        diffs.add(abs(array[i]-array[i+1]))
    if diffs == set(range(1, len(array))):
        return True
    return False


if __name__ == '__main__':
    print('Jolly' if is_jolly(tuple(map(int, input().split()))) else 'Not jolly') -End,"
 def next_state(row, col):
    live_neighbors = 0
    for i in range(3):
        for j in range(3):
            """""" Пропускаем саму ячейку """"""
            if i == 1 and j == 1:
                continue
            if cells[(row - 1 + i) % height][(col - 1 + j) % width] == 'X':
                live_neighbors += 1
    if cells[row][col] == '.' and live_neighbors == 3:
        return 'X'
    if cells[row][col] == 'X' and live_neighbors not in (2, 3):
            return '.'
    return cells[row][col]


height, width = map(int, input().split())
cells = tuple(tuple(input()) for _ in range(height))
cells_next_state = [[0] * width for _ in range(height)]
for i in range(height):
    for j in range(width):
        cells_next_state[i][j] = next_state(i, j)
print('\n'.join((''.join(line) for line in cells_next_state))) -End,"
 # put your python code here
WIDTH, HEIGHT = 4, 7

middle = WIDTH - 2
top = (HEIGHT - 3) // 2
bottom = HEIGHT - 3 - top

digits = {
    '1': '{}{}{}{}{}'.format(
        '{}{}{}'.format(' ', ' ' * middle, ' '),
        '{}{}{}'.format(' ', ' ' * middle, '|') * top,
        '{}{}{}'.format(' ', ' ' * middle, ' '),
        '{}{}{}'.format(' ', ' ' * middle, '|') * bottom,
        '{}{}{}'.format(' ', ' ' * middle, ' ')),
    '2': '{}{}{}{}{}'.format(
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format(' ', ' ' * middle, '|') * top,
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format('|', ' ' * middle, ' ') * bottom,
        '{}{}{}'.format(' ', '-' * middle, ' ')),
    '3': '{}{}{}{}{}'.format(
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format(' ', ' ' * middle, '|') * top,
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format(' ', ' ' * middle, '|') * bottom,
        '{}{}{}'.format(' ', '-' * middle, ' ')),
    '4': '{}{}{}{}{}'.format(
        '{}{}{}'.format(' ', ' ' * middle, ' '),
        '{}{}{}'.format('|', ' ' * middle, '|') * top,
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format(' ', ' ' * middle, '|') * bottom,
        '{}{}{}'.format(' ', ' ' * middle, ' ')),
    '5': '{}{}{}{}{}'.format(
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format('|', ' ' * middle, ' ') * top,
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format(' ', ' ' * middle, '|') * bottom,
        '{}{}{}'.format(' ', '-' * middle, ' ')),
    '6': '{}{}{}{}{}'.format(
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format('|', ' ' * middle, ' ') * top,
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format('|', ' ' * middle, '|') * bottom,
        '{}{}{}'.format(' ', '-' * middle, ' ')),
    '7': '{}{}{}{}{}'.format(
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format(' ', ' ' * middle, '|') * top,
        '{}{}{}'.format(' ', ' ' * middle, ' '),
        '{}{}{}'.format(' ', ' ' * middle, '|') * bottom,
        '{}{}{}'.format(' ', ' ' * middle, ' ')),
    '8': '{}{}{}{}{}'.format(
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format('|', ' ' * middle, '|') * top,
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format('|', ' ' * middle, '|') * bottom,
        '{}{}{}'.format(' ', '-' * middle, ' ')),
    '9': '{}{}{}{}{}'.format(
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format('|', ' ' * middle, '|') * top,
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format(' ', ' ' * middle, '|') * bottom,
        '{}{}{}'.format(' ', '-' * middle, ' ')),
    '0': '{}{}{}{}{}'.format(
        '{}{}{}'.format(' ', '-' * middle, ' '),
        '{}{}{}'.format('|', ' ' * middle, '|') * top,
        '{}{}{}'.format(' ', ' ' * middle, ' '),
        '{}{}{}'.format('|', ' ' * middle, '|') * bottom,
        '{}{}{}'.format(' ', '-' * middle, ' ')),
}

line = input()
print('x{}x'.format('-' * (len(line) * (WIDTH + 1) - 1)))
for row in range(HEIGHT):
    print('|{}|'.format(' '.join((digits[ch][row * WIDTH:(row + 1) * WIDTH] for ch in line))))
print('x{}x'.format('-' * (len(line) * (WIDTH + 1) - 1))) -End,"
 inheritance = {}


def is_parent(child, parent):
    return child == parent or any(map(lambda p: is_parent(p, parent), inheritance[child]))


n = int(input())
for _ in range(n):
    line = [s.strip() for s in input().split()]
    inheritance[line[0]] = set() if len(line) == 1 else set(line[2:])

m = int(input())
catched = set()
for _ in range(m):
    current = input()
    for key in inheritance.keys():
        if key in catched and is_parent(current, key):
            print(current)
            break
    catched.add(current) -End,"
 import json

inheritance = dict((obj['name'], set(obj['parents'])) for obj in json.loads(input()))


def is_parent(child, parent):
    return child == parent or any(map(lambda p: is_parent(p, parent), inheritance[child]))


for cls in sorted(inheritance):
    counter = 0
    for other_cls in inheritance:
        if is_parent(other_cls, cls):
            counter += 1
    print('{} : {}'.format(cls, counter)) -End,"
 # put your python code here
import re
import sys

for i, line in enumerate(sys.stdin.read().splitlines(), 1):
    matches = re.findall(r'([a-zA-Z_]\w*)(?= = )', line)
    if matches:
        print(i, matches[0]) -End,"
 # put your python code here
import re
import sys

for i, line in enumerate(sys.stdin.read().splitlines(), 1):
    matches = re.findall(r'([a-zA-Z_]\w*)(?= = )', line)
    if matches:
        print(i, matches[0]) -End,"
 # put your python code here
import re
import sys

for line in sys.stdin.read().splitlines():
    if re.match(r'^(0|1(01*0)*1)*$', line):
        print(line) -End,"
 # put your python code here
import re

pattern = re.compile(r'^(:|;|>:)-?([\]p{}()\[])\2*$')
print(1 if pattern.search(input()) else 0) -End,"
 # put your python code here
rows, _ = map(int, input().split())
print('\n'.join((' '.join(s) for s in zip(*(input().split() for _ in range(rows)))))) -End,"
 # put your python code here
rows, _ = map(int, input().split())
print('\n'.join((' '.join(s) for s in zip(*[input().split() for _ in range(rows)][::-1])))) -End,"
 # put your python code here
rows, cols = map(int, input().split())
matrix = []
for row in range(rows):
    line = list(range(cols * row + 1, cols * (row + 1) + 1))
    if row % 2:
        line.reverse()
    matrix.append(line)
print('\n'.join((''.join(('{:>4}'.format(n) for n in line)) for line in matrix))) -End,"
 # put your python code here
size = int(input())
matrix = [[0] * size for _ in range(size)]
counter = 1
for shift in range(0, size // 2 + 1):
    for i in range(shift, size - shift):
        matrix[shift][i] = counter
        counter += 1
    for i in range(shift + 1, size - shift):
        matrix[i][size - shift - 1] = counter
        counter += 1
    for i in range(size - shift - 1, shift, -1):
        matrix[size - shift - 1][i - 1] = counter
        counter += 1
    for i in range(size - shift - 1, shift + 1, -1):
        matrix[i - 1][shift] = counter
        counter += 1

for line in matrix:
    print(*line) -End,"
 # put your python code here
synonyms = {key: value for key, value in (input().split() for _ in range(int(input())))}
synonyms.update({value: key for key, value in synonyms.items()})
print(synonyms[input()]) -End,"
 # put your python code here
rows, cols = map(int, input().split())
row, col, shift = 0, 0, 0
counter = 1
matrix = [[0] * cols for _ in range(rows)]
while counter <= rows * cols:
    if col < 0 or row >= rows:
        shift += 1
        col = shift if shift < cols else cols - 1
        row = shift - col
        continue
    matrix[row][col] = counter
    counter += 1
    row += 1
    col -= 1

print('\n'.join((''.join(map('{:>4}'.format, line)) for line in matrix))) -End,"
 def karatsuba(a, b):
    if a <= 1 << 12 and b <= 1 << 12:
        return a * b
    else:
        divider = max(a.bit_length(), b.bit_length()) // 2
        left_shift = 1 << divider
        high_a, low_a = a >> divider, a & left_shift - 1
        high_b, low_b = b >> divider, b & left_shift - 1
        z0 = karatsuba(low_a, low_b)
        z1 = karatsuba(high_a, high_b)
        z2 = karatsuba(low_a + high_a, low_b + high_b)
        return z1 * left_shift * left_shift + (z2 - z1 - z0) * left_shift + z0


if __name__ == '__main__':
    number1, number2 = input(), input()
    print(karatsuba(int(number1), int(number2))) -End,"
 # put your python code here
n, m, x, y = (int(input()) for _ in range(4))
print(min(x, y, abs(max(n, m) - y), abs(min(n, m) - x))) -End,"
 # put your python code here
import sys

for line in sys.stdin.read().splitlines():
    print('\n'.join(('{}\t1'.format(word) for word in line.split()))) -End,"
 # put your python code here
def is_ancestor(ancestor, cls):
    return ancestor == cls or any(is_ancestor(ancestor, supercls) for supercls in inheritance[cls])


inheritance = {}
for _ in range(int(input())):
    line = input().split()
    inheritance[line[0]] = set(line[2:])

for _ in range(int(input())):
    print('Yes' if is_ancestor(*input().split()) else 'No') -End,"
 # put your python code here
_ = input()
arr = input().split()
print(sum(arr[:i].count(arr[i]) for i in range(len(arr)))) -End,"
 # put your python code here
n, m = map(int, input().split())
field = [list(input()) for i in range(n)]
solution = [[field[i][j] if field[i][j] == '*' else 0 for j in range(m)] for i in range(n)]

for k in range(n):
    for l in range(m):
        if field[k][l] == '*':
            for i in filter(lambda x: 0 <= x < n, (k - 1, k, k + 1)):
                for j in filter(lambda x: 0 <= x < m, (l - 1, l, l + 1)):
                    if solution[i][j] != '*':
                        solution[i][j] += 1

print('\n'.join((''.join((str(s) for s in line)) for line in solution))) -End,"
 # put your python code here
class Node:
    def __init__(self, key, left=None, right=None):
        self.key = key
        self.left = left
        self.right = right

    def __str__(self):
        return str(self.key)


class BinTree:
    def __init__(self, ):
        self.root = None

    def add(self, value):
        if self.root is None:
            self.root = Node(value)
        else:
            self._add(self.root, value)

    def _add(self, node, value):
        if value <= node.key:
            if node.left is None:
                node.left = Node(value)
            else:
                self._add(node.left, value)
        else:
            if node.right is None:
                node.right = Node(value)
            else:
                self._add(node.right, value)

    def walk(self):
        self.path = []
        self.post_order(self.root)
        print(' '.join(map(str, self.path)))

    def post_order(self, node):
        if node is not None:
            self.post_order(node.left)
            self.post_order(node.right)
            self.path.append(node)


def run():
    _ = int(input())
    tree = BinTree()
    for value in input().split():
        tree.add(int(value))
    tree.walk()


if __name__ == '__main__':
    run()
 -End,"
 # put your python code here
from collections import deque


class Deque(deque):
    def pop(self, *args, **kwargs):
        if super(Deque, self).__len__() > 0:
            return super(Deque, self).pop()
        return -1

    def popleft(self, *args, **kwargs):
        if super(Deque, self).__len__() > 0:
            return super(Deque, self).popleft()
        return -1


d = Deque()
operations = [d.append, d.pop, d.appendleft, d.popleft]
for _ in range(int(input())):
    op, value = map(int, input().split())
    if op in (1, 3):
        operations[op - 1](value)
    if op in (2, 4) and value != operations[op - 1]():
        print('NO')
        break
else:
    print('YES') -End,"
 class multifilter:
    def judge_half(pos, neg):
        # accepts the element, if at least half of the functions accept this element (pos >= neg)
        return pos >= neg

    def judge_any(pos, neg):
        # accepts the element, if at least one of the functions accept it (pos >= 1)
        return pos >= 1

    def judge_all(pos, neg):
        # accepts the element, if at all functions accept it (neg == 0)
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        # iterable - the original sequence
        # funcs - the allowing functions
        # judge - the judging function
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        # returns iterator on the resulting sequence
        for it in self.iterable:
            pos = sum(func(it) for func in self.funcs)
            neg = len(self.funcs) - pos
            if self.judge(pos, neg):
                yield it -End,"
 # put your python code here
from collections import Counter


def get_combination(hands):
    card_values = ('2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A')
    values = {v: k for k, v in enumerate(card_values)}

    hand_values, hand_suits = zip(*((values[c[:-1]], c[-1]) for c in hands.split()))

    subsequents_values = [sorted((i + j) % len(values) for j in range(len(hand_values))) for i in range(len(values))]
    hand_values = sorted(hand_values)

    if len(set(hand_suits)) == 1:
        if hand_values in subsequents_values:
            return 'Royal Flush' if hand_values[0] == len(values) - len(hand_values) else 'Straight Flush'
        else:
            return 'Flush'
    else:
        values_counters = Counter(hand_values).values()

        if 4 in values_counters:
            return 'Four of a Kind'
        elif 2 in values_counters and 3 in values_counters:
            return 'Full House'
        elif hand_values in subsequents_values:
            return 'Straight'
        elif 3 in values_counters:
            return 'Three of a Kind'
        elif len(values_counters) == 3 and 2 in values_counters:
            return 'Two Pairs'
        elif 2 in values_counters:
            return 'Pair'
        else:
            return 'High Card'


print(get_combination(input())) -End,"
 # put your python code here
from collections import Counter


def get_combination(hands):
    values = {v: k for k, v in enumerate(('2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'))}

    hand_values, hand_suits = zip(*((values[c[:-1]], c[-1]) for c in hands.split()))

    subsequents_values = (sorted((i + j) % len(values) for j in range(len(hand_values))) for i in range(len(values)))
    hand_values = sorted(hand_values)

    if len(set(hand_suits)) == 1:
        if hand_values in subsequents_values:
            return 'Royal Flush' if hand_values[0] == len(values) - len(hand_values) else 'Straight Flush'
        else:
            return 'Flush'
    else:
        values_counters = Counter(hand_values).values()

        if 4 in values_counters:
            return 'Four of a Kind'
        elif 2 in values_counters and 3 in values_counters:
            return 'Full House'
        elif hand_values in subsequents_values:
            return 'Straight'
        elif 3 in values_counters:
            return 'Three of a Kind'
        elif len(values_counters) == 3 and 2 in values_counters:
            return 'Two Pairs'
        elif 2 in values_counters:
            return 'Pair'
        else:
            return 'High Card'


print(get_combination(input())) -End,"
 # put your python code here
def check_brackets(line):
    open_brackets = '({['
    close_brackets = ')}]'
    pairs = dict(zip(open_brackets, close_brackets))
    reverse_pairs = dict(zip(close_brackets, open_brackets))

    prefix, stack = '', []
    for c in line:
        if c in open_brackets:
            stack.append(pairs[c])
        elif stack:
            if c != stack[-1]:
                return 'IMPOSSIBLE'
            stack.pop()
        else:
            prefix = reverse_pairs[c] + prefix
    else:
        while stack:
            line = line + stack.pop()
        return prefix + line


print(check_brackets(input())) -End,"
 import numpy as np
mat = np.zeros([3, 4])
np.fill_diagonal(mat, 2)
rng = np.arange(3)
mat[rng, rng+1] = 1
print(np.vstack(mat.flatten())) -End,"
 # put your python code here
class Box:
    def __init__(self, dimensions):
        self.length, self.width, self.height = dimensions

    def __eq__(self, other):
        if isinstance(other, Box):
            return self.length == other.length and self.width == other.width and self.height == other.height
        return False

    def __le__(self, other):
        if isinstance(other, Box):
            return self.length <= other.length and self.width <= other.width and self.height <= other.height
        return False

    def __ge__(self, other):
        if isinstance(other, Box):
            return self.length >= other.length and self.width >= other.width and self.height >= other.height
        return False


box1, box2 = Box(sorted(int(input()) for _ in range(3))), Box(sorted(int(input()) for _ in range(3)))
if box1 == box2:
    print('Boxes are equal')
elif box1 <= box2:
    print('The first box is smaller than the second one')
elif box1 >= box2:
    print('The first box is larger than the second one')
else:
    print('Boxes are incomparable') -End,"
 # put your python code here
import sys
print(*sys.stdin.read().split()[1::2][::-1]) -End,"
 # put your python code here
s, a, b = (input() for _ in range(3))
count = 0
while a in s:
    if a in b:
        count = 'Impossible'
        break
    s = s.replace(a, b)
    count += 1
print(count) -End,"
 # put your python code here
_, a = input(), input().split()
print(*(a[i - 1] for i in range(len(a)))) -End,"
 # put your python code here
def IsPointInSquare(x, y):
    return -1 <= x <= 1 and -1 <= y <= 1


print('YES' if IsPointInSquare(*map(float, (input() for _ in range(2)))) else 'NO') -End,"
 # put your python code here
import itertools


def gen_sequence():
    D = {}
    for q in itertools.count(2):
        p = D.pop(q, None)
        if p is None:
            yield q
            D[q * q] = q
        else:
            x = p + q
            while x in D:
                x += p
            D[x] = p

_ = input()
primes = list(itertools.takewhile(lambda x: x <= 2750159, gen_sequence())) # 2750159 - 200000th prime number
print(*(primes[int(i) - 1] for i in input().split())) -End,"
 # put your python code here
from itertools import combinations


def is_can_beat(queens):
    delta_x = abs(queens[0][0] - queens[1][0])
    delta_y = abs(queens[0][1] - queens[1][1])
    return delta_x == 0 or delta_y == 0 or delta_x == delta_y


print('YES' if any(map(is_can_beat, combinations((tuple(map(int, input().split())) for _ in range(8)), 2))) else 'NO')
 -End,"
 # put your python code here
import re

pattern = re.compile(r'(-?)(\d*)\*?x\^?(\d*)')

powers = {}

for term in pattern.findall(input()):
    sign, c, exp = (x if i == 0 else int(x or 1) for i, x in enumerate(term))
    powers[exp] = powers.setdefault(exp, 0) + (-c if sign == '-' else c)

terms = []
for exp in sorted(powers, reverse=True):
    if exp == 1:
        terms.append('{}'.format(powers[exp]))
    elif exp == 2:
        terms.append('{}*x'.format(powers[exp] * exp))
    else:
        terms.append('{}*x^{}'.format(powers[exp] * exp, exp - 1))

print('+'.join(terms).replace('+-', '-'))
 -End,"
 # put your python code here
movement = {'North': lambda p: (start[0], start[1] + p),
            'South': lambda p: (start[0], start[1] - p),
            'East': lambda p: (start[0] + p, start[1]),
            'West': lambda p: (start[0] - p, start[1])}

start = (0, 0)
for _ in range(int(input())):
    move, distance = input().split()
    start = movement[move](int(distance))

print(*start) -End,"
 # put your python code here
def int_log(n):
    count = 0
    while n >= 2:
        count += 1
        n >>= 1
    return count


for _ in range(int(input())):
    print(int_log(int(input()))) -End,"
 # put your python code here
from math import ceil


def c(n, k):
    res = 1
    for i in range(1, k + 1):
        res *= (n - k + i) / i
    return ceil(res)


print(c(*map(int, input().split())))
 -End,"
 # put your python code here
total, count = 0, 0

while True:
    value = int(input())
    if value == 0:
        break
    total += value
    count += 1


print(total / count) -End,"
 # put your python code here
def koch_turns(step):
    track = ' '
    for i in range(step):
        track = track.replace(' ',' 60 -120 60 ')
    for i in track.split():
        print('turn', i)

koch_turns(int(input()))
 -End,"
 # put your python code here
from itertools import groupby

groups = ((len(list(g)), k) for k, g in groupby(input()))
print(''.join('{}{}'.format(l, r) if l != 1 else r for l, r in groups)) -End,"
 # put your python code here
a, b, c, d = (int(input()) for _ in range(4))
x, y = range(a, b + 1), range(c, d + 1)
print('', *y, sep='\t')
for i in x:
    print(i, *(i * j for j in y), sep='\t') -End,"
 # put your python code here
a, b, c = (float(input()) for _ in range(3))
d = b * b - 4 * a * c
if d >= 0:
    print(*sorted({(-b + d ** 0.5) / 2 / a, (-b - d ** 0.5) / 2 / a})) -End,"
 # put your python code here
s, ss = input(), input()
print(' '.join(str(i) for i in range(len(s)) if s[i:i + len(ss)] == ss) or -1) -End,"
 # put your python code here
n, *seq = map(int, input().split())
print(*(seq[i] + seq[-1 - i] for i in range(n // 2)), seq[n // 2] if n % 2 else '') -End,"
 # put your python code here
from collections import Counter

print('\n'.join(('{}: {}'.format(key, value) for key, value in sorted(Counter(map(len, input().split())).items()))))
 -End,"
 import numpy as np

x_shape = tuple(map(int, input().split()))
X = np.fromiter(map(int, input().split()), np.int).reshape(x_shape)
y_shape = tuple(map(int, input().split()))
Y = np.fromiter(map(int, input().split()), np.int).reshape(y_shape)
del x_shape
del y_shape

# here goes your solution; X and Y are already defined!
try:
    print(X.dot(Y.T))
except ValueError:
    print('matrix shapes do not match') -End,"
 # put your python code here
def max_sub_array(array):
    cur_sum = max_sum = -INF
    for item in array:
        cur_sum = max(item, cur_sum + item)
        max_sum = max(max_sum, cur_sum)
    return max_sum


def max_sub_matrix(matrix):
    max_sum = -INF
    for row in range(len(matrix)):
        partial_sum = [0] * len(matrix[0])
        for row_end in range(row, len(matrix)):
            partial_sum = [x + y for x, y in zip(partial_sum, matrix[row_end])]

            max_sum = max(max_sum, max_sub_array(partial_sum))

    return max_sum


INF = 101
rows, _ = map(int, input().split())
print(max_sub_matrix([tuple(map(int, input().split())) for _ in range(rows)])) -End,"
 # put your python code here
def get_number_of_ways(k, n):
    options = [2 ** i for i in range(k)]

    for i in range(k, n):
        options[i % k] = sum(options)

    return options[(n - 1) % k]


print(get_number_of_ways(*map(int, input().split()))) -End,"
 # put your python code here
from bisect import bisect_right as bisect

n = int(input())
array = list(map(int, input().split()))[::-1]
inf = 10 ** 10
d = [inf] * (n + 1)
d[0] = -inf
pos = [0] * (n + 1)
prev = [0] * n

for i in range(n):
    right = bisect(d, array[i])
    if d[right - 1] <= array[i] <= d[right]:
        d[right] = array[i]
        pos[right] = i
        prev[i] = pos[right - 1]

d = [item for item in d if item not in (inf, -inf)]
answer = [0] * len(d)
p = pos[len(d)]
for j in range(len(d)):
    answer[j] = n - p
    p = prev[p]

print(len(d))
print(*answer) -End,"
 # put your python code here
seq = input()
dp = [1] * (len(seq) + 1)

for i in range(2, len(seq) + 1):
    dp[i] = dp[i - 1] + dp[i - 2] if 10 <= int(seq[i - 2:i]) <= 26 else dp[i - 1]

print(dp[-1]) -End,"
 # put your python code here
rows, cols = (int(x) for x in input().split())
coins = [[int(x) for x in input().split()] for _ in range(rows)]

dp = [[0] * cols for _ in range(rows)]

for row in range(rows):
    for col in range(cols):
        dp[row][col] = ((row and col and min(dp[row - 1][col], dp[row][col - 1])) or
                        (row and dp[row - 1][col]) or
                        (col and dp[row][col - 1])) + coins[row][col]

print(dp[-1][-1]) -End,"
 # put your python code here
stairs = int(input())
marks = [int(x) for x in input().split()]

for stair in range(1, stairs):
    marks[stair] += max(marks[stair - 1], stair >= 2 and marks[stair - 2])

print(marks[-1]) -End,"
 # put your python code here
str_a, str_b = input(), input()
n = len(str_a) + 1
m = len(str_b) + 1
d = [[0] * m for _ in range(n)]

for i in range(n):
    for j in range(m):
        if i == 0:
            d[i][j] = j
        elif j == 0:
            d[i][j] = i
        else:
            d[i][j] = min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + (str_a[i - 1] != str_b[j - 1]))

print(d[-1][-1]) -End,"
 # put your python code here
size = int(input())
seq = [int(x) for x in input().split()]
dp = [1] * size

for i in range(size):
    for j in range(i):
        if not seq[i] % seq[j] and dp[i] < dp[j] + 1:
            dp[i] = dp[j] + 1

print(max(dp)) -End,"
 n = int(input())
if n % 10 == 1 and n % 100 != 11:
    print(n, ' программист')
elif 1 < n % 10 and n % 10 < 5 and n % 100 != 12 and n % 100 != 13 and n % 100 != 14:
    print(n, ' программиста')
else:
    print(n, 'программистов')
 -End,"
 s = input()
i = 0
j = 0
n = 1
while i < len(s):
    while j < len(s) - 1 and s[j] == s[j+1]:
        n += 1
        j += 1
    s = s.replace(s[i:i+n], s[i]+str(n))
    i += 1 + len(str(n))
    j = i
    n = 1
print(s)
 -End,"
 a = sorted([int(i) for i in input().split()])   # сортируем введённый список
i = 1                                           # присваиваем счётчику 1, так как будем идти с конца списка
n = len(a)                                      # вводим изначальную длину списка, чтобы программа каждый раз её не считала
if n == 1:                                      # если список состоит из одного элемента, то
    del a[0]                                    # удаляем его
while i < n:                                    # перебираем список от последнего до второго элемента 
    if a[n-i] != a[n-i-1]:                      # если элемент неравен предыдущему, то
        del a[n-i]                              # удаляем его
        i += 1                                  # переходим к предыдущему элементу
        if i == n:                              # если элемент первый, то
            del a[0]                            # удаляем и его
            break                               # заканчиваем цикл
    elif a[n-i] == a[n-i-1]:                    # если же элемент равен предыдущему, то
        while a[n-i] == a[n-i-1]:               # перебираем равные элементы
            del a[n-i]                          # удаляя каждый, если предыдущий равен ему
            i += 1                              # переходим к предыдущему элементу
            if i == n:                          # если он оказался первым, то
                break                           # заканчиваем цикл
            if i == n - 1:                      # если элемент второй, то
                del a[0]                        # удаляем первый
                i = n                           # переходим на него
                break                           # и заканчиваем цикл
        i += 1                                  # переходим к следующему элементу, чтобы сохранить один из повторяющихся элементов
if len(a) != 0:                                 # если список не пуст, то
    for i in a:                                 # все элементы получившегося списка
        print(i, end=' ')                       # выводим на печать
else:                                           # инече
    print()                                     # выводим пустую строку
 -End,"
 s = 0
p = 0
while True:
    i = int(input())
    p += i * i
    s = s + i
    if s == 0:
        break
print(p)
 -End,"
 n = int(input())
a = [[0 for i in range(n)] for i in range(n)]
k = 1
m = n
i = 0
j = 0
while k <= n**2:
    for s in range(m):
        a[i][j] = k
        k += 1
        j += 1
    i += 1
    j -= 1
    m -= 1
    for s in range(m):
        a[i][j] = k
        k += 1
        i += 1
    i -= 1
    j -= 1
    for s in range(m):
        a[i][j] = k
        k += 1
        j -= 1
    i -= 1
    j += 1
    m -= 1
    for s in range(m):
        a[i][j] = k
        k += 1
        i -= 1
    i += 1
    j += 1
for i in range(n):
    for j in range(n):
        print(a[i][j], end=' ')
    print()
 -End,"
 def modify_list(l):
    n = len(l)
    for i in range(n):
        if l[n-i-1] % 2 == 0:
            l[n-i-1] //= 2
        else:
            del l[n-i-1]
 -End,"
 def update_dictionary(d, key, value):
    if key not in d:
        if 2 * key not in d:
            d[2 * key] = [value]
        else:
            d[2 * key].append(value)
    else:
        d[key].append(value)
 -End,"
 a = [j.lower() for j in input().split()]
d = {i: a.count(i) for i in a}
for k, v in d.items():
    print(k, v)
 -End,"
 n, g, w, d, l, p = int(input()), 0, 0, 0, 0, 0
a = [[i for i in input().split(';')] for j in range(n)]
b = {a[i][j]: [] for i in range(n) for j in range(0, 3, 2)}
for i in b:
    for j in range(n):
        g += a[j].count(i)
        if i in a[j]:
            if a[j][a[j].index(i) + 1] > a[j][a[j].index(i) - 1]:
                w += 1
                p += 3
            elif a[j][a[j].index(i) + 1] < a[j][a[j].index(i) - 1]:
                l += 1
            else:
                d += 1
                p += 1
    b[i] = [str(g), str(w), str(d), str(l), str(p)]
    g, w, d, l, p = 0, 0, 0, 0, 0
for i in b.keys():
    print(i+':', ' '.join(b[i]))
 -End,"
 a = [input() for i in range(4)]
for i in a[2]:
    print(a[1][a[0].index(i)], end='')
print()
for i in a[3]:
    print(a[0][a[1].index(i)], end='')
print()
 -End,"
 a = {input().lower() for i in range(int(input()))}
b = set(sum([[j for j in input().lower().split(' ')] for i in range(int(input()))], []))
for i in b - a:
    print(i)
 -End,"
 def c(n, k):
    return c(n-1, k) + c(n-1, k-1) if k != 0 and k <= n else 1 if k == 0 else 0


print(c(*[int(i) for i in input().split()]))
 -End,"
 cl = {i.split()[0]: i.split()[2:] for i in [input() for _ in range(int(input()))]}
for s in cl:
    for p in cl[s]:
        cl[s].extend(cl[p])
for _ in range(int(input())):
    p, s = input().split()
    if p in cl[s] or p == s:
        print('Yes')
    else:
        print('No')
 -End,"
 def is_parent(parent, child):
    return parent == child or any(map(lambda ch: is_parent(parent, ch), d[child]))
d = {}
a = []
for j in range(2):
    for c in [input().split() for i in range(int(input()))]:
        if j:
            if any(map(lambda pr: is_parent(''.join(pr), ''.join(c)), a)):
                    print(''.join(c))
            a.append(c)
        else:
            d[c[0]] = c[2:]
 -End,"
 k, n = [int(i) for i in input().split()]
a, m = [i for i in range(k)], 1
if a == []:
	pass
else:
	print(*a)
	while a[0] < n - k: 
		while a[k-m] < n-1:
			a[k-m] += 1
			print(*a)
		if len(a) > 1:
			while a[k-m] == a[k-m-1] + 1:
				m += 1
			a[k-m-1] += 1
			for i in range(k-m, k):
				a[i] = a[i-1] + 1
			m = 1
			print(*a)
 -End,"
 n, k = [int(i) for i in input().split()]
a, m = [i for i in range(k)], 1
if k == 1:
	print('\n'.join([str(i) for i in range(n)]))
else:
	while True:
		a[k-1] = -1
		while a[k-1] < n-1:
			a[k-1] += 1
			if len(set(a)) == k:
				print(*a)
		if sum(a) != (n - 1) * k:
			while a[k-m] == a[k-m-1]:
				m += 1
			a[k-m-1] += 1
			for i in range(k-m, k):
				a[i] = 0
			m = 1
		else:
			break
 -End,"
 def primes():
    i = 1
    f = 1
    while True:
        i += 1
        if (f + 1) % i == 0:
            yield i
        f *= i
 -End,"
 def sum2(a, b):
    if isinstance(a, (float, int)) and isinstance(b, (float, int)):
        return a + b
    elif isinstance(b, (float, int)):
        return '1st argument is not a number'
    elif isinstance(a, (float, int)):
        return '2nd argument is not a number'
    else:
        return 'all arguments are not a numbers'
 -End,"
 import sys
import re

[print(s.rstrip()) for s in sys.stdin if len(re.findall('cat', s)) >= 2]
 -End,"
 import sys
import re

[print(s.rstrip()) for s in sys.stdin if re.search(r'\bcat\b', s)]
 -End,"
 import sys
import re

sys.stdout.writelines(re.sub(r'human', 'computer', x) for x in sys.stdin)
 -End,"
 import sys
import re

sys.stdout.writelines(re.sub(r'\ba+\b', 'argh', x, 1, re.I) for x in sys.stdin)
 -End,"
 import sys
import re

sys.stdout.writelines(re.sub(r'\b(\w)(\w)', r'\2\1', s) for s in sys.stdin)
 -End,"
 import sys
import re

sys.stdout.writelines(re.sub(r'(\w)\1+', r'\1', s) for s in sys.stdin)
 -End,"
 import sys
import re

for s in sys.stdin:
    s = s.rstrip()
    k = 0
    for i in re.finditer(r'1', s):
        k += (-1)**i.start()
    if k % 3 == 0 and s.isdigit():
        print(s)
 -End,"
 import requests
import re

a = requests.get(input())
b = input()
k = 'No'
for h in re.findall(r'<a href="".+""', a.text):
    c = requests.get(h[9:-1])
    if c.status_code == 200 and b in c.text:
        k = 'Yes'
print(k)
 -End,"
 import requests
import re

print('\n'.join(sorted(set(re.findall(
    r'<a.+href\s*=\s*[\'""](?:\w*://)?(\w.*?)(?:[/:].*?)?[\'""]',
    requests.get(input()).text, re.I)))))
 -End,"
 import json

childs = {}
parents = {c['name']: c['parents'] for c in json.loads(input())}


def ch_count(x, y):
    for c in parents:
        if y in parents[c]:
            childs[x].append(c)
            ch_count(x, c)


for c in sorted(parents):
    childs[c] = []
    ch_count(c, c)
    print(c, ':', len(set(childs[c]))+1)
 -End,"
 n = int(input())
c = [1]
for i in range(1, n+1):
    c.append(sum([c[k-1]*c[i-k] for k in range(1, i+1)]) % 1000000007)
print(c[n])
 -End,"
 print(*reversed(input().split()), sep='-$-')
 -End,"
 segs = sorted([[int(i) for i in input().split()] for j in range(int(input()))])
dots = []
while segs:
    dots.append(segs[-1][0])
    while segs and dots[-1] <= segs[-1][1]:
        segs.pop()
print(str(len(dots))+'\n'+' '.join(map(str, dots)))
 -End,"
 n, w = [int(i) for i in input().split()]
s = sorted([[int(i) for i in input().split()] for j in range(n)], key=lambda x: x[0]/x[1])
c = 0
while w and s:
    if w >= s[-1][1]:
        c += s[-1][0]
        w -= s[-1][1]
        s.pop()
    else:
        c += w * s[-1][0] / s[-1][1]
        w = 0
print(round(c, 3))
 -End,"
 n, k = int(input()), 1
while n > 0:
    n -= k
    k += 1
print(str(k-1-bool(n))+'\n'+' '.join((str(i) for i in range(1, k) if i != -n)))
 -End,"
 n = int(input())
k = int(((1 + 8 * n) ** 0.5 - 1) // 2)
print(str(k)+'\n'+' '.join(str(i) for i in range(1, k+2) if i != ((2*k+3)**2-1)/8-n))
 -End,"
 def bit(a, b=''):
    if isinstance(a[0], str):
        c[a[0]] = b + '0'
    else:
        bit(a[0], b+'0')
    if isinstance(a[1], str):
        c[a[1]] = b + '1'
    else:
        bit(a[1], b+'1')


s, d, c = input(), {}, {}
for i in s:
    if i not in d:
        d[i] = 1
    else:
        d[i] += 1
n = len(d)
if n > 1:
    while len(d) > 1:
        k1 = min(d.keys(), key=d.get)
        v1 = d.pop(k1)
        k2 = min(d.keys(), key=d.get)
        v2 = d.pop(k2)
        d.update({(k1, k2): v1+v2})
    bit(d.popitem()[0])
else:
    c[s[0]] = '0'
b = ''.join(c[i] for i in s)
print(str(n)+' '+str(len(b))+'\n'+'\n'.join(i+': '+c[i] for i in c)+'\n'+b)
 -End,"
 d, s = {i.split(': ')[1]: i.split(': ')[0] for i in [input() for _ in range(int(input().split()[0]))]}, ''
for i in input():
    s += i
    if s in d:
        print(d[s], end='')
        s = ''
 -End,"
 def siftup(i):
    if i and a[(i-1)//2] < x:
        a[i] = a[(i-1)//2]
        siftup((i-1) // 2)
    else:
        a[i] = x


def siftdown(i):
    j = i
    a[i] = x
    if 2 * j + 1 <= n and a[i] < a[2*j+1]:
        i = 2 * j + 1
    if 2 * j + 2 <= n and a[i] < a[2*j+2]:
        i = 2 * j + 2
    if j != i:
        a[j] = a[i]
        siftdown(i)


a, n = [], -1
for k in range(int(input())):
    c = input().split()
    if c[0] == 'Insert':
        x = int(c[1])
        a.append(x)
        n += 1
        siftup(n)
    elif c[0] == 'ExtractMax':
        print(a[0])
        x = a.pop()
        n -= 1
        if a:
            siftdown(0)
 -End,"
 def inv(a, acc=0):
    b = []
    for k in range(len(a) // 2):
        b.append([])
        i = 0
        j = 0
        while i < len(a[2*k]) and j < len(a[2*k+1]):
            if a[2*k][i] <= a[2*k+1][j]:
                b[-1].append(a[2*k][i])
                i += 1
            else:
                b[-1].append(a[2*k+1][j])
                j += 1
                acc += len(a[2*k]) - i
        for ii in range(i, len(a[2*k])):
            b[-1].append(a[2*k][ii])
        for jj in range(j, len(a[2*k+1])):
            b[-1].append(a[2*k+1][jj])
    if len(a) % 2 == 1:
        b.append(a[-1])
    if len(b) == 1:
        return acc
    else:
        return inv(b, acc)


input()
print(inv([[int(i)] for i in input().split()]))
 -End,"
 a = [0] * 11
input()
for i in input().split():
    a[int(i)] += 1
print(''.join((str(i)+' ')*a[i] for i in range(11) if a[i]))
 -End,"
 n = int(input())
a = [int(i) for i in input().split()]
d, m = [1] * n, 1
for i in range(1, n):
    for j in range(i):
        if a[i] % a[j] == 0 and d[j] + 1 > d[i]:
            d[i] = d[j] + 1
    if d[i] > m:
        m = d[i]
print(m)
 -End,"
 from bisect import bisect
from numpy import inf

n = int(input())
a = [int(i) for i in input().split()]
b, c, d, m = [], [inf] * n, [], 0
for i in a:
    j = bisect(c, -i)
    b.append(j)
    if -i < c[j]:
        c[j] = -i
    if b[-1] > m:
        m = b[-1]
while m + 1:
    if b.pop() == m:
        d.append(len(b)+1)
        m -= 1
print(len(d), ' '.join(str(i) for i in reversed(d)), sep='\n')
 -End,"
 a = ' '+input()
b = ' '+input()
n = len(a)
m = len(b)
d = [[i+j if i == 0 or j == 0 else 0 for i in range(n)] for j in range(m)]
for j in range(1, m):
    for i in range(1, n):
        if a[i] == b[j]:
            d[j][i] = min(d[j-1][i] + 1, d[j][i-1] + 1, d[j-1][i-1])
        else:
            d[j][i] = min(d[j-1][i] + 1, d[j][i-1] + 1, d[j-1][i-1] + 1)
print(d[-1][-1])
 -End,"
 w = int(input().split()[0]) + 1
d = [[0] * w, [0] * w]
k = 0
for i in (int(v) for v in input().split()):
    for j in range(1, w):
        if i > j:
            d[not k][j] = d[k][j]
        else:
            d[not k][j] = max(d[k][j], d[k][j-i] + i)
    k = not k
print(d[k][-1])
 -End,"
 input()
s = [0, 0]
for i in (int(i) for i in input().split()):
    s.append(max(i + s[-1], i + s[-2]))
print(s[-1])
 -End,"
 from numpy import inf

n = int(input())
d = [inf, 0]
s = [str(n)]
for i in range(2, n + 1):
    d.append(min(d[int(i/3) * (not i % 3)], d[int(i/2) * (not i % 2)], d[i-1]) + 1)
for i in range(d[n], 0, -1):
    if d[n-1] == i - 1:
        n -= 1
    elif not n % 2 and d[int(n/2)] == i - 1:
        n = int(n/2)
    else:
        n = int(n/3)
    s.append(str(n))
print(d[-1], ' '.join(reversed(s)), sep='\n')
 -End,"
 from urllib.request import urlopen
import numpy as np

a = np.loadtxt(urlopen(input()), skiprows=1, delimiter=',')
y = a[:, 0]
x = np.hstack((np.ones_like([y]).T, a[:, 1:]))
print(*np.linalg.inv(x.T.dot(x)).dot(x.T).dot(y))
 -End,"
 import numpy as np


n, m = (int(i) for i in input().split())
t = np.array([[float(i) for i in input().split()] for _ in range(n)])
a, b = np.hsplit(t, (m, ))
if np.linalg.matrix_rank(a) != np.linalg.matrix_rank(t):
    print('NO')
elif np.linalg.matrix_rank(a) < m:
    print('INF')
else:
    if n == m:
        print('YES', ' '.join(str(round(*i, 5)) for i in np.linalg.solve(a, b)), sep='\n')
    else:
        x = [0] * m
        c = 0
        while c < m:
            cr = None
            for r in range(c, n):
                if cr is None or abs(t[r][c]) > abs(t[cr][c]):
                    cr = r
            if cr and cr != c:
                t[c], t[cr] = t[cr], t[c]
            t[c] = [i / t[c][c] for i in t[c]]
            for r in range(c+1, n):
                t[r] = [t[r][i] - t[c][i] * t[r][c] for i in range(m+1)]
            c += 1
        for i in range(m-1, -1, -1):
            x[i] = round(t[i][-1] - sum(x * t for x, t in zip(x[i+1:], t[i][i+1:-1])), 5)
        print('YES', ' '.join(str(i) for i in x), sep='\n')
 -End,"
 import numpy as np


n, m = (int(i) for i in input().split())
a, b = np.hsplit(np.array([[float(i) for i in input().split()] for _ in range(n)]), (m, ))
if np.linalg.matrix_rank(a) != np.linalg.matrix_rank(np.hstack((a, b))):
    print('NO')
elif np.linalg.matrix_rank(a) < m:
    print('INF')
else:
    print('YES', ' '.join(str(round(*i, 5)) for i in np.linalg.solve(a[:m], b[:m])), sep='\n')
 -End,"
 import numpy as np


n, m = (int(i) for i in input().split())
a, b = np.hsplit(np.array([[float(i) for i in input().split()] for _ in range(n)]), (m, ))
print(*np.linalg.inv(a.T@a)@a.T@b.flat)
 -End,"
 import numpy as np


def SGD(self, X, y, batch_size, learning_rate=0.1, eps=1e-6, max_steps=200):
    t = np.hstack((X, y))
    for i in range(max_steps):
        batch = np.take(t, np.random.choice(len(t), size=batch_size, replace=None), axis=0)
        if self.update_mini_batch(*np.hsplit(batch, (-1, )), learning_rate, eps):
            return 1
    return 0


def update_mini_batch(self, X, y, learning_rate, eps):
    J = J_quadratic(self, X, y)
    self.w -= compute_grad_analytically(self, X, y) * learning_rate
    return J - J_quadratic(self, X, y) < eps
 -End,"
 from numpy import *


print(*linalg.solve(*hsplit(array([[float(i) for i in input().split()] for _ in range(2)]), [2])).T[0]) -End,"
 from numpy import *


try:
    print(*linalg.solve(*hsplit(array([[float(i) for i in input().split()] for _ in range(3)]), [3])).T[0])
except linalg.LinAlgError:
    print('Система не имеет решений')
 -End,"
 from numpy import *


n = 4
try:
    print(*linalg.solve(*hsplit(array([[float(i) for i in input().split()]
                                       for _ in range(n)]), [n])).T[0])
except linalg.LinAlgError:
    print('Система не имеет решений')
 -End,"
 [print(i) for i in range(int(input())+1)] -End,"
 [print(i**2) for i in range(0, int(input()), 2)]
 -End,"
 [print(i) for i in input().split() if i[0] != '*']
 -End,"
 [print(i**3) for i in range(1, abs(int(input())))]
 -End,"
 import pandas as pd

my_stat.session_value = my_stat.session_value.fillna(value=0)
my_stat.n_users[my_stat.n_users < 0] = my_stat.n_users[my_stat.n_users >= 0].median()
 -End,"
 import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV


param_grid = {
    'max_depth': range(1, 11),
    'min_samples_split': range(2, 11),
    'min_samples_leaf': range(1, 11)}
clf = DecisionTreeClassifier()
search = GridSearchCV(clf, param_grid, cv=5)
search.fit(train.drop('y', axis=1), train.y)
best_tree = search.best_estimator_
predictions = best_tree.predict(test)
 -End,"
 import sys
import numpy as np


def parse_array(s):
    return np.array([int(s.strip()) for s in s.strip().split(' ')])

def read_array():
    return parse_array(sys.stdin.readline())

def calculate_pmi(a, b):
    return np.log(len(a) * (a * b).sum() / a.sum() / b.sum())

a = read_array()
b = read_array()
pmi_value = calculate_pmi(a, b)

print('{:.6f}'.format(pmi_value)) -End,"
 import re
import sys


# модифицируйте это регулярное выражение
TOKENIZE_RE = re.compile(r'[^\w^\d^\s]|[а-яё]+|\d+\.\d+|\d+', re.I)


def tokenize(txt):
    return TOKENIZE_RE.findall(txt)


for line in sys.stdin:
    print(' '.join(tokenize(line.strip().lower()))) -End,"
 import sys
import ast
import numpy as np


def parse_array(s):
    return np.array(ast.literal_eval(s))

def read_array():
    return parse_array(sys.stdin.readline())

def write_array(arr):
    print(repr(arr.tolist()))


def generate_w2v_sgns_samples(text, window_size, vocab_size, ns_rate):
    """"""
    text - list of integer numbers - ids of tokens in text
    window_size - odd integer - width of window
    vocab_size - positive integer - number of tokens in vocabulary
    ns_rate - positive integer - number of negative tokens to sample per one positive sample

    returns list of training samples (CenterWord, CtxWord, Label)
    """"""
    result = []
    for i, center in enumerate(text):
        for j in range(i - (window_size // 2), i + window_size // 2 + 1):
            if j in range(len(text)) and j != i:
                result.append([center, text[j], 1])
                for _ in range(ns_rate):
                    result.append([center, np.random.randint(vocab_size), 0])
    return result


text = read_array()
window_size = int(sys.stdin.readline().strip())
vocab_size = int(sys.stdin.readline().strip())
ns_rate = int(sys.stdin.readline().strip())

result = generate_w2v_sgns_samples(text, window_size, vocab_size, ns_rate)

write_array(np.array(result)) -End,"
 import sys
import ast
import numpy as np


def parse_array(s):
    return np.array(ast.literal_eval(s))


def read_array():
    return parse_array(sys.stdin.readline())


def write_array(arr):
    print(repr(arr.tolist()))


def update_w2v_weights(center_embeddings, context_embeddings,
                       center_word, context_word,
                       label, learning_rate):
    """"""
    center_embeddings - VocabSize x EmbSize
    context_embeddings - VocabSize x EmbSize
    center_word - int - identifier of center word
    context_word - int - identifier of context word
    label - 1 if context_word is real, 0 if it is negative
    learning_rate - float > 0 - size of gradient step
    """"""
    def delta(a, b):
        return (pow(1 + np.exp(-(a * b).sum()), -1) - label) * b * learning_rate

    center_delta = delta(center_embeddings[center_word], context_embeddings[context_word])
    context_delta = delta(context_embeddings[context_word], center_embeddings[center_word])

    center_embeddings[center_word] -= center_delta
    context_embeddings[context_word] -= context_delta


center_embeddings = read_array()
context_embeddings = read_array()
center_word = int(sys.stdin.readline().strip())
context_word = int(sys.stdin.readline().strip())
label = int(sys.stdin.readline().strip())
learning_rate = float(sys.stdin.readline().strip())

update_w2v_weights(center_embeddings, context_embeddings,
                   center_word, context_word, label, learning_rate)

write_array(center_embeddings)
write_array(context_embeddings)
 -End,"
 import sys
import ast
import numpy as np


def read_list():
    return ast.literal_eval(sys.stdin.readline())


def parse_array(s):
    return np.array(ast.literal_eval(s))


def read_array():
    return parse_array(sys.stdin.readline())


def write_array(arr):
    print(repr(arr.tolist()))


def generate_ft_sgns_samples(text, window_size, vocab_size, ns_rate, token2subwords):
    """"""
    text - list of integer numbers - ids of tokens in text
    window_size - odd integer - width of window
    vocab_size - positive integer - number of tokens in vocabulary
    ns_rate - positive integer - number of negative tokens to sample per one positive sample
    token2subwords - list of lists of int - i-th sublist contains list of identifiers
    of n-grams for token #i (list of subword units)
    
    returns list of training samples (CenterSubwords, CtxWord, Label)
    """"""
    result = []
    for i, center in enumerate(text):
        for j in range(i - (window_size // 2), i + (window_size // 2) + 1):
            if j in range(len(text)) and j != i:
                result.append(([center, *set(token2subwords[center])], text[j], 1))
                for _ in range(ns_rate):
                    result.append(
                        ([center, *set(token2subwords[center])], np.random.randint(vocab_size), 0)
                    )
    return result


text = read_array()
window_size = int(sys.stdin.readline().strip())
vocab_size = int(sys.stdin.readline().strip())
ns_rate = int(sys.stdin.readline().strip())
token2subwords = read_list()

result = generate_ft_sgns_samples(text, window_size, vocab_size, ns_rate, token2subwords)

print(repr(result))
 -End,"
 import sys
import ast
import numpy as np


def parse_array(s):
    return np.array(ast.literal_eval(s))


def read_array():
    return parse_array(sys.stdin.readline())


def write_array(arr):
    print(repr(arr.tolist()))


def update_ft_weights(center_embeddings, context_embeddings,
                      center_subwords, context_word,
                      label, learning_rate):
    """"""
    center_embeddings - VocabSize x EmbSize
    context_embeddings - VocabSize x EmbSize
    center_subwords - list of ints - list of identifiers of n-grams contained in center word
    context_word - int - identifier of context word
    label - 1 if context_word is real, 0 if it is negative
    learning_rate - float > 0 - size of gradient step
    """"""
    def delta(a, b):
        return (pow(1 + np.exp(-(a * b).sum()), -1) - label) * b * learning_rate

    center_delta = delta(
        center_embeddings[center_subwords].mean(axis=0),
        context_embeddings[context_word]
        )
    context_delta = delta(
        context_embeddings[context_word],
        center_embeddings[center_subwords].mean(axis=0)
        )

    center_embeddings[center_subwords] -= center_delta / len(center_subwords)
    context_embeddings[context_word] -= context_delta


center_embeddings = read_array()
context_embeddings = read_array()
center_subwords = read_array()
context_word = int(sys.stdin.readline().strip())
label = int(sys.stdin.readline().strip())
learning_rate = float(sys.stdin.readline().strip())

update_ft_weights(center_embeddings, context_embeddings,
                  center_subwords, context_word, label, learning_rate)

write_array(center_embeddings)
write_array(context_embeddings)
 -End,"
 import sys
import ast
import numpy as np
import scipy.sparse


def read_array():
    return ast.literal_eval(sys.stdin.readline())


def write_array(arr):
    print(repr(arr.tolist()))


def generate_coocurrence_matrix(texts, vocab_size):
    """"""
    texts - list of lists of ints - i-th sublist contains identifiers of tokens in i-th document
    vocab_size - int - size of vocabulary
    returns scipy.sparse.dok_matrix
    """"""
    return scipy.sparse.dok_matrix([[sum([i in s and j in s for s in texts if i != j])
                                     for i in range(vocab_size)] for j in range(vocab_size)])


text = read_array()
vocab_size = int(sys.stdin.readline().strip())

result = generate_coocurrence_matrix(text, vocab_size)

write_array(result.toarray())
 -End,"
 import sys
import ast
import numpy as np


def parse_array(s):
    return np.array(ast.literal_eval(s))

def read_array():
    return parse_array(sys.stdin.readline())

def write_array(arr):
    print(repr(arr.tolist()))


def update_glove_weights(x, w, d, alpha, max_x, learning_rate):
    """"""
    x - square integer matrix VocabSize x VocabSize - coocurrence matrix
    w - VocabSize x EmbSize - first word vectors
    d - VocabSize x EmbSize - second word vectors
    alpha - float - power in weight smoothing function f
    max_x - int - maximum coocurrence count in weight smoothing function f
    learning_rate - positive float - size of gradient step
    """"""
    def f(z):
        if z <= max_x:
            return pow(z / max_x, alpha)
        else:
            return 1.0
    
    F = np.apply_along_axis(f, 2, x[..., np.newaxis]).reshape(x.shape)
    Y = np.log(x + 1)

    dw = 2 * F * (w @ d.T - Y) @ d * learning_rate
    dd = (2 * F * (w @ d.T - Y)).T @ w * learning_rate

    w -= dw
    d -= dd


x = read_array()
w = read_array()
d = read_array()
alpha = float(sys.stdin.readline().strip())
max_x = int(sys.stdin.readline().strip())
learning_rate = float(sys.stdin.readline().strip())

update_glove_weights(x, w, d, alpha, max_x, learning_rate)

write_array(w)
write_array(d)
 -End,"
 import sys
import ast
import numpy as np


def parse_array(s):
    return np.array(ast.literal_eval(s))


def read_array():
    return parse_array(sys.stdin.readline())


def write_array(arr):
    print(repr(arr.tolist()))


def apply_convolution(data, kernel, bias):
    """"""
    data - InLen x InChannels
    kernel - OutChannels x InChannels x KernelSize
    bias - OutChannels

    returns OutLen x OutChannels
    """"""
    return np.array(
        [bias[oc] + np.array([sum(sum(data[pos+k, ic] * kernel[oc, ic, k]
        for ic in range(kernel.shape[1]))
        for k in range(kernel.shape[2]))
        for pos in range(data.shape[0] - kernel.shape[2] + 1)])
        for oc in range(kernel.shape[0])]).T


data = read_array()
kernel = read_array()
bias = read_array()

result = apply_convolution(data, kernel, bias)

write_array(result)
 -End,"
 import ast
import sys
import collections
import numpy as np


LayerInfo = collections.namedtuple('LayerInfo', ('kernel_size', 'dilation'))


def parse_array(s):
    return np.array(ast.literal_eval(s))


def read_array():
    return parse_array(sys.stdin.readline())


def calculate_receptive_field(layers):
    """"""
    layers - list of LayerInfo

    returns int - receptive field size
    """"""
    return sum((layer.kernel_size - 1) * layer.dilation for layer in layers) + 1


kernels = read_array()
dilations = read_array()

layers = [LayerInfo(k, d) for k, d in zip(kernels, dilations)]

result = calculate_receptive_field(layers)
print(result)
 -End,"
 import sys
import ast
import numpy as np


def parse_array(s):
    return np.array(ast.literal_eval(s))


def read_array():
    return parse_array(sys.stdin.readline())


def write_array(arr):
    print(repr(arr.tolist()))


def get_nearest(embeddings, query_word_id, get_n):
    """"""
    embeddings - VocabSize x EmbSize - word embeddings
    query_word_id - integer - id of query word to find most similar to
    get_n - integer - number of most similar words to retrieve

    returns list of `get_n` tuples (word_id, similarity) sorted by descending order of similarity value
    """"""
    embeddings /= np.sqrt(np.einsum('...i, ...i', embeddings, embeddings))[..., np.newaxis]
    similarities = - np.sqrt(
        np.square(
            embeddings - embeddings[query_word_id]
        ).sum(axis=1)
    )
    indexes = np.argsort(similarities)[::-1]
    return np.vstack([indexes, similarities[indexes]]).T[:get_n]


embeddings = read_array()
query_word_id = int(sys.stdin.readline().strip())
get_n = int(sys.stdin.readline().strip())

result = get_nearest(embeddings, query_word_id, get_n)

write_array(np.array(result))
 -End,"
 import sys
import ast
import numpy as np


def parse_array(s):
    return np.array(ast.literal_eval(s))

def read_array():
    return parse_array(sys.stdin.readline())

def write_array(arr):
    print(repr(arr.tolist()))


def softmax(x):
    """"""
    x - vector of n elements - input

    returns vector of n elements - softmax output
    """"""
    return np.exp(x) / np.exp(x).sum()


x = read_array()

result = softmax(x)

write_array(result)
 -End,"
 import sys
import ast
import numpy as np


def parse_array(s):
    return np.array(ast.literal_eval(s))

def read_array():
    return parse_array(sys.stdin.readline())

def write_array(arr):
    print(repr(arr.tolist()))


def dsoftmax_dx(x):
    """"""
    x - vector of n elements - input

    returns matrix n x n
    """"""
    sm = np.exp(x) / np.exp(x).sum()
    result = np.zeros((x.size, x.size))
    for i in range(x.size):
        for j in range(x.size):
            if i == j:
                result[i, j] = sm[i] * (1 - sm[i])
            else:
                result[i, j] = - sm[i] * sm[j]
    return result


x = read_array()

result = dsoftmax_dx(x)

write_array(result)
 -End,"
 import sys
import ast
import numpy as np


def parse_array(s):
    return np.array(ast.literal_eval(s))

def read_array():
    return parse_array(sys.stdin.readline())

def write_array(arr):
    print(repr(arr.tolist()))


def self_attention(features, proj_k, bias_k, proj_q, bias_q, proj_v, bias_v):
    """"""
    features - InLen x EmbSize - features of elements of input sequence
    proj_k - EmbSize x EmbSize - projection matrix to make keys from features
    bias_k - EmbSize - bias vector to make keys from features
    proj_q - EmbSize x EmbSize - projection matrix to make queries from features
    bias_q - EmbSize - bias vector to make queries from features
    proj_v - EmbSize x EmbSize - projection matrix to make values from features
    bias_v - EmbSize - bias vector to make values from features

    returns InLen x EmbSize
    """"""
    def softmax(x):
        return np.exp(x) / np.exp(x).sum(axis=1)[..., None]
    
    
    return softmax((features @ proj_q + bias_q) @ (features @ proj_k + bias_k).T) @ (features @ proj_v + bias_v)


features = read_array()
proj_k = read_array()
bias_k = read_array()
proj_q = read_array()
bias_q = read_array()
proj_v = read_array()
bias_v = read_array()

result = self_attention(features, proj_k, bias_k, proj_q, bias_q, proj_v, bias_v)

write_array(result) -End,"
 #import logging.config
from collections import deque

OPEN_BRACKETS = {'(': 0, '{': 1, '[': 2}
CLOSE_BRACKETS = {')': 0, '}': 1, ']': 2}

#logging.config.fileConfig(abs_path('logging.cfg'))
#logger = logging.getLogger('first_week')


def brackets_checker(line):
    stack = deque()
    for i, bracket in enumerate(line, 1):
        # logger.debug('Current bracket: {}'.format(bracket))
        if bracket in OPEN_BRACKETS:
            # Put open brackets in stack
            stack.append((i, bracket))
            # logger.debug('Current stack: {}'.format(stack))
        elif bracket in CLOSE_BRACKETS:
            # On close bracket encounter
            # If stack is empty close bracket is invalid
            if not len(stack):
                return i
            # Else pop last bracket
            popped_i, popped_bracket = stack.pop()
            # logger.debug('Popped bracket: {}'.format(popped_bracket))
            # Compare brackets
            # If they are not equal, return real position of current bracket
            # logger.debug('Current stack: {}'.format(stack))
            if CLOSE_BRACKETS[bracket] != OPEN_BRACKETS[popped_bracket]:
                return i
    if len(stack):
        # If there are some brackets left, return real position of the leftmost not closed bracket
        return stack.popleft()[0]
    else:
        return 'Success'


if __name__ == '__main__':

    line = input()
    res = brackets_checker(line)
    print(res)
 -End,"
 from collections import defaultdict
from sys import setrecursionlimit

setrecursionlimit(1000000)

def make_tree(line):

    tree = defaultdict(list)

    for i, node in enumerate(line.split(' ')):
        node = int(node)
        if node == -1:
            tree['root'] = i
        else:
            tree[node].append(i)
    return tree


def tree_height(tree):

    height = 0

    if 'root' not in tree:
        return height

    def recursive_search(tree, root: int, height: int):
        height += 1
        heights = [height]
        for node in tree[root]:
            heights.append(max(recursive_search(tree, node, height), height))
        return max(heights)

    return recursive_search(tree, tree['root'], height)


if __name__ == '__main__':

    n = input()
    line = input()
    tree = make_tree(line)
    height = tree_height(tree)
    print(height)
 -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(\+7|8)\D*(812)\D*(\d){3}(\D*\d{2}){2}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('[A-Za-z]* (?i:smith)', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'[ACTGU]+ \d{3,}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'.* \d+(?i:jun|jul|aug).*[02468]', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'([1-9]\d?)|(100)', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'.*\b(([dr]na)|([DR]NA)).*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'[ATGC]*([ATGC]{4,})\1+[ATGC]*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'[^,]*(,[^,]*){8}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'[A-Z][\w.]*(\s[\w.]+){3}[!?.]', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(?a)[\w.]{4,20}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'\d\d-\w\w\w-\d\d(\d\d)?', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(https?|ftp)://[A-Za-z0-9](.[A-Za-z0-9]+)*\.[a-z]{2,6}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'((foo+|foo(?!bar)*)(bar)?)+|bar', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'((?<=[\sA-Z])[A-Z]+|^[A-Z]|[^A-Z]+)+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'[A-Z].*[.?!]', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(?i).*(^|\b)Ten\b.*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(?i)([tra]+)+( [tra]+)*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'217\d{7}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'\d{6}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(?i)[A-Za-z]+ing', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'[A-Za-z0-9].{2,}[A-Za-z0-9]@\w+(\.\w+)+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('-?[1-9]\d*\s*[+-/*]\s*-?[1-9]\d*\s*=\s*-?[1-9]\d*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'[A-Za-z0-9 ]+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(\+7 )?(\(\d{3}\)|\d{3}) \d{7}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('(?a)\w+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('.*g?mail.*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'\(2\d\d\d\) Bioinf.+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'[A-Z][a-z]+ [A-Z]\., et al\.', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('[01]+|[0-9A-F]+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'ggplot\(\w+, aes\(\w+, \w+\)\) \+ geom_point\(\)', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'.*[7Zb]{3}[^\n]*[A/*]', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'\d[A-Za-z0-9.$]{1,}[a-z]', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'([A-Za-z]+)-\1', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'[a-z](\d[a-z]){2}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'o{2,5}[a-z]\${1,3}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('\w+a \w+a', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('\d*2{1,5}\d*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'.*((^|\b)(?i:rain|sun|wind|snow)(\b|$)).*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('.*(A\w+).*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('[^wvf4]*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'\+7\(\d{3}\)-\d{7}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(?i)#?[0-9A-F]+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'-?\d+(\.\d+)?[CF]|\d+(\.\d+)?K', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'<div( [^\>]*/)?>', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(\+7|8)812\d{7}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(?i)[ATGC]*GGCCAATCT[ATGC]*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('CH4|CH3(\(CH2\)\d|CH2)*CH3', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(?i)[ATGC]+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(?i)[-ATGCRYSWKMBDHVN]+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('(?i)(CAG){10,}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'([ATGC]{5})\1+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'AUG[ATGC]{9,}(UAA|UAG|UGA)', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'.*(\b|^)war(\b|$).*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('.*r\d{3,5}r.*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'[А-ЯA-Z]{2}\d*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'(\w+)\1', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'.*(?:^| )([A-z]+)[^A-z]*(?: .*)? \1[^A-z]*(?: |$).*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'.*(\w+\b).*\W+\1\b.*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'\d\d?-[A-z]+-\d{4}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'\+\d\(\d{3}\)\d{7}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'-?\d+(\.\d+)', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'[10]*0', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'.*\d[A-z]{2,3}.*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('@.*|.*@', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('.*(?:[wtf]..\.).*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'>[A-Z]{2}\d{6}\.[1-9]', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('(?i)A+G+[TU]+C+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'Passport: [\w.]+\\nRegistration: [\w.]+\\nAdress: \w+', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'\bCAP((?!\w+)||(_(?!_)))', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'.*\b([A-z])[A-z]* \1[A-z]* \1[A-z]*.*', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 X = int(input())
H = int(input())
M = int(input())

awake_hours = X // 60 + H
awake_minutes = X % 60 + M

if awake_minutes >= 60:
    awake_minutes -= 60
    awake_hours += 1

print(f'{awake_hours}\n{awake_minutes}')
 -End,"
 time_to_sleep = int(input())
print(f'{time_to_sleep // 60}\n{time_to_sleep % 60}') -End,"
 A = int(input())
B = int(input())
H = int(input())

if A <= H <= B:
    print('Это нормально')
elif H < A:
    print('Недосып')
elif H > B:
    print('Пересып')
else:
    print('Это как так?')
 -End,"
 year = int(input())

print('Високосный' if not year % 400 or not year % 4 and year % 100 else 'Обычный') -End,"
 from math import sqrt

a = int(input())
b = int(input())
c = int(input())

p = (a + b + c) / 2

print(sqrt(p * (p - a) * (p - b) * (p - c)))
 -End,"
 x = int(input())

print(-15 < x <= 12 or 14 < x < 17 or x >= 19)
 -End,"
 a = float(input())
b = float(input())
operation = input()

try:
    if operation in '+-*/':
        print(eval(f'{a}{operation}{b}'))
    elif operation == 'div':
        print(a // b)
    elif operation == 'mod':
        print(a % b)
    elif operation == 'pow':
        print(a ** b)
    else:
        print('Неизвестная операция!')
except ZeroDivisionError:
    print('Деление на 0!')
 -End,"
 from sys import stdin
from math import sqrt

shape = input()
dimensions = list(map(int, stdin))

if shape == 'треугольник':
    p = sum(dimensions) / 2
    print(sqrt(p * (p - dimensions[0]) * (p - dimensions[1]) * (p - dimensions[2])))
elif shape == 'прямоугольник':
    print(dimensions[0] * dimensions[1])
elif shape == 'круг':
    print(3.14 * dimensions[0] ** 2)
else:
    print('Неизвестная фигура!')
 -End,"
 from sys import stdin

data = sorted(map(int, stdin))

print(data[2], data[0], data[1], sep='\n')
 -End,"
 n = input()

if 10 <= int(n[-2:]) <= 15:
    print(f'{n} программистов')
else:
    if n[-1] == '0':
        print(f'{n} программистов')
    elif n[-1] == '1':
        print(f'{n} программист')
    elif n[-1] in '234':
        print(f'{n} программиста')
    else:
        print(f'{n} программистов')
 -End,"
 n = list(map(int, input()))

print('Счастливый' if sum(n[3:]) == sum(n[:3]) else 'Обычный')
 -End,"
 numbers = [1, -1]

while numbers[-1] != 0:
    numbers.append(int(input()))

print(sum(numbers)) -End,"
 a = int(input())
b = int(input())
i = 1

while i % a or i % b:
    i += 1

print(i)
 -End,"
 data = []

while True:
    data.append(int(input()))
    if data[-1] < 10:
        del data[-1]
    elif data[-1] > 100:
        del data[-1]
        break
    else:
        pass

for x in data:
    print(x)
 -End,"
 a, b, c, d = int(input()), int(input()), int(input()), int(input())

column, row = range(a, b+1), range(c, d+1)

for x in row:
    print('\t', x, end='', sep='')
print()

for x in column:
    print(x, end='\t')
    for y in row:
        print(x * y, end='\t')
    print()
 -End,"
 a, b = int(input()), int(input())

arr = [x for x in range(a, b+1) if not x%3]

print(sum(arr) / len(arr))
 -End,"
 s = input().lower()

print((s.count('g') + s.count('c')) / len(s) * 100)
 -End,"
 s, result, counter = input(), '', 1

for x in range(len(s)):
    try:
        if s[x] == s[x+1]:
            counter += 1
        else:
            result += f'{s[x]}{counter}'
            counter = 1
    except IndexError:
        result += f'{s[x]}{counter}'

print(result)
 -End,"
 print(sum(int(x) for x in input().split()))
 -End,"
 nums, result = [int(x) for x in input().split()], []

if len(nums) == 1:
    print(nums[0])
else:
    for x in range(len(nums)):
        try:
            result.append(nums[x-1] + nums[x+1])
        except IndexError:
            result.append(nums[x-1] + nums[0])

print(' '.join(map(str, result)))
 -End,"
 s = input().split()

print(' '.join(set(filter(lambda e: s.count(e) > 1, s))))
 -End,"
 from sys import stdin

arr = []

for x in map(int, stdin.readlines()):
    arr.append(x)
    if not sum(arr):
        print(sum([n**2 for n in arr]))
        break
 -End,"
 length, result = int(input()), []

for x in range(length):
    for y in range(x):
        result.append(x)

if length == 1:
    print('1')
elif length == 2:
    print('1 2')
else:
    print(' '.join(map(str, result[:length])))
 -End,"
 from sys import stdin

row = stdin.readline().split()
num = stdin.read()

if row.count(num):
    for x in range(len(row)):
        if row[x] == num:
            print(x, end=' ')
else:
    print('Отсутствует')
 -End,"
 from sys import stdin

matrix = [list(map(int, x.split())) for x in stdin.read().split('\n') if 'end' not in x]

for i in range(len(matrix)):
    for j in range(len(matrix[i])):
        left_element = matrix[i][j-1]
        upper_element = matrix[i-1][j]
        try:
            right_element = matrix[i][j+1]
        except IndexError:
            right_element = matrix[i][0]
        try:
            lower_element = matrix[i+1][j]
        except IndexError:
            lower_element = matrix[0][j]
        print(left_element + upper_element + right_element + lower_element, end=' ')
    print()
 -End,"
 n = int(input())
matrix = [[0] * n for x in range(n)]
value, m = 1, 0

matrix[n//2][n//2] = n**2

for i in range(n//2):
    for j in range(n-m):
        matrix[i][j+i] = value
        value += 1
    for j in range(i+1, n-i):
        matrix[j][-i-1] = value
        value += 1
    for j in range(i+1, n-i):
        matrix[-i-1][-j-1] = value
        value += 1
    for j in range(i+1, n-(i+1)):
        matrix[-j-1][i] = value
        value += 1
    m += 2

for row in matrix:
    print(*row)
 -End,"
 def f(x):
    if x <= -2:
        return 1 - (x+2)**2
    elif x > 2:
        return 1 + (x-2)**2
    else:
        return -(x/2)
 -End,"
 def modify_list(l):
    i = 0

    while i < len(l):
        if l[i] % 2:
            del l[i]
        else:
            l[i] = int(l[i]/2)
            i += 1
 -End,"
 def update_dictionary(d, key, value):
    if key in d.keys():
        d[key].append(value)
    elif key*2 in d.keys():
        d[key*2].append(value)
    else:
        d.update({key*2: [value]})
 -End,"
 from sys import stdin

text, db = stdin.read().lower().split(), {}

for word in text:
    if word in db:
        db[word] += 1
    else:
        db.update({word: 1})

for x in db:
    print(x, db[x])
 -End,"
 n, i, d = int(input()), 0, {}

while i < n:
    x = int(input())

    if x not in d:
        d.update({x: f(x)})
    print(d[x])

    i += 1
 -End,"
 from math import pi

print(2 * pi * float(input()))
 -End,"
 from sys import argv

print(*argv[1:])
 -End,"
 from sys import stdin

games = [x.split(';') for x in stdin.read().splitlines()[1:]]

data = {}
for game in games:
    if game[0] not in data:
        data.update({game[0]: [0, 0, 0, 0, 0]})
    if game[2] not in data:
        data.update({game[2]: [0, 0, 0, 0, 0]})

for game in games:
    if game[1] > game[3]:
        data[game[0]][1] += 1
        data[game[0]][4] += 3
        data[game[2]][3] += 1
    elif game[1] < game[3]:
        data[game[0]][3] += 1
        data[game[2]][1] += 1
        data[game[2]][4] += 3
    else:
        data[game[0]][2] += 1
        data[game[0]][4] += 1
        data[game[2]][2] += 1
        data[game[2]][4] += 1

    data[game[0]][0] += 1
    data[game[2]][0] += 1

for team, stat in data.items():
    print(f'{team}:', end='')
    print(*stat)
 -End,"
 from sys import stdin

lines = stdin.read().splitlines()
encoder = {lines[0][i]: lines[1][i] for i in range(len(lines[0]))}
decoder = {lines[1][i]: lines[0][i] for i in range(len(lines[0]))}

print(''.join(encoder.get(x) for x in lines[2]))
print(''.join(decoder.get(x) for x in lines[3]))
 -End,"
 vocab = [input().lower() for x in range(int(input()))]
text = ' '.join(input().lower() for x in range(int(input()))).split()

print(*{x for x in text if x not in vocab}, sep='\n')
 -End,"
 from sys import stdin

movements = stdin.read().splitlines()[1:]
x, y = 0, 0

for movement in movements:
    t = movement.split()

    if t[0] == 'север':
        y += int(t[1])
    elif t[0] == 'юг':
        y -= int(t[1])
    elif t[0] == 'восток':
        x += int(t[1])
    elif t[0] == 'запад':
        x -= int(t[1])
    else:
        raise Exception('Hmm...something went wrong...')

print(x, y)
 -End,"
 print(sum(int(input()) for _ in range(int(input()))))
 -End,"
 print(len({id(obj) for obj in objects}))
 -End,"
 def closest_mod_5(x):
    while x % 5:
        x += 1
    return x -End,"
 from math import factorial as f

n, k = map(int, input().split())

def C(n, k):
    return int(f(n) / f(k) / f(n-k))

print(C(n, k))
 -End,"
 namespaces = {'global': {'parent': None, 'vars': []}}

for i in range(int(input())):
    command = input().split()
    if command[0] == 'create':
        if namespaces.get(command[1]) is None:
            namespaces[command[1]] = {'parent': command[2], 'vars': []}
    elif command[0] == 'add':
        if namespaces.get(command[1]) is not None:
            namespaces[command[1]]['vars'].append(command[2])
    else:
        if namespaces.get(command[1]) is not None:
            namespace, res = command[1], None 
            while res is None and namespace is not None:
                res = namespace if command[2] in namespaces[namespace]['vars'] else None
                namespace = namespaces[namespace]['parent']
            print(res)
 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity

    def can_add(self, v):
        return self.capacity-v >= 0

    def add(self, v):
        self.capacity -= v
 -End,"
 class Buffer:
    def __init__(self):
        self.buffer = []
    
    def add(self, *a):
        for x in a:
            self.buffer.append(x)
            
            if len(self.buffer) == 5:
                print(sum(self.buffer))
                self.buffer.clear()

    def get_current_part(self):
        return self.buffer
 -End,"
 d = {}

for i in range(int(input())):
    t = input().split(' : ')
    if len(t) == 1:
        t.append('')
    d[t[0]] = t[1].split()
    for j in d[t[0]]:
        if j not in d:
            d[j] = []


def is_parent(child, parent):
    if parent in d[child] or child == parent:
        return True
    if len(d[child]):
        return any(map(lambda x: is_parent(x, parent), d[child]))


for i in range(int(input())):
    s = input().split()
    print('Yes' if is_parent(s[1], s[0]) else 'No')
 -End,"
 class ExtendedStack(list):
    def sum(self):
        a = self.pop()
        b = self.pop()
        self.append(a+b)

    def sub(self):
        a = self.pop()
        b = self.pop()
        self.append(a-b)

    def mul(self):
        a = self.pop()
        b = self.pop()
        self.append(a*b)

    def div(self):
        a = self.pop()
        b = self.pop()
        self.append(a//b)
 -End,"
 class LoggableList(list, Loggable):
    def append(self, e):
        self.log(e)
        super(LoggableList, self).append(e)
 -End,"
 try:
    foo()
except ZeroDivisionError:
    print('ZeroDivisionError')
except ArithmeticError:
    print('ArithmeticError')
except AssertionError:
    print('AssertionError')
 -End,"
 errors = {}

for i in range(int(input())):
    e = input().split(' : ')
    if len(e) == 1:
        e.append('')
    errors[e[0]] = e[1].split()
    for j in errors[e[0]]:
        if j not in errors:
            errors[j] = []

caught = []

def has_been_caught(e):
    return e in caught or any(map(lambda x: has_been_caught(x), errors[e]))

for i in range(int(input())):
    e = input()
    if has_been_caught(e):
        print(e)
    else:
        caught.append(e)
 -End,"
 class NonPositiveError(Exception):
    pass

class PositiveList(list):
    def append(self, element):
        if element > 0:
            super(PositiveList, self).append(element)
        else:
            raise NonPositiveError('Number is negative!')
 -End,"
 from datetime import date, timedelta

x = date(*map(int, input().split())) + timedelta(days=int(input()))

print(x.year, x.month, x.day)
 -End,"
 class multifilter:
    def judge_half(pos, neg):
        return pos >= neg

    def judge_any(pos, neg):
        return pos >= 1

    def judge_all(pos, neg):
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        for e in self.iterable:
            pos, neg = 0, 0
            for f in self.funcs:
                if f(e):
                    pos += 1
                else:
                    neg += 1
            if self.judge(pos, neg):
                yield e -End,"
 def is_prime(n):
    return all(n%i for i in range(2, n))

def primes():
    a = 1
    while True:
        a += 1
        if is_prime(a):
            yield a -End,"
 def mod_checker(x, mod=0):
    return lambda y: y%x == mod -End,"
 from sys import stdin
from re import sub

s, a, b = stdin.read().splitlines()
n = 0

while True:
    if a in s:
        s = sub(a, b, s)
        n += 1
    if a not in s:
        print(n)
        break
    if n > 1000:
        print('Impossible')
        break
 -End,"
 from re import findall

s, a = input(), input()
print(len(findall(f'(?=({a}))', s)))
 -End,"
 from sys import stdin
from re import findall

for line in stdin.read().splitlines():
    if len(findall('cat', line)) > 1:
        print(line)
 -End,"
 from sys import stdin
from re import search

for line in stdin.read().splitlines():
    if search(r'\bcat\b', line):
        print(line)
 -End,"
 from sys import stdin
from re import search

for line in stdin.read().splitlines():
    if search('z\w{3}z', line):
        print(line)
 -End,"
 from sys import stdin

for line in stdin.read().splitlines():
    if '\\' in line:
        print(line)
 -End,"
 from sys import stdin
from re import match

for line in stdin.read().splitlines():
    if match(r'\b(.+)\1\b', line):
        print(line)
 -End,"
 from sys import stdin

for line in stdin.read().splitlines():
    print(line.replace('human', 'computer'))
 -End,"
 from sys import stdin
from re import sub

for line in stdin.read().splitlines():
    print(sub(r'\b[aA]+\b', 'argh', line, count=1))
 -End,"
 from sys import stdin
from re import sub

for line in stdin.read().splitlines():
    print(sub(r'(\b\w)(\w)', r'\2\1', line))
 -End,"
 from sys import stdin
from re import sub

print(sub(r'(\w)(\1+)', r'\1', stdin.read()))
 -End,"
 from sys import stdin

for x in stdin.read().splitlines():
    if x.isdigit():
        if not int(x, 2) % 3:
            print(x)
 -End,"
 import requests
import re


def parse_links(url):
    response = requests.get(url)
    return re.findall(r'<a href=[\'""]([\w/:\.]+)[\'""]', response.text)


fr, to = input(), input()
links = parse_links(fr)

for link in links:
    if to in parse_links(link):
        print('Yes')
        break
else:
    print('No')
 -End,"
 import re
import requests

file = input()
link_re = r'<a [^>]*\s*href=[\'""](?!\.\./)(?:\w+://)?([\w\.-]+)(?:.*)[\'""]'

response = requests.get(file)
print(*sorted(list(set(re.findall(link_re, response.text)))), sep='\n')
 -End,"
 import json


def get_parent(name):
    for x in db:
        if x['name'] == name:
            return x
    return None


def find_children(parent):
    children = set()
    for child in parent['children']:
        children.add(child)
        children = children.union(find_children(get_parent(child)))
    return children


db = json.loads(input())

for child in db:
    child['children'] = set()

for child in db:
    for name in child['parents']:
        parent = list(filter(lambda x: x['name'] == name, db))[0]
        parent['children'].add(child['name'])

print(*sorted(map(lambda x: f""{x['name']} : {len(find_children(x)) + 1}"", db)), sep='\n')
 -End,"
 from xml.etree import ElementTree

data = {'red': 0, 'green': 0, 'blue': 0}


def add_value(element, value):
    data[element.get('color')] += value
    for child in element:
        add_value(child, value + 1)


root = ElementTree.fromstring(input())
add_value(root, 1)
print(*data.values())
 -End,"
 def main():
    a, b = map(int, input().split())
    print(a + b)


if __name__ == '__main__':
    main() -End,"
 print(float(input())*pow(float(input()),2)/2) -End,"
 print('Доступ разрешен' if input() in 'Энрико Ферми, Нильс Бор, Джон фон Нейман, Ричард Фейнман, Роберт Оппенгеймер, Ганс Бизе, Ханс Бете' else 'Доступ запрещен')




 -End,"
 a=[1,4,7,10]
p=1
for i in range(len(a)):
    p=p*a[i]    
print(p)




 -End,"
 a,b=(int(input()) for i in '12')
print(sum(range(min(a,b), max(a,b))))
  
    





 -End,"
 many=int(input())
n=int(input())
price=[int(input()) for i in range(n)]
print('Покупает' if many>=sum(price) else 'Не покупает')
 -End,"
 n=int(input())
if n>12: print('Error')
else:
    a=('Первый','Второй','Третий','Четвертый','Пятый','Шестой','Седьмой','Восьмой','Девятый','Десятый','Одиннадцатый','Двенадцатый')
    b=('январь','февраль','март','апрель','май','июнь','июль','август','сентябрь','октябрь','ноябрь','декабрь')
    for i in range(n):
        print(a[i], 'месяц -', b[i]) -End,"
 n=int(input())
for i in range(1, n+1):
    if 5<=i<=20 or i%10==0 or 5 <= i%10 <= 9: k=''     
    elif i%10==1: k='а'    
    elif i%10==2 or 3 or 4: k='ы'    
    print('На лугу', i, 'коров'+k)
 -End,"
 n=int(input())
a=(1,1)
if n>2:
    for i in range(2,n):
        b=((a[len(a)-1]+a[len(a)-2]),)
        a=a+b      
for i in range(n):
    print(a[i], end=' ') -End,"
 n=int(input())
f=0
for i in range(2, int(pow(n,0.5)+1)):
    if n%i==0: f=1; break
print('Простое' if f==0 else 'Составное')




 -End,"
 n=int(input())
f=-1
for i in range(1,n+1):
    if 'rat' in input():
        print(i)
        f=1
if f != 1:
    print(f)




 -End,"
 f=0
while True:
    s=input()
    if s=='' and f==0:
        print('Нет вдохновения? Ну ничего, попробуйте завтра')
        break
    elif s != '':
        f=1
        print('Великолепно, пишите еще!')
    elif s=='' and f==1:
        print('Эти строки запомнятся надолго')
        break
 -End,"
 n=int(input())
a=[int(input()) for i in range(n)]# Создаём список ""a"" из входных данных
b=[i for i in a if i%4==0] # Создаём список ""b"" из списка ""a"" по условию
print(max(b)) -End,"
 print(sum(i for i in [int(input()) for i in range(int(input()))] if i%10==4))





 -End,"
 n = int(input())
s = [round(float(input())) for i in range(n)]
print(max(s))
print('YES' if min(s)<30 else 'NO')





 -End,"
 a = [int(input()) for i in range(int(input()))]
print(max(a), 'YES' if min(a) == 0 else 'NO', sep='\n')




 -End,"
 a,b = int(input()), int(input())
p=a*b
while a != 0:
    a,b = max(a,b), min(a,b)
    a=a%b
print(int(p/b))





 -End,"
 n=int(input())
a=[]
while n>1:
    a.insert(0,n%2)
    n=n//2
a.insert(0,n)
for i in range(len(a)):
    print(a[i], end='')
    




 -End,"
 s=[]
while True:
    c=input()
    if c=='.': break
    c=int(c)
    if c%2==0:
        s.append(c)
for i in range(len(s)-1,-1,-1):          
    print(s[i], end=' ')
 -End,"
 s=[]
while True:
    c=input()
    if c=='.': break
    c=int(c)    
    s.append(c)
if len(s)%2==0:
    m =  ( s[ int(len(s)/2) ])/2   +     (s[ int(len(s)/2) -1 ])/2
else:
    m= s[int((len(s)-1)/2)]
print(m) -End,"
 t=[]
cnt=0
while True:
    w=input()
    if w == '.': break
    elif 'python' in w.lower().split(' '): cnt+=1
    t.append(w)
    #print(cnt)
wr=[]
for i in t:
    wr.append(i[cnt-1])
print(*wr)




 -End,"
 s=list(input().lower())
for i in range(len(s)):
    if s[i]=='.' or s[i]==',' or s[i]=='!' or s[i]=='?' or s[i]==':' or s[i]==';' or s[i]=='–':
        s[i]=''
    print(s[i], end='') -End,"
 sp = [int(x) for x in input().split(', ')]
a = min(sp)
ind = sp.index(a)
c_ind = ind
cnt_a=sp.count(a)-1
while cnt_a !=0:
    ind = sp.index(a, ind+1, len(sp))
    c_ind = c_ind + ind
    cnt_a-=1
print(c_ind) -End,"
 s = input()
cnt=0
ns=''
for i in s:
    if i in '0123456789':
        if i=='9':
            ns=ns+'0'
        else:
            ns=ns+str(int(i)+1)
            cnt+= int(i)+1
    else:
        ns=ns+i
print(ns)
print(cnt)




 -End,"
 a = [int(input()) for x in range(7)]
print(*[sorted(a, reverse = True)[i] for i in range(1,7,2)], sep='\n') -End,"
 n = int(input())
a=[] # Общий  список куда закидываем выходные данные
for i in range(n):
    b = [x for x in input().split(', ')] # Список из 3 элементов   
    c = b[0].split(' ') # Первое место на странице
    p = c[0] # первый пункт назначения
    r = int(c[1]) # расстояние до первого пункта
    for j in range(1,3):
        c = b[j].split(' ') # Список из двух элементов (пункт, расстояние)
        if r > int(c[1]):
              r = int(c[1])
              p = c[0]            
    a.append(p)

print(', '.join(a)) -End,"
 a = [input() for i in range(2)]
ans = ['rock', 'paper', 'scissors']
if a[0] not in ans or a[1] not in ans:
    print('Invalid input! You have not entered rock, paper or scissors, try again.')
elif a[0] == a[1]:
    print(""It's a tie!"")
elif 'scissors' not in a:
    print('Paper wins!')
elif 'paper' not in a:
    print('Rock wins!')
elif 'rock' not in a:
    print('Scissors win!') -End,"
 t = input()
while t != 'Я запомнил':
    if t == 'Линейная': a = 'O(n)'
    elif t == 'Кубическая': a = 'O(n^3)'
    elif t == 'Логарифмическая': a = 'O(log n)'
    elif t == 'Квадратичная': a = 'O(n^2)'
    elif t == 'Константная': a = 'O(1)'
    print(a)
    t = input()
print('Молодец, Вася!')
 -End,"
 s = [int(x) for x in input().split(' ')]
n = []
for i in range(len(s)):
    m = max(s)
    n.append(m)
    s.remove(m)
print(*n) -End,"
 time, limit = [int(x) for x in input().split(' ')]
k = [int(x) for x in input().split(',')]
kn = [int(x)*2**time for x in k]
filt = [x/2**time for x in kn if x< limit]
a=[]
for i in filt:
    a.append(k.index(int(i)) +1)
print(*a, sep=', ') -End,"
 def factorial(n):
    fn = 1
    for i in range(1, n+1):
        fn = fn * i
    return fn

a, b = int(input()), int(input())
sm = 0
for i in range(a, b+1):
    sm = sm + factorial(i)    
print(sm) -End,"
 def factorial(n):
    fn = 1
    for i in range(1, n+1):
        fn = fn * i
    return fn

def fib(n):
    f = [1,1]
    for i in range(2,n):
        f = f + [f[i-2]+ f[i-1]]
    return f[n-1]        
        
n = int(input())
print(factorial(n) + fib(n)) -End,"
 def f(n):# 
    n = abs(n)
    s=[]
    while n>0:
        s.append(n%10)
        n=n//10
    s.sort(reverse = True)
    s = list(map(str, s))
    s=int(''.join(s))
    return s

a = [int(input()) for i in range(int(input()))]
b = []
for i in a:
    b.append(f(i))
Ind = b.index(max(b))
print(a[Ind]) -End,"
 def check_variable(v):
    n = True    
    for i in v:
        if i.lower()not in '1234567890qwertyuiopasdfghjklzxcvbnm_':
            n = False
            break
    if v[0] in '1234567890':
        n = False
    print('Можно использовать' if n else 'Нельзя использовать')
    


v = input()
while v != 'Поработали, и хватит':
    n=check_variable(v)
    v = input()

 -End,"
 def check_variable(s):
    if max(s) == s[0]: print('Первый')
    elif max(s) == s[1]: print('Второй')
    elif max(s) == s[2]: print('Третий')
    elif max(s) == s[3]: print('Четвертый')
    elif max(s) == s[4]: print('Пятый')

#s = [int(i) for i in input().split()]
check_variable([int(i) for i in input().split()])
 -End,"
 def sd(n):
    s = 1
    for i in range(2, int(n**0.5)):
        if n % i == 0:
            s += i
            s += int(n/i)
    return s
            
        
k = int(input())
ar =[]
for i in range(200,k):
    a = sd(i)
    b = sd(a)
    if b == i and a != i:
        if a > i:
            a,i = i,a
        if a not in ar:
            print(a,i)
            ar.append(a) -End,"
 s = input()
ds = [s[0]]
for i in range(1, len(s)):
    if not (s[i] in s[0:i]):
        ds.append(s[i])
ds.sort()
for i in ds:
    cnt = 0
    for j in s:        
        if i == j:
            cnt +=1
    print(i, cnt) -End,"
 def shift_list(lst, shift):
    if shift >= 0:
        for i in range(shift):
            lst.insert(0,lst[len(lst)-1])
            lst.pop()
        return lst
    else:
        for i in range(abs(shift)):
            lst.insert(len(lst),lst[0])
            lst.pop(0)
        return lst -End,"
 # Допишите ваш код вместо многоточия:
a = input()
b = input()
c = input()
# в выводе используйте ровно 3 функции print() #
print(a,'', end = '')
print(b, end = '')
print(c, end = '') -End,"
 a, b, c = map(float, input().split())
# Допишите ваш код вместо многоточия:
a = str(int(a))
b = str(int(b))
c = str(int(c))
# в выводе используйте 1 функцию print()!
print(a+b, c+a, b+c) -End,"
 a, b, c = input().split()
# Допишите ваш код вместо многоточия:
a = str(int(a, 16))
b = str(int(b, 16))
c = str(int(c, 16))
# в выводе используйте 1 функцию print()!
print(a + b, c + c + b, a) -End,"
 print(round(3.141592653589793115997963468544185161590576171875, int(input())))



 -End,"
 print(sum([int(i) for i in str(input())]))

 -End,"
 n = str(input())
print(n[0],', ', n[1],', ', n[2], sep = '')




 -End,"
 n = int(input())
print('Это число четное' if n % 2 == 0 else 'Это число нечетное')



 -End,"
 print('число двузначное' if 10 <= int(input()) <= 99 else 'число не двузначное')




 -End,"
 a, b = int(input()), int(input())
print('да' if a % b == 0 or b % a == 0 else 'нет')


 -End,"
 a, b, c = [int(input()) for i in range(3)]
print('да'if a == b or a == c or b == c else 'нет')

 -End,"
 cnt = 0
for i in range(3):
    if int(input()) > 0:
           cnt += 1
print(cnt)
           



 -End,"
 n, m, k = [int(input()) for i in range(3)]
v = False
if k % n == 0 or k % m == 0:
    v = True
if k <= n or k <= m:
    v = True
print(v)

 -End,"
 n, k = int(input()), int(input())
cnt = 0
while n != k:
    if 2 * k <= n and n % 2 == 0:
        n = n / 2
        print(1, end = '')
    if n % 2 and n != k:
    	n = n - 1
    	print(2, end = '')
    if n > k and ((2 * k) > n):
        n = n - 1
        print(2, end = '') -End,"
 a, b = int(input()), int(input())
if a % 2:
    a = a + 1
for i in range(a, b + 1, 2):
    print(i)
    

 -End,"
 a, b = int(input()), int(input())
if a % 2:
    a += 1
for i in range(a, b + 1, 2):
    if i % 3:
        print(i)


 -End,"
 a, b = [int(input()) for i in '12']
if not a % 2:
    a += 1
for i in range(a, b + 1, 2):
    if (not i % 3 or not i % 7) and i % 9:
        print(i)
        
     


 -End,"
 for i in range(10, int(input()) + 1):
    print(i ** 3)

 -End,"
 c = 1
a = int(input())
while a >= c :
    print(c)
    c += 1
    

 -End,"
 a = int(input())
while a:
    print(a)
    a //= 10
print(a // 10)

 -End,"
 n = input()
s = 0
for i in n:
    s += int(i)
print(s) -End,"
 n = 1
p = int(input())
while n ** 2 <= p:
    print(n)
    n += 1


 -End,"
 n = int(input())
a = 2
while a ** 3 <= n:
    print(a ** 3)
    a += 2


 -End,"
 a = float(input())
n = 1
while (1 / n) >= a:
    print(int(round(1/n)) if 1/n == 1 else round(1/n, 2))
    n += 1




 -End,"
 c_min = 0
p = int(input())
if p != 0:
	cnt = 1
while p != 0:
    t = int(input())
    if t == p:
        cnt += 1
    else:
    	if c_min == 0:
    		c_min = cnt
    		cnt = 1
    		p = t
    	else:
    		if c_min > cnt:
    			c_min = cnt
    			cnt = 1
    			p = t
    if t == 0:
    	break
print(c_min) -End,"
 cnt = 0 # Счётчик
a = int(input()) # Основание
n = input() # Первое число последовательности
while int(n, a) != 0:
	x = int(n, a) % 10
	if x != 2 and x != 3:
		cnt += 1
	n = input()
print(cnt)


 -End,"
 s = input()
n = s.find('2')
print(s[:n], 'two', s[n+1::], sep = '') -End,"
 a = input().split()
cnt = 0
for i in a:
    if not len(i) % 2:
        cnt += 1
print(cnt)
 -End,"
 s = list(map(int, input().split()))
print(*[i for i in s if i%2 == 1])






 -End,"
 n = int(input())  # кол-во учеников
r = [int(input()) for i in range(n)]  # кол-во решеных задач
z = sum([1 for i in r if i >= 7])  # получили зачёт
zr = sum([i for i in r if i >= 7]) / z
print(z)
print(zr)
 -End,"
 a = [i for i in [int(input()) for i in range(int(input()))] if i > 0] # Температура выше 0
print(min(a), sum(1 for i in a if i == min(a)), sep='\n')
 -End,"
 n = int(input())
p = 1
f = False
max_= 0
min_= 30001
while n != 0:
    if n > max_:
        max_ = n
    if n % 2 != 0 and (9 < n < 100 or 999 < n < 9999) and n % 5 != 0 and n % 10 != 9:
        f = True
        p *= n
        if n < min_:
            min_ = n
    n = int(input())
print(p if f else 'NO')
print(min_ if f else max_)
 -End,"
 n = int(input())
max_1 = 0
max_2 = 0
sa = 0
cnt = 0
while n:
    if n % 5 == 0:
        if n > max_1:
            max_1, max_2 = n, max_1
        elif n > max_2:
            max_2 = n
    if n % 3 == 0 or n % 10 == 9:
        cnt += 1
        sa += n
    n = int(input())
rez = 0
if cnt:
    rez = sa / cnt
print(max_2 if max_2 else ""NO"")
print(rez if rez else ""NO"")
     -End,"
 def kaprekar_step_str(n):
    digits = [item for item in str(n)]
    digits.sort()
    min_number = int(''.join(digits))
    max_number = int(''.join(digits[::-1]))

    return max_number - min_number


def kaprekar_loop(n):
    if not (1000 <= n <= 9999):
        raise ValueError('Only 4 digits integer is supported')

    prev_number = n
    while True:
        print(prev_number)
        curr_number = kaprekar_step_str(prev_number)
        if prev_number == curr_number:
            break
        prev_number = curr_number

 -End,"
 def kaprekar_check(n):
    n_str = str(n)
    digits = list(n_str)
    digits_count = len(digits)
    checking_dict = {3: 100, 4: 1000, 6: 100000}

    return (digits_count in checking_dict) and (n not in checking_dict.values()) and len(set(n_str)) > 1 -End,"
 def kaprekar_step(digits):
    min_number_str = ''.join(map(str, sorted(digits)))

    return int(min_number_str[::-1]) - int(min_number_str) -End,"
 def kaprekar_step(n):
    digits = sorted(list(str(n)))

    min_number_str = ''.join(digits)

    return int(min_number_str[::-1]) - int(min_number_str)


def kaprekar_check(n):
    n_str = str(n)
    digits = list(n_str)
    digits_count = len(digits)
    checking_dict = {3: 100, 4: 1000, 6: 100000}

    return (digits_count in checking_dict) and (n not in checking_dict.values()) and len(set(n_str)) > 1


def kaprekar_loop(n):
    if not kaprekar_check(n):
        print(""Ошибка! На вход подано число {}, не удовлетворяющее условиям процесса Капрекара"".format(n))
    else:
        prev_number = curr_number = n
        prev_numbers = set()

        while True:
            print(prev_number)

            curr_number = kaprekar_step(prev_number)
            if prev_number == curr_number:
                break
            elif curr_number in prev_numbers:
                print(""Следующее число - {}, кажется процесс зациклился..."".format(curr_number))
                break

            prev_number = curr_number
            prev_numbers.add(prev_number)

 -End,"
 def kaprekar_step(digits):
    min_number_str = ''.join(map(str, sorted(digits)))

    return int(min_number_str[::-1]) - int(min_number_str)



 -End,"
 def list_pull(L):
    result = []

    def pull_generator(lst):
        yield from lst

    gens = [pull_generator(L)]
    while len(gens) > 0:
        gen = gens.pop()
        for item in gen:
            if isinstance(item, list):
                gens.append(pull_generator(item))
            else:
                result.append(item)

    return result -End,"
 def list_deepcopy(L):
    result = []

    def items_generator(lst):
        yield from lst

    gens = [(items_generator(L), result)]
    while len(gens) > 0:
        gen_struct = gens.pop()

        gen = gen_struct[0]
        items = gen_struct[1]
        for item in gen:
            if isinstance(item, list):
                child = []
                gens.append((items_generator(item), child))
            else:
                child = item
            items.append(child)

    return result

L2 = list_deepcopy(L1)




 -End,"
 def split_to_parts(a):
    l = len(a)
    a_middle = l//2 + l%2
    return a[:a_middle], a[a_middle:]


def front_back(*args):
    # gives generator of two tuples: (1st contains fronts of all input strings, 2d contains backs of all input strings)
    tuples = zip(*(parts for parts in (split_to_parts(s) for s in args)))

    return ''.join(''.join(t) for t in tuples) -End,"
 def mimic_dict(string):
    words = string.split()

    d = {}

    prev_word = """"
    for word in words:
        d.setdefault(prev_word, []).append(word)
        prev_word = word

    return d





 -End,"
 B2 = B1[1::2]




 -End,"
 C2 = C1[-2]




 -End,"
 def list_pull(L):
    result = []

    def pull_generator(lst):
        yield from lst

    gens = [pull_generator(L)]
    while len(gens) > 0:
        gen = gens.pop()
        for item in gen:
            if isinstance(item, list):
                gens.append(pull_generator(item))
            else:
                result.append(item)

    return result


L2 = list_pull(L1)




 -End,"
 import numpy as np
import numpy.linalg as la

size = 3
m = np.empty((size, size))
b = np.empty(size)
for index in range(size):
    *m[index], b[index] = map(float, input().strip().split())

m_det = la.det(m)
if m_det != 0:
    u = la.solve(m, b)
    print(*u)
else:
    print('Система не имеет решений')



 -End,"
 import numpy as np
import numpy.linalg as la

size = 4
m = np.empty((size, size))
b = np.empty(size)
for index in range(size):
    *m[index], b[index] = map(float, input().strip().split())

m_det = la.det(m)
if m_det != 0:
    u = la.solve(m, b)
    print(*u)
else:
    print('Система не имеет решений')




 -End,"
 import numpy as np
import numpy.linalg as la

size = int(input().strip())
m = np.empty((size, size))
b = np.empty(size)
for index in range(size):
    *m[index], b[index] = map(float, input().strip().split())

m_det = la.det(m)
if m_det != 0:
    u = la.solve(m, b)
    print(*u)
else:
    print('Система не имеет решений')




 -End,"
 import numpy as np
import numpy.linalg as la

m = int(input())

X = np.empty((m, m))
y = np.empty(m)

for i in range(m):
    xi, yi = map(float, input().split())
    for j in range(m):
        X[i, j] = xi ** j
    y[i] = yi

c = la.solve(X, y)
print(*c)




 -End,"
 from scipy.optimize import golden
from functools import partial

def f(x):
    return (x+a)**2 - b

def g(x):
    return abs(f(x))

funcs = (f, g)
golden_with_params = partial(golden, brack=(-10, -4), full_output=True)
funcs_mins = [m[1] for m in map(golden_with_params, funcs)]

print(*funcs_mins) -End,"
 def chetnost_permutation(numbers):
    not_right_pairs_count = 0

    for index1, number1 in enumerate(numbers):
        for number2 in numbers[index1+1:]:
            if number1 > number2:
                not_right_pairs_count += 1

    return 1 if not_right_pairs_count % 2 == 0 else -1


print(chetnost_permutation([int(x) for x in input().split()]))
 -End,"
 def chetnost_permutation(numbers):
    not_right_pairs_count = 0

    for index1, number1 in enumerate(numbers):
        for number2 in numbers[index1+1:]:
            if number1 > number2:
                not_right_pairs_count += 1

    return 1 if not_right_pairs_count % 2 == 0 else -1

def read_permutation():
    lines_count = 4
    
    return [int(number) for _ in range(lines_count) for number in input().split()]

def _main():
    etalon_permutation = [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 15, 14, 13]

    curr_permutation = read_permutation()
    if chetnost_permutation(curr_permutation) == chetnost_permutation(etalon_permutation):
        print('Бинго!')
    else:
        print('Не повезло...')

if __name__ == '__main__':
    _main()
 -End,"
 def chetnost_permutation(numbers):
    not_right_pairs_count = 0

    for index1, number1 in enumerate(numbers):
        for number2 in numbers[index1+1:]:
            if number1 > number2:
                not_right_pairs_count += 1

    return 1 if not_right_pairs_count % 2 == 0 else -1

def read_permutation(rows):
    return [int(number) for _ in range(rows) for number in input().split()]

def create_etalon_permutation_row(row_index, cols, adjust=0):
    max_index = row_index * cols
    min_index = (row_index - 1) * cols

    if row_index % 2 == 1:
        return [col for col in range(min_index + 1, max_index + 1 + adjust)]
    else:
        return [col for col in range(max_index + adjust, min_index, -1)]

def create_etalon_permutation(rows, cols):
    etalon = []

    # create first (rows - 1)
    for row in range(1, rows):
        etalon.extend(create_etalon_permutation_row(rows, cols))

    # create last row
    etalon.extend(create_etalon_permutation_row(rows, cols, -1))

    return etalon

def _main():
    rows, cols = map(int, input().split())

    etalon_permutation = create_etalon_permutation(rows, cols)
    curr_permutation = read_permutation(rows)

    if chetnost_permutation(curr_permutation) == chetnost_permutation(etalon_permutation):
        print('Бинго!')
    else:
        print('Не повезло...')

if __name__ == '__main__':
    _main()
 -End,"
 import numpy as np
def get_error(deltas, sums, weights):
    """"""
    compute error on the previous layer of network
    deltas - ndarray of shape (n, n_{l+1})
    sums - ndarray of shape (n, n_l)
    weights - ndarray of shape (n_{l+1}, n_l)
    """"""

    return (weights.T.dot(deltas.T).T * sigmoid_prime(sums)).mean(axis=0) -End,"
 from collections import deque

def add_node(tree, parent, child):
    tree[child] = parent

def node_not_exists(tree, key, restriction):
    return key not in tree and key <= restriction

def get_operations_iter(number):
    tree = {0: 0, 1: 0}

    queue = deque([1])
    while number not in tree:
        parent = queue.popleft()

        child3 = parent * 3
        if node_not_exists(tree, child3, number):
            add_node(tree, parent, child3)
            queue.append(child3)

        child2 = parent * 2
        if node_not_exists(tree, child2, number):
            add_node(tree, parent, child2)
            queue.append(child2)

        child1 = parent + 1
        if node_not_exists(tree, child1, number):
            add_node(tree, parent, child1)
            queue.append(child1)

    # create sequence from tree
    sequence = []
    # start sequence from the end
    parent = number
    while parent > 0:
        sequence.append(parent)
        parent = tree[parent]

    # reverse sequence
    return len(sequence) - 1, sequence[::-1]

def main():
    number = int(input())
    k, numbers = get_operations_iter(number)
    print(k)
    print(*numbers, sep=' ')

if __name__ == '__main__':
    main() -End,"
 from collections import deque, namedtuple

class Packet(namedtuple(""Packet"", [""arrival"", ""duration""])):
    def __init__(self, arrival, duration):
        super(Packet, self).__init__()
        self.start = arrival
        self.dropped = 0

    def get_start(self):
        return -1 if self.dropped else self.start

    def update_start(self, prev_packet):
        if (prev_packet.start + prev_packet.duration) > self.start:
            self.start = prev_packet.start + prev_packet.duration

def clear_processed_packets(buffer, time):
    while len(buffer) > 0 and (buffer[0].start + buffer[0].duration) <= time:
        buffer.popleft()

def calc_start_times(packets, buffer_size):
    buffer = deque()

    for packet in packets:
        prev_packet = None
        if len(buffer) > 0:
            prev_packet = buffer[len(buffer) - 1]

        if prev_packet is not None:
            packet.update_start(prev_packet)

        if len(buffer) == buffer_size:
            clear_processed_packets(buffer, packet.arrival)

        if len(buffer) == buffer_size:
            packet.dropped = 1
        else:
            buffer.append(packet)

    return [packet.get_start() for packet in packets]

def main():
    buffer_size, n_packets = map(int, input().split())
    packets = list(Packet(*map(int, input().split())) for _ in range(n_packets))

    start_times = calc_start_times(packets, buffer_size)
    print(*start_times, sep='\n')

if __name__ == '__main__':
    main() -End,"
 class Set:
    def __init__(self, counts):
        self.max_size = max(counts)
        self.ids = counts
        n = len(counts)

        self.parent = list(range(n))
        self.rank = [1] * n

    def _find(self, x, root=None):
        i = x
        while i != self.parent[i]:
            parent_i = self.parent[i]
            if root:
                self.parent[i] = root
            i = parent_i

        return i

    def find(self, x):
        return self._find(x, self._find(x))

    def union(self, x, y):
        x_idx = self.find(x)
        y_idx = self.find(y)

        root = x_idx
        if x_idx != y_idx:
            if self.rank[x_idx] > self.rank[y_idx]:
                self.parent[y_idx] = root
            else:
                root = y_idx
                self.parent[x_idx] = root
                if self.rank[x_idx] == self.rank[y_idx]:
                    self.rank[root] += 1

            self.ids[x_idx] = self.ids[y_idx] = self.ids[x_idx] + self.ids[y_idx]

        self.max_size = max(self.max_size, self.ids[root])
        return self.max_size

def union(tables, unions):
    unions_set = Set(tables)

    return [unions_set.union(*union) for union in unions]

def main():
    n, m = map(int, input().split())
    tables = list(map(int, input().split()))

    unions = []
    for _ in range(m):
        unions.append(tuple((int(v) - 1 for v in input().split())))

    union_sizes = union(tables, unions)
    print(*union_sizes, sep='\n')

if __name__ == '__main__':
    main() -End,"
 from collections import namedtuple

Accumulator = namedtuple(""Accumulator"", [""age"", ""count""])

def head(records):
    return records[0]

def tail(records):
    return records[1:]

def accumulate_age(record, accumulator):
    return Accumulator(accumulator.age + record[""age""], accumulator.count + 1) if ""age"" in record else accumulator

def meanAge(records, accumulator=Accumulator(0, 0)):
    if not records:
        return None
    if len(records) == 1:
        result = accumulate_age(head(records), accumulator)
        return result.age / result.count

    return meanAge(tail(records), accumulate_age(head(records), accumulator)) -End,"
 def isPalindrome(string, start=0):
    end = len(string) - 1 - start
    if start > end:
        return True
    return string[start] == string[end] and isPalindrome(string, start + 1) -End,"
 def makeAmount(number, values):
    if len(values) == 0:
        return 0
    if len(values) == 1:
        return number % values[0] == 0

    return makeAmount(number, values[1:]) + (makeAmount(number - values[0], values) if number >= values[0] else 0) -End,"
 def has_last(lst, last_idx):
    return len(lst) + last_idx >= 0

def has_next(lst, last_idx):
    return len(lst) + last_idx > 0

def last(lst, last_idx):
    return lst[last_idx]

def deepReverse(obj, last_idx=-1):
    if isinstance(obj, list):

        return ([deepReverse(last(obj, last_idx))] if has_last(obj, last_idx) else []) + \
               (deepReverse(obj, last_idx - 1) if has_next(obj, last_idx) else [])
    return obj -End,"
 def deepReverse(obj):
    if isinstance(obj, list):
        return list(deepReverse(elem) for elem in reversed(obj))
    return obj -End,"
 def create_key(key, parent_key):
    return parent_key + ""."" + key if parent_key else key

def flatten_dictionary(obj, key="""", parent_key=""""):
    if isinstance(obj, dict):
        if not obj:
            return []
        items = iter(list(obj.items()))
        curr_key, curr_value = next(items)
        return flatten_dictionary(curr_value, curr_key, create_key(key, parent_key)) + \
               flatten_dictionary(dict(items), create_key(key, parent_key))
    return [(create_key(key, parent_key), obj)]

def flatten(obj):
    return dict(flatten_dictionary(obj)) -End,"
 from functools import wraps

def bucket(*deco_args, **deco_kwargs):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            return "", "".join(map(str, ((deco_args, deco_kwargs, *args), )))
        return wrapper
    return decorator -End,"
 from functools import wraps

def flip(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        return func(*reversed(args), **kwargs)
    return wrapper -End,"
 from functools import wraps

def makeDecorator(init_deco):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            return init_deco(func, *args, **kwargs)
        return wrapper
    return decorator -End,"
 true = lambda x: lambda y: x
false = lambda x: lambda y: y

isZero = lambda numeral: numeral(lambda x: false)(true) -End,"
 from math import sqrt

mean = lambda v: sum(v) / len(v)
var_with_mean = lambda v, mean_v: sum(map(lambda elem: (elem - mean_v)**2, v)) / len(v)
var = lambda v: var_with_mean(v, mean(v))
stdv = lambda v: sqrt(var(v)) -End,"
 from functools import reduce
from operator import add
from math import sqrt

mean = lambda v: reduce(add, v) / len(v)
var_with_mean = lambda v, mean_v: mean(tuple(map(lambda elem: (elem - mean_v)**2, v)))
var = lambda v: var_with_mean(v, mean(v))
std = lambda v: sqrt(var(v))

def crlt(v1, v2):
    mean_v1, mean_v2 = mean(v1), mean(v2)
    std_v1, std_v2 = std(v1), std(v2)

    return reduce(add, map(lambda a, b: a*b - mean_v1*mean_v2, v1, v2)) / (len(v1) * std_v1 * std_v2) -End,"
 SUM_VALUE = 1000

def calc(a):
    # condition from above equations
    return (SUM_VALUE * (SUM_VALUE - 2*a)) / (2*(SUM_VALUE - a))

def check(a):
    b = calc(a)
    return float(int(b)) == b

def findTheTriple():
    # condition from above equations
    # 0 < a < SUM_VALUE/2
    a = next(filter(check, range(1, SUM_VALUE//2)))
    b = int(calc(a))
    return set((a, b, SUM_VALUE - a - b)) -End,"
 from functools import reduce

maximum = lambda v: reduce(max, v, float(""-inf"")) -End,"
 from itertools import dropwhile
from functools import partial
from operator import __eq__

def _left(predicate, sequence):
    return bool(next(dropwhile(predicate, sequence), None))

def myAll(predicate, sequence):
    return not _left(predicate, sequence)

def myAny(predicate, sequence):
    return _left(lambda item: not predicate(item), sequence)

def elem(item):
    return lambda sequence: myAny(partial(__eq__, item), sequence) -End,"
 from functools import reduce

def _append(lst, item):
    lst.append(item)
    return lst

def lmap(func, *iterables):
    return reduce(lambda acc, item: _append(acc, func(*item)), zip(*iterables), [])

def lfilter(predicate, iterable):
    return reduce(lambda acc, item: _append(acc, item) if predicate(item) else acc, iterable, []) -End,"
 from toolz import identity, compose
from functools import partial

mapId = compose(list, partial(map, identity))
filterId = compose(list, partial(filter, lambda x: True)) -End,"
 from toolz import compose
from operator import add
from functools import partial, reduce

reduceId = compose(lambda seq: reduce(add, seq, []), partial(map, lambda x: [x])) -End,"
 def euqSeq(a, b):
    if b != 0:
        yield a, b
        yield from euqSeq(b, a % b) -End,"
 from itertools import accumulate, repeat

class fibs_gen:
    @staticmethod
    def create_fibs_gen():
        calc_fib = lambda a, b: (b, a + b)

        return accumulate(repeat((0, 1)), lambda prev, curr: calc_fib(*prev))

    def __init__(self):
        self.fibs_gen = self.create_fibs_gen()

    def __iter__(self):
        return self

    def __next__(self):
        return next(self.fibs_gen)[1]

def fibSeq():
    return fibs_gen() -End,"
 # put your python code here
import sys

d = {}
for line in sys.stdin:
    try:
        key, value = line.strip().split(""\t"", maxsplit=1)
        d[key] = d.get(key, 0) + int(value)
    except ValueError:
        print(f""Invalid value: {value}. Must be int."")

for key, value in d.items():
    print(f""{key}\t{value}"")


 -End,"
 # put your python code here
import sys

d = {}
for line in sys.stdin:
    for term in line.strip().split("" ""):
        d[term] = d.get(term, 0) + 1

for key, value in d.items():
    print(f""{key}\t{value}"")

 -End,"
 import sys

sums = {}
counter = {}
for line in sys.stdin:
    try:
        key, value = line.strip().split(""\t"")
        curr_sum, curr_count = map(int, value.split("";""))
        sums[key] = sums.get(key, 0) + curr_sum
        counter[key] = counter.get(key, 0) + curr_count
    except (KeyError, ValueError):
        print(f""Unable to parse input line: {line}"")

for key in counter:
    print(f""{key}\t{sums[key]};{counter[key]}"")
    
 -End,"
 import sys

for line in sys.stdin:
    key, value = line.strip().split(""\t"")
    for cat in value.split("",""):
        print(f""{key},{cat}\t1"") -End,"
 import sys

for line in sys.stdin:
    key, value = line.strip().split("","")
    print(f""{value}\t1"") -End,"
 import sys

d = {}
for line in sys.stdin:
    value, key = line.strip().split(""\t"")
    d.setdefault(key, set()).add(value)

for key, value in d.items():
    print(f""{key}\t{len(value)}"") -End,"
 import sys

for line in sys.stdin:
    elems = line.strip().split("" "")
    for elem in elems:
        [print(f""{elem},{tmp}\t1"") for tmp in elems if tmp != elem]
 -End,"
 import sys

for line in sys.stdin:
    elems = line.strip().split("" "")
    for elem in elems:
        d = {}
        for tmp in elems:
            if tmp != elem: d[tmp] = d.get(tmp, 0) + 1
        
        stripe = "","".join([f'{key}:{value}' for key, value in d.items()])
        print(f""{elem}\t{stripe}"")
 -End,"
 import sys


def emit(key: str, value: str) -> None:
    print(key)

    
def _reduce(key: str, array: list) -> None:
    if len(array) == 1:
        emit(key, None)


def main():
    d = {}
    for line in sys.stdin:
        key, value = line.strip().split(""\t"")
        d.setdefault(key, []).append(value)

    [_reduce(key, array) for key, array in d.items()]


if __name__ == ""__main__"":
    main()
 -End,"
 import sys


def emit(key: str, value: str) -> None:
    print(key)

    
def _reduce(key: str, array: list) -> None:
    if len(array) == 1 and array[0] == ""A"":
        emit(key, None)


def main():
    d = {}
    for line in sys.stdin:
        key, value = line.strip().split(""\t"")
        d.setdefault(key, []).append(value)

    [_reduce(key, array) for key, array in d.items()]


if __name__ == ""__main__"":
    main()
 -End,"
 import sys


def emit(key: str, value: str) -> None:
    print(key)

    
def _reduce(key: str, array: list) -> None:
    if len(array) == 2:
        emit(key, None)


def main():
    d = {}
    for line in sys.stdin:
        key, value = line.strip().split(""\t"")
        d.setdefault(key, []).append(value)

    [_reduce(key, array) for key, array in d.items()]


if __name__ == ""__main__"":
    main()
 -End,"
 import sys


def emit(key: str, value: str) -> None:
    print(key)

    
def _reduce(key: str, array: list) -> None:
    emit(key, None)


def main():
    d = {}
    for line in sys.stdin:
        key, value = line.strip().split(""\t"")
        d.setdefault(key, []).append(value)

    [_reduce(key, array) for key, array in d.items()]


if __name__ == ""__main__"":
    main()
 -End,"
 import sys
from collections import namedtuple


Entry = namedtuple(""Entry"", [""timestamp"", ""user_id"", ""url""])
predicate = lambda user_id: user_id == ""user10""


def emit(key: int, value: Entry) -> None:
    print(""\t"".join(value))


def _map(key: int, value: Entry) -> None:
    if predicate(value.user_id):
        emit(key, value)


def main():
    for row_key, row in enumerate(sys.stdin, start=1):
        row = row.strip()
        if row:
            _map(row_key, Entry(*row.split(""\t"")))


if __name__ == ""__main__"":
    main()
 -End,"
 import sys
from collections import namedtuple


Entry = namedtuple(""Entry"", [""timestamp"", ""user_id"", ""url""])


def emit(key: int, value: str) -> None:
    print(value)


def project(entry: Entry) -> str:
    return entry.url
    

def _map(key: int, entry: Entry) -> None:
    emit(key, project(entry))


def main():
    for row_key, row in enumerate(sys.stdin, start=1):
        row = row.strip()
        if row:
            _map(row_key, Entry(*row.split(""\t"")))


if __name__ == ""__main__"":
    main()
 -End,"
 import sys


def emit(key: str, a: str, b: str) -> None:
    print(f""{key}\t{a}\t{b}"")


def _reduce(join_key: str, tagged_values: dict) -> None:
    values_iter = iter(tagged_values.items())
    _, a_values = next(values_iter)
    _, b_values = next(values_iter)
    
    for a in a_values:
        for b in b_values:
            emit(join_key, a, b)


def main():
    mapper = {}
    for line in sys.stdin:
        join_key, values = line.rstrip().split(""\t"")
        tag, value = values.split("":"")
        
        mapper.setdefault(join_key, {}).setdefault(tag, []).append(value)
    
    for join_key, tagged_values in mapper.items():
        if len(tagged_values) == 2: # only inner join supported for now
            _reduce(join_key, tagged_values)
        

if __name__ == ""__main__"":
    main()
 -End,"
 import sys
import re

def emit(key: tuple, value: int) -> None:
    word, docname = key
    print(f""{word}#{docname}\t{value}"")


def _map(docname: str, content: str) -> None:
    for word in content:
        word = word.strip()
        if word:
            emit((word, docname), 1)


def main():
    for line in sys.stdin:
        docname, value = line.rstrip().split("":"", 1)
        value = re.sub(r""[\W_]"", "" "", value)
        _map(docname, value.split("" ""))


if __name__ == ""__main__"":
    main() -End,"
 import sys


def emit(key: tuple, value: int) -> None:
    word, docname = key
    print(f""{word}\t{docname}\t{value}"")


def _reduce(counter: dict) -> None:
    for key, value in counter.items():
        emit(key, value)


def main():
    counter = {}
    for line in sys.stdin:
        word_doc, n = line.split(""\t"")
        key, value = tuple(word_doc.split(""#"")), int(n)
        
        counter[key] = counter.get(key, 0) + value
    
    _reduce(counter)

if __name__ == ""__main__"":
    main()
 -End,"
 import sys


def emit(key: str, value: tuple) -> None:
    docname, tf, idf = value
    print(f""{key}\t{docname};{tf};{idf}"")


def _map(key: str, value: tuple) -> None:
    emit(key, (*value, 1))


def main():
    for line in sys.stdin:
        word, docname, tf = line.rstrip().split(""\t"")
        
        _map(word, (docname, tf))


if __name__ == ""__main__"":
    main()
 -End,"
 import sys
from math import inf

def dijkstra(V, start, W):
    d = [inf] * (len(V) + 1)
    d[start] = 0
    Q = set(V)

    while len(Q) > 0:
        u = min(Q, key=lambda v: d[v])
        Q.discard(u)
        for v in Q:
            if (u, v) in W:
                d_u_v = d[u] + W[(u, v)]
                if d[v] > d_u_v:
                    d[v] = d_u_v
    return d


def main():
    v, w = map(int, input().split())
    W = {}
    V = set(range(1, v + 1))
    for k in range(w):
        i, j, weight = map(int, input().split())
        W[(i, j)] = weight
    start, end = map(int, input().split())

    dists = dijkstra(V, start, W)
    print(-1 if dists[end] == inf else dists[end])


if __name__ == ""__main__"":
    main()
 -End,"
 import sys


def _emit(key: str, value: list) -> None:
    key_dist = value[0]
    children = value[1]
    print(f""{key}\t{key_dist}\t{children}"")

    
def _incr_dist(dist: str):
    if dist == ""INF"":
        incr_dist = ""INF""
    else:
        incr_dist = int(dist) + 1
    return incr_dist


def _map(key: str, value: list) -> None:
    _emit(key, value)
    
    parent_dist = value[0]
    children = value[1]
    for child in children.strip(""{}"").split("",""):
        if child:
            _emit(child, [_incr_dist(parent_dist), {}])
        

def main():
    for line in sys.stdin:
        key, dist, children = line.rstrip().split(""\t"")
        _map(key, [dist, children])


if __name__ == ""__main__"":
    main() -End,"
 import sys
from math import inf


def _emit(key: str, value: tuple) -> None:
    dist, children = value
    dist = (""INF"" if dist == inf else int(dist))
    children = ""{"" + "","".join(children) + ""}""
    print(f""{key}\t{dist}\t{children}"")


def _reduce(key: str, values: list) -> None:
    min_dist, _ = min(values, key=lambda v: v[0])
    _, children = max(values, key=lambda v: len(v[1]))
    _emit(key, (min_dist, children))


def main():
    d = {}
    for line in sys.stdin:
        key, dist, children = line.rstrip().split(""\t"")
        children = tuple(filter(lambda v: v, children.strip(""{}"").split("","")))
  
        d.setdefault(key, []).append((float(dist), children))

    for key, values in d.items():
        _reduce(key, values)


if __name__ == ""__main__"":
    main()
 -End,"
 import sys
from collections import namedtuple


Node = namedtuple(""Node"", [""page_rank"", ""adjacency_list""])


def _emit(nid, value):
    if isinstance(value, Node):
        adjacency_list = ""{"" + "","".join(map(str, value.adjacency_list)) + ""}""
        page_rank = value.page_rank
    else:
        adjacency_list = ""{}""
        page_rank = value

    print(f""{nid}\t{round(page_rank, 3)}\t{adjacency_list}"")


def _map(nid, node):
    _emit(nid, node)

    p = node.page_rank / len(node.adjacency_list)
    for adjacency_nid in node.adjacency_list:
        _emit(adjacency_nid, p)


def main():
    for line in sys.stdin:
        nid, page_rank, adjacency_list = line.rstrip().split(""\t"")
        nid = int(nid)
        node = Node(float(page_rank), tuple(map(int, adjacency_list.strip(""{}"").split("",""))))

        _map(nid, node)


if __name__ == ""__main__"":
    main() -End,"
 import sys
from collections import namedtuple


Node = namedtuple(""Node"", [""page_rank"", ""adjacency_list""])


def _emit(nid, node):
    adjacency_list = ""{"" + "","".join(map(str, node.adjacency_list)) + ""}""
    page_rank = node.page_rank

    print(f""{nid}\t{round(page_rank, 3)}\t{adjacency_list}"")


def _reduce(nodes):
    for nid, node_list in nodes.items():
        structural_node = None
        page_rank = 0
        for node in node_list:
            if node.adjacency_list:
                structural_node = node
            else:
                page_rank += node.page_rank
        _emit(nid, Node(page_rank, structural_node.adjacency_list))


def main():
    nodes = {}
    for line in sys.stdin:
        nid, page_rank, adjacency_list = line.rstrip().split(""\t"")
        nid = int(nid)
        if len(adjacency_list) > 2:
            adjacency_list = tuple(map(int, adjacency_list.strip(""{}"").split("","")))
        else:
            adjacency_list = tuple()
        node = Node(float(page_rank), adjacency_list)

        nodes.setdefault(nid, []).append(node)

    _reduce(nodes)


if __name__ == ""__main__"":
    main() -End,"
 import sys
from collections import namedtuple


Node = namedtuple(""Node"", [""page_rank"", ""adjacency_list""])
ALPHA = 0.1
N = 5


def _emit(nid, node):
    adjacency_list = ""{"" + "","".join(map(str, node.adjacency_list)) + ""}""
    page_rank = node.page_rank

    print(f""{nid}\t{round(page_rank, 3)}\t{adjacency_list}"")


def _reduce(nodes):
    for nid, node_list in nodes.items():
        structural_node = None
        page_rank = 0
        for node in node_list:
            if node.adjacency_list:
                structural_node = node
            else:
                page_rank += node.page_rank

        page_rank = ALPHA * (1/N) + (1 - ALPHA) * page_rank
        _emit(nid, Node(page_rank, structural_node.adjacency_list))


def main():
    nodes = {}
    for line in sys.stdin:
        nid, page_rank, adjacency_list = line.rstrip().split(""\t"")
        nid = int(nid)
        if len(adjacency_list) > 2:
            adjacency_list = tuple(map(int, adjacency_list.strip(""{}"").split("","")))
        else:
            adjacency_list = tuple()
        node = Node(float(page_rank), adjacency_list)

        nodes.setdefault(nid, []).append(node)

    _reduce(nodes)


if __name__ == ""__main__"":
    main() -End,"
 def luka(L0, L1, n):
    for _ in range(n):
        L0, L1 = L1, L0 + L1
    return L0




 -End,"
 #!/usr/bin/python3

deck = (""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A"")


def count_cards(cards, deck):
    cards = [card[:-1] for card in cards]
    return [cards.count(card) for card in deck]


def check_flush(cards):
    suits = [card[-1] for card in cards]
    if len(set(suits)) == 1:
        return True
    return False


def check_straight(cards):
    for index in range(len(deck)):
        num_of_cards = count_cards(cards, (deck[index:]+deck[:index]))
        if ("""".join([str(num) for num in num_of_cards[:5]])) == ""11111"":
            return True
    return False


def check_royal(cards):
    cards = [card[:-1] for card in cards]
    for value in (""10"", ""J"", ""Q"", ""K"", ""A""):
        if value not in cards:
            return False
    return True


def best_hand(cards):
    if check_royal(cards) and check_flush(cards):
        return ""Royal Flush""
    elif check_straight(cards) and check_flush(cards):
        return ""Straight Flush""
    elif (4 in count_cards(cards, deck)):
        return ""Four of a Kind""
    elif ((3 in count_cards(cards, deck)) and (2 in count_cards(cards, deck))):
        return ""Full House""
    elif check_flush(cards):
        return ""Flush""
    elif check_straight(cards):
        return ""Straight""
    elif (3 in count_cards(cards, deck)):
        return ""Three of a Kind""
    elif (count_cards(cards, deck).count(2) == 2):
        return ""Two Pairs""
    elif (2 in count_cards(cards, deck)):
        return ""Pair""
    else:
        return ""High Card""


if __name__ == '__main__':
    data = input().split()
    print(best_hand(data))

    # Test
    # data_dict = {""9C JC QC KC AC"": ""Flush"",
                 # ""9C JC QC KC 9D"": ""Pair"",
                 # ""AC JC QC KC AD"": ""Pair"",
                 # ""2C 2S QC KC 9D"": ""Pair"",
                 # ""10H JD QD KS AC"": ""Straight"",
                 # ""2C 3C 4C 5C AC"": ""Straight Flush"",
                 # ""6S 7S 8S 9S 10S"": ""Straight Flush"",
                 # ""10C 7D 8S 9H 6C"": ""Straight"",
                 # ""2C 3D 4S 5H AC"": ""Straight"",
                 # ""AC 3D 9C 5C 6C"": ""High card"",
                 # ""AC 2H 3D 4C 5C"": ""Straight"",
                 # ""AC QC QC 10C AC"": ""Flush"",
                 # ""10H JH QH KH AH"": ""Royal Flush"",
                 # ""JS QS AS KS 10S"": ""Royal Flush"",
                 # ""10S 10D 10C KD AD"": ""Three"",
                 # ""AC 10D 10C AS AD"": ""Full House"",
                 # ""AC 2D 2C AS AD"": ""Full House"",
                 # ""2C 10D 10C 2S 2D"": ""Full House"",
                 # ""10C JS AC 10D AH"": ""Two pair"",
                 # ""10C 10S 10D 10D AH"": ""Four"",
                 # ""AC AS 10D AD AH"": ""Four"",
                 # ""9C JC QH KC AC"": ""High card"",
                 # ""10C AS 10H AD AC"": ""Full House"",
#                  ""10H AC QD KS JH"": ""Straight""}

    # for card in data_dict:
        # print(card, ""-->"", data_dict[card], "">>>"", best_hand(card.split()))
 -End,"
 num = int(input())
data = [int(i) for i in input().split()]
summa = {0, }
for i in range(num):
    tmp = set()
    curlist = list(summa)
    for j in curlist:
        tmp |= {data[i]+j}
    summa |= tmp
print(len(summa)) -End,"
 import array
import bisect


def nearest_to_num(sorted_arr, num):
    if num <= sorted_arr[0]:
        return 0
    elif num >= sorted_arr[-1]:
        return len(sorted_arr)-1
    else:
        index = bisect.bisect_left(sorted_arr, num)
        if ((num-sorted_arr[index-1]) <= (sorted_arr[index]-num)):
            return index-1
        else:
            return index


if __name__ == ""__main__"":
    num = int(input())
    sorted_arr = array.array(""i"", map(int, input().split()))
    num = int(input())
    array_of_int = array.array(""i"", map(int, input().split()))
    print(*[nearest_to_num(sorted_arr, num) for num in array_of_int])
 -End,"
 #!/usr/bin/python3
import bisect


class PriorityQueue():

    def __init__(self):
        self.__queue = []

    def add(self, num):
        bisect.insort(self.__queue, num)

    def get(self):
        print(self.__queue.pop())

if __name__ == '__main__':
    queue = PriorityQueue()
    for i in range(int(input())):
        operation = input()
        if operation == ""ExtractMax"":
            queue.get()
        else:
            queue.add(int(operation.split()[-1]))
 -End,"
 import math
num = int(input())

def count_attempts(num):
    return math.ceil(-0.5+math.sqrt(0.25+2*(num-1)))

print(count_attempts(num)) -End,"
 class Stack_with_max():
    def __init__(self):
        self._stack=[]
    def max(self):
        if self._stack:
            return self._stack[-1][-1]
        else:
            return None
    def pop(self):
        return self._stack.pop()[0]
    def push(self,num):
        if self.max()!=None:
            _max = max(self.max(),num)
        else: _max=num
        self._stack.append((num,_max))
        

def get_command():
    for i in range(int(input())):
        yield input()

def command_handler(stack,_string):
    if _string.startswith(""pop""):
        stack.pop()
    elif _string.startswith(""max""):
        _max=stack.max()
        if _max!=None: 
            print(_max)
    else:
        stack.push(int(_string.split()[-1]))
        

def main():
    stack=Stack_with_max()
    for _string in get_command():
        command_handler(stack,_string)
        
main()
 
 
 
             -End,"
 class Stack_with_max():
    def __init__(self):
        self._stack=[]
    def max(self):
        if self._stack:
            return self._stack[-1][-1]
        else:
            return None
    def pop(self):
        return self._stack.pop()[0]
    def push(self,num):
        if self.max()!=None:
            _max = max(self.max(),num)
        else: _max=num
        self._stack.append((num,_max))
    def empty(self):
        if self._stack:
            return False
        return True
        
class Deque_with_max():
    def __init__(self,max_size=float(""inf"")):
        self._stack_in=Stack_with_max()
        self._stack_out=Stack_with_max()
        self.max_size=max_size
        self.size=0
    def push(self,num):
        if self.size==self.max_size:
            self.pop()
        self._stack_in.push(num)
        self.size+=1
        
    def pop(self):
        if self._stack_out.empty():
            while not self._stack_in.empty():
                self._stack_out.push(self._stack_in.pop())
        if self.size!=0: 
            self.size-=1
        return self._stack_out.pop()
    def max(self):
        if self.size:
            if self._stack_out.empty() or self._stack_in.empty():
                return self._stack_in.empty() and self._stack_out.max() or self._stack_in.max()
            else :
                return max(self._stack_in.max(),self._stack_out.max())
        return None
        

def main():
    result=[]
    count=int(input())
    data=[int(i) for i in input().split()]
    size=int(input())
    deque=Deque_with_max(size)
    for i in range(size):
        deque.push(data.pop(0))
    while data:
        result.append(deque.max())
        deque.push(data.pop(0))
    result.append(deque.max())
    print(*result)
    
main()
 
 
 
             -End,"
 #!/usr/bin/env python3


def main():
    max_size, count = (int(i) for i in input().split())
    net_buffer = Buffer(max_size)
    for package in stream(count):
        net_buffer.enter(*package)
    print(*net_buffer.log, sep=""\n"")


def stream(count):
    for i in range(count):
        yield (int(s) for s in input().split())


class Buffer():
    def __init__(self, max_size):
        self.max_size = max_size
        self._buffer = []
        self._proc_unlock = 0
        self.log = []

    def enter(self, arrival, duration):
        if self._check(arrival):
            self._push(arrival, duration)
        else:
            self.log.append(-1)

    def _push(self, arrival, duration):
        if not self._buffer:
            time_exit = max(self._proc_unlock, arrival)
        else:
            time_exit = max(self._buffer[-1], arrival)
        self._buffer.append(time_exit + duration)
        self.log.append(time_exit)

    def _check(self, time_check):
        while self._buffer and time_check >= self._buffer[0]:
            self._proc_unlock = self._buffer.pop(0)
        if len(self._buffer) < self.max_size:
            return True
        return False


if __name__ == ""__main__"":
    main()
 -End,"
 from collections import defaultdict
from sys import setrecursionlimit


def main():
    setrecursionlimit(10 ** 5)
    tree = defaultdict(list)
    count = int(input())
    data = [int(i) for i in input().split()]
    for i in range(count):
        tree[data[i]].append(i)
    print(height_tree(tree))


def height_tree(tree, node=-1):
    height = 0
    for i in tree[node]:
        height = max(height, 1 + height_tree(tree, i))
    return height


if __name__ == ""__main__"":
    main()
 -End,"
 def height_tree(num, tree):
    depths = [0] * num + [1]
    def count(tree, i):
        if not depths[tree[i]]:
            depths[tree[i]] = count(tree, tree[i]) + 1
            return depths[tree[i]]
        return depths[tree[i]]
    return max(count(tree, i) for i in range(num))

num, tree = int(input()), [int(i) for i in input().split()]
print(height_tree(num, tree)) -End,"
 def main():
    lenght,lst = int(input()),[int(i) for i in input().split()]
    build_heap(lenght,lst)
    print(len(LOG),*(""{} {}"".format(*i) for i in LOG),sep = ""\n"")
    
def build_heap(lenght,lst):
    global LOG
    def siftdown(heap,pos):
        child_l, child_r, idx = pos*2+1, pos*2+2, pos
        for child in child_l, child_r:
            if child < len(heap) and heap[child] < heap[idx]:
                idx = child
        if idx != pos:
            heap[pos], heap[idx] = heap[idx], heap[pos]
            LOG.append((pos,idx))
            siftdown(heap,idx)
    for pos in range(lenght//2,-1,-1):
        siftdown(lst,pos)
        
LOG=[]        
main() -End,"
 import heapq

num, count = [int(i) for i in input().split()]
data = [int(i) for i in input().split()]
log, heap  = [], [[0,i] for i in range(num)]
for i in range(count):
    _min = heapq.heappop(heap)
    log.append([_min[1], _min[0]])
    heapq.heappush(heap, [_min[0] + data[i], _min[1]])
print(*[""{} {}"".format(*i) for i in log], sep=""\n"") -End,"
 import bisect

num, count = [int(i) for i in input().split()]
data = [int(i) for i in input().split()]
log, heap  = [], [[0,i] for i in range(num)]
for i in range(count):
    _min = heap[0]
    del heap[0]
    log.append([_min[1], _min[0]])
    bisect.insort_right(heap, [_min[0] + data[i], _min[1]])
print(*[""{} {}"".format(*i) for i in log], sep=""\n"") -End,"
 from array import array

def find(tables, indexies, pos):
    steps=[]
    while pos!=indexies[pos]:
        steps.append(pos)
        pos=indexies[pos]
    for i in steps:
        indexies[i]=pos
    return pos

def union(tables, indexies, destination, source):
    id_destination = find(tables, indexies, destination)
    id_source = find(tables, indexies, source)
    if id_destination != id_source:
        tables[id_destination] += tables[id_source]
        indexies[id_source] = id_destination
        if tables[0] < tables[id_destination]:
            tables[0] = tables[id_destination]
    print(tables[0])

def main():
    n_tables, n_requests = [int(i) for i in input().split()]
    tables = array(""I"",[0,]+[int(i) for i in input().split()])
    indexies = array(""I"",[i for i in range(n_tables + 1)])
    tables[0] = max(tables)
    for i in range(n_requests):
        destination, source = [int(i) for i in input().split()]
        union(tables, indexies, destination, source)

if __name__ == ""__main__"":
    main()





 -End,"
 def logger(buffer, free_time, size, arrival, duration):
    while buffer and arrival >= buffer[0]:
        free_time = buffer.pop(0)
    if len(buffer) < size:
        time_exit = max(arrival, buffer and buffer[-1] or free_time)
        buffer.append(time_exit + duration)
        return time_exit
    return -1

buffer, free_time = [], 0
size, count = [int(i) for i in input().split()]
for i in range(count):
    arrival, duration = [int(i) for i in input().split()]
    print(logger(buffer, free_time, size, arrival, duration)) -End,"
 class Phonebook():
    def __init__(self):
        self._database = [""not found"" for i in range(10 ** 7)]
    def add(self, phone, name):
        self._database[phone] = name
    def find(self, phone):
        print(self._database[phone])
    def delete(self, phone):
        self._database[phone] = ""not found""

def handler(phonebook, stream):
    for command in stream:
        if command.startswith(""add""):
            _, phone, name = command.split()
            phonebook.add(int(phone), name)
        else:
            _, phone = command.split()
            if command.startswith(""find""):
                phonebook.find(int(phone))
            else:
                phonebook.delete(int(phone))

if __name__ == ""__main__"":
    phonebook = Phonebook()
    count = int(input())
    handler(phonebook, [input() for i in range(count)])
 -End,"
 class Chains():
    def __init__(self, size):
        self._size = size
        self._database = [[] for i in range(size)]
        self.commands = {""add"": self.add, ""find"": self.find,
                         ""check"": self.check, ""del"": self.delete}

    def add(self, arg, _hash):
        if arg not in self._database[_hash]:
            self._database[_hash].append(arg)

    def find(self, arg, _hash):
        print(arg in self._database[_hash] and ""yes"" or ""no"")

    def delete(self, arg, _hash):
        try:
            idx = self._database[_hash].index(arg)
            del self._database[_hash][idx]
        except ValueError:
            pass

    def check(self, arg, _hash):
        print(*self._database[int(arg)][-1::-1])

    def _hash(self, arg):
        degree, _hash, p = 1, 0, 10 ** 9 + 7
        for symbol in arg:
            _hash += (ord(symbol) * degree)
            degree *= 263
        return _hash % p % self._size

    def __call__(self, _string):
        command, arg = _string.split()
        _hash = self._hash(arg)
        self.commands[command](arg, _hash)

if __name__ == ""__main__"":
    database = Chains(int(input()))
    count = int(input())
    for _string in [input() for i in range(count)]:
        database(_string)
 -End,"
 sub, _str = [input() for i in range(2)]
len_sub, len_str = map(len,[sub,_str])
hash_tmp, _hash = sum(map(ord,sub)), sum(map(ord,_str[:len_sub]))
hashes = _str.startswith(sub) and [0,] or []
for x,y in zip(range(1,len_str),range(len_sub,len_str)):
    _hash += ord(_str[y]) - ord(_str[x-1])
    if _hash == hash_tmp and sub[0] == _str[x]:
        hashes.append(x)
print(*[i for i in hashes if _str[i:i+len_sub] == sub])
            -End,"
 from collections import deque

class Deque():
    def __init__(self):
        self.deque = deque()
        self.commands = {""1"":self.deque.appendleft,""2"":self.deque.popleft,
                        ""3"":self.deque.append,""4"":self.deque.pop}
    def __call__(self,_string):
        command, arg = _string.split()
        if command in (""1"",""3""):
            self.commands[command](arg)
            return True
        else:
            res = self.deque and self.commands[command]() or -1
            return int(res) == int(arg)
            
def main():
    data = Deque()
    result = ""YES""
    for i in range(int(input())):
        if not data(input()):
            result = ""NO""
            break
    print(result)        
                
main()

 -End,"
 from fractions import gcd

x, y = map(int, input().split())
print((x * y) // gcd(x, y)) -End,"
 from collections import defaultdict

def height_tree(tree,count=0):
    level = tree[-1]
    while level:
        for i in range(len(level)):
            level.extend(tree[level.pop(0)])
        count +=1
    return count

if __name__ == ""__main__"":
    count, data = int(input()), [int(i) for i in input().split()]
    tree = defaultdict(list)
    for i in range(count):
        tree[data[i]].append(i)
    print(height_tree(tree))
 -End,"
 class Bstree():
    def __init__(self, nodes):
        self.nodes = nodes

    def val(self, node):
        return self.nodes[node][0]

    def left(self, node):
        return self.nodes[node][1]

    def right(self, node):
        return self.nodes[node][2]

    def in_order(self, node=0):
        if node == -1: return []
        return self.in_order(self.left(node)) + [self.val(node), ] + self.in_order(self.right(node))

    def pre_order(self, node=0):
        if node == -1: return []
        return [self.val(node), ] + self.pre_order(self.left(node)) + self.pre_order(self.right(node))

    def post_order(self, node=0):
        if node == -1: return []
        return self.post_order(self.left(node)) + self.post_order(self.right(node)) + [self.val(node), ]


def main():
    count = int(input())
    tree = [tuple(map(int, input().split())) for i in range(count)] + [-1]
    bstree = Bstree(tree)
    print(*bstree.in_order())
    print(*bstree.pre_order())
    print(*bstree.post_order())

if __name__ == ""__main__"":
    main()
 -End,"
 import sys

class Bstree():
    def __init__(self, nodes):
        self.nodes = nodes
    def val(self, node):
        return self.nodes[node][0]
    def left(self, node):
        return self.nodes[node][1]
    def right(self, node):
        return self.nodes[node][2]
    def in_order(self, node=0):
        if node == -1: return []
        return self.in_order(self.left(node)) + [self.val(node), ] + self.in_order(self.right(node))
    def check(self, node):
        check_lst = self.in_order(0)
        for i in range(len(check_lst) - 1):
            if not check_lst[i] < check_lst[i + 1]:
                return False
        return True

def main():
    sys.setrecursionlimit(10 ** 5)
    count = int(input())
    if count == 0:
        print(""CORRECT"")
    else:
        tree = [tuple(map(int, input().split())) for i in range(count)] + [-1]
        bstree = Bstree(tree)
        print(bstree.check(0) and ""CORRECT"" or ""INCORRECT"")

if __name__ == ""__main__"":
    main()
 -End,"
 import sys

class Bstree():
    def __init__(self, nodes):
        self.nodes = nodes
    def val(self, node):
        return self.nodes[node][0]
    def left(self, node):
        return self.nodes[node][1]
    def right(self, node):
        return self.nodes[node][2]
    def check(self, node, _min, _max):
        if node == -1:
            return True
        if self.val(node) <= _min or self.val(node) >= _max:
            return False
        else:
            return self.check(self.left(node), _min, self.val(node)) and self.check(self.right(node), self.val(node), _max)

def main():
    sys.setrecursionlimit(10 ** 5)
    count = int(input())
    if count == 0:
        print(""CORRECT"")
    else:
        tree = [tuple(map(int, input().split())) for i in range(count)] + [-1]
        bstree = Bstree(tree)
        print(bstree.check(0, -float(""inf""), float(""inf"")) and ""CORRECT"" or ""INCORRECT"")

if __name__ == ""__main__"":
    main()
 -End,"
 import sys

class Bstree():
    def __init__(self, nodes):
        self.nodes = nodes
    def val(self, node):
        return self.nodes[node][0]
    def left(self, node):
        return self.nodes[node][1]
    def right(self, node):
        return self.nodes[node][2]
    def check(self, node, _min, _max):
        if node == -1:
            return True
        if self.val(node) < _min or self.val(node) >= _max:
            return False
        else:
            return self.check(self.left(node), _min, self.val(node)) and self.check(self.right(node), self.val(node), _max)

def main():
    sys.setrecursionlimit(10 ** 5)
    count = int(input())
    if count == 0:
        print(""CORRECT"")
    else:
        tree = [tuple(map(int, input().split())) for i in range(count)] + [-1]
        bstree = Bstree(tree)
        print(bstree.check(0, -float(""inf""), float(""inf"")) and ""CORRECT"" or ""INCORRECT"")

if __name__ == ""__main__"":
    main()
 -End,"
 class Node:
    def __init__(self, value):
        self.value = self.sum = value
        self.left = self.right = self.parent = None

def update(node):
    if node is not None: 
        node.sum = node.value + (node.left.sum if node.left is not None else 0) + (node.right.sum if node.right is not None else 0)
        for child in [node.left,node.right]:
            if not child is None: 
                child.parent = node

def rotation(node):
    if node.parent is not None: 
        parent = node.parent
        grandparent = node.parent.parent
        if parent.left == node:
            node.right, parent.left = parent, node.right
        else:
            node.left, parent.right = parent, node.left
        node.parent, parent.parent = parent.parent, node
        update(parent)
        update(node)
        if grandparent is not None:
            if grandparent.left == parent:
                grandparent.left = node
            else:
                grandparent.right = node

def splay(node):
    if node is not None: 
        while node.parent is not None:
            if node.parent.parent is None:
                rotation(node)
                break
            if ((node.parent.left == node and node.parent.parent.left == node.parent) 
                or (node.parent.right == node and node.parent.parent.right == node.parent)):
                rotation(node.parent)
                rotation(node)
            else:
                rotation(node)
                rotation(node)
        return node
    return None

def find(node, value):
    result = False
    while node is not None:
        if node.value == value:
            result = True
            break
        if node.value > value and  node.left is not None:
            node = node.left
            continue
        if node.value < value and  node.right is not None:
            node = node.right
            continue
        else: break
    node = splay(node)
    return  result, node

def split(node, value):
    if node is None:
        return None, None
    _, node = find(node, value)
    if node.value >= value: 
        left, node.left = node.left, None
        update(node)
        if left is not None:
            left.parent = None
        return left, node
    if node.value < value:
        right, node.right = node.right, None
        update(node)
        if right is not None:
            right.parent = None
        return node, right
    
def merge(left, right):
    if right == None:
        return left
    if left == None:
        return right
    _, right = find(right, left.value)
    right.left, left.parent = left, right
    update(right)
    return right

def insert(node, value):
    left, right = split(node, value)
    if right is not None and right.value == value:
        return merge(left, right)
    node = Node(value)   
    node.left, node.right = left, right
    update(node)
    return node

def delete(node, value):
    left, right = split(node, value)
    if right is not None and right.value == value:
        right = right.right
        if right is not None:
            right.parent = None
    return merge(left, right)
    
def summa(node, start, end):
    _sum = 0
    left, middle = split(node, start)
    middle, right = split(middle, end)
    if middle is not None:
        _sum = middle.sum
    if right is not None and right.value == end:
        _sum += end
    node = merge(left, merge(middle, right))
    return node, _sum

DIVISOR = 10 ** 9 + 1
last_result, tree = 0, None

def _hash(num, last_result):
    return (num + last_result) % DIVISOR

for i in range(int(input())):
    line = input()
    if line.startswith(""s""):
        start, end = map(int, line.split()[1:])
        tree, result = summa(tree, _hash(start, last_result), _hash(end, last_result))
        print(result)
        last_result = result % DIVISOR
    else:
        command, num = line.split()
        num = _hash(int(num), last_result)
        if command == ""+"":
            tree = insert(tree, num)
        elif command == ""-"":
            tree = delete(tree, num)
        else:
            result, tree = find(tree, num)
            print('Found' if result else 'Not found')
 -End,"
 in_string, num = input(), ''
for sym in in_string:
    if sym.isdigit():
        num = num + sym
        continue
    print(sym * int(num if num else 1), end = '')
    num = '' -End,"
 from itertools import permutations

n, k = (int(i) for i in input().split())
for item in permutations(range(n), k):
    print(*item) -End,"
 from skimage.io import imread, imsave


def paint_central_pixel(in_file, out_file, color):
    """"""
    The function changes the color of the central pixel and writes it to a new file.
    The dimensions of the input image must be odd. Input format: 
    in_file, out_file - string (image file names), color - list (color in rgb format)
    """"""
    img = imread(in_file)
    x, y, _ = (i//2 for i in img.shape)
    img[x, y] = color
    imsave(out_file, img)
    
if __name__ == ""__main__"":
    color = [102, 204, 102]
    in_file, out_file = ""img.png"", ""out_img.png""
    paint_central_pixel(in_file, out_file, color) -End,"
 from skimage.io import imread, imsave


def paint_central_rectangle(in_file, out_file, color, size):
    """"""
    The function draws a rectangle in the center of the image and writes a new image to a file.
    The dimensions of the input image and the rectangle must be odd.
    Input format: size - list (the size of the rectangle),
    in_file, out_file - string (image file names), color - list (color in rgb format)
    """"""
    img = imread(in_file).copy()
    x, y, _ = (i//2 for i in img.shape)
    x_delta, y_delta = (i//2 for i in size)
    img[x - x_delta:x + x_delta +1, y - y_delta:y + y_delta +1] = color
    imsave(out_file, img)
    
if __name__ == ""__main__"":
    color, size = [255, 192, 203], [7, 15]
    in_file, out_file = ""img.png"", ""out_img.png""
    paint_central_rectangle(in_file, out_file, color, size) -End,"
 from itertools import product
from skimage.io import imread, imshow
import numpy as np


def get_size_border(file_name):
    """"""
    The function takes the name of the image file. 
    Returns a tuple with the frame dimensions (left, top, right, bottom).
    """"""
    img = imread(file_name)
    x_size, y_size, _ = img.shape
    left, top, right, bottom = y_size, x_size, -1, -1
    for x, y in product(range(x_size), range(y_size)):
        if not np.array_equal(img[x, y], img[0, 0]):
            left, top = min(left, y), min(top, x)
            right, bottom = max(right, y), max(bottom, x)
    return left, top, y_size - right - 1, x_size - bottom - 1


if __name__ == ""__main__"":
    print(*get_size_border('img.png'))
 -End,"
 import numpy as np
from itertools import product


def align(in_file, check_point, indent=0.05, shift=15):
    # определяем шаг нарезки и размер рамки
    step, border = img.shape[0] // 3, round(img.shape[1] * indent)

    # разрезаем и убираем рамку
    b_channel, g_channel, r_channel = [img[step * i + border:step * (i + 1) - border, border:-border] for i in range(3)]

    # создаем переменные для хранения максимальных значений корелляций и соответсвующих им сдвигов
    r_maxcol, b_maxcol, r_shift, b_shift = 0, 0, (None, None), (None, None)

    # перебираем все возможные сдвиги
    for cur_shift in product(range(-shift, shift + 1), range(-shift, shift + 1)):
        # сдвигаем зеленый канал
        cur_img = np.roll(g_channel, cur_shift[0], axis=0)
        cur_img = np.roll(cur_img, cur_shift[1], axis=1)
        # находим корреляцию и обновляем значения переменных для красного, если необходимо
        r_cor = (cur_img * r_channel).sum()
        if r_maxcol < r_cor:
            r_maxcol, r_shift = r_cor, cur_shift
        # находим корреляцию и обновляем значения переменных для синего, если необходимо
        b_cor = (cur_img * b_channel).sum()
        if b_maxcol < b_cor:
            b_maxcol, b_shift = b_cor, cur_shift

    return (check_point[0] + b_shift[0] - step, check_point[1] + b_shift[1]), (
        check_point[0] + r_shift[0] + step, check_point[1] + r_shift[1])
 -End,"
 from functools import reduce

def meanAge(records):
    if records:
        count = lambda records: map((lambda record: (record['age'], 1) if 'age' in record else (0, 0)), records)
        ageTotal, ageRecs = reduce(lambda x, y: (x[0] + y[0], x[1] + y[1]), count(records))
        return ageTotal / ageRecs
    return -End,"
 meanAge = lambda kids: sum(list(map(lambda kids:kids.get('age',0),kids))) /  sum(list(map(lambda kids: 'age' in kids, kids))) if  sum(list(map(lambda kids: 'age' in kids, kids))) else None
         -End,"
 def isPalindrome(text):
    if len(text) > 1:  
        return text[0] == text[-1] and isPalindrome(text[1:-1]) or False   
    return True -End,"
 from skimage.io import imread
import numpy as np
from itertools import takewhile


print(*('{0} {2} {1} {3}'.format(*([len(list(takewhile(lambda s: s.all(), [(s == img[0,0]) for s in [img[:,i]  for i in range(*a)]]))) for a in ((0, img.shape[0]//2, 1),(-1, -img.shape[0]//2, -1))] + [len(list(takewhile(lambda s: s.all(), [(s == img[0,0]) for s in [img[i,:]  for i in range(*a)]]))) for a in ((0, img.shape[1]//2, 1),(-1, -img.shape[1]//2, -1))])) for img in (imread('img.png'),))) -End,"
 from functools import reduce
def maximum(seq):
    if not seq:
        return -float(""Inf"")
    return reduce(lambda x,y: x>y and x or y, seq) -End,"
 def myAll(predicate, seq):
    return all(map(predicate,seq))

def myAny(predicate, seq):
    return not myAll(predicate, seq)

elem = lambda x: lambda y: x in y -End,"
 from skimage.io import imread, imsave, imshow
import numpy as np
from itertools import product, accumulate


# читаем файл с изображением
img = imread('img.png')
#  создаем гистограмму изображения
values, bin_edges = np.histogram(img, bins=range(257))
# считаем функцию sdf
sdf = list(accumulate(values))
# находим sdf_min
sdf_min = min(i for i in sdf if i)
# определяем границы для прохождения по массиву
x, y = img.shape
# проходим по всем пикселям и меняем на новое значение
for row,col in product(range(x),range(y)):    
    bright = img[row, col]
    img[row, col] = round(255 * (sdf[bright] - sdf_min) / (img.size - 1))
# записываем изображение в файл    
imsave('out_img.png', img)
 -End,"
 from skimage.io import imread, imsave
from scipy.ndimage.filters import median_filter

imsave('out_img.png', median_filter(imread(""img.png""),size=7)[3:-3,3:-3]) 
 -End,"
 num = int(input())
count = int(((1 + 8 * num)**0.5 - 1) / 2)
res = range(1, count)
print(count)
print(*res, num - sum(res))




 -End,"
 import sys

stack = [0]

for _ in range(int(sys.stdin.readline())):
	command = sys.stdin.readline().split()

	if command[0] == 'push':
		stack.append(max(stack[-1], int(command[1])))

	elif command[0] == 'pop':
		del stack[-1]

	else:
		print(stack[-1])











 -End,"
 import sys

buffer, free_time = [], 0
size, count = map(int, sys.stdin.readline().split())
for i in range(count):
    arrival, duration = map(int, sys.stdin.readline().split())
    while buffer and arrival >= buffer[0]:
        free_time = buffer[0]
        del buffer[0]
    if len(buffer) < size:
        time_exit = max(arrival, buffer and buffer[-1] or free_time)
        buffer.append(time_exit + duration)
        print(time_exit)
    else:
        print('-1')





 -End,"
 def gen_ticket_number(count, series, length=6):
    series_generator = gen_series(series)
    number_generator = gen_number(length)
    for series in series_generator:
        for number in number_generator:
            if not count:
                return
            yield ' '.join((number, series))
            count -= 1
        number_generator = gen_number(length)


def gen_series(series):
    series = series.upper()
    yield series
    while series != 'ZZ':
        first_sign, second_sign = map(ord, series)
        if second_sign == ord('Z'):
            series = chr(first_sign + 1) + 'A'
        else:
            series = chr(first_sign) + chr(second_sign + 1)
        yield series


def gen_number(length=6):
    for num in range(1, 10 ** length):
        yield str(num).zfill(length)
 -End,"
 
class Matrix:
    MAX_SIZE = 1000  # максимальное допустимое количество строк

    def __init__(self, max_size=None):
        self.max_size = max_size or self.MAX_SIZE
        self.current_size = 1
        self.matrix = [None, ]
        self.null_idx = 0
        self.resize_up_idx = 0
        self.resize_down_idx = 0

    def append(self, element=None):
        # если element=None, не добавляем
        if element is None:
            return
        # проверяем нужно ли увеличивать размер матрицы
        if self.null_idx == self.resize_up_idx:
            # увеличиваем размер матрицы
            self.resize_up()
        # добавляем элемент в матрицу
        self.matrix[self.null_idx] = element
        # изменяем текущий индекс нулевого элемента
        self.null_idx += 1

    def resize_up(self):
        # проверяем: текущий размер матрицы максимально допустимый?
        if self.current_size == self.max_size:
            # не изменяем размер матрицы
            return
        # увеличиваем текущий размер матрицы
        self.current_size += 1
        # расширяем саму матрицу
        self.matrix.extend([None, ] * (self.current_size ** 2 - len(self.matrix)))
        # изменяем значения атрибутов resize_down_idx и resize_up_idx
        self.resize_down_idx = (self.current_size - 1) * (self.current_size - 2)
        self.resize_up_idx = self.current_size * (self.current_size - 1)

    def pop(self):
        # если матрица 'пустая' выкидываем IndexError
        if self.current_size == 1 and self.matrix[0] is None:
            raise IndexError
        # проверяем нужно ли уменьшать размер матрицы
        if self.null_idx - 1 == self.resize_down_idx:
            # уменьшаем размер матрицы
            self.resize_down()
        # извлекаем элемент, устанавливаем него место None
        result, self.matrix[self.null_idx - 1] = self.matrix[self.null_idx - 1], None
        # иизменяем текущий индекс нулевого элемента
        self.null_idx -= 1
        # возвращаем элемент
        return result

    def resize_down(self):
        # уменьшаем текущий размер матрицы
        self.current_size -= 1
        # обрезаем матрицу по новому размеру
        self.matrix = self.matrix[:self.current_size ** 2]
        # устанавливаем новое значение атрибута resize_up_idx
        # self.resize_up_idx = self.resize_down_idx + 1
        self.resize_up_idx = self.current_size * (self.current_size - 1)
        # вычисляем новое значение атрибута resize_down_idx
        self.resize_down_idx = (self.current_size - 1) * (self.current_size - 2)

    def __str__(self):
        output = ''
        for row in range(self.current_size):
            start = self.current_size * row
            end = self.current_size * (row + 1)
            output += ' '.join([str(i) for i in self.matrix[start:end]]) + '\n'
        return output

    @classmethod
    def from_iter(cls, iter_obj, max_size=None):
        matrix = cls(max_size)

        for element in iter_obj:
            matrix.append(element)

        return matrix -End,"
 class Person:
    """"""класс описывающий человека""""""

    def __init__(self, name):
        self.name = name

    @staticmethod
    def read(book, page):
        """"""читаем страницу page в книге book""""""
        return book.read(page)

    @staticmethod
    def write(book, page, text):
        """"""пишем на страницу page в книге book""""""
        book.write(page, text)

    def set_bookmark(self, book, page):
        """"""устанавливает закладку в книгу book""""""
        if hasattr(book, 'set_bookmark'):
            book.set_bookmark(self, page)
            return
        raise NotExistingExtensionError

    def get_bookmark(self, book):
        """"""получает номер страницы установленной закладки в книге book""""""
        if hasattr(book, 'get_bookmark'):
            return book.get_bookmark(self)
        raise NotExistingExtensionError

    def del_bookmark(self, book):
        """"""удаляет закладку читателя person, если она установлена""""""
        if hasattr(book, 'get_bookmark'):
            book.del_bookmark(self)
            return
        raise NotExistingExtensionError


class Book:
    def __init__(self, title, content=None):
        self.title = title
        self.content = content or []
        self.size = len(self.content)

    def read(self, *args, **kwargs):
        raise NotImplementedError

    def write(self, *args, **kwargs):
        raise NotImplementedError


class Novel(Book):
    def __init__(self, author, year, title, content=None):
        super().__init__(title, content)
        self.author = author  # автор
        self.year = year  # год издания
        self.bookmark = {}  # словарь: ключ-читатель,значение-номер страницы

    def read(self, page):
        """"""возвращает страницу""""""
        if page < 0 or page >= len(self.content):
            raise PageNotFoundError
        return self.content[page]

    def write(self, *args, **kwargs):
        raise PermissionDeniedError

    def set_bookmark(self, person, page):
        """"""устанавливает закладку в книгу book""""""
        if page < 0 or page >= len(self.content):
            raise PageNotFoundError
        self.bookmark[person] = page

    def get_bookmark(self, person):
        """"""получает номер страницы установленной закладки в книге book""""""
        if person in self.bookmark:
            return self.bookmark[person]
        raise PageNotFoundError

    def del_bookmark(self, person):
        if person in self.bookmark:
            del self.bookmark[person]


class Notebook(Book):
    def __init__(self, title, size=12, max_sign=2000, content=None):
        content = content if content else ['', ] * size
        super().__init__(title, content)
        self.max_sign = max_sign  # максимальное количество символов на странице

    def read(self, page):
        """"""возвращает страницу""""""
        if page < 0 or page >= len(self.content):
            raise PageNotFoundError
        return self.content[page]

    def write(self, page, text):
        if page < 0 or page >= len(self.content):
            raise PageNotFoundError
        if len(self.content[page]) + len(text) > self.max_sign:
            raise TooLongTextError
        self.content[page] += text
  
 -End,"
 def create_matrix(size):
    return [None for _ in range(size * size)]


def add_element(element, matrix):
    # если добавляемый элемент - None, возвращаем матрицу
    if element is None:
        return matrix
    # узнаем индекс первого ""нулевого"" элемента
    idx = matrix.index(None)
    # добавляем элемент
    matrix[idx] = element
    # определяем размер матрицы
    size = int(len(matrix) ** 0.5)
    # проверяем нужно ли увеличивать размер матрицы
    if idx == size * (size - 1):
        # увеличиваем размер матрицы
        matrix.extend([None, ] * ((size + 1) ** 2 - len(matrix)))
    # возвращаем матрицу
    return matrix


def matrix_to_string(matrix):
    result = ''
    size = int(len(matrix) ** 0.5)
    for row in range(size):
        result += ' '.join([str(i) for i in matrix[size * row:size * (row + 1)]]) + '\n'
    return result -End,"
 string1 = input().lower()
string2 = input().lower()
indexies, unique_sign = {}, set(string2)

for pos, sign in enumerate(string1, 1):
    indexies.setdefault(sign, []).append(pos)

for sign in string2:
    if sign.isalpha() and sign in unique_sign:
        unique_sign.remove(sign)
        print(sign, *indexies.get(sign, [None,]))




 -End,"
 from string import ascii_lowercase as alphabet

string = input().lower()
print(*(sign for sign in alphabet if sign in string), sep='')





 -End,"
 from math import hypot

result, max_value = 0, 10 
for _ in range(int(input())):
    x, y = map(float, input().split())
    result += max(0, max_value - int(hypot(x, y)))

print(result)




 -End,"
 count = int(input())
number, series = input().upper().lstrip('0').split()
count = min(count, int(number))
winners = random.sample(range(1, int(number) +1), count)

for count, num in enumerate(winners, 1):
    print(f'Победитель номер {count} - ""{num:06} {series}""') 




 -End,"
 from string import ascii_lowercase as alphabet

code_string = input().lower()
code_key = input()
table = str.maketrans(code_key, alphabet)
print(code_string.translate(table))





 -End,"
 recipes = {'Бутерброд с ветчиной': {'Хлеб': 50, 'Ветчина': 20, 'Сыр': 20},
           'Салат Витаминный': {'Помидоры': 50, 'Огурцы': 20, 'Лук': 20,
                                'Майонез': 50, 'Зелень': 20}}

store = {'Хлеб': 250, 'Ветчина': 120, 'Сыр': 120, 'Помидоры': 50,
         'Огурцы': 20, 'Лук': 20, 'Майонез': 500, 'Зелень': 20}


def get_max_portions(food, recipes, store):
    portions = []
    for ingredient, count in recipes[food].items():
        portions.append(store.get(ingredient, 0) // count)
    return min(portions)


def check_portions(food, count, recipes=recipes, store=store):
    max_portions = get_max_portions(food, recipes, store)
    if max_portions < count:
        return 0, max_portions
    return 1, count -End,"
 from collections import namedtuple
from collections import defaultdict

statistics = defaultdict(list)
Order = namedtuple('Order', ['success', 'portions'])

def collect_statistics(statistics):
    def decorator(func):
        @wraps(func)
        def inner(*args, **kwargs):
            food, count = args
            response_code, max_count = func(*args, **kwargs)
            portions = max_count if response_code else count - max_count
            statistics[food].append(Order(response_code, portions))
            return response_code, max_count

        return inner

    return decorator


def get_max_portions(food, recipes, store):
    portions = []
    for ingredient, count in recipes[food].items():
        portions.append(store.get(ingredient, 0) // count)
    return min(portions)


@collect_statistics(statistics)
def check_portions(food, count, recipes=recipes, store=store):
    max_portions = get_max_portions(food, recipes, store)
    if max_portions < count:
        return 0, max_portions
    return 1, count -End,"
 class BookIOErrors(Exception):
    """"""базовый класс исключений для работы с книгой""""""


class PageNotFoundError(BookIOErrors):
    """"""имя не существует""""""


class TooLongTextError(BookIOErrors):
    """"""слишком большой текст, не поместится на странице""""""


class PermissionDeniedError(BookIOErrors):
    """"""операция не позволяется""""""


class NotExistingExtensionError(BookIOErrors):
    """"""вызываемый метод не существует""""""





 -End,"
 class AdvancedPerson(Person):
    @staticmethod
    def search(book, name_page):
        if hasattr(book, 'search'):
            return book.search(name_page)
        raise NotExistingExtensionError

    @staticmethod
    def read(book, page):
        page = page if isinstance(page, int) else AdvancedPerson.search(book, page)
        return Person.read(book, page)

    @staticmethod
    def write(book, page, text):
        page = page if isinstance(page, int) else AdvancedPerson.search(book, page)
        Person.write(book, page, text)
        return


class NovelWithTable(Novel):
    """"""класс книга с оглавлением""""""

    def __init__(self, author, year, title, content=None, table=None):
        self.table = table or {}
        super().__init__(author, year, title, content)

    def search(self, chapter):
        if chapter not in self.table:
            raise PageNotFoundError
        return self.table[chapter]

    def add_chapter(self, chapter, page):
        self.table[chapter] = page

    def remove_chapter(self, chapter):
        if chapter in self.table:
            del self.table[chapter]
            return
        raise PageNotFoundError
 -End,"
 from functools import total_ordering


@total_ordering
class Book:
    """"""класс книга""""""

    def __init__(self, title, content=None):
        self.title = title
        self._content = [] if content is None else content

    def __getitem__(self, key):
        if key < 1 or key > len(self._content):
            raise PageNotFoundError
        return self._content[key - 1]

    def __setitem__(self, key, value):
        if key < 1 or key > len(self._content):
            raise PageNotFoundError
        self._content[key - 1] = Page(str(value))

    def __len__(self):
        return len(self._content)

    def __eq__(self, other):
        if isinstance(other, Book):
            return len(self) == len(other)
        raise TypeError

    def __lt__(self, other):
        if isinstance(other, Book):
            return len(self) < len(other)
        raise TypeError


@total_ordering
class Page:
    """"""класс страница""""""

    def __init__(self, text=None, max_sign=2000):
        self._text = '' if text is None else text
        self.max_sign = max_sign

    def __str__(self):
        return self._text

    def __repr__(self):
        return self._text

    def __add__(self, other):
        if not isinstance(other, (Page, str)):
            raise TypeError
        other = str(other)
        if len(self) + len(other) > self.max_sign:
            raise TooLongTextError
        self._text += other
        return self

    def __radd__(self, other):
        if not isinstance(other, (Page, str)):
            raise TypeError
        return str(other) + str(self)

    def __iadd__(self, other):
        if not isinstance(other, (Page, str)):
            raise TypeError
        other = str(other)
        if len(self) + len(other) > self.max_sign:
            raise TooLongTextError
        self._text += other
        return self

    def __len__(self):
        return len(self._text)

    def __eq__(self, other):
        if isinstance(other, (Page, str)):
            return len(self) == len(other)
        raise TypeError

    def __lt__(self, other):
        if isinstance(other, (Page, str)):
            return len(self) < len(other)
        raise TypeError -End,"
 class CalendarBookmark:
    """"""класс дескриптор - закладка для ежедневника""""""
    def __init__(self):
        self.bookmark = 0

    def __get__(self, obj, obj_type):
        return self.bookmark

    def __set__(self, obj, value):
        if value < 1 or value > len(obj):
            raise PageNotFoundError
        self.bookmark = value


class CalendarBook(Book):

    bookmark = CalendarBookmark()

    def __init__(self, title, content=None):
        super().__init__(title, content)
        self._get_content(int(title))
    
    def _get_content(self, year):
        cal_obj = TextCalendar()
        for month in range(1, 13):
            self._content.append(cal_obj.formatmonth(year, month))
            for date in cal_obj.itermonthdates(year, month):
                if date.month == month:
                    self._content.append(Page(date.isoformat()))
        return self._content -End,"
 class Person:
    """"""класс описывающий человека""""""

    def __init__(self, name):
        self.name = name

    def set_bookmark(self, *args, **kwargs):
        """"""устанавливает закладку в книгу book""""""
        raise NotImplementedError

    def get_bookmark(self, *args, **kwargs):
        """"""получает номер страницы установленной закладки в книге book""""""
        raise NotImplementedError

    def del_bookmark(self, *args, **kwargs):
        """"""удаляет закладку читателя person, если она установлена""""""
        raise NotImplementedError


class Reader:
    def read(self, book, num_page):
        return book[num_page]


class Writer:
    def write(self, book, num_page, text):
        book[num_page] += text


class AdvancedPerson(Person, Reader, Writer):
    """"""класс человека умеющего читать, писать, пользоваться закладками""""""

    @staticmethod
    def set_bookmark(book, num_page):
        """"""устанавливает закладку в книгу book""""""
        if not hasattr(book, 'bookmark'):
            raise NotExistingExtensionError
        book.bookmark = num_page

    @staticmethod
    def get_bookmark(book):
        """"""получает номер страницы установленной закладки в книге book""""""
        if not hasattr(book, 'bookmark'):
            raise NotExistingExtensionError
        return book.bookmark

    @staticmethod
    def del_bookmark(book, person):
        raise PermissionDeniedError

    @staticmethod
    def search(book, page):
        table = book[len(book)]
        if isinstance(table, PageTableContents):
            return table.search(page)
        raise NotExistingExtensionError

    def read(self, book, page):
        if isinstance(page, str):
            page = self.search(book, page)
        return super().read(book, page)

    def write(self, book, page, text):
        if isinstance(page, str):
            page = AdvancedPerson.search(book, page)
        super().write(book, page, text)


class PageTableContents(Page):
    title = 'TABLE OF CONTENT\n'

    def __init__(self, text=None, max_sign=2000):
        _text = OrderedDict()
        if not text is None:
            lines = text.splitlines()[1:]
            for line in lines:
                chapter, num_page = line.split(':')
                _text[chapter] = num_page
        super().__init__(_text, max_sign)

    def search(self, chapter):
        if chapter in self._text:
            return int(self._text[chapter])
        raise PageNotFoundError

    def __str__(self):
        text = ''.join('{}:{}\n'.format(chapter, num_page) for chapter, num_page in
                       self._text.items())
        return self.title + text

    # переопределяем поведение при вызове функции len
    def __len__(self):
        return len(str(self))

    # перегружаем операторы + и +=
    def __add__(self, other):
        raise PermissionDeniedError

    def __radd__(self, other):
        raise PermissionDeniedError

    def __iadd__(self, other):
        raise PermissionDeniedError


class CalendarBook(Book):
    """"""класс ежедневник с закладкой""""""

    def __init__(self, title, content=None):
        if content is None:
            content, text = CalendarBook.content_generator(int(title))
            super().__init__(title, content)
            self._content.append(PageTableContents(text))
        else:
            super().__init__(title, content)

    @staticmethod
    def content_generator(year):
        content = []
        calendar_ = TextCalendar()
        text = 'TABLE OF CONTENT\n'

        for month in range(1, 13):
            content.append(Page(calendar_.formatmonth(year, month)))
            text += '{}:{}\n'.format(list(month_name)[month], str(len(content)))
            for date in calendar_.itermonthdates(year, month):
                if date.month == month:
                    content.append(Page(date.isoformat()))

        return content, text

    # добавляем закладку
    bookmark = CalendarBookmark('bookmark')

 -End,"
 genome = input()
print(sum(map(lambda x: x in 'gcGC', genome)) * 100 / len(genome))




 -End,"
 digits = [int(i) for i in input().split()]
if len(digits) > 1:
    print(*[digits[i - 1] + digits[(i + 1) % len(digits)] for i in range(len(digits))])
else:
    print(*digits)




 -End,"
 from collections import Counter

digits = input().split()
print(*[key for key, value in Counter(digits).items() if value > 1])




 -End,"
 from itertools import groupby

def compress_genome(genome):
    compressed_symbols = [f'{key}{len(list(value))}' for key, value in groupby(genome)]
    return ''.join(compressed_symbols)

if __name__ == '__main__':
    genome = input()
    print(compress_genome(genome))




 -End,"
 from itertools import islice, chain

def num_sequence_generator():
    num = 1
    while True:
        for i in [str(num)] * num:
            yield i
        num += 1

if __name__ == '__main__':
    num = int(input())
    print(*islice(chain(num_sequence_generator()), num))




 -End,"
 digits = input().split()
num = input()
indexies = [idx for idx, value in enumerate(digits) if value == num]
if indexies:
    print(*indexies)
else:
    print('Отсутствует')




 -End,"
 # читаем входные данные
alphabet, code_key, text, code_text = (input() for i in range(4))
# создаем таблицы перевода
code_table = str.maketrans(alphabet, code_key)
decode_table = str.maketrans(code_key, alphabet)
# осуществляем перевод и выводим на печать
print(text.translate(code_table))
print(code_text.translate(decode_table))




 -End,"
 # получаем данные для словаря
dictionary = set()
for _ in range(int(input())):
    dictionary.add(input().lower())
# получаем текст
words = set()
for _ in range(int(input())):
    words.update(input().lower().split())
# оставлем в тексте, только слова, которых нет в словаре
words.difference_update(dictionary)
# выводим на печать полученные слова
print(*words, sep='\n')




 -End,"
 def move(position, command):
    direction, steps = command.split()
    offset_table = {
        'север': (0, int(steps)),
        'юг': (0, -int(steps)),
        'восток': (int(steps), 0),
        'запад': (-int(steps), 0)
    }
    return list(map(sum, zip(position, offset_table[direction])))


if __name__ == '__main__':
    position = (0, 0)
    for _ in range(int(input())):
        position = move(position, input())
    print(*position)





 -End,"
 num_list = [int(i) for i in input().split()]
counts = {}
for i in num_list:
    counts[i] = counts.get(i, 0) + 1
res = [k for k, v in counts.items() if v > 1]
print(' '.join(map(str, res)))
 -End,"
 total, sum_sqr = 0, 0
while True:
    num = int(input())
    total += num
    sum_sqr += num**2
    if total == 0:
        print(sum_sqr)
        break
 -End,"
 def sequence(size):
    a = []
    i = 0
    while True:
        i += 1    
        for j in range(i):
            a.append(i)
            if len(a) == size:
                return print(' '.join(map(str, a)))


size = int(input())
sequence(size)
 -End,"
 num_list = [int(i) for i in input().split()]
num = int(input())

a = []
for i, n in zip(num_list, range(len(num_list))):
    if i == num:
        a.append(n)
if len(a) == 0:
    print('Отсутствует')
else:
    print(' '.join(map(str, a)))
 -End,"
 num_table = []
while True:
    line = input()
    if line == 'end':
        break
    else:
        num_list = [int(i) for i in line.split()]
        num_table.append(num_list)

rows = len(num_table)
columns = len(num_table[0])
new_table = [[0 for j in range(columns)] for i in range(rows)]

for i in range(rows):
    for k in range(columns):
        new_table[i][k] = (num_table[i][k-columns+1] 
                        + num_table[i][k-1] 
                        + num_table[i-rows+1][k]
                        + num_table[i-1][k])

for i in range(rows):
    print(' '.join(map(str,new_table[i])))        
 -End,"
 def modify_list(l):
    for i in l[::-1]:
        if i % 2 != 0:
            l.remove(i)
    for i in range(len(l)):
        l[i] = l[i] // 2 -End,"
 from collections import Counter

lst = [i.lower() for i in input().split()]
for key, value in Counter(lst).items():
    print(key, value) -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.

n = int(input())
d, res = {}, []
for i in range(n):
    x = int(input())
    if x in d.keys():
        res.append(d[x])
    else:
        d[x] = f(x)
        res.append(d[x])

print(*res, sep = ""\n"") -End,"
 # put your python code here
import math as m

r = float(input())
print(2*m.pi*r)
 -End,"
 import sys
arguments = sys.argv[1:]
for i in arguments:
    print(i)
 -End,"
 n = int(input())

d = {}
for i in range(n):
    res = input().split(';')  # [team1, score1, team2, score2]
    
    team1  = res[0]
    score1 = res[1]
    team2  = res[2]
    score2 = res[3]
    
    # add team in dictionary if not exist
    # [games_num, wins, draws, looses, scores_num]
    if team1 not in d:
        d[team1] = [0, 0, 0, 0, 0] 
    if team2 not in d:
        d[team2] = [0, 0, 0, 0, 0]
    
    # change scores 
    games_num, wins, draws, looses, scores_num = 0, 1, 2, 3, 4
    if score1 > score2:
        res = d[team1]
        res[games_num] += 1 
        res[wins] += 1 
        res[scores_num] = res[wins] * 3 + res[draws]

        res = d[team2]
        res[games_num] += 1
        res[looses] += 1
    elif score1 < score2:
        res = d[team2]
        res[games_num] += 1 
        res[wins] += 1 
        res[scores_num] = res[wins] * 3 + res[draws]

        res = d[team1]
        res[games_num] += 1
        res[looses] += 1
    else:
        res = d[team1]
        res[games_num] += 1
        res[draws] += 1
        res[scores_num] = res[wins] * 3 + res[draws]

        res = d[team2]
        res[games_num] += 1
        res[draws] += 1
        res[scores_num] = res[wins] * 3 + res[draws]

for i, k in d.items():
    print(i + ':', end='')
    print(*k)
 -End,"
 init_abc, final_abc = input(), input()

d, a = {}, {}
for i, k in zip(init_abc, final_abc):
    d[i] = k
    a[k] = i

string1, string2 = input(), input()

temp = ''
for i in string1:
    temp += d[i]
print(temp)

temp = ''
for k in string2:
    temp += a[k]
print(temp)
 -End,"
 dict_size = int(input())
words = []
for i in range(dict_size):
    words.append(input().lower())

strings_num = int(input())
text = []
for i in range(strings_num):
    text.append(input().lower().split())

unknown_words = []
for i in text:
    for k in i:
        if (k not in words) and (k not in unknown_words):
            unknown_words.append(k)

print(*unknown_words, sep = '\n') 
 -End,"
 n = int(input())

d = {'север': 0, 'юг': 0, 'восток': 0, 'запад': 0}
for i in range(n):
    stdin = input().split()
    d[stdin[0]] += int(stdin[1])

x, y = 0, 0
x = d['восток'] - d['запад']
y = d['север'] - d['юг']

print(x, y)
     -End,"
 size = int(input())

table = [[0 for j in range(size)] for i in range(size)]

lower_bond = 0
upper_bond = size - 1

count = 0
while count != size ** 2:
    turn = 0
    if lower_bond == upper_bond:
        count += 1
        table[lower_bond][upper_bond] = count
        break
    for k in range(4):
        turn += 1
        for i in range(lower_bond, upper_bond):
            count += 1
            if turn == 1:
                table[lower_bond][i] = count
            if turn == 2:
                table[i][upper_bond] = count
            if turn == 3:
                table[upper_bond][-i-1] = count
            if turn == 4:
                table[-i-1][lower_bond] = count
    lower_bond += 1
    upper_bond -= 1


for i in range(size):
    print(' '.join(map(str,table[i]))) -End,"
 units = {
    'mile': 1609,    
    'yard': 0.9144,
    'foot': 0.3048,
    'inch': 0.0254,
    'km': 1000,
    'm': 1,
    'cm': 0.01,
    'mm': 0.001
        }

stdin = input().split()
res = float(stdin[0]) * units[stdin[1]] / units[stdin[3]]
print(""%.2e"" % res)

 -End,"
 string = input()
sub_string = input()

a = []
for i, k in zip(string, range(len(string))):
    if sub_string == string[k:k+len(sub_string)]:
        a.append(k)

if len(a) == 0:
    print(-1)
else: 
    print(*a)
 -End,"
 def encode(string):
    string = string + ' '
    string_encoded = ''
    count = 0
    for i in range(1, len(string)):
        count += 1
        if string[i] != string[i-1]:
            if count == 1:
                string_encoded += string[i-1]
            else:
                string_encoded += str(count) + string[i-1]
            count = 0
    return string_encoded

print(encode(input())) -End,"
 a = [int(i) for i in input().split()]

seen = {}
dupes = []

for x in a:
    if x not in seen:
        seen[x] = 1
    else:
        if seen[x] == 1:
            dupes.append(x)
        seen[x] += 1

print(*dupes) -End,"
 a = [int(i) for i in input().split()]
a.sort()
a.append(0)

count = 0
for i in range(len(a)-1):
    count += 1
    if a[i] != a[i+1]:
        if count > 1:
            print(a[i], end=' ')
            count = 0
        else:
            count = 0
 -End,"
 print('''{0} and {1} sat in the tree.
{0} had fallen, {1} was stolen.
What's remaining in the tree?'''.format(input(), input()))
 -End,"
 string = input()
new_string = '' + string[0].upper()
for i in range(1, len(string)):
    if string[i] != '_':
        if string[i-1] == '_':
            new_string += string[i].upper()
        else:
            new_string += string[i]
print(new_string)
 -End,"
 abc = list(' abcdefghijklmnopqrstuvwxyz')
shift = int(input())
abc_dict = {}

for i in range(len(abc)):
    abc_dict[abc[i]] = abc[(i+shift)%len(abc)]

string = input().strip()
new_string = ''

for i in string:
    new_string += abc_dict[i]

print('Result: ""{}""'.format(new_string))  
 -End,"
 s = input().split()
trump = input()

cards = {'6':0, '7':1, '8':2, '9':3, '1':4, 'J':5, 'Q':6, 'K':7, 'A':8}

if s[0][-1] == s[1][-1]:
    if cards[s[0][0]] > cards[s[1][0]]:
        print('First')
    else:
        print('Second')
elif s[0][-1] == trump:
    print('First')
elif s[1][-1] == trump:
    print('Second')
else:
    print('Error')
 -End,"
 n, m = (int(i) for i in input().split())  # определяем размеры сетки

# создание поля
field = []
for i in range(n):  # минируем поле
    field.append(list(input()))

# ""решение"" поля
for i in range(n):  # перебираем строки
    for j in range(m):  # перебираем столбцы
        if field[i][j] != '*':  # ячейка без мины
            field[i][j] = 0  # присваиваем 0 для инкремента
            for di in range(-1, 2):  # перебираем соседние строки (просто цифры -1 0 1)
                for dj in range(-1, 2):  # перебираем соседние столбцы (просто цифры -1 0 1)
                    x = i + di  # координата по строке
                    y = j + dj  # координата по столбцу
                    if 0 <= x < n and 0 <= y < m and field[x][y] == '*':  # проверка, что координаты в пределах поля и что поле является миной
                        field[i][j] += 1

# вывод ""решения""
for i in range(n):
    print(''.join(map(str, field[i])))
 -End,"
 n = int(input())

total = 0
for i in range(n):
    total += int(input())
print(total)
 -End,"
 print(len(set(map(id, objects))))
 -End,"
 print('_'.join(input().split()))
 -End,"
 string = input().lower().split()
d = {i: string.count(i) for i in string}
for k, v in d.items():
    print(k, v)
 -End,"
 def get_int(start_message, error_message, end_message):

    print(start_message)

    while True:
        stdin = input()
        try:
            stdin = int(stdin)
            print(end_message)
            return stdin
        except ValueError:
            print(error_message)
 -End,"
 string = input().strip() + ' '

tmp = string[0]
lst = []
for i in range(1,len(string)):
    try:
        trigger = int(string[i-1])
        tmp += string[i]
    except ValueError:
        lst.append(tmp)
        tmp = ''
        tmp += string[i]

for i in lst:
    try:
        print(i[-1]*int(i[:-1]), end='')
    except ValueError:
        print(i, end='')
 -End,"
 abc = ''.join([chr(i) for i in range(int(0x1f600), int(0x1f64f)+1)])
shift = int(input())
abc_dict = {}

for i in range(len(abc)):
    abc_dict[abc[i]] = abc[(i+shift)%len(abc)]

string = input().strip()
new_string = ''

for i in string:
    new_string += abc_dict[i]

print('Result: ""{}""'.format(new_string))  
 -End,"
 scores = input().split()

print('%.2f' % (scores.count('A')/len(scores)))
 -End,"
 size = int(input())

table = [[0 for j in range(size)] for i in range(size)]

lower_bond = 0
upper_bond = size - 1
squares_num = size - 2

count = 0
while count != size ** 2:
    turn = 0
    if lower_bond == upper_bond:
        count += 1
        table[lower_bond][upper_bond] = count
        break
    for k in range(4):
        turn += 1
        for i in range(lower_bond, upper_bond):
            count += 1
            if turn == 1:
                table[lower_bond][i] = count
            if turn == 2:
                table[i][upper_bond] = count
            if turn == 3:
                table[upper_bond][-i-1] = count
            if turn == 4:
                table[-i-1][lower_bond] = count
    lower_bond += 1
    upper_bond -= 1


for i in range(size):
    print(' '.join(map(str,table[i])))
 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.


n = int(input())
d, res = {}, []
for i in range(n):
    x = int(input())
    if x in d.keys():
        res.append(d[x])
    else:
        d[x] = f(x)
        res.append(d[x])

print(*res, sep=""\n"")
 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        # конструктор с аргументом – вместимость копилки
        self.v = 0
        self.capacity = capacity
    
    def can_add(self, v):
        # True, если можно добавить v монет, False иначе
        if self.v + v > self.capacity:
            return False
        else:
            return True
    
    def add(self, v):
        # положить v монет в копилку
        if self.can_add(v):
            self.v += v
 -End,"
 while True:
    stdin = input()
    if stdin == 'End':
        print('Good bye!')
        break
    print('Processing ""{}"" command...'.format(stdin))
 -End,"
 num_dict = {
    1000: 'M', 
    900: 'CM', 
    500: 'D', 
    400: 'CD', 
    100: 'C', 
    90: 'XC', 
    50: 'L', 
    40: 'XL', 
    10: 'X', 
    9: 'IX', 
    5: 'V', 
    4: 'IV', 
    1: 'I'
}

num = int(input())
res = ''
for i in num_dict:
    if num % i < num:
        res += str(num_dict[i]) * (num // i)
        num = num % i
print(res)
 -End,"
 def collatz(n):
    print(int(n), end=' ')
    if n == 1:
        return
    elif n % 2 == 0:
        n = n / 2
    else:
        n = n * 3 + 1
    collatz(n)


collatz(int(input()))
 -End,"
 stdin = input().split()
words = {}
for i in stdin:
    length = len(i)
    if length not in words:
        words[length] = 1
    else:
        words[length] += 1

for i, k in sorted(words.items()):
    print(str(i) + ': ' + str(k))
 -End,"
 n, m = [int(i) for i in input().split()]

matrix = []
for i in range(n):
    row = [int(i) for i in input().split()]
    matrix.append(row)

for column in range(m):
    for row in range(n):
        print(matrix[row][column], end=' ')
    print(end='\n')
 -End,"
 num_dict = {
    'M': 1000,
    'CM': 900,
    'D': 500,
    'CD': 400,
    'C': 100,
    'XC': 90,
    'L': 50,
    'XL': 40,
    'X': 10,
    'IX': 9,
    'V': 5,
    'IV': 4,
    'I': 1
}

rom = input()
i = 0
res = 0
while i < len(rom):
    
    crnt = rom[i]
    if i + 1 < len(rom):
        nxt = rom[i+1]
    else:
        nxt = crnt
        
    if num_dict[crnt] < num_dict[nxt]:
        num = num_dict[crnt + nxt]
        i += 2
    else:
        num = num_dict[crnt]
        i += 1
    res += num

print(res)
 -End,"
 ''set relations of classes'''


n = int(input())  # number of classes

classes_dict = {}  # {child: parents}
for i in range(n):

    '''reading and parsing'''
    stdin = input().split(':')
    child = stdin[0].strip()
    parents = set()
    if len(stdin) == 2:
        parents.update(stdin[1].split())

    '''write to the dict'''
    if child in classes_dict:
        classes_dict[child].update(parents)
    else:
        classes_dict[child] = parents


'''checking relations of classes'''


def is_parent(classes_dict, parent, child):
    d = classes_dict
    if parent == child or parent in d[child]:
        return True
    else:
        for sub_child in d[child]:
            if sub_child in d and is_parent(d, parent, sub_child):
                return True


q = int(input())  # number of requests
for i in range(q):
    class_1, class_2 = input().split()
    print('Yes' if is_parent(classes_dict, class_1, class_2) else 'No')
 -End,"
 class ExtendedStack(list):
    def sum(self):
        # операция сложения
        return self.append(self.pop() + self.pop())

    def sub(self):
        # операция вычитания
        return self.append(self.pop() - self.pop())

    def mul(self):
        # операция умножения
        return self.append(self.pop() * self.pop())

    def div(self):
        # операция целочисленного деления
        return self.append(self.pop() // self.pop())
 -End,"
 class LoggableList(list, Loggable):
    def append(self, arg):
        super(LoggableList, self).append(arg)
        self.log(arg)
 -End,"
 try:
    foo()
except ZeroDivisionError:
    print('ZeroDivisionError')
except ArithmeticError:
    print('ArithmeticError')
except AssertionError:
    print('AssertionError')
 -End,"
 ''set relations of exeption classes'''


n = int(input())  # number of classes

exeptions_dict = {}  # {child: parents}
for i in range(n):

    '''reading and parsing'''
    stdin = input().split(':')
    child = stdin[0].strip()
    parents = set()
    if len(stdin) == 2:
        parents.update(stdin[1].split())

    '''write to the dict'''
    if child in exeptions_dict:
        exeptions_dict[child].update(parents)
    else:
        exeptions_dict[child] = parents


'''checking relations of exeption classes'''


def is_parent(classes_dict, parent, child):
    d = classes_dict
    if parent == child or parent in d[child]:
        return True
    else:
        for sub_child in d[child]:
            if sub_child in d and is_parent(d, parent, sub_child):
                return True


m = int(input())  # number of exceptions processed
stack = []
for i in range(m):
    exeption = input()
    for i in stack:
        if is_parent(exeptions_dict, i, exeption):
            print(exeption)
            break
    stack.append(exeption)
 -End,"
 class NonPositiveError(Exception):
    pass


class PositiveList(list):
    def append(self, arg):
        if arg > 0:
            super(PositiveList, self).append(arg)
        else:
            raise NonPositiveError

 -End,"
 from datetime import date, timedelta

year, month, day = [int(i) for i in input().split()]
start_date = date(year, month, day)
end_date = start_date + timedelta(int(input()))
print(end_date.year, end_date.month, end_date.day)
 -End,"
 class multifilter:
    def judge_half(pos, neg):
        # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)
        if pos >= neg:
            return True
   
    def judge_any(pos, neg):
        # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)
        if pos >= 1:
            return True

    def judge_all(pos, neg):
        # допускает элемент, если его допускают все функции (neg == 0)
        if neg == 0:
            return True

    def __init__(self, iterable, *funcs, judge=judge_any):
        # iterable - исходная последовательность
        # funcs - допускающие функции
        # judge - решающая функция
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        # возвращает итератор по результирующей последовательности
        for i in self.iterable:
            pos, neg = 0, 0
            for func in self.funcs:
                if func(i) is True:
                    pos += 1
                else:
                    neg += 1
            if self.judge(pos, neg) is True:
                yield i
 -End,"
 def primes():
    count = 2
    while True:
        isprime = True

        for x in range(2, int(count ** 0.5 + 1)):
            if count % x == 0:
                isprime = False
                break

        if isprime:
            yield count

        count += 1
 -End,"
 def mod_checker(x, mod=0):
    return lambda y: y % x == mod
 -End,"
 s, a, b = input(), input(), input()

count = 0
while True:

    if a not in s:
        print(count)
        break
    elif count > 1000:
        print(""Impossible"")
        break

    s = s.replace(a, b)
    count += 1
 -End,"
 s, t = input(), input()

n = 0
count = 0
while s.find(t, n) != -1:
    n = s.find(t, n) + 1
    count += 1
print(count)
 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    pattern = r""(.*cat.*){2}""
    if re.match(pattern, line):
        print(line)
 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    pattern = r""\bcat\b""
    if re.search(pattern, line):
        print(line)
 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    pattern = r"".*z.{3}z.*""
    if re.search(pattern, line):
        print(line)
 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    pattern = r""\b(\w+)\1\b""
    if re.search(pattern, line):
        print(line)
 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(""human"", ""computer"", line))
 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""[Aa]+\b"", ""argh"", line, 1))
 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""\b(\w)(\w)"", r""\2\1"", line))
 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""(\w)\1+"", r""\1"", line))
 -End,"
 import requests
import re

A = input()
B = input()


def get_urls(url):
    page = requests.get(url)
    data = page.text
    pattern = r""href=['\""]?([^'\"" >]+)""
    urls = re.findall(pattern, data)
    return urls


for url in get_urls(A):
    if B in get_urls(url):
        print('Yes')
        break
else:
    print('No')
 -End,"
 import json


def is_parent(classes_dict, parent, child):
    d = classes_dict
    if parent == child or parent in d[child]:
        return True
    else:
        for sub_child in d[child]:
            if sub_child in d and is_parent(d, parent, sub_child):
                return True

            
js = json.loads(input())

classes_dict = {}
for el in js:
    classes_dict[el['name']] = el['parents']

lst = []
for el1 in classes_dict.keys():
    count = 0
    for el2 in classes_dict.keys():
        if is_parent(classes_dict, el1, el2):
            count += 1
    lst.append(el1 + ' : ' + str(count))
lst.sort()
print('\n'.join(lst))
 -End,"
 def main():
    a, b = map(int, input().split())
    res = a + b
    print(res)


if __name__ == ""__main__"":
    main() -End,"
 def fib(n):
    fib = [0, 1]
    for i in range(2, n + 1):
        fib.append(fib[i-1] + fib[i-2])
    return fib[n]

def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main() -End,"
 def fib_digit(n):
    fib = [0, 1]
    for i in range(2, n + 1):
        fib.append((fib[i-1] + fib[i-2]) % 10)
    return fib[n]


def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main()
 -End,"
 def EuclidGCD(a, b):
    if a == 0:
        return b
    elif b == 0:
        return a
    elif a >= b:
        return EuclidGCD(a % b, b)
    elif b >= a:
        return EuclidGCD(a, b % a)


def main():
    a, b = map(int, input().split())
    print(EuclidGCD(a, b))


if __name__ == ""__main__"":
    main() -End,"
 a,b,c = int(input()),int(input()),int(input())
if a>=b and a>=c:
    max=a
    x1,x2 = b,c
elif b>=a and b>=c:
    max=b
    x1,x2 = a,c
else:
    max=c
    x1,x2 = a,b
if (c**2)==(a**2+b**2) or (a**2)==(c**2+b**2) or (b**2)==(a**2+c**2):
    print('right')
elif a+b<c or a+c<b or b+c<a or max==x1+x2:
    print('impossible')
elif (max**2)>((x1**2)+(x2**2)):
    print('obtuse')
elif (max**2)<((x1**2)+(x2**2)):
    print('acute') -End,"
 a,b = int(input()),int(input())
m=min(a,b)
while a%m!=0 or b%m!=0:
    m-=1
print(m)

 -End,"
 print(format(int(input()), '00b')[::-1])




 -End,"
 n,sum = int(input()),0
while n!=0:
    sum+=n if n%3!=0 and n%2==0 else 0
    n=int(input())
print(sum)

 -End,"
 n, k,sum1,sum11 = int(input()), 0, 0, 0
for i in range(1,n+1):
    b = str(0)+str(i)
    sum1 = 0
    for j in range(1,len(b)):
        sum1 += int(b[j])
    if sum1 > sum11:
        k = i #само число
        sum11 = sum1
print(k,sum11) -End,"
 a,b,c,d,e = (int(input()) for i in range (5))
count = 0
for  x in range(0,1001,1):
    if x-e!=0:
        if (a*x*x*x+b*x*x++c*x+d)/(x-e)==0:
            count+=1    
print(count, end="" "")




 -End,"
 n,c,d = (int(input()) for i in range(3))
for i in range(1,n+1):
    if i%c==0 and  i%d!=0:
        print(i) -End,"
 arr = []
n = 0
while True:
    n+=1
    k = int(input())
    if k==0:
        break
    arr.append(k) 
arr.sort()
print(arr[-2]) -End,"
 n = input()
print(""YES"" if n==n[::-1] else ""NO"") -End,"
 import re
print(re.sub(""[57]"","""",input())) -End,"
 n = int(input())
array = []
for i in range(1,n+1):
    array.append(int(input()))
print(array.count(min(array))) -End,"
 x,s = input(),0
while len(str(x))>1:
    s,x = 0,str(x)
    for i in range(0,len(x)):
        s+=int(x[i])
    x = s
print(x) -End,"
 n,count = int(input()),0
for i in range(1,n+1):
    i = int(input())
    if i == 0: 
        count+=1
print(count) -End,"
 a,b = int(input()),int(input())
f = False
for i in range(b,a-1,-1):
    if i%7==0:
        print(i)
        f = True
        break
if f==False:
    print(""NO"") -End,"
 x,count,s = input(),0,""""
for i in range(0,len(x)):
  count+=1
  if i!=len(x)-1:
    if x[i]!=x[i+1]:
      s = x[i]+str(count)
      print(s,end="""")
      count=0
s=x[len(x)-1]+str(count)
print(s) -End,"
 x = ord(input().lower())
for i in range(x,ord(""z"")+1,1):
    print(chr(i),end="" "") -End,"
 x = input()
print(x.lower() if x!=x.lower() else x.upper()) -End,"
 x,y,s = input(), int(input()),""""
for i in range(0,len(x)):
    if i==y-1:
        continue
    s+=x[i]
print(s) -End,"
 x,t = input(),False
for i in range(0,len(x)):
    for j in range(0,len(x)):
        if i!=j and x[i]==x[j] and t == False:
            print(x[i])
            t = True
            break -End,"
 x,t,l = input().lower(),True,0
if ord(""a"")<=ord(x[0])<=ord(""z"") or x[0]==""_"":
    for i in range(0,len(x)):
        if ord(""a"")<=ord(x[i])<=ord(""z"") or x[i]==""_"" or x[i].isdigit():
            l=0
        else:
            t = False
else:
    t = False
print(""YES"" if t==True else ""NO"") -End,"
 x = input().strip()
x = x.replace(""   "","" "")
x = x.replace(""  "","" "")
print(x) -End,"
 x,y = input(),int(input())
print(x[y-1] if y-1<len(x) else ""NO"") -End,"
 a,b = sorted(input() for i in range(2))
for i in range(ord(a),ord(b)+1,1):
    print(chr(i), end="" "") -End,"
 f,i,o = (input() for i in range(3))
print(f,i[0]+"".""+o[0]+""."") -End,"
 a,b = input(),input()
print(""YES"" if a[0]==b[len(b)-1] else ""NO"") -End,"
 x = input()
print(x.count(""a"")+x.count(""e"")+x.count(""i"")+x.count(""o"")+x.count(""u"")) -End,"
 line = input()
print(' '.join( c for c in line if  c in '0123456789' )) -End,"
 print(sum([int(i) for i in input().split()])) -End,"
 x,y = [int(i) for i in input().split()],[]
for i in range(0,len(x)):
    a,b = i-1,i+1
    if i==0:
        a = len(x)-1
    if i==len(x)-1:
        b = 0
    if len(x)==1:
        y += [x[a]]
    else:
        y += [x[b]+x[a]]
for elem in y:
    print(elem, end=' ') -End,"
 x = [int(i) for i in input().split()]
x.sort()
y = []
for i in x:
    if  x.count(i)>1:
        y+=[i]
for i in y:
    while y.count(i)!=1:
        y.remove(i)
for i in y:   
    print(i,end="" "") -End,"
 n,l = int(input()),[]
sum1=n**2
l.append(n)
while sum(l)!=0:
    n = int(input())
    l.append(n)
    sum1 += n**2
print(sum1)


 -End,"
 n,x = int(input()),[]
for  i in range(1,n+2):
    for j in range(i):
        if len(x)==n:
            break
        x.append(i)
print(*x) -End,"
 lst = ([int(i) for i in input().split()])
x,st = int(input()),-1
if lst.count(x)!=0:
    for i in range(lst.count(x)):
        m,st = lst.index(x),st+1
        lst.remove(x)
        print(m+st, end="" "")
else:
    print(""Отсутствует"") -End,"
 n = int(input())
lst = [[0 for j in range(n)] for i in range(n)]
i,j,k = 0,0,1
l,p,v,niz = 0,0,0,0
while True:
    lst[i][j]=k
    k+=1
    suuum = 0
    for ii in range(n):
        for jj in range(n):
            if lst[ii][jj]==0:
                suuum+=1
    if suuum == 0:
        break
    if p!=0:#вправо
        if n>j+1:
            if lst[i][j+1]==0:
                j+=1
                continue
            else:
                p=0
        else:
            p=0
    elif niz!=0:#вниз
        if n>i+1:
            if lst[i+1][j]==0:
                i+=1
                continue
            else:
                niz=0
        else:
             niz=0
    elif l!=0:#влево
        if 0<j:
            if lst[i][j-1]==0:        
                j-=1
                continue
            else:
                l=0
        else:
            l=0
    elif v!=0:#вверх
        if lst[i-1][j]==0:
            if lst[i-1][j]==0:
                i-=1
                continue
            else:
                v=0
        else:
            v=0
    else:
        l,p,v,niz = 0,0,0,0
    if n>j+1:        #вправо
        if lst[i][j+1]==0:
            j+=1
            p=1
            continue
    if n>i+1:#вниз
        if lst[i+1][j]==0:
            i+=1
            niz=1
            continue
    if 0<j:#влево
        if lst[i][j-1]==0:
            j-=1
            l=1
            continue
    if 0<i:#вверх
        if lst[i-1][j]==0:
            i-=1
            v=1
            continue
    break
for i in range(n):
    for j in range(n):
        print(lst[i][j],end="" "")
    print() -End,"
 x = int(input())
lst = [int(i) for i in  input().split()]
for i in range(0,len(lst),3):
    print(lst[i],end="" "") -End,"
 input()
lst = [int(i) for i in input().split()]
n = len(lst) if len(lst)%2==0 else len(lst)-1
for i in range(0,n,2):
    print(lst[i+1],lst[i], end="" "")
if n!=len(lst):
    print(lst[len(lst)-1]) -End,"
 input()
out = ""NO""
lst = [int(i) for i in input().split()]
for i in range(len(lst)-1):
    if  lst[i]/lst[i+1]>0:
        out = ""YES""
print(out) -End,"
 input()
lst = [int(i) for i in input().split()]
print(lst[len(lst)-1], end="" "")
for i in range(0,len(lst)-1):
    print(lst[i], end="" "") -End,"
 arr,k = [],0
arr.append([])
[arr[k].append(i) for i in input().split()]
while True:
    arr.append([])
    k+=1
    [arr[k].append(i) for i in input().split()]
    if arr[k][0]==""end"":
        break
arr,k = arr [: - 1],k
newArr = []
for i in range(0,len(arr)+2):
    newArr.append([])
newArr[0].append("" "")
newArr[len(arr)+1].append("" "")
[newArr[0].append(i) for i in arr[len(arr)-1]]
newArr[0].append("" "")
#err
[newArr[len(arr)-1+2].append(i) for i in arr[0]]
newArr[len(arr)-1+2].append("" "")
for i in range(0,len(arr)):
    newArr[i+1].append(arr[i][len(arr[0])-1])
for i in range(0,len(arr)):
    for j in range(0,len(arr[0])):
        newArr[i+1].append(arr[i][j])
for i in range(0,len(arr)):
    newArr[i+1].append(arr[i][0])
for i in range(1,len(arr)+1):
    for j in range(1,len(arr[0])+1):
        arr[i-1][j-1]=int(newArr[i-1][j])+int(newArr[i][j-1])+int(newArr[i+1][j])+int(newArr[i][j+1])
        print(arr[i-1][j-1],end="" "")
    print() -End,"
 import sys
i = 1
while i < len(sys.argv):
  print(sys.argv[i] , end="" "")
  i+=1 -End,"
 n,ls = int(input()),[]
x,y = 0,0
for i in range(n):
    ls.append(input().split())
    if ls[i][0]==""север"":
        y+=int(ls[i][1])
    elif ls[i][0]==""юг"":
        y-=int(ls[i][1])
    elif ls[i][0]==""запад"":
        x-=int(ls[i][1])
    elif ls[i][0]==""восток"":
        x+=int(ls[i][1])
print(x,y) -End,"
 from collections import Counter
list1 = []
[list1.append(i) for i in (input().lower().split())]
counts = dict(Counter(list1))
for key,value in counts.items():
    print(key,value) -End,"
 n,mas,sl = int(input()),[],{}
[mas.append(int(input())) for i in range(n)]
for i in mas:
    if not i in sl:
        sl[i] = f(i)
    print(sl[i]) -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key in d:
        d[key]+=[value]        
    elif key*2 in d:
        d[key*2]+=[value]
    else:
        d[key*2]=[value]

# не добавляйте кода вне функции -End,"
 n = int(input())
mas = []
arr = [] # 0 команда
arr.append([])# 0 команда
arr.append([])# 1 всего игр
arr.append([])# 2 побед
arr.append([])# 3 ничьих
arr.append([])# 4 поражений
arr.append([])# 5 всего очков
for i in range(0,n):
    b, index1 = False,0
    mas = []
    [mas.append(i.strip()) for i in input().strip().split("";"",3)]
    for index, item in enumerate(arr[0]):
        if item == mas[0]:#сущ ли эл в массиве
            index1 = index
            b = True
    if b == False:
        arr[0].append(mas[0])
        arr[1].append(1)
        if mas[1]>mas[3]:
            arr[2].append(1)
            arr[5].append(3)
            arr[3].append(0)
            arr[4].append(0)
        elif mas[1]==mas[3]:
            arr[3].append(1)
            arr[5].append(1)
            arr[2].append(0)
            arr[4].append(0)
        else:
            arr[4].append(1)
            arr[5].append(0)
            arr[3].append(0)
            arr[2].append(0)
    else:
        arr[1][index1]+=1#всего игр
        if mas[1]>mas[3]:
            arr[2][index1]+=1
            arr[5][index1]+=3
            arr[3][index1]+=0
            arr[4][index1]+=0
        elif mas[1]==mas[3]:
            arr[3][index1]+=1
            arr[5][index1]+=1
            arr[2][index1]+=0
            arr[4][index1]+=0
        else:
            arr[4][index1]+=1
            arr[5][index1]+=0
            arr[3][index1]+=0
            arr[2][index1]+=0
        #вторая команда
    b = False
    for index, item in enumerate(arr[0]):
        if item == mas[2]:#сущ ли эл в массиве
            index1 = index
            b = True
    if b == False:
        arr[0].append(mas[2])
        arr[1].append(1)
        if mas[3]>mas[1]:
            arr[2].append(1)
            arr[5].append(3)
            arr[3].append(0)
            arr[4].append(0)
        elif mas[3]==mas[1]:
            arr[3].append(1)
            arr[5].append(1)
            arr[2].append(0)
            arr[4].append(0)
        else:
            arr[4].append(1)
            arr[5].append(0)
            arr[3].append(0)
            arr[2].append(0)
    else:
        arr[1][index1]+=1#всего игр
        if mas[3]>mas[1]:
            arr[2][index1]+=1
            arr[5][index1]+=3
            arr[3][index1]+=0
            arr[4][index1]+=0
        elif mas[1]==mas[3]:
            arr[3][index1]+=1
            arr[5][index1]+=1
            arr[2][index1]+=0
            arr[4][index1]+=0
        else:
            arr[4][index1]+=1
            arr[5][index1]+=0
            arr[3][index1]+=0
            arr[2][index1]+=0
for i in range(0,len(arr[0])):
    print(str(arr[0][i])+"":""+str(arr[1][i]),str(arr[2][i]),str(arr[3][i]),str(arr[4][i]),str(arr[5][i])) -End,"
 s1 = list(input())
s2 = list(input())
d = {}
d = dict (zip (s1,s2))
s1 = list(input())
for i in range(0,len(s1)):
    s1[i]=d[s1[i]]
    print(s1[i],end="""")
print("""")
s1 = list(input())
for i in range(0,len(s1)):
    for key,value in d.items():
        if value == s1[i]:
            print (key,end="""") -End,"
 n,d,s,st = int(input()),[],[],set()
[d.append(input()) for i in range(0,n)]
n = int(input())
[s.append([i for i in input().split()]) for i in range(0,n)]
for i in range(0,len(s)):
    for k in range(0,len(s[i])):
        b = False
        for j in range(0,len(d)):
            if s[i][k].lower()==d[j].lower():
                b=True
        if b==False:
            st.add(s[i][k])
print(*st, sep='\n') -End,"
 int(input())
x = input().split()
for i in range(0,len(x)):
    print(int(x[i])-int(min(x)), end=' ') -End,"
 input()
mas = input().split()
mn,mx=0,0
for idx, val in enumerate(mas):
    if (mas[mn]>val): mn=idx
    if (mas[mx]<=val): mx=idx
mas[mx],mas[mn]=mas[mn],mas[mx]
print(*mas) -End,"
 input()
mas = input().split()
print(*[i for i in mas if mas.count(i) == 1]) -End,"
 input()
mas = input().split()
print(""YES"" if len(set(mas))!=len(mas) else ""NO"") -End,"
 n = int(input())
for i in range(n):
    for j in range(n):
        if i+j+1==n:
            print(1, end="" "")
        elif i+j+1<n:
            print(0, end="" "")
        else:
            print(2, end="" "")
    print() -End,"
 n: int = int(input())
res = ""YES""
mas = []
[mas.append(input().split()) for _ in range(n)]
for i in range(n):
    for j in range(n):
        if(mas[i][j]!=mas[j][i]):
            res=""NO""
print(res) -End,"
 m,n = map(int, input().split())
for i in range(m):
    for j in range(n):
        print((i+1)*(j+1), end=' ')
    print() -End,"
 n,m=map(int,input().split())
mas,maxindex = [],0
[mas.append(sum(map(int,(input().split())))) for _ in range(n)]
for index, item in enumerate(mas):
    if mas[index]>mas[maxindex]:
        maxindex=index
print(mas[maxindex],maxindex,sep='\n') -End,"
 n,m = map(int,input().split())
arr = [[1 for j in range(1, m + 1)] for i in range(1, n + 1)]
for i in  range(n):
    for j in range(m):
        if (i!=0 and j!=0):
            arr[i][j]=(arr[i-1][j]+arr[i][j-1])
for a in arr:
    print (' '.join(map(str, a))) -End,"
 input()
s = set()
[s.add(x) for x in input().split()]
print(len(s)) -End,"
 input()
mas,index,end = [int(x) for x in input().split()],0,-1
growth = int(input())
for i in range(0,len(mas)):
    index+=1
    if(mas[i]<growth and end==-1):
        end=index
print(end if end!=-1 else len(mas)+1) -End,"
 input()
arr =[int(i) for i in input().split() if int(i)%2==0]
print(' '.join(map(str,arr)),len(arr),sep='\n') -End,"
 input()
arr,count = [int(i) for i in input().split()],0
for i in range(len(arr)-1):
    if arr[i]<arr[i+1]:
        count+=1
print(count) -End,"
 input()
arr = [-1 if int(i)%3==0 and i[len(i)-1]=='7' else int(i) for i in input().split()]
for i in arr:
    print(i if i!=-1 else arr.count(-1),end = ' ') -End,"
 def simple(n):
    for i in range(2,n):
        if n%i==0:
            return 'composite'
    return 'prime'

print(simple(int(input()))) -End,"
 def sign(x):
    if x>0:
        return 1
    elif x==0:
        return 0
    else:
        return -1
    
mas = [int(x) for x in input().split()]
print(sign(mas[0])+sign(mas[1])) -End,"
 import math

def combinations(n,k):
     return math.factorial(n)/ (math.factorial(k)* math.factorial(n-k))

n,k=int(input()),int(input())
print(combinations(n,k)) -End,"
 def Average(n):
    summ=0
    for i in range(n+1):
        summ+=i
    return summ/n

print(Average(int(input()))+Average(int(input()))) -End,"
 def Fact2(N):
    fact=1;
    for i in range(N%2,N+1,2):
        if i!=0: fact*=i
    return fact

print(Fact2(int(input())),Fact2(int(input())),Fact2(int(input()))) -End,"
 def MoreLess(x1,x2):
    sum1,sum2=SumStr(x1),SumStr(x2)
    if (sum1>sum2):
        return 1
    elif(sum1<sum2):
        return 2
    else:
        return 0

def SumStr(x):
    b = []
    for i in x:
        b.append(int(i))
    return sum(b)

print(MoreLess(input(),input())) -End,"
 def closest_mod_5(x):
  return (5-x%5)+x -End,"
 s,t = input(),input() 
k=0
while s.find(t)>-1:
    k+=1
    s = s[s.find(t)+1:]
print(k) -End,"
 import sys,re
for line in sys.stdin:
    line = line.rstrip()
    if re.findall(r""cat.*cat"",line):
        print(line) -End,"
 import sys, re
for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""(\w)(\w)(\w*)"",r""\2\1\3"",line)) -End,"
 import sys, re
for line in sys.stdin:
    line = line.rstrip()
    if re.findall(r""^(1(01*0)*1|0)+$"",line):
            print(line) -End,"
 import requests,re
a,b,out = input(),input(),'No'
for url in re.findall(r'href=""(\S*)""',requests.get(a).text):
    if re.findall(b,requests.get(url).text):
        out = 'Yes'
        break
print(out) -End,"
 import requests,re
print('\n'.join(sorted(set([url[1] for url in re.findall(r'<a[\S\s]*?href\s?=\s?[\""\'](\w*://)?(\w+[\w\.-]*)?\S*[\""\']',requests.get(input()).text)])))) -End,"
 n,i = int(input()),2
def prime(n):
    if n==1:
        return False
    for i in range(2,int(n**0.5)+1):
        if n%i:
            continue
        else:
            return False
    return True
while n>1:
    if n%i == 0:
        print(i, end=' ')
        d = n//i
        if prime(d):
            print(d, end=' ')
            break
        n = d
        i = 2
        continue
    i+=1 -End,"
 n = int(input())
a = list(map(int, input().split()))
b = list(map(int, input().split()))
ma,s = a[0],a[0]+b[0]
ia=ib=ta=0
for i in range(1,n):
    if a[i]>ma:
        ma = a[i]
        ta = i
    if ma + b[i] > s:
        s = ma+b[i]
        ia = ta
        ib = i
        if ta<=ib:
            continue
        else:
            ib=ia
print(ia,ib) -End,"
 def index(a,x):
    if x<=a[0]:
        return 0
    if x>=a[-1]:
        return len(a)-1
    pos_l,pos_r = 0,len(a)
    while pos_r - pos_l > 1:
        mid = (pos_r + pos_l)//2
        if a[mid] <= x:
            pos_l = mid
        else:
            pos_r = mid
    return pos_l if x-a[pos_l]<= a[pos_l+1]-x else pos_l + 1
input()
a = list(map(int, input().split()))
input()
for element in list(map(int, input().split())):
    print(index(a,element),end=' ') -End,"
 from xml.etree import ElementTree
c = {'red':0,'green':0,'blue':0}
def xml(tree,level=1):
    c[tree.attrib['color']]+=level
    for child in tree.getchildren():
            xml(child,level+1)    
xml(ElementTree.fromstring(input()))
print(' '.join(map(str,c.values()))) -End,"
 n = int(input())
lines = sorted([[*map(int, input().split())] for i in range(n)],key = lambda x: x[1])
i, res = 0, [lines[0][1]]
while i<n:
    if lines[i][0] <= res[-1]:
        i+=1
    else:
        res.append(lines[i][1])
print(len(res))
print(*res)   -End,"
 n,W = map(int, input().split())
cw = sorted([[*map(int, input().split())] for i in range(n)],key = lambda x: x[0]/x[1], reverse=True)
w=c=i=0
while(W and i<n):
    c+= cw[i][0] if cw[i][1] <= W else W/cw[i][1]*cw[i][0]
    W-=min(W,cw[i][1])
    i+=1
print(c) -End,"
 n,i,res = int(input()),1,[]
while n:
    if n-i>i or n-i==0:
        res.append(i)
        n-=i
    i+=1
print(len(res))
print(*res) -End,"
 from collections import Counter
s = input()
c = Counter(s)
k = len(c)
if k<3:
    print(k,len(s))
    for i,ch in enumerate(c):
        print('{}: {}'.format(ch,i))
        s = s.replace(ch,str(i))
else:
    h,code = list(c.items()),{}
    for i in range(k-1):
        m1 = min(h,key = lambda x: x[1])
        h.remove(m1)
        m2 = min(h,key = lambda x: x[1])
        h.remove(m2)
        h.append((m1[0]+m2[0],m1[1]+m2[1]))
        for l1 in m1[0]:
            if l1 in code.keys():
                code[l1] += '0'
            else:
                code[l1] = '0'
        for l2 in m2[0]:       
            if l2 in code.keys():
                code[l2] += '1'
            else:
                code[l2] = '1'
    for ch in code:
        s = s.replace(ch,code[ch][::-1])
    print(k,len(s))
    for ch in code:
        print('{}: {}'.format(ch,code[ch][::-1]))
print(s) -End,"
 import numpy as np
print(np.ndarray((3,4), buffer=np.array([[2,1,0,0],[0,2,1,0],[0,0,2,1]]), dtype=int)) -End,"
 import numpy as np
x_shape = tuple(map(int, input().split()))
X = np.fromiter(map(int, input().split()), np.int).reshape(x_shape)
y_shape = tuple(map(int, input().split()))
Y = np.fromiter(map(int, input().split()), np.int).reshape(y_shape)
if x_shape[1] == y_shape[1]:
    print(X @ Y.T)
else:
    print('matrix shapes do not match') -End,"
 from urllib.request import urlopen
import numpy as np
print(np.mean(np.loadtxt(urlopen(input()), skiprows=1, delimiter="",""),axis=0)) -End,"
 import re
def good(key):
    for k in code.keys():
        if re.match(key,k):
            return True
    return False
k,l = map(int, input().split())
code = {}
for i in range(k):
    t1,t2 = [x.strip() for x in input().split(':')]
    code[t2] = t1
s = input()
i,prefix = 1,s[0]
while i < len(s):
    if good(prefix+s[i]): prefix+=s[i]
    else:
        print(code[prefix],end='')
        prefix = s[i]
    i+=1
if good(prefix): print(code[prefix],end='') -End,"
 def insert(el,Len):
    global a,L
    pos = Len
    a[pos] = el
    while a[pos//2] < a[pos] and pos > 0: a[pos//2],a[pos],pos = a[pos],a[pos//2],pos//2
    L+=1
def extractMax(Len):
    global a,L
    pos = 0
    m,a[pos],a[Len-1] = a[pos],a[Len-1],-1
    while a[pos] < a[2*pos] or a[pos] < a[2*pos+1]:
        if a[2*pos] > a[2*pos+1]: a[pos],a[2*pos],pos = a[2*pos],a[pos],2*pos
        else: a[pos],a[2*pos+1],pos = a[2*pos+1],a[pos],2*pos+1
    L-=1
    return m
a,L = [-1]*10**5,0
for _ in range(int(input())):
    s = input().split()
    if s[0] == 'ExtractMax': print(extractMax(L))
    else: insert(int(s[1]),L) -End,"
 def solve(el):
    global a,n,d
    if el not in d:
        l,r = 0,n-1
        while l<r:
            mid = (l+r)//2
            if a[mid] < el: l = mid+1
            else: r = mid
        answer = r+1 if a[r] == el else -1
        d[el] = answer
        return answer
    else: return d[el]
a = list(map(int, input().split()))
n,a,d = a[0],a[1:],{}
b = list(map(int, input().split()))[1:]
for el in b: print(solve(el),end=' ') -End,"
 def merge(a,b):
    global ans
    l1,l2 = len(a),len(b)
    merged,i,j = [0]*(l1+l2),0,0
    for i0 in range(l1+l2):
        if i<l1 and j<l2:
            if a[i] > b[j]:
                merged[i0] = b[j]
                j+=1
                ans+=len(a)-i
            else:
                merged[i0] = a[i]
                i+=1
        else:
            if i<l1:
                merged[i0] = a[i]
                i+=1
            else:
                merged[i0] = b[j]
                j+=1
    return merged
def mergesort(a):
    L = len(a)
    if L == 1: return a
    else:
        m = L//2
        return merge(mergesort(a[:m]),mergesort(a[m:]))
n = int(input())
a = list(map(int, input().split()))
ans = 0
mergesort(a)
print(ans) -End,"
 from collections import defaultdict
v,e = map(int,input().split())
E, visited, c = defaultdict(lambda: []), [0]*v, 1
for _ in range(e):
    v1,v2 = map(int,input().split())
    E[v1-1].append(v2-1)
    E[v2-1].append(v1-1)
def dfs(u):
    visited[u] = c
    for v in E[u]:
        if not visited[v]:
            dfs(v)
for u in range(v):
    if not visited[u]:
        dfs(u)
        c += 1
print(c-1) -End,"
 from collections import defaultdict
from queue import Queue
v, e = map(int,input().split())
E, dist, colors, q = defaultdict(lambda: []), [0]*v, [0]*v, Queue()
for _ in range(e):
    v1, v2 = map(int,input().split())
    E[v1].append(v2)
    E[v2].append(v1)
def bfs(u):
    q.put(u)
    colors[u] = 1
    while not q.empty():
        w = q.get()
        for z in E[w]:
            if not colors[z]:
                colors[z] = 1
                dist[z] = dist[w] + 1
                q.put(z)
        colors[w] = 1
bfs(0)
print("" "".join(map(str,dist))) -End,"
 from collections import defaultdict
v,e = map(int,input().split())
E = defaultdict(lambda: [])
for _ in range(e):
    v1,v2 = map(int,input().split())
    E[v1].append(v2)
    E[v2].append(v1)
if not all(map(lambda x:len(x) and len(x)%2==0, E.values())):
    print('NONE')
else:
    visited, c = [0]*(v+1), 1
    def dfs(u):
        visited[u] = c
        for v in E[u]:
            if not visited[v]:
                dfs(v)
    for u in range(1,v+1):
        if not visited[u]:
            dfs(u)
            c += 1
    if c-1 > 1:
        print('NONE')
    else:
        cycle = []
        def euler(v):
            for w in E[v]:
                E[v].remove(w)
                E[w].remove(v)
                euler(w)
            cycle.append(v)
        euler(1)
        print(*cycle[:-1]) -End,"
 import sys
from collections import defaultdict
sys.setrecursionlimit(8000)
E,v = defaultdict(lambda: []),0
for line in sys.stdin:
    v1, v2 = map(int, line.split())
    E[v1].append(v2)
    E[v2].append(v1)
    v = max(v - 1, max(v1,v2)) + 1
visited, up, tin, time, cutpoint = [0]*v, [0]*v, [0]*v, 0, set()
def dfs(w, p):
    global time
    time += 1
    up[w] = tin[w] = time
    visited[w],count = 1,0
    for u in E[w]:
        if visited[u]:
            up[w] = min(up[w], tin[u])
        else:
            dfs(u, w)
            count += 1
            up[w] = min(up[w], up[u])
            if p != -1 and up[u] >= tin[w]:
                cutpoint.add(w)
        if p == -1 and count >= 2:
            cutpoint.add(w)
for i in range(v):
    if not visited[i]:
        dfs(i, -1)
print(*cutpoint) -End,"
 n = int(input())
a = n*n
print(a*a*a) -End,"
 print(sum(int(i) for i in input())) -End,"
 s = input()
if '.' in s: print(s.split('.')[1][0])
else: print(0) -End,"
 n,k = int(input()),int(input())
print(n - k % n if k % n else 0) -End,"
 print(sum(int(i) for i in input()[-3:])) -End,"
 x = int(input())
if x > 0: x = 1
elif x < 0: x = -1
print(x) -End,"
 print(""NO"" if int(input()) % 2 else ""YES"") -End,"
 print(""NO"" if int(input()) % int(input()) else ""YES"") -End,"
 print(""YES"" if len(set(i for i in input())) == 3 else ""NO"") -End,"
 x,y = int(input()),int(input())
if x*y > 0:
    if x > 0: print(1)
    else: print(3)
elif x > 0: print(4)
else: print(2) -End,"
 a,b,c = (float(input()) for i in range(3))
d = b * b - 4 * a * c
if d >= 0:
    roots = sorted(list(set({(-b-d**0.5)/(2*a), (-b+d**0.5)/(2*a)})))
    print(*roots, sep='\n') -End,"
 print([31,29,31,30,31,30,31,31,30,31,30,31][int(input()) - 1]) -End,"
 k,m = int(input()),int(input())
print(k // m + (k % m != 0)) -End,"
 print((int(input()) + 1) // 2 + (int(input()) + 1) // 2 + (int(input()) + 1) // 2) -End,"
 x1,y1,x2,y2 = [int(input()) for _ in range(4)]
print(""YES"" if {abs(x2 - x1), abs(y2 - y1)} == {1,2} else ""NO"") -End,"
 a,b,c = sorted([int(input()) for _ in range(3)])
if c >= a + b: print(""impossible"")
else:
    cos = (a * a + b * b - c * c) / (2 * a * b)
    if cos > 0: print(""acute"")
    elif cos < 0: print(""obtuse"")
    else: print(""right"") -End,"
 n = int(input())
for i in range(1, n // 2 + 1):
    if n % i == 0: print(i)
print(n) -End,"
 n,c = int(input()),1
for i in range(1,n//2+1):
    if n % i == 0: c += 1
print(c) -End,"
 print(sum(int(input()) for _ in range(int(input())))) -End,"
 print(*[i for i in range(2, int(input()) + 1, 2)], sep='\n') -End,"
 print('hello!\n'*5) -End,"
 print('0\n2\n4\n6\n8') -End,"
 def fac(n): return n * fac(n - 1) if n else 1
print(fac(int(input()))) -End,"
 print((lambda b: (lambda a,b: a(a, b))(lambda a,b: b * a(a, b - 1) if b else 1,b))(int(input()))) -End,"
 a = 1
for i in range(int(input()), int(input()) + 1): a *= i
print(a) -End,"
 a,k = int(input()),0
while not a % 3:
    a //= 3
    k += 1
print(k) -End,"
 import math
print(math.ceil(math.log(int(input()), 2))) -End,"
 def gcd(a, b):
    return gcd(b, a % b) if b else a
print(gcd(int(input()), int(input()))) -End,"
 a,s = int(input()),0
while a != 0:
    if a % 6 in [2,4]: s += a
    a = int(input())
print(s) -End,"
 a,s,n = int(input()),0,0
while a: s,n,a = s+a,n+1,int(input())
print(s/n) -End,"
 a,b,k = int(input()),int(input()),0
while b:
    if a < b: k += 1
    a,b = b,int(input())
print(k) -End,"
 b,a,k = int(input()),0,0
while b:
    if a * b < 0: k += 1
    a,b = b,int(input())
print(k) -End,"
 print(sum(str(i).count('7') for i in range(int(input()) + 1))) -End,"
 n,i = int(input()),3
while not n % 2:
    print(2,end=' ')
    n //= 2
while i <= n**0.5:
    while not n % i:
        print(i,end=' ')
        n //= i
    i += 2
if n > 1: print(n) -End,"
 while 1:
    a = int(input())
    if a > 100: break
    elif a >= 10: print(a) -End,"
 print(input().replace('5','').replace('7','')) -End,"
 def task():
    for i in reversed(range(int(input()), int(input()) + 1)):
        if not (i % 7): return i
    return ""NO""
print(task()) -End,"
 def sm(n):
    s = 0
    for i in range(2, int(n**0.5) + 1):
        if not n % i: s += i + n//i
    return s + 1
for i in range(int(input())):
    if sm(i) > i and sm(sm(i)) == i: print(i,sm(i)) -End,"
 print(round(3.14159265359 * (d**2)/4 * av_length, 1)) -End,"
 import re
def has_cyrillic(text):
    return bool(re.search('[а-яА-Я]', text))
s = input()
print('YES' if re.findall(r'^[_a-zA-Z]\w*$',s) and not has_cyrillic(s) else 'NO') -End,"
 print(sum(int(s) for s in input())) -End,"
 n = int(input())
a = list(map(int, input().split()))
def f():
    for i in range(1,n):
        if a[i-1]*a[i] > 0: return ""YES""
    return ""NO""
print(f()) -End,"
 #!/usr/bin/env python3
# coding=utf-8


import math


# naive solution
def square_int(n):
    border = math.floor(math.sqrt(n))

    for i in range(border + 1):
        for j in range(i, border + 1):
            square_sum = i ** 2 + j ** 2
            if square_sum == n:
                return (i, j)

    return ()

def square_int_2(n):
    # x ^ 2 + y ^ 2 = N => x, y < sqrt(N)
    border = math.floor(math.sqrt(n))

    for x in range(border + 1):
        # y ^ 2
        x_2 = x ** 2
        y_2 = n - x_2

        y = math.sqrt(y_2)
        if y == int(y) and x_2 + y_2 == n:
            return (x, int(y))
    else:
        return ()


def main():
    n = int(input())
    ans = square_int_2(n)

    if len(ans) > 0:
        print(""{0[0]} {0[1]}"".format(ans))
    else:
        print(""No solution"")


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def get_digit(num, digit):
    digit_num = 0

    while num > 0 and digit > 0:
        digit_num = num % 10
        num //= 10
        digit -= 1

    return digit_num


def main():
    n = int(input())
    print(get_digit(n, 2))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def get_digit(num):
    digit_num = 0

    while num > 0:
        digit_num = num % 10
        yield digit_num
        num //= 10

    return digit_num


def main():
    n = int(input())
    print(sum(get_digit(n)))

if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def main():
    n = int(input())
    assert n >= 0
    START_SYMBOL = ""\\""

    print(chr(ord(START_SYMBOL) + n))

if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def get_digit(num, digit):
    digit_num = 0

    while num > 0 and digit > 0:
        digit_num = num % 10
        num //= 10
        digit -= 1

    return digit_num


def main():
    n = int(input())
    print(get_digit(n, 1))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys
import collections


def latin_spanish_dict(n_words, reader):
    for _ in range(n_words):
        term, descript = next(reader).split("" - "")
        # tuple of ""latin keyword"", ""description""
        yield term, map(str.strip, descript.split("", ""))


def spanish_latin_dict(latin_dict):
    sl_dict = collections.defaultdict(list)

    for k, v in latin_dict:
        for descr in v:
            sl_dict[descr].append(k)

    return sl_dict


def print_dict(dictionary):
    for k in sorted(dictionary.keys()):
        print(""{} - {}"".format(k, "", "".join(sorted(dictionary[k]))))


def main():
    reader = (line for line in sys.stdin)
    n = int(next(reader))
    ls_dict = latin_spanish_dict(n, reader)
    sl_dict = spanish_latin_dict(ls_dict)

    print(len(sl_dict))
    print_dict(sl_dict)

if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


class Deque(list):
    def push_front(self, x):
        super().insert(0, x)

    def pop_front(self):
        return self._pop(0)

    def push_back(self, x):
        super().append(x)

    def pop_back(self):
        return self._pop(-1)

    def _pop(self, index):
        if super().__len__() > 0:
            return super().pop(index)

        return -1


def main():
    reader = (line.strip() for line in sys.stdin)
    n_cmds = int(next(reader))
    deque = Deque()
    seq_ok = True
    func_to_call = [deque.push_front, deque.pop_front,
                    deque.push_back, deque.pop_back]

    for _ in range(n_cmds):
        cmd = tuple(map(int, next(reader).split()))

        if cmd[0] == 1 or cmd[0] == 3:
            func_to_call[cmd[0] - 1](cmd[1])
        elif cmd[0] == 2 or cmd[0] == 4:
            seq_ok = cmd[1] == func_to_call[cmd[0] - 1]()

        if not seq_ok:
            print(""NO"")
            break
    else:
        print(""YES"")

if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


def is_arithm_seq(seq):
    if len(seq) >= 2:
        d = seq[1] - seq[0]
        a_1 = seq[0]

        for i in range(1, len(seq)):
            if seq[i] != a_1 + i * d:
                return False
        else:
            return True

    return True
        

def main():
    sequence = list(map(int, sys.stdin.readline().split()))
    sequence = sorted(sequence)

    if is_arithm_seq(sequence):
        print(""Yes"")
    else:
        print(""No"")
    

if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def is_leap(year):
    if (year % 400 == 0 or
            (year % 4 == 0 and not year % 100 == 0)):
        return True
    return False


def main():
    year = int(input())

    if not is_leap(year):
        print(""Regular"")
    else:
        print(""Leap"")

if __name__ == ""__main__"":
    main() -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


def is_beating(x1, y1, x2, y2):
    if x1 == x2 or y1 == y2 or abs(x1 - x2) == abs(y1 - y2):
        return True

    return False


def main():
    coords = sys.stdin.readline().split()
    x1, y1, x2, y2 = map(int, coords)

    if is_beating(x1, y1, x2, y2):
        print(""YES"")
    else:
        print(""NO"")


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8



def main():
    seconds = int(input())
    clock_s = seconds % 60
    clock_m = seconds // 60 % 60
    clock_h = seconds // 60 // 60 % 24

    print(""{}:{:02}:{:02}"".format(clock_h, clock_m, clock_s))

if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8

ROMAN_NUM = {""I"": 1, ""V"": 5, ""X"": 10,
             ""L"": 50, ""C"": 100, ""D"": 500,
             ""M"": 1000}


def roman_to_dec(r_num):
    result = 0

    prev_ch = r_num[-1]
    for digit in r_num[::-1]:
        if ROMAN_NUM[prev_ch] > ROMAN_NUM[digit]:
            result -= ROMAN_NUM[digit]
        else:
            result += ROMAN_NUM[digit]
        prev_ch = digit

    return result


def main():
    num = input().strip()
    print(roman_to_dec(num))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


# as input numbers are abs(n) <= 100
INF = 101


def row_max_sum(row):
    cur_sum = max_sum = -INF

    for element in row:
        cur_sum = max(element, cur_sum + element)
        max_sum = max(max_sum, cur_sum)

    return max_sum


def get_max_sum(matrix):
    row_length = len(matrix[0])
    matrix_length = len(matrix)
    max_sum = -INF

    for i in range(matrix_length):
        cur_row = [0 for i in range(row_length)]
        for j in range(i, matrix_length):
            cur_row = [x + y for x, y in zip(cur_row, matrix[j])]
            cur_sum = row_max_sum(cur_row)

            if cur_sum > max_sum:
                max_sum = cur_sum

    return max_sum


def main():
    reader = (tuple(map(int, line.split())) for line in sys.stdin)
    M, N = next(reader)
    matrix = [next(reader) for _ in range(M)]
    print(get_max_sum(matrix))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8

import operator as op


MATH_OP = {
            ""+"": op.add,
            ""-"": op.sub,
            ""/"": op.truediv,
            ""*"": op.mul,
            ""mod"": op.mod,
            ""div"": op.floordiv,
            ""pow"": op.pow
            }


def main():
    a = float(input())
    b = float(input())
    cmd = input()

    try:
        print(MATH_OP[cmd](a, b))
    except ZeroDivisionError:
        print(""Division by 0!"")


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8

import sys
import math


def circle():
    radius = int(input())
    pi = 3.14

    return pi * radius ** 2


def rectangle():
    length = int(input())
    width = int(input())

    return length * width


def triangle():
    reader = (int(line) for line in sys.stdin)
    a, b, c = reader
    semi_p = (a + b + c) / 2

    return math.sqrt(semi_p * (semi_p - a) * (semi_p - b) * (semi_p - c))


FLAT_TYPES = {
                ""triangle"": triangle,
                ""circle"": circle,
                ""rectangle"": rectangle
             }


def main():
    flat_type = input()
    print(FLAT_TYPES[flat_type]())


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def various_sum(seq):
    ds = set([0])
    cur_sums = set()

    for elem in seq:
        for s in ds:
            cur_sums.add(elem + s)
        ds.update(cur_sums)

    return len(ds)


def main():
    N = int(input())
    seq = tuple(map(int, input().split()))

    print(various_sum(seq))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8

import sys


def ReadGraph(num_vert, num_edges, reader):
    graph = {v: [] for v in range(1, num_vert + 1)}

    for _ in range(num_edges):
        u, v = next(reader)
        graph[u].append(v)
        graph[v].append(u)

    return graph


def conn_comp_count(graph):
    visited = [False for _ in range(len(graph))]
    conn_comp_dfs = 0

    for vertice in graph:
        if not visited[vertice - 1]:
            dfs(graph, vertice, visited)
            conn_comp_dfs += 1

    return conn_comp_dfs


def dfs(graph, u, visited):
    queue = [u]

    while len(queue) > 0:
        cur_v = queue.pop()
        visited[cur_v - 1] = True

        for v in graph[cur_v]:
            if not visited[v - 1]:
                visited[v - 1] = True
                queue.append(v)


def main():
    reader = (tuple(map(int, line.split())) for line in sys.stdin)
    n, m = next(reader)
    graph = ReadGraph(n, m, reader)
    print(conn_comp_count(graph))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8

import sys


def ReadGraph(num_v, num_e, reader):
    graph = {v: [] for v in range(num_v)}

    for _ in range(num_e):
        u, v = next(reader)
        graph[u].append(v)
        graph[v].append(u)

    return graph


def BreadthFirstSearch(graph, source):
    dist = [-1 if i != 0 else 0 for i in range(len(graph))]
    queue = [source]

    while len(queue) > 0:
        cur_v = queue.pop(0)

        for v in graph[cur_v]:
            if dist[v] == -1:
                dist[v] = dist[cur_v] + 1
                queue.append(v)

    return dist


def main():
    SOURCE_NODE = 0
    reader = (tuple(map(int, line.split())) for line in sys.stdin)
    n, m = next(reader)
    graph = ReadGraph(n, m, reader)
    print("" "".join(str(d) for d in BreadthFirstSearch(graph, SOURCE_NODE)))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def main():
    message = input().strip()
    print("" "".join((str(ord(ch)) for ch in message)))


if __name__ == ""__main__"":
    main() -End,"
 def f(ls):
    # TODO: write your code here
    return set(ls) -End,"
 #!/usr/bin/env python3
# coding=utf-8


import string


def count_init_messages(sequence):
    def get_alpha(seq):
        nonlocal count

        if len(seq) == 0:
            count += 1
            return

        for i in range(1, len(seq) + 1):
            if seq[:i] not in alph_table:
                break
            else:
                get_alpha(seq[i:])

    alphabet = "" "" + string.ascii_uppercase
    alph_table = {str(n): alph for n, alph in zip(range(len(alphabet)), alphabet)}
    count = 0
    get_alpha(sequence)

    return count


def count_messages_dp(seq):
    cur_comb, prev_comb = 1, 1

    for i in range(1, len(seq)):
        cur_comb, prev_comb = cur_comb + (prev_comb if 9 < int(seq[i - 1:i + 1]) < 27 else 0), cur_comb

    return cur_comb


def main():
    sequence = input().rstrip()
    print(count_messages_dp(sequence))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def main():
    num = input().zfill(4)
    print(1 if num == num[::-1] else 0)


if __name__ == ""__main__"":
    main() -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


def main():
    reader = (int(line) for line in sys.stdin)
    a, b, n = [next(reader) for _ in range(3)]

    pies_cost = n * (a * 100 + b)
    print(pies_cost // 100, pies_cost % 100)


if __name__ == ""__main__"":
    main() -End,"
 def filter_positive(seq):
    return list(filter(lambda x: x > 0, seq)) -End,"
 def calc_expr(a, b, c):
    return (a + b * c) / 5 - a ** 3 + (a + c / 3) / 4 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


def main():
    reader = (line for line in sys.stdin if line.find(""\\"") != -1)
    print(*reader, sep="""")


if __name__ == ""__main__"":
    main()
 -End,"
 def modify_list(l):
    l[:] = [elem // 2 for elem in l if elem % 2 == 0] -End,"
 #!/usr/bin/env python3
# coding=utf-8


def main():
    print(""_"".join(input().split()))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def is_valid_ip(ip_addr):
    def is_int(n):
        try:
            int(n)
            return True
        except:
            return False

    ip = ip_addr.split(""."")
    valid_range = list(filter(lambda x: (len(x) > 0 and is_int(x) and
                                         0 <= int(x) <= 255), ip))

    if len(ip) == 4 and len(valid_range) == len(ip):
        return True

    return False


def main():
    ip_addr = input()
    if is_valid_ip(ip_addr):
        print(""YES"")
    else:
        print(""NO"")


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8

import sys
import math


def solve_quad_eq(a, b, c):
    d = b ** 2 - 4 * a * c

    if d >= 0:
        d_sqrt = math.sqrt(d)
        if d == 0:
            return [-b / 2 / a]

        return sorted([(-b - d_sqrt) / 2 / a, (-b + d_sqrt) / 2 / a])


def main():
    reader = (float(line) for line in sys.stdin)
    a, b, c = [next(reader) for _ in range(3)]

    sol = solve_quad_eq(a, b, c)
    if sol is not None:
        print(*sol)


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8

import sys


def main():
    reader = (int(line) for line in sys.stdin)
    n = next(reader)
    seq = tuple(next(reader) for _ in range(n))
    print(max(filter(lambda e: e % 4 == 0, seq)))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding = utf-8

import sys


def build_graph(v_1, v_2, e, reader):
    graph = [[] for _ in range(v_1 + v_2)]
    print(v_1, v_2, e)

    for _ in range(e):
        u, v = next(reader)
        print(u, v)
        graph[u].append(v + 1)
        graph[v].append(u + 1)

    return graph


def build_residual_graph(l_part, graph):
    # + 2 as we add two more vertice S and T
    # S connected with all vertex from L part
    # T connected with all vertex from R part
    g_len = len(graph) + 2
    residual_graph = [[None] * g_len for _ in range(g_len)]
    s = 0
    t = g_len - 1

    for i in range(1, l_part + 1):
        residual_graph[s][i] = 1
        residual_graph[i][s] = 0

    for i in range(l_part + 1, g_len - 1):
        residual_graph[i][t] = 1
        residual_graph[t][i] = 0

    for u in range(l_part):
        for v in graph[u]:
            residual_graph[u + 1][v] = 1
            residual_graph[v][u + 1] = 0

    return residual_graph


def is_forward_path(u, v, graph, l_part):
    return u <= l_part and v in graph[u]


def find_max_match(l_part, graph):
    """"""
    @graph is the original bipartite graph
    @l_part is the size of left part of BP graph
    """"""
    _FLOW = 1

    def dfs(s, t):
        """"""
        Find the path from a source to a sink
        """"""
        if s == t:
            return [s]

        visited[s] = True
        neighbours = tuple(i for i, w in enumerate(residual_graph[s])
                           if w is not None and w != 0)

        for n in neighbours:
            if not visited[n]:
                if (s < n and _FLOW - residual_graph[s][n] < _FLOW or
                        s > n and residual_graph[s][n] > 0):
                        new_path = dfs(n, t)

                        if new_path:
                            return [s] + new_path

        return None

    def update_residual(path):
        edges = [(path[i], path[i + 1]) for i in range(len(path) - 1)]

        for u, v in edges:
            residual_graph[u][v] -= _FLOW
            residual_graph[v][u] += _FLOW

    def get_matching():
        matching = []
        for i in range(1, l_part + 1):
            pair = [i for i, f in enumerate(residual_graph[i][1:-1], 1)
                    if f == 0]

            if pair:
                matching.append((i, pair.pop()))

        return matching

    residual_graph = build_residual_graph(l_part, graph)
    source = 0
    sink = len(residual_graph) - 1

    while True:
        # here while we are able to find a path and increase a flow
        # do it and update residual graph
        visited = [False for _ in range(len(residual_graph))]
        path = dfs(source, sink)

        if not path:
            break
        else:
            update_residual(path)

    return get_matching()


def find_min_cover(v_1, graph, max_match):
    def build_orgraph():
        orgraph = [[] for _ in range(g_len)]

        for i in range(v_1 + 1):
            for n in graph[i]:
                orgraph[i].append(n - 1)

        for u, v in max_match:
            orgraph[v - 1].append(u - 1)
            orgraph[u - 1].remove(v - 1)

        return orgraph

    def dfs(source):
        visited[source] = True

        for n in orgraph[source]:
            if not visited[n]:
                dfs(n)

    g_len = len(graph)
    unmatch_v = tuple(x - 1 for x in range(1, v_1 + 1)
                      if all(x != y[0] for y in max_match))

    orgraph = build_orgraph()
    visited = [False for _ in range(len(graph))]
    min_cover = []

    for v in unmatch_v:
        dfs(v)

    for u, v in max_match:
        if not visited[u - 1]:
            min_cover.append(u - 1)
        if visited[v - 1]:
            min_cover.append(v - 1)

    return sorted(min_cover)


def main():
    reader = (tuple(map(int, line.split())) for line in sys.stdin)
    v_1, v_2, e = next(reader)
    graph = build_graph(v_1, v_2, e, reader)
    max_match = find_max_match(v_1, graph)
    print(*find_min_cover(v_1, graph, max_match))


if __name__ == ""__main__"":
    main()
 -End,"
 import math


def gcd(a, b):
    if b == 0:
        return a

    return gcd(b, a % b)


def primes():
    i = 2
    is_prime = True

    while True:
        border = math.floor(math.sqrt(i))

        for j in range(2, border + 1):
            if gcd(i, j) != 1:
                is_prime = False
                break
        else:
            yield i

        i += 1 -End,"
 #!/usr/bin/env python3
# coding=utf-8

import queue


def main():
    n = int(input())
    q = queue.PriorityQueue()

    for _ in range(n):
        cmd = input().split()

        if cmd[0] == ""Insert"":
            q.put(-int(cmd[1]))
        else:
            print(-q.get())


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def gcd(a, b):
    while b > 0:
        a, b = b, a % b

    return a


def main():
    a, b = map(int, input().split())
    d = gcd(a, b)

    print((a * b) // d)


if __name__ == ""__main__"":
    main()
 -End,"
 import sys
import math
import operator


class PriorityQueue:
    def __init__(self, *args, comp=operator.lt):
        self.size = len(args)
        self.heap = [x for x in args]
        self.comp = comp
        self.__heapify()

    def __repr__(self):
        return repr(self.heap)

    def __len__(self):
        return self.size

    def max(self):
        return self.heap[0] if self.size > 0 else None

    def push(self, x):
        self.heap.append(x)
        self.__sift_up(self.size)
        self.size += 1

    def pop(self):
        if self.size > 0:
            val = self.heap[0]
            self.heap[0] = self.heap[self.size - 1]
            self.heap.pop()
            self.size -= 1
            self.__sift_down(0)

            return val

        return None

    def __heapify(self):
        i = (self.size - 1) // 2

        while i >= 0:
            self.__sift_down(i)
            i -= 1

    def __sift_down(self, index):
        while 2 * index + 1 < self.size:
            left = 2 * index + 1
            right = left + 1
            j = left

            if (right < self.size and
                    self.comp(self.heap[right], self.heap[left])):
                j = right

            if not self.comp(self.heap[j], self.heap[index]):
                break

            self.heap[index], self.heap[j] = \
                self.heap[j], self.heap[index]

            index = j

    def __sift_up(self, index):
        p_index = (index - 1) // 2

        while index > 0 and self.comp(self.heap[index], self.heap[p_index]):
            self.heap[index], self.heap[p_index] = \
                self.heap[p_index], self.heap[index]
            p_index = (index - 1) // 2


def test():
    pq1 = PriorityQueue(3, 4, 1, 5)
    assert pq1.pop() == 1
    assert pq1.pop() == 3
    assert pq1.pop() == 4
    assert pq1.pop() == 5
    pq2 = PriorityQueue(3, 4, 1, 5, comp=operator.gt)
    assert pq2.pop() == 5
    assert pq2.pop() == 4
    assert pq2.pop() == 3
    assert pq2.pop() == 1


def calc_bites(fruits_weight, bite_cap):
    pq = PriorityQueue(*fruits_weight, comp=operator.gt)
    bites_counter = 0

    while len(pq) > 0:
        cur_cap = 0
        to_eat = []

        while len(pq) > 0 and cur_cap <= bite_cap:
            if cur_cap + pq.max() > bite_cap:
                break

            cur_cap += pq.max()
            to_eat.append(pq.pop())

        for i in to_eat:
            if i > 1:
                pq.push(math.floor(i / 2))

        bites_counter += 1

    return bites_counter


def main():
    reader = (tuple(map(int, line.split())) for line in sys.stdin)
    fruits_q, *empty = next(reader)
    fruits_weight = next(reader)
    bite_cap, *empty = next(reader)

    print(calc_bites(fruits_weight, bite_cap))

if __name__ == ""__main__"":
    main() -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


def gen_primes():
    i = 2
    marked = {}

    while True:
        if i not in marked:
            yield i

            marked[i * i] = [i]
        else:
            for p in marked[i]:
                marked.setdefault(p + i, []).append(p)

            del marked[i]

        i += 1


def main():
    reader = (tuple(map(int, line.split())) for line in sys.stdin)
    n, *e = next(reader)
    prime_indexes = next(reader)
    pr_gen = gen_primes()
    pr_list = [next(pr_gen) for _ in range(20000)]
    print(*[pr_list[i - 1] for i in prime_indexes])


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def get_field(n, m):
    def get_borders(index, max_val):
        v_min = index - 1 if index > 0 else index
        v_max = index + 1 if index + 1 < max_val else index

        return v_min, v_max

    def update_neigbours(i, j):
        l_h, r_h = get_borders(j, m)
        t_v, b_v = get_borders(i, n)

        for k in range(l_h, r_h + 1):
            for l in range(t_v, b_v + 1):
                field[l][k] += 1

    bomb_mark = ""*""
    field = [[0] * m for _ in range(n)]
    mine_val = -6
    for i in range(n):
        line = input()

        for j in range(m):
            if line[j] == bomb_mark:
                field[i][j] = mine_val
                update_neigbours(i, j)
    return field


def main():
    n, m = map(int, input().split())
    num_field = get_field(n, m)
    ans = ""\n"".join("""".join(str(y) if y >= 0 else ""*"" for y in x)
                    for x in num_field)

    print(ans)


if __name__ == ""__main__"":
    main()
 -End,"
 def sum(a, b):
    if not isinstance(a, int) or not isinstance(b, int):
        raise TypeError
    if a < 0 or b < 0:
        raise ValueError
        
    return a + b -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


def main():
    reader = (tuple(map(int, line.split())) for line in sys.stdin)
    n, *e = next(reader)
    points = [next(reader) for _ in range(n)]
    points = sorted(points, key=lambda x: x[0] ** 2 + x[1] ** 2)
    ans = ""\n"".join("" "".join(str(x) for x in y) for y in points)

    print(ans)


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


def naive_adj_matrix_check(matrix):
    n = len(matrix)

    for i in range(n):
        for j in range(n):
            if matrix[i][j] != matrix[j][i]:
                return False
    else:
        return True


def main():
    reader = (tuple(map(int, line.split())) for line in sys.stdin)
    n, *e = next(reader)
    matrix = tuple(next(reader) for _ in range(n))

    print(""YES"" if naive_adj_matrix_check(matrix) else ""NO"")


if __name__ == ""__main__"":
    main()
 -End,"
 def get_int(start_message, error_message, end_message):
    print(start_message)
    while True:
        try:
            n = int(input())
            print(end_message)
            
            return n
        except ValueError:
            print(error_message) -End,"
 #!/usr/bin/env python3
# coding=utf-8

import re
import sys


def main():
    checker = re.compile(r""(cat).*\1"")

    for line in sys.stdin:
        if checker.search(line):
            print(line.rstrip())


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8

import re


def main():
    reg_num = re.compile(r""^[ABEKMHOPCTYX]\d{3}[ABEKMHOPCTYX]{2}$"")

    if reg_num.match(input()):
        print(""Yes"")
    else:
        print(""No"")


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def main():
    n = input()
    array = input().split()

    for i in range(0, len(array) - 1, 2):
        array[i], array[i + 1] = array[i + 1], array[i]

    print(*array)


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


def main():
    reader = (tuple(map(int, line.split())) for line in sys.stdin)
    n, *e = next(reader)
    intervals = sorted([next(reader) for _ in range(n)], key=lambda x: x[1])
    points = []
    point = -1

    for interval in intervals:
        if point < interval[0] and point <= interval[1]:
            point = interval[1]
            points.append(point)

    print(len(points))
    print(*points)


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


def gcd(a, b):
    while b > 0:
        a, b = b, a % b

    return a


def main():
    reader = (tuple(map(int, line.split())) for line in sys.stdin)
    a, b = next(reader)
    print(gcd(a, b))


if __name__ == ""__main__"":
    main() -End,"
 #!/usr/bin/env python3
# coding=utf-8


def huffman_decode(code, encoded_str):
    cur_code = """"

    for ch in encoded_str:
        cur_code += ch

        if cur_code in code:
            print(code[cur_code], end="""")
            cur_code = """"


def main():
    n, m = map(int, input().split())
    code = {}

    for _ in range(n):
        alpha, al_code = input().split()
        code[al_code] = alpha[:-1]

    string = input()

    huffman_decode(code, string)


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import heapq
import collections


class PriorityQueue:
    def __init__(self, queue=[], compare=lambda x: x):
        self.compare = compare
        self.queue = [(self.compare(item), count, item) for count, item in enumerate(queue)]
        self.counter = len(self.queue)
        heapq.heapify(self.queue)

    def __len__(self):
        return len(self.queue)

    def push(self, item):
        heapq.heappush(self.queue, (self.compare(item), self.counter, item))
        self.counter += 1

    def pop(self):
        return heapq.heappop(self.queue)[-1]


def build_tree(string):
    frequencies = collections.defaultdict(int)

    for ch in string:
        frequencies[ch] += 1

    pq = PriorityQueue((Leaf(ch, frequencies[ch]) for ch in frequencies), lambda x: x.get_frequency())

    while len(pq) > 1:
        first, second = pq.pop(), pq.pop()
        pq.push(Node(first, second))

    # return root of a Huffman binary tree
    return pq.pop()


class HuffmanEncoder:
    def __init__(self, string):
        self.root = build_tree(string)
        self.code = {}
        self.root.walk(self.code, """")

    def get_code(self):
        return self.code


class Node:
    def __init__(self, left=None, right=None):
        self.left = left
        self.right = right
        self.freq = left.freq + right.freq

    def get_frequency(self):
        return self.freq

    def walk(self, code, acc):
        self.left.walk(code, acc + ""0"")
        self.right.walk(code, acc + ""1"")


class Leaf:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq

    def get_frequency(self):
        return self.freq

    def walk(self, code, acc):
        code[self.char] = acc or ""0""


def main():
    string = input()
    henc = HuffmanEncoder(string)
    code = henc.get_code()
    encoded_string = """".join(code[ch] for ch in string)

    print(len(code.items()), len(encoded_string))
    for ch in sorted(code):
        print(""{}: {}"".format(ch, code[ch]))

    print(encoded_string)


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


def main():
    n, m = map(int, input().split())

    for i in range(n):
        counter = (i + 1) * m
        for j in range(m):
            if i % 2 == 0:
                out = counter - m + j + 1
            else:
                out = counter - j

            sys.stdout.write(""{:>4d}"".format(out))

        sys.stdout.write(""\n"")


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def main():
    n, m = map(int, input().split())
    counter = [0] * m
    vals = tuple(map(int, input().split()))

    for v in vals:
        counter[v - 1] += 1

    print(*counter)


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys


def main():
    reader = (line for line in sys.stdin)
    [p_amount, a_nominal, n_of_times, t_years] = [float(next(reader)) for _ in range(4)]
    print(p_amount * (1 + a_nominal / n_of_times) ** (n_of_times * t_years))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import operator


OP_DICT = {
    ""plus"": operator.add,
    ""minus"": operator.sub,
    ""divide"": operator.floordiv,
    ""multiply"": operator.mul
}


def main():
    a, op, b = input().split()
    print(OP_DICT[op](int(a), int(b)))


if __name__ == ""__main__"":
    main() -End,"
 #!/usr/bin/env python3
# coding=utf-8


def main():
    n = int(input())
    snowflake = [[""."" for _ in range(n)] for _ in range(n)]
    mid = n // 2

    for i in range(n):
        snowflake[i][mid] = ""*""
        snowflake[mid][i] = ""*""
        snowflake[i][i] = ""*""
        snowflake[i][n - i - 1] = ""*""

    print(""\n"".join("" "".join(line) for line in snowflake))


if __name__ == ""__main__"":
    main() -End,"
 #!/usr/bin/env python3
# coding=utf-8


def main():
    seq = list(map(int, input().split()))
    print(*tuple(reversed(seq[:-1])))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def main():
    seq = list(map(int, input().split()))
    print(sum(seq))

if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import sys
import heapq


class MinHeap:
    def __init__(self):
        self.heap = []

    def push(self, x):
        a, b = x
        heapq.heappush(self.heap, x)

    def pop(self):
        return heapq.heappop(self.heap)

    def __len__(self):
        return len(self.heap)


def main():
    heap = MinHeap()
    n = int(input())
    reader = (tuple(map(int, line.split())) for line in sys.stdin)

    for point in reader:
        heap.push(point)

    while len(heap) > 0:
        print(*heap.pop())


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import re


def main():
    enc_string = input()
    pattern = re.compile(""\d*[a-zA-Z]"")

    for code in pattern.finditer(enc_string):
        num = ''
        for ch in code.group(0):
            if ch.isdigit():
                num += ch

        if not num:
            num = '1'

        print(code.group(0)[-1] * int(num), end='')


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import itertools


def main():
    seq = input()
    groups = [(k, len(tuple(g))) for k, g in itertools.groupby(seq)]

    print("""".join(str(a) + str(b) for (a, b) in groups))


if __name__ == ""__main__"":
    main()
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


def main():
    print(input().upper())


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
number = int(input())

print(number, """".join((""contig"", ""s"" if number > 1 or number == 0 else """"))) -End,"
 # put your python code here
a, b = tuple(map(int, input().split()))
print(a + b) -End,"
 # put your python code here
print(input().swapcase()) -End,"
 # put your python code here
CENTURY = 100
CURRENT_YEAR = 2016
name, age = input().split()

print(""{}, You will be 100 years old in {} year."".format(name, CURRENT_YEAR + CENTURY - int(age)))
 -End,"
 #!/usr/bin/env python3
# coding=utf-8


import re


def main():
    pnum = re.fullmatch(""^19\d{9}$"", input())
    print(""Yes"" if pnum else ""No"")  


if __name__ == ""__main__"":
    main()
 -End,"
 def main():
    n, m, *matrix = tuple(map(int, input().split()))
    print(' '.join([' '.join(map(str, matrix[i::m])) for i in range(m)]))

if __name__ == ""__main__"":
    main() -End,"
 def modify_list(l):
    # put your python code here
    l[:]= [element // 2 for element in l if not element % 2]




 -End,"
 # put your python code here
word_list = {input().strip().lower() for _ in range(int(input()))}
text_words = ' '.join(input().strip().lower() for _ in range(int(input()))).split()
print(*set(text_words) - word_list, sep='\n')




 -End,"
 def update_result(name, team, goals1, goals2):
    match_result = [1,
                    1 if (goals1 > goals2) else 0,
                    1 if (goals1 == goals2) else 0,
                    1 if (goals1 < goals2) else 0,
                    3 if (goals1 > goals2) else 1 if (goals1 == goals2) else 0
    ]
    return {team: match_result} if name is None \
        else {team: [a + b for a, b in zip(name, match_result)]}


table = {}
for _ in range(int(input())):
    matches = input().strip().split(';')
    table.update(update_result(table.get(matches[0]),
                               matches[0],
                               matches[1],
                               matches[3]
    ))
    table.update(update_result(table.get(matches[2]),
                               matches[2],
                               matches[3],
                               matches[1]
    ))

for team_name, total in table.items():
    print(f'{team_name}:', *total)
 -End,"
 # put your python code here
n = int(input())
r = 0
while n > 0:
    r *= 10
    r += n % 10
    n //= 10
print(r)


 -End,"
 # put your code here
print(input()[-1])



 -End,"
 # put your code here
import sys
a, b = map(float, sys.stdin.readlines())
print((a*a + b*b)**0.5)
           




 -End,"
 # put your code here
num = int(input())
summa = 0
while num > 0:
    summa += num % 10
    num //= 10
print(summa)


 -End,"
 # put your code here
import sys
digits = [int(i) for i in sys.stdin.readlines()[1:]]
print(*(i for i in digits if not(i % 2)), sep ='\n')





 -End,"
 # put your code here
import sys
magnitude = [float(i) for i in sys.stdin.readlines()[:-1]]
print(min(magnitude), max(magnitude))


 -End,"
 # put your code here
d = int(input())
bins = ''
while d > 0:
    d, m = divmod(d, 2)
    bins = f'{m}{bins}'
print(bins)



 -End,"
 # put your code here
import sys
h, a, b = map(int, sys.stdin.readlines())
print((h-b-1) // (a-b) + 1)



 -End,"
 # put your python code here
print(*input().split()[::-1])



 -End,"
 # put your code here
from collections import Counter
import re
import sys
regex = re.compile(r'[\.\,\!\?\;\:\n]')
text = ''.join(re.sub(regex, ' ', txt.lower()) for txt in sys.stdin.readlines()[1:])
print(*Counter(text.split()).most_common(1)[0])



 -End,"
 # put your code here
import sys
students = {}
for line in sys.stdin.readlines()[1:]:
    if line.split()[0] in students:
        students[line.split()[0]].append(float(line.split()[1]))
    else:
        students.setdefault(line.split()[0], []).append(float(line.split()[1]))
students_keys = sorted(students.keys())
for student in students_keys:
    print(student, f'{sum(students[student])/len(students[student]):.1f}')




 -End,"
 # put your code here
digits = [int(i) for i in input().split()]
for i in range(1, len(digits)):
    x = digits[i]
    j = i
    while j > 0 and digits[j-1] > x:
        digits[j] = digits[j-1]
        j -= 1
    digits[j] = x
print(*digits)
 -End,"
 def shiftChar(char, key):
    # code goes here
    return f""'{chr((ord(char) - 97 + key) % 26 + 97)}'""



 -End,"
 def unshiftChar(ch, key):
    # code goes here
    return f""'{chr((ord(ch) - 97 - key) % 26 + 97)}'""



 -End,"
 def positiveLessThan10(num):
    # your code here
    return 0 < num < 10



 -End,"
 def isBetween(a, b, c):
    # code here
    return b <= a <= c or b >= a >= c



 -End,"
 def aBeforeB(s, a, b):
    #code
    return s.rindex(a) < s.index(b)



 -End,"
 def max(x,y,z):
    #Code here
    import builtins
    return builtins.max([x, y, z])



 -End,"
 def countA(s):
    #your code here
    return s.count('a')



 -End,"
 def countX(s, x):
    #your code here
    return s.count(x)



 -End,"
 def replace1(s):
    #your code here
    return f""\""{s.replace(s[0], 'c')}\"""" if s else f'""""'



 -End,"
 def replaceC(s, ch):
    #code
    return f""\""{s.replace(ch, 'c')}\""""
 -End,"
 def replaceX (s, ch1, ch2):
    #code
    return f'""{s.replace(ch1, ch2)}""'
 -End,"
 def isIn (s1, s2):
    #code
    return s2 in s1



 -End,"
 def isNotIn(s1, s2):
    #code
    return s2 not in s1



 -End,"
 def countGenes(seq, gene):
    # code goes here
    return seq.count(gene)



 -End,"
 def sumIt(items):
    #code
    import functools
    return functools.reduce(lambda x, y: x+y, items)



 -End,"
 def avgIt(aList):
    #code
    import statistics
    return statistics.mean(aList)




 -End,"
 def sumOverN(items, n):
    #code
    return sum(item for item in items if item > n)



 -End,"
 def maxList(items):
    #code
    return sorted(items)[-1]



 -End,"
 def maxIndex(items):
    #code
    return items.index(sorted(items)[-1])



 -End,"
 def sumOver10(items):
    #code
    return sum(filter(lambda x: x > 10, items))



 -End,"
 def sumOverN(items, n):
    #code
    return sum(filter(lambda x: x > n, items))



 -End,"
 def hasTwoDigits(x):
    return 9 < x < 100




 -End,"
 def onlyOneTrue(b1, b2):
    return b1 ^ b2




 -End,"
 def replaceAtIndex(s1, i, j, s2):
    # code goes here
    return f""'{s1[:i]}{s2}{s1[j:]}'"" if j < len(s1) else f""'{s1[:i]}{s2}'""



 -End,"
 def isDNAString(seq):
    # code goes here
    for i in seq:
        if i not in ['A', 'C', 'G', 'T']:
            return False
    return len(seq) > 0    



 -End,"
 def isWeekend(day):
    return {
        'Saturday': True,
        'Sunday': True,
    }.get(day, False)




 -End,"
 def isSorted(items):
    #code
    return all(a <= b for a, b in zip(items, items[1:]))




 -End,"
 def countNums(items):
    #code
    from collections import Counter
    return f""{{{', '.join(f'{k}:{v}' for k,v in Counter(items).items())}}}""



 -End,"
 def sum20(a, b, c):
    # code here
    import itertools
    return any(x + y == 20 for x, y in (itertools.combinations([a, b, c], 2)))



 -End,"
 def isDNAString(seq):
    # code goes here
    return all(i in ['A', 'C', 'G', 'T'] for i in seq ) and len(seq) > 0



 -End,"
 def numGreaterAtIndex(list1, list2):
    # code
    return [a < b for a, b in zip(list1, list2)].count(True)



 -End,"
 def atLeastOnePositive(a, b, c):
    # code here

    return any(i > 0 for i in [a, b, c])


 -End,"
 def exactlyOnePositive(a, b, c):
    # code here
    return [i > 0 for i in [a, b, c]].count(True) == 1



 -End,"
 def max(x,y,z):
    #Code here
    return sorted([x, y, z])[-1]



 -End,"
 def max(x,y,z):
    #Code here
    import functools
    return functools.reduce(lambda a, b: a if a > b else b, [x, y, z])



 -End,"
 def isDNAString(seq):
    # code goes here
    return set(seq) <= {'A', 'C', 'G', 'T'} and len(seq) > 0 



 -End,"
 def swapper(items, d):
    # code here
    return [d[i] if i in d else i for i in items]



 -End,"
 # put your python code here
import sys

array = [item for item in map(int, sys.stdin.readlines()[1].split()) if not item % 2]
print(' '.join(map(str, array)), len(array), sep='\n')
 -End,"
 # put your python code here

import sys
print([not n % 10 for n in map(int, sys.stdin.readlines()[1:])].count(True))



 -End,"
 # put your python code here


import sys
print(('NO', 'YES')['0' in (i.strip() for i in sys.stdin.readlines()[1:])])

 -End,"
 # put your python code here

from functools import reduce
from operator import mul

print(reduce(mul, range(1, int(input()) + 1)))



 -End,"
 # put your python code here

from functools import reduce
from operator import mul

print(reduce(mul, range(int(input()), int(input()) + 1)))


 -End,"
 # put your python code here
n, m = map(int, input().split())
matrix = [input().split() for _ in range(n)]
i, j = map(int, input().split())

for row in range(n):
    matrix[row][i], matrix[row][j] = matrix[row][j], matrix[row][i]
    print(*matrix[row])



 -End,"
 # put your python code here
a, b, n = map(int, (input() for _ in range(3)))
print(*divmod((a * 100 + b) * n, 100))



 -End,"
 # put your python code here
import sys
p, x, y, k = map(int, sys.stdin.readlines())

total = x * 100 + y
for _ in range(k):
    total = total * (p + 100) // 100

print(*divmod(total, 100))




 -End,"
 # put your python code here
from itertools import zip_longest, islice
n, *numbers = [int(i) for i in input().split()]
seq = [a + b for a, b in zip_longest(islice(numbers, n // 2), reversed(numbers[n // 2:]), fillvalue=0)]
print(*seq)




 -End,"
 # put your python code here
import sys
from statistics import mean
from itertools import takewhile
seq = list(takewhile(lambda x: x, map(int, sys.stdin.readlines())))
print(mean(seq))



 -End,"
 # put your python code here
from itertools import islice, zip_longest, chain
input()
seq = list(map(int, input().split()))
rev = ((y, x) for x, y in zip_longest(islice(seq, 0, None, 2), islice(seq, 1, None, 2)))
print(*filter(None, chain(*rev)))




 -End,"
 # put your python code here
from collections import Counter
for k, v in sorted(Counter(input()).items()):
    print(k, v)




 -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('^[\x20-\x7F]+$', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch(r'^[ -~]+$', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 def sum2(a,b):
    if type(a) not in [int,float] and type(b) not in [int,float]: return ""all arguments are not a numbers""
    if type(a) not in [int,float]:return ""1st argument is not a number""
    if type(b) not in [int,float]:return ""2nd argument is not a number""
    if type(a) in [int,float] and type(b) in [int,float]: return sum([a,b]) -End,"
 i=0
while i < len(L)-1:
	i += 1
	if(L[i]-L[i-1] == 1): index=i-1
 -End,"
 def counter(T):
    D = dict()
    count=0
    for i in T:
        dat = len(i)
        key = len(set(i.lower()))
        if key in D and D[key]<dat:
            D[key]=dat

        elif key not in D: D[key]=dat

    for i in D.keys():
        if count < i: count=i

    return D[count]
 -End,"
 f=open('file.txt')
line = f.readlines()
source = line[0]
source = source[0:-1]
destin = line[1]
destin = destin[0:-1]
NumStr = int(line[2])
f.close()
s = open(source,'r')
line=s.readlines()
str = line[NumStr]
d = open(destin,'a')
d.write(str.lower())
d.close()
s.close() -End,"
 a,b,c = [int(input()) for i in (1,2,3)]
print(a+b+c)
p=(a+b+c)/2
s=((p*(p-a)*(p-b)*(p-c)))**0.5
print(s) -End,"
 # put your python code here
a=int(input())
b=(5*(5+2*(5**0.5)))**0.5
s = 3*a*a*b
b = 15+(7*(5**0.5))
v = a*a*a/4*b

print(round(s,2))
print(round(v,2)) -End,"
 # put your python code here
a=int(input())
p=(a*3)/2
st=((p*(p-a)*(p-a)*(p-a)))**0.5
print(round(st*11))


 -End,"
 # put your python code here
a, b=[float(input()) for _ in range(2)]
s=(a * b)/2
print(int(s))
print(round(s,1))
print(s) -End,"
 print(sum(map(int, input().split())))


 -End,"
 # put your python code here
s=input().split("" "")
print(s[1],s[2],s[-2])



 -End,"
 # put your python code here
s=input().split("" "")
print('-$-'.join(s[::-1]))



 -End,"
 S=input()
L=(''.join(S[2:-2:1].split("", "")))
L=L.split(""''"")




 -End,"
 S={1:'I', 5:'V', 10:'X', 50:'L', 100:'C', 500:'D', 1000:'M'}
print(S[int(input())]) -End,"
 S=input()
if S=='int':
    a, b = [int(input()) for _ in [1,2]]
    if a or b:
        print(a+b)
    else: print(""Empty Ints"")
elif S=='str':
    s=input()
    if s:print(s)
    else:print(""Empty String"")
elif S=='list':
    c=input().split()
    if c:print(c[-1])
    else:print(""Empty List"")
else :print(""Unknown type"") -End,"
 sum=0
s=input()
while s!=""The End"":
    sum+=int(s)
    s = input()

print(sum)
 -End,"
 # put your python code here
for i in input().split():
    if i[0]!=""*"": print(i)



 -End,"
 #your code
def Hello(a=""%UserName%""):
    print(""Hello, "" + a + '!')



 -End,"
 def dfactorial(N):
  
    if N%2:n=1
    else:n=2   
    f=1
    for i in range(n,N+1,2):
        f *= i        
    return f -End,"
 def Kfactorial(n, k=1):
    if n < 2:
           return 1
   
    return n*Kfactorial(n-k,k) -End,"
 #your code
def convert(L):
    return list(map(int, L))

def maxId(L):
    rez = max(list(enumerate(convert(L))), key=index)
    return rez[0]

def index(elem):
    return elem[1] -End,"
 def translate(num, osn=2):
    rez=''
    ost=0
    if num == 1: return '1'
#   if num == 2 and osn==2: return '10'
    while num >= osn:
        ost=int(num%osn)
        rez+=str(ost)
        num/=osn

    rez +=str(int(num))
    return rez[::-1] -End,"
 from math import atan
# import libraries
def f(x):
    return round(2*atan(x),3)

lim = f(500000000)#Your code of lim
print (lim) -End,"
 from math import exp

def f(x): # Функция e^x
    return exp(x)

def def_e(x,dx=0.0000000001):# Производная Функции e^x

    return round((f(x+dx) - f(x))/dx,3)



 -End,"
 def even_indeces(l):
    
    return [elem for index, elem in enumerate(l) if index%2==0]



 -End,"
 def even_elements(l):
    return [elem for elem in l if elem % 2 == 0]




 -End,"
 #n = int(input()) # Input and convert to int
res=sum([i for i in range(0,int(input())+1,5) if i%3])
print(res)




 -End,"
 def common(list_a, list_b):
    return list(set([i for i in list_a + list_b if(list_a + list_b).count(i)>1]))




 -End,"
 def is_prime(n):
    i=2
    while(i**2 <= n):
        
        if not n % i: return False
        i+=1
    return True




 -End,"
 n = int(input())
def donuts(n):
    return str(n) if n < 10 else ""много""

print(""Всего пончиков: "" + donuts(n)) -End,"
 s = input()
def both_ends(s):

    return """" if len(s)<2 else s[0:2:1]+ s[-2::]

print(both_ends(s)) -End,"
 s = input()
def fix_start(s):
    temp=s[0]

    return s.replace(s[0], '*').replace('*', temp, 1)

print(fix_start(s)) -End,"
 def numerics(n):

    return list(map(int,str(n)))




 -End,"
 def kaprekar_step(L):
    n1 = int(''.join(map(str,sorted(L))))
    n2 = int(''.join(map(str,sorted(L)))[::-1])
    
    return n2-n1 if n2>n1 else n1-n2




 -End,"
 def numerics(n):

    return list(map(int,str(n)))

def kaprekar_step(L):
    n1 = int(''.join(map(str, sorted(L))))
    n2 = int(''.join(map(str, sorted(L)))[::-1])

    return n2 - n1 if n2 > n1 else n1 - n2



def kaprekar_loop(n):

    if n == 1000:
        print(""Ошибка! На вход подано число 1000"")
        return 0
    if len(set(list(map(int,str(n))))) == 1:
        print(""Ошибка! На вход подано число ""+ str(n) + "" - все цифры одинаковые"")
        return 0
    
    print(n)
    while n!=6174:
        n = kaprekar_step(numerics(n))
        print(n)
       
 -End,"
 # Recomendation to use numerics(n) and set() for counting
#def numerics(n):

#    return list(map(int,str(n)))

def kaprekar_check(n):
    m=len(str(n))
    k=len(set(list(map(int,str(n)))))
   
    if n==100 or n==1000 or n==100000: return False 
    if ((k > 1 and k < 7) and (m==3 or m==4 or m==6)): return True
    return False 
      
 -End,"
 def kaprekar_check(n):
    m = len(str(n))
    k = len(set(list(map(int, str(n)))))

    if n == 100 or n == 1000 or n == 100000: return False
    if ((k > 1 and k < 7) and (m == 3 or m == 4 or m == 6)): return True
    return False


def numerics(n):
    if kaprekar_check(n):
        return list(map(int, str(n)))
    else:
        return 0


def kaprekar_step(L):
    n1 = int(''.join(map(str, sorted(L))))
    n2 = int(''.join(map(str, sorted(L)))[::-1])

    return n2 - n1 if n2 > n1 else n1 - n2


def kaprekar_loop(n):
    if not kaprekar_check(n):
        print(""Ошибка! На вход подано число "" + str(n) + "", не удовлетворяющее условиям процесса Капрекара"")
        return 0
    tmp = 0
    s = set()

    print(n)
    while n not in[495, 6174, 549945, 631764]:

        if not kaprekar_check(n):
            print(""Ошибка! На вход подано число "" + str(n) + "", не удовлетворяющее условиям процесса Капрекара"")
            return 0

        n = kaprekar_step(numerics(n))
        if n == tmp: return n
        tmp = n

        if n in s:
            print(""Следующее число - ""+str(n)+"", кажется процесс зациклился..."")
            return 0
        s.add(n)
        print(n)

 -End,"
 def luka(L0, L1, n):
    # your code
    Ln=L0
    for i in range(1,n):
        Ln = L0 + L1
        L0=L1
        L1=Ln
            
    return Ln -End,"
 def fi(L0, L1, n):
    Ln=L0

    for i in range(1, n):
        Ln = L0 + L1
        L0 = L1
        L1 = Ln

    return Decimal(L1) / Decimal(L0) -End,"
 def super_L(n):
    if n in [0]:
        return 2
    if n in [1]:
        return 1
    elif n in [2]:
        return 3
    elif n % 6 in [0]:
        n /= 6
        n=int(n)
        return super_L(n) ** 6 - 6 * (-1) ** n * super_L(n) ** 4 + 9 * super_L(n) ** 2 - 2*(-1) ** n
    elif n % 5 in [0]:
        n /= 5
        n = int(n)
        return super_L(n) ** 5 - 5 * (-1) ** n * super_L(n) ** 3 + 5 * super_L(n)
    elif n % 4 in [0]:
        n /= 4
        n = int(n)
        return super_L(n) ** 4 - 4 * (-1) ** n * super_L(n) ** 2 + 2
    elif n % 3 in [0]:
        n /= 3
        n = int(n)
        return super_L(n) ** 3 - 3 * (-1) ** n * super_L(n)
    elif n % 2 in [0]:
        n /= 2
        n = int(n)
        return super_L(n)**2 - 2*(-1)**n
    else: return super_L(n - 2) + super_L(n - 1) -End,"
 def kaprekar(n):
    N = n**2
    dev=10
    num = N
    ost = 0
    for i in range(1,len(str(N))):
        num = N // dev
        ost = N % dev
      #  print(num, "" "", ost)
        if(ost > 0 and num+ost==n):return True
        dev *= 10
    return False




 -End,"
 def DexToAll(num, osn):
    l=['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
    rez=''
    while num >= osn:
        ost = num % osn
        rez+=l[ost]
        num//=osn

    rez +=l[num]
    return rez[::-1]


def convert(num, to_base=10, from_base=10):
    if from_base < 10 or from_base > 10: return DexToAll(int(num, base=from_base), to_base)
    else: return DexToAll(int(num), to_base) -End,"
 def convert(num, to_base=10, from_base=10):
    num = int(str(num), base=from_base)
    if to_base==10:
        return num
    else:
        alphabet = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""
        answer = """"
        while num:
            rest = num%to_base
            answer+=alphabet[rest]
            num = num//to_base
        return answer[::-1]

def kaprekar10(n):
    N = n**2
    dev=10
    num = N
    ost = 0
    for i in range(1,len(str(N))):
        num = N // dev
        ost = N % dev
        if(ost > 0 and num+ost==n):return True
        dev *= 10
    return False

def kaprekar(num, base=10):
    if(base==10):return kaprekar10(int(num))
    if num in[1,'1']:return True
    N = convert(convert(num,10,base)**2,base,10) #Переводим из base в 10-ю, возводим в степень и возвращаем в base
    for i in range(1,len(N)):
        size = len(N) - i
        tmp=int(convert(N[:size],10,base)) + int(convert(N[size:],10,base))
        if(convert(str(tmp),base,10) in[num]): return True

    return False -End,"
 # put your python code here
def f(x):
    return round((2*(x**2) - 3*x - 5)/(3*(x**2)+x+1),3)

limP = f(500000000)#Your code of lim
limM = f(-500000000)#Your code of lim
print (limP)
print (limM) -End,"
 from math import sin, pi # import libraries
def f(x):
    y=(pi*x)/2
    return round((sin(y)/x),3)

print (f(1000000000000000000000000))




 -End,"
 def list_pull(S):
    if not S: return S
    if isinstance(S[0], list): return list_pull(S[0]) + list_pull(S[1:])
    return S[:1] + list_pull(S[1:])




 -End,"
 def f(L):
    res = []
    for item in L:
        if isinstance(item, list):
            res.append(f(item))
        else:
            res.append(item)
    return res

L2 = f(L1)# your code




 -End,"
 def verbing(s):
    if len(s) < 3: return s
    elif s[-3:]== 'ing':return s+'ly'
    else:return s+'ing'
    return 0




 -End,"
 def front_back(a,b):
    a_front = a[:(len(a) // 2 + len(a) % 2)]
    a_back = a[len(a_front):]
    b_front = b[:(len(b) // 2 + len(b) % 2)]
    b_back = b[len(b_front):]
    return a_front + b_front + a_back + b_back



 -End,"
 def extend_dictionary(d, key, value):
    if key in d:
        if isinstance(d[key], list):
            d[key].append(value)
        else:
            d[key] = [d[key], value]
    else: d[key] = [value]
       
    return d

def mimic_dict(s):
    s = s.split()
    rez = {"""":[s[0]]}

    for i in range(1,len(s)):
        extend_dictionary(rez, s[i-1], s[i])
    return rez




 -End,"
 def print_mimic(mimic_dict, word):
    """"""Given mimic dict and start word, return 200 random words.""""""

    # Your code
    rez=""""
    rez+=word

    for i in range(0,199):
        if word not in mimic_dict: word=""""
        word = random.choice(mimic_dict[word])
        rez +="" "" + word
    return rez



 -End,"
 import numpy as np

def num(n):
    return True if n >= '0' and n <= '9' else False

def matrix(s=[1], t='float64'):
    return np.zeros(s, t)

s = input().split(' ')
t = 'float64'
if not num(s[len(s)-1]):
    t = (s[len(s)-1])
    s = list(map(int, s[:-1]))
else:
    s = list(map(int, s))

Z = matrix(s,t) -End,"
 import numpy as np
n, x = int(input()), int(input())
Z = np.zeros(n)
Z[x]=1




 -End,"
 import numpy as np
n=int(input())
m=int(input())

A = np.arange(m+1)
Z=A[n:m+1] -End,"
 import numpy as np
Z=np.arange(int(input())).reshape(list(map(int,input().split(' ')))) -End,"
 import numpy as np
#Z=np.array([1, 0, 2, 0, 3, 0, 4])
NonZerros=np.nonzero(Z>3)
print(list(Z[NonZerros]))




 -End,"
 import numpy as np

def initMatrix(N, M, L):
    np.random.seed(42)
    Z = np.arange(N * M * L,dtype=np.float64).reshape([N,M,L])
    for i in range(N):
        for j in range(M):
            for k in range(L):
                Z[i][j][k] = np.random.random(1)

    return Z

nml = list(map(int,input().split(' ')))

Z=initMatrix(nml[0],nml[1],nml[2])




 -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('#?[0-9a-fA-F]{1,6}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('\-?([0-9]){1,2}(.)?([0-9]){0,2}(C|K|F)', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 import re
import sys

def test(line: str) -> bool:
    return re.fullmatch('\+?7\([0-9]{3}\)-[0-9]{7}', line) is not None

for line in sys.stdin.readlines():
    print(test(line.strip())) -End,"
 """"""
Напишите программу, которая получает на вход три целых числа,
по одному числу в строке, и выводит на консоль в три строки
сначала максимальное, потом минимальное, после чего оставшееся число.
""""""

a = [] * 3
a.append(int(input()))
a.append(int(input()))
a.append(int(input()))
a.sort()
print(a[2])
print(a[0])
print(a[1]) -End,"
 """"""
Билет считается счастливым, если сумма первых трех цифр совпадает с суммой
последних трех цифр номера билета.
Однако Паша очень плохо считает в уме, поэтому попросил вас написать
программу, которая проверит равенство сумм и выведет ""Счастливый"",
если суммы совпадают, и ""Обычный"", если суммы различны.
""""""

num = input()
a = sum(map(int, num[0:3]))
b = sum(map(int, num[3:6]))
if a == b:
    print(""Счастливый"")
else:
    print(""Обычный"") -End,"
 print(sum(list(map(int, input().split(' '))))) -End,"
 # put your python code here
a = list(map(int, input().split(' ')))
a.sort()
c = []
for i in range(1, len(a)):
    if a[i - 1] == a[i]: c.append(a[i])

print(*set(c))




 -End,"
 """"""
Напишите программу, которая считывает список чисел lst из первой строки и число x из
второй строки, которая выводит все позиции, на которых встречается число x в
переданном списке lst.
Позиции нумеруются с нуля, если число x не встречается в списке, вывести строку
""Отсутствует"" (без кавычек, с большой буквы).
Позиции должны быть выведены в одну строку, по возрастанию абсолютного значения.
""""""


def find_x(a: list, x: int):
    rez = []
    for i in range(len(a)):
        if a[i] == x: rez.append(i)
    if len(rez) > 0:
        print(*rez)
    else:
        print('Отсутствует')


lst, x = [int(x) for x in input().split()], int(input())

find_x(lst, x)
 -End,"
 print(round((float(input())**2 * 3**0.5 * 11) / 4)) -End,"
 print(round((float(input())**2 * 3 * (5 * 3**0.5 + 8)) / 8)) -End,"
 a = float(input())
print(f'{round(3 * (5 * (5 + 2 * 5**0.5))**0.5 * a**2,2)}\n{round((15 + 7 * 5**0.5)*a**3 / 4,2)}') -End,"
 l, v1, v2, vm = [int(input()) for i in range(4)]
print(int((vm * l) / (v1 +v2))) -End,"
 print(sum(map(int, input().split()))) -End,"
 print('#'.join([str(sum(map(int, input().split()))) for i in (1, 2)])) -End,"
 print(*set(input().split('&'))) -End,"
 l = (input()).split()
print(len(l), l.count('one')) -End,"
 print(sum(map(int, (input()).split()))) -End,"
 print('$'.join((input() for i in (1,2)))) -End,"
 t = ['int', 'str', 'list']
t1 = input()
if t1 not in t:
    res = 'Unknown type'
elif t1 == t[0]:
    p = [int(input()) for i in (1, 2)]
    res = 'Empty Ints' if p[0] == p[1] == 0 else sum(p)
elif t1 == t[1]:
    p = input()
    res = p if p else 'Empty String'
else:
    p = input().split()
    res = p[-1] if p else 'Empty List'
print(res) -End,"
 def dfactorial(n):
    return n * dfactorial(n-2) if n > 1 else 1 -End,"
 def numerics(n):
    return list(map(int, str(n)))
    
def kaprekar_step(n):
    l = numerics(n)
    low = list(map(str, sorted(l)))
    up = low[::-1]
    return int(''.join(up))- int(''.join(low))
    
def kaprekar_loop(n):
    print(n)
    while n != 6174:
        n = kaprekar_step(n)
        print(n) -End,"
 def numerics(n):
    return list(map(int, str(n)))
    
def kaprekar_step(n):
    l = numerics(n)
    low = list(map(str, sorted(l)))
    up = low[::-1]
    return int(''.join(up))- int(''.join(low))
    
def kaprekar_loop(n):
    if check(n):
        print(n)
        while n != 6174:
            n = kaprekar_step(n)
            print(n)

def check(n):
    if n == 1000:
        print('Ошибка! На вход подано число 1000')
        return False
    if len(set(numerics(n))) == 1:
        print(f'Ошибка! На вход подано число {n} - все цифры одинаковые')
        return False
    return True
 -End,"
 def numerics(n):
    return [int(i) for i in str(n)]

def kaprekar_check(n):
    if n in (100, 1000, 100000):
        #print(f'Ошибка! На вход подано число {n}')
        return False
    if len(set(numerics(n))) == 1:
        #print(f'Ошибка! На вход подано число {n} - все цифры одинаковые')
        return False
    if len(numerics(n)) not in (3, 4, 6):
        #print(f'Ошибка! На вход должно быть подано 3, 4 или 6-ти значное число')
        return False
    return True -End,"
 def kaprekar_step(L):
    low = list(map(str, sorted(L)))
    up = low[::-1]
    return int(''.join(up)) - int(''.join(low)) -End,"
 def numerics(n):
    return list(map(int, str(n)))
    
def kaprekar_step(n):
    low = list(map(str, sorted(numerics(n))))
    up = low[::-1]
    return int(''.join(up))- int(''.join(low))
    
def kaprekar_loop(n):
    if kaprekar_check(n):
        print(n)
        check = []
        while n not in (495, 6174, 549945, 631764):
            n = kaprekar_step(n)
            if n in check:
                print(f'Следующее число - {n}, кажется процесс зациклился...')
                break
            check.append(n)
            print(n)

def kaprekar_check(n):
    if n == 1000 or len(set(numerics(n))) == 1 or n in (100, 1000, 100000):
        print(f'Ошибка! На вход подано число {n}, не удовлетворяющее условиям процесса Капрекара')
        return False
    return True
 -End,"
 def front_x(words):
    return sorted(sorted(words), key=lambda x: x!='' and x[0]=='x', reverse=True)




 -End,"
 def fib(n):
    fi = {}
    for i in range(1, n+1):
        fi[i] = fi[i - 1] + fi[i - 2] if i > 2 else 1
    return fi[n] -End,"
 s = input()
from re import sub

def fix_start(s):
    return s[0] + sub(s[0], '*', s[1:])
print(fix_start(s)) -End,"
 global r
r = []

def list_pull(l):
    for i in l:
        if type(i) is not list:
            global r
            r.append(i)
        else:
            list_pull(i)
    return r
 -End,"
 def deepc(l):
    r = []
    for i in l:
        if type(i) is list:
            r.append(deepc(i))
        else:
            r.append(i)
    return r
L2 = deepc(L1)




 -End,"
 def print_mimic(mimic_dict: dict, word: str) -> str:
    import random
    res = word
    for _ in range(199):
        word = random.choice(mimic_dict[word] if mimic_dict.get(word) else mimic_dict[''])
        res += ' ' + word
    return res



 -End,"
 print(*[i[0] for i in input().split()], sep=' ') -End,"
 print(input().lower())


 -End,"
 import re
print(re.split('[^a-z]', input())) -End,"
 # your code

L2 = list(filter(lambda x: x != '', L1))




 -End,"
 L2 = []
for i in L1:
    L2.extend(i)




 -End,"
 year = int(input())
print('Обычный' if year % 4 != 0 or (year % 100 == 0 and year % 400 != 0) else 'Високосный')
 -End,"
 a, b, c = (int(input()) for _ in range(3))
p = sum((a, b, c)) / 2
print((p * (p - a) * (p - b) * (p - c))**0.5)
 -End,"
 x = int(input())
print(not (x <= -15 or 12 < x <= 14 or 17 <= x < 19)) -End,"
 
p = (a + b + c) / 2
S = (p * (p - a) * (p - b) * (p - c))**0.5




 -End,"
 for i in range(len(L)-1):
    if abs(L[i]-L[i+1]) == 1:
        index = i

 -End,"
 def sum2(a, b):
    from numbers import Number

    if not isinstance(a, Number) and not isinstance(b, Number):
        return ""all arguments are not a numbers""

    elif not (isinstance(a, Number)):
        return ""1st argument is not a number""

    elif not (isinstance(b, Number)):
        return ""2nd argument is not a number""

    return a + b
 -End,"
 def counter(T):

    max_len_set = max_len = 0

    for i in list(map(lambda x: x.lower(), T)):
        if len(set(i)) >= max_len_set:
            max_len_set = len(set(i))
            max_len = len(i)
            if len(i) > max_len:
                max_len = len(i)

    return max_len
 -End,"
 def lam(U):
    from scipy import constants as c
    return c.h * c.c / (c.e * U)
 -End,"
 with open(r'file.txt', 'r') as data:
    result = data.read().split('\n')

with open(result[0], 'r') as src:
    text = src.read().split('\n')
    src_data = text[int(result[2])].lower()

with open(result[1], 'a') as res:
    res.write(src_data)
 -End,"
 print(sum([int(input()) for _ in range(int(input()))]))
 -End,"
 res = 0
while True:
    i = int(input())
    if i:
        res += i
    else:
        break
print(res)
 -End,"
 a, b = (int(input()) for _ in range(2))
for i in range(min((a, b)), a * b + 1):
    if not(i % a + i % b):
        print(i)
        break
 -End,"
 while True:
    i = int(input())
    if i > 100:
        break
    elif i < 10:
        continue
    print(i) -End,"
 matr = [['']] + [[i] for i in range(int(input()), int(input()) + 1)]
col = [i for i in range(int(input()), int(input()) + 1)]
print(*matr[0] + [c for c in col], sep='\t')
for row in matr[1:]:
    print(*row + [c * row[0] for c in col], sep='\t')
 -End,"
 data = [i for i in range(int(input()), int(input()) + 1) if not i % 3]
print(sum(data) / len(data))
 -End,"
 st = input().lower()
print((st.count('g') + st.count('c')) / len(st) * 100)
 -End,"
 st = input()
r = [st[0], 0]

for i in st:
    if i == r[-2]:
        r[-1] += 1
    else:
        r.append(i)
        r.append(1)

print(''.join(list(map(str, r)))) -End,"
 print(sum(list(map(int, input().split()))))


 -End,"
 line = list(map(int, input().split(' ')))
if len(line) > 1:
    line = [line[-1]] + line + [line[0]]
    [print(line[i-1] + line[i + 1], end=' ') for i, _ in enumerate(line[1:-1], 1)]
else:
    print(*line, sep=' ')
 -End,"
 line = list(map(int, input().split(' ')))
[line.pop(line.index(i)) for i in set(line)]

print(*set(line), sep=' ')
 -End,"
 import collections
results = collections.Counter(input().split(' '))
print(' '.join(filter(lambda x: results[x] > 1, results)))
 -End,"
 res = [int(input())]
while True:
    if sum(res):
        res.append(int(input()))
        continue
    break

print(sum(map(lambda x: x**2, res)))
 -End,"
 n = int(input())
r = []
k = 1

while len(r) < n:
    r += [k] * k
    k += 1

print(*r[:n])
 -End,"
 lst = [int(i) for i in input().split()]
n = int(input())
k = -1
for i in range(lst.count(n)):
    k = lst[k+1:].index(n) + k+1
    print(k, end=' ')
    if i == lst.count(n)-1: break
else:
    print(""Отсутствует"")
 -End,"
 m = []
while True:
    inp = input()
    if inp == 'end':
        break
    m.append([int(i) for i in inp.split()])

r = [[0 for _ in range(len(m[0]))] for _ in range(len(m))]

for i in range(len(m)):
    for j in range(len(m[i])):
        for d_i in (-1, 0, 1):
            for d_j in (-1, 0, 1):
                if d_i in (-1, 1) and d_j == 0 or d_i == 0 and d_j in (-1, 1):
                    r_i = i + d_i if i + d_i < len(m) else 0
                    r_j = j + d_j if j + d_j < len(m[i]) else 0
                    r[i][j] += m[r_i][r_j]

for row in r:
    print(*row, sep='\t')
 -End,"
 n = int(input())
m = [[0 for _ in range(n)] for _ in range(n)]
m[n//2][n//2] = n ** 2
st, k = 1, 0

for v in range(n//2):
    
    for i in range(n-k):
        m[v][i+v] = st
        st += 1
    
    for i in range(v+1, n-v):
        m[i][-v-1] = st
        st += 1
    
    for i in range(v+1, n-v):
        m[-v-1][-i-1] = st
        st += 1
    
    for i in range(v+1, n-(v+1)):
        m[-i-1][v] = st
        st += 1
    k += 2

for row in m:
    print(*row, sep='\t')
 -End,"
 def modify_list(l):
    for i, j in enumerate(l):
        l[i] = '*' if j%2 else j//2
    for i in range(l.count('*')):
        l.pop(l.index('*'))
 -End,"
 def f(x: float) -> float:
    if x <= -2:
        result = 1 - (x + 2)**2
    elif x > 2:
        result = (x - 2)**2 + 1
    else:
        result = - x / 2
    
    return result -End,"
 # не добавляйте кода вне функции
def update_dictionary(d: dict, key: int, value):
    if d.get(key):
        d[key].append(value)
    elif d.get(2 * key):
        d[2 * key].append(value)
    else:
        d[2 * key] = [value]

# не добавляйте кода вне функции -End,"
 import collections as c
print(*(f""{w} {c}"" for w, c in c.Counter(input().lower().split()).items()), sep='\n')
 -End,"
 res = {}
for i in range(int(input())):
    x = int(input())
    res[x] = res[x] if res.get(x) else f(x)
    print(res[x])
 -End,"
 def closest_mod_5(x):
    return 5 - x % 5 + x if x % 5 else x





 -End,"
 data = [input() for _ in range(4)]
encod_dict = {data[0][i]: data[1][i] for i in range(len(data[0]))}
decod_dict = {data[1][i]: data[0][i] for i in range(len(data[0]))}
print(*[encod_dict[data[2][i]] for i in range(len(data[2]))], sep='')
print(*[decod_dict[data[3][i]] for i in range(len(data[3]))], sep='')
 -End,"
 check, words = [input().lower() for _ in range(int(input()))], []
[words.extend(input().split()) for _ in range(int(input()))]
print(*list(filter(lambda x: x.lower() not in check, set(words))), sep='\n')
 -End,"
 r = [0, 0]
x = {'север': (0, 1), 'юг': (0, -1), 'восток': (1, 0), 'запад': (-1, 0)}
for _ in range(int(input())):
    v, d = input().split()
    for i in (0, 1):
        r[i] += x[v][i] * int(d)
print(*r)
 -End,"
 def fib(n: int) -> int:
    r = [0, 1]
    if n == 1:
        return 1
    for i in range(2, n+1):
        r.append(r[i-1] + r[i-2])
    return r[-1]


def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main()
 -End,"
 a, b = int(input()), int(input())
print(a if a>b else b)




 -End,"
 a = int(input())
print(""Обычный"" if a % 4 != 0 or (a % 100 == 0 and a % 400 != 0) else 'Високосный')




 -End,"
 a = int(input())
if a%10 == 1 and a%100 != 11:
    print(a,'программист')
elif a%10 in (2, 3, 4):
    print(a, 'программиста')
else:
    print(a, 'программистов')




 -End,"
 s = sum([int(i) for i in input() if i!='-'])
print(s)



 -End,"
 n, s = int(input()), 0
while n:
    s += n
    n = int(input())
print(s)




 -End,"
 a, b = [int(input()) for _ in range(2)]
i = a
while i%a or i%b:
    i += 1
print(i)




 -End,"
 a, b = [int(input()) for i in range(2)]
i = a
while True:
    if not a%i and not b%i:
        break
    i -= 1
print(i)




 -End,"
 n = 1
while n <=100:
    if n >= 10:
        print(n)
    n = int(input())




 -End,"
 a = abs(int(input()))
i = 0
while a:
    i += 1
    a = a//10
i = 1 if i == 0 else i
print(i)




 -End,"
 a = 1
for i in (1, 4, 7, 10):
    a *= i
print(a)




 -End,"
 a = [int(input()) for i in range(4)]
for i in a:
    print(i**3)




 -End,"
 n = int (input ())
f = 1
for i in range (1, n + 1):
    f = f * i
print (f)




 -End,"
 n,s = 1,0
while n:
  n = int(input())
  if n%6 == 0 and n%10 == 4:
    s += n
print(s)

   -End,"
 s1 ,s, a = -1, 0, 1
while a:
    a = int(input())
    if a%2  and a%3 == 0:
        s += 1
    s1 += 1
print(s1, s, sep = '\n')





 -End,"
 n, s, s1 = 1, 0, 0
sign = lambda x: (1, -1)[x<0]
while n:
    n = int(input())
    s += n
    s1 += sign(n)
print(s)
print(s1 - 1)




 -End,"
 a, n, s = 1, -1, 0
while a:
    a = int(input())
    if not (a%8):
        n += 1
        s += a
if n == 0:
    print('NO')
else:
    print(round(s/n, 1))




 -End,"
 def DecToBin (dec):
    bin = ''
    while dec > 0:
        dec, bin = dec // 2, str (dec % 2) + bin
    print (bin)

DecToBin(int(input()))
 -End,"
 fib = lambda n: 1 if n < 3 else fib(n -1) + fib(n - 2)

print(fib(int(input())))




 -End,"
 factorial = lambda n: 1 if n == 1 else factorial(n - 1) * n
print(factorial(int(input())))




 -End,"
 print(int(input()) % 9)




 -End,"
 def f(n):
    if n < 10:
        return n
    else:
        return f(n//10 + n%10)
print(f(int(input())))




 -End,"
 def f(x):
    return 1 - (x + 2) ** 2 if x <= -2 else (x - 2) ** 2 + 1 if 2 < x else -0.5 * x




 -End,"
 print(sum(int(i) for i in input()))



 -End,"
 # put your python code here
n = int(input())
print((-int(input()))%n)



 -End,"
 a = float(input())
b = float(input())
if a > 0:
    print(1 if b > 0 else 4)
else:
    print(2 if b > 0 else 3)




 -End,"
 a = float(input())
b = - float(input())/a
c = float(input())/a
d = b**2 - 4 * c
if d > 0:
    print((b - d ** 0.5)/2)
    print((b + d ** 0.5)/2)
elif d == 0:
    print(b/2)



 -End,"
 print(2*(int(input())//2+1))




 -End,"
 import math
print(math.ceil(int(input())/int(input())))




 -End,"
 x1, y1, x2, y2 = [int(input()) for _ in range(4)]
print('YES' if abs(x1-x2)<=1 and abs(y1-y2)<=1 else 'NO')




 -End,"
 a = [int(i) for i in input()]
print(""YES"" if a[0] < a[1] < a[2] else ""NO"")



 -End,"
 a, b, c = sorted([int(input()) for _ in range(3)])
print(""YES"" if c < a + b else ""NO"")


 -End,"
 n = int(input())
print(sum([int(input()) for _ in range(n)]))




 -End,"
 print(""YES"" if 0 in {int(input()) for _ in range(int(input()))} else ""NO"")





 -End,"
 a = int(input())
b = int(input())
while b:
    a, b = b, a % b
print(a)



 -End,"
 print(input().count(""4""))




 -End,"
 n = int(input())
a = sum([int(i) for i in str(n)])
print(""YES"" if n % a == 0 else ""NO"")




 -End,"
 print(input()[::-1])




 -End,"
 n = int(input())
s = 0
for i in range(1, n + 1):
    if '7' in str(i):
        s += str(i).count('7')
print(s)




 -End,"
 n, c, d = [int(input()) for _ in range(3)]
for i in range(c, n + 1, c):
    if i % d:
        print(i)
        break





 -End,"
 n, c, d = [int(input()) for _ in range(3)]
[print(i) for i in range(c, n + 1, c)  if i % d]




 -End,"
 s = input().replace(""5"", """")
s = s.replace(""7"", """")
print(s)




 -End,"
 a = [int(input()) for _ in range(int(input()))]
print(a.count(min(a)))




 -End,"
 n = int(input())
while n > 9:
    n = sum([int(i) for i in str(n)])
print(n)




 -End,"
 a = int(input())
n = int(input())//7 * 7
print(n if n >= a else ""NO"")




 -End,"
 print(""YES"" if input() in {str(i) for i in range(10)} else ""NO"")



 -End,"
 print(input().swapcase())




 -End,"
 print(len(input().split()))





 -End,"
 print(input()[::-1])




 -End,"
 print(' '.join(input().split()))




 -End,"
 print(""YES"" if input()[0] == input()[-1] else ""NO"")




 -End,"
 a = sorted([int(input()) for i in range(3)])
print(""YES"" if a[0] + a[1] > a[2] else ""NO"")




 -End,"
 a = int(input()) - int(input())
a = a if a > 0 else -a
print(a//60, a%60)




 -End,"
 print(sum([int(input()) for g in range(3)]))




 -End,"
 s = (int(input())*100 + int(input())) * int(input())
print(s//100, s%100)




 -End,"
 x, y = int(input()), int(input())
x, y = [x, y] if x > y else [y, x]
print(f""Большее число: {x}, меньшее число: {y}"")



 -End,"
 a, b = [float(input()) for __ in ""__""]
print(a + b if input() == '+' else a - b)





 -End,"
 n = int(input())
print(""Число трехзначное"" if n > 99 else  ""Число двузначное"" if n > 9 else ""Число однозначное"")




 -End,"
 n = int(input())
s = ""Простое""
for i in range(2,int(n ** 0.5)):
    if n % i == 0:
        s = ""Составное""
print(s)




 -End,"
 n, m = [int(i) for i in input().split()]
a =[sum([int(i) for i in input().split()]) for j in range(n)]
amax = a[0]
k = 0
for i in range(1, n):
    if a[i] > amax:
        amax = a[i]
        k = i
print(amax)
print(k)




 -End,"
 def sign(x):
  if x > 0:
    return 1
  elif x < 0:
    return -1
  else:
    return 0
  
print(sum([sign(int(i)) for i in input().split()])) -End,"
 def f(x):
    return int(x[::-1])

print(f(input()) + f(input()))




 -End,"
 def Fact2(n):
    s = 1
    for i in range(n, n % 2, -2):
        s *= i
    return s

a = [int(input()) for i in range(3)]
print(*[Fact2(i) for i in a])




 -End,"
 def f(a):
    s = 0
    for i in a:
        if i == 'b':
            s += 1
    return s

print(sum([f(input()) for XL in 'XL']))




 -End,"
 n = input()
a = []
while n != '.':
  if int(n) % 2 == 0:
    a.append(n)
  n = input()
print(*a[::-1]) -End,"
 # put your python code here
try:
  A=int(input())
  if 1900<=A<=3000:
    if A%4==0 and A%100!=0 or A%400==0:
      print(""Високосный"")
    else:
      print(""Обычный"")
  else:
    print(""Число не входит в диапазон"")
except ValueError:
  print(""Это не число"")
  



 -End,"
 # put your python code here
a = int(input())
b = int(input())
c = int(input())
ma = max(a, b, c)
mi = min(a, b, c)
print(ma)
print(mi)
print(a+b+c-ma-mi)



 -End,"
 i = int(input())
#i = 0
#for i in range(0,1000):
if int(str(i)[-2:]) in range(11,15):
  print(str(i)+"" программистов"")
elif str(i)[-1:] == ""1"":
  print(str(i)+"" программист"")
elif int(str(i)[-1:]) in range(2,5):
  print(str(i)+"" программиста"")
elif str(i)[-1:] >""4"" or ""0"":
  print(str(i)+"" программистов"")
#i += 1



 -End,"
 i = str(input())
#i = ""123321""
sum1 = int(i[:1])+int(i[1:2])+int(i[2:3])
sum2 = int(i[-1:])+int(i[-2:-1])+int(i[-3:-2])
if sum1 == sum2:
  print(""Счастливый"")
else:
  print(""Обычный"")




 -End,"
 a = 0
while True:
    b = int(input())
    if b != 0:
        a += b
    else:
        print(a)
        break




 -End,"
 a = int(input())
b = int(input())
i = min(a, b)
while (i % a != 0) or (i % b != 0):
  i += 1
print(i)




 -End,"
 a = int(input())
b = int(input())
c = int(input())
d = int(input())

print("""", *range(c, d+1), sep=""\t"")

for i in range(a, b+1):
    print(i, end=""\t"")
    for n in range(c, d+1):
        print(i*n, end=""\t"")
    n + 1
    print()
i + 1



 -End,"
 a, b = int(input()), int(input())
c = 0
sum = 0
for i in range(a, b + 1):
    if i%3 == 0:
        sum += i
        c += 1
i + 1
print(sum/c)




 -End,"
 a = str(input())
print((a.upper().count(""G"")+a.upper().count(""C""))*100/len(a))




 -End,"
 a = str(input())
c = 1
b = 0
d = 1
for i in a:
    if i == a[b+1:c+1]:
        d += 1
    else:
        print(i + str(d), end="""")
        d = 1
    c += 1
    b += 1




 -End,"
 a = [int(i) for i in input().split()]
b = []
d = 0
c = 0
e = a[d]
f = a[c]
for ind in a:
    try:
        a[1]
    except IndexError:
        b.append(a[0])
    else:
        try:
            e = a[d-1]
            f = a[c+1]
            b.append(e + f)
        except IndexError:
            b.append(e + a[0])
    d += 1
    c += 1
print(*b)




 -End,"
 a = [int(i) for i in input().split()]
b = []
for num in a:
    c = a.count(num)
    if num not in b and c > 1:
        b.append(num)

print(*b, end="" "")




 -End,"
 s = int(input())
n = s
m = s**2
while n !=0:
    s = int(input())
    n += s
    m += s ** 2
print(m)





 -End,"
 a = int(input())
b = []
for i in range(1, a+1):
    while i != b.count(i):
        b.append(i)
print(*b[:a])




 -End,"
 lst = [int(i) for i in input().split()]
x = int(input())
a = 0
b = lst[a]
if x in lst:
    for i in lst:
        if i == x:
            print(a, end="" "")
        a += 1
else: print(""Отсутствует"")




 -End,"
 import copy
a = []
b = input().split()

while b != [""end""]:
    a.append(b)
    b = input().split()

c = copy.deepcopy(a)

for row in range(0, len(a)):
    for col in range(0, len(a[0])):
        c[row][col] = int(a[row][col - len(a[0]) + 1]) + int(a[row][col - 1]) + int(a[row - len(a) + 1][col]) + int(a[row - 1][col])

for row in range(0, len(a)):
    for col in range(0, len(a[0])):
        print(c[row][col], end="" "")
    print()



 -End,"
 import copy
n = abs(int(input()))
a = []
k = 1
c = 0
r = -1
m = copy.deepcopy(n)
for i in range(n):
    a.append([])
    for l in range(0, n):
      a[i].append([])

while k <= m*m:
    if n-1 <= c:
        n += 1
    for col in range(c, n-1):
        a[c][col] = k
        k += 1
    if k < m*m:
        for row in range(c, n-1):
            a[row][r] = k
            k += 1
        for col in range(r, -n, -1):
            a[r][col] = k
            k += 1
        for row in range(r, -n, -1):
            a[row][c] = k
            k += 1
    n -= 1
    c += 1
    r -= 1

for row in range(0, len(a)):
    for col in range(0, len(a[0])):
        print(a[row][col], end=""\t"")
    print()




 -End,"
 a = input().lower().split()
c = {}
for key in a:
  b = str(a.count(key))
  c[key] = b
  
for key, value in c.items():
  print(key,"" "" + value, sep="""")




 -End,"
 list = {}
n = int(input())
for i in range(n):
  x = int(input())
  if x not in list.keys():
    list[x] = f(x)
  print(list[x])




 -End,"
 a = int(input())
b = {}
for i in range(a):
    c = input().split(';')
    for j in c[::2]:
        if j not in b.keys():
            b[j] = [0, 0, 0, 0, 0]
        b[j][0] += 1
    if c[1] > c[3]:
        b[c[0]][1] += 1
        b[c[2]][3] += 1
        b[c[0]][4] += 3
    elif c[3] > c[1]:
        b[c[2]][1] += 1
        b[c[0]][3] += 1
        b[c[2]][4] += 3
    else:
        b[c[0]][2] += 1
        b[c[2]][2] += 1
        b[c[0]][4] += 1
        b[c[2]][4] += 1
for key in b:
    print(key+':', end="" "")
    for i in range(len(b[key])):
        print(b[key][i], end="" "")
    print()




 -End,"
 a, b, c, d = input(), input(), input(), input()
dic = {}
for i in range(len(a)):
    if a[i] not in dic.keys():
        dic[a[i]] = b[i]
for i in c:
    print(dic[i], end="""")
print()
for i in d:
    for k, v in dic.items():
        if i == v:
            print(k, end="""")

 -End,"
 s1 = set()
s2 = set()
for i in range(int(input())):
    s1.add(input().lower())
for j in range(int(input())):
    a = [str(i) for i in input().lower().split()]
    for k in range(len(a)):
        if a[k] not in s1:
            s2.add(a[k])
for i in s2:
    print(i)




 -End,"
 dic = {'север': 0, 'запад': 0, 'юг': 0, 'восток': 0}
x, y = 0, 0
for i in range(int(input())):
    k, v = input().split()
    dic[k] += int(v)
x += dic['восток'] - dic['запад']
y += dic['север'] - dic['юг']
print(x, y)




 -End,"
 s = 0
for i in range(int(input())):
    s += int(input())
print(s)




 -End,"
 namesp = {'global': None}
var = {'global':[]}

def create(ns, v):
  namesp[ns] = v
  var[ns] = []
  
def add(ns, v):
  var[ns].append(v)
  
def get(ns, v):
  if ns in var.keys():
    if v in var[ns]:
      print(ns)
    elif ns != 'global':
      return get(namesp[ns], v)
    else:
      print('None')
      
for i in range(int(input())):
  f, ns, v = input().split()
  if f == 'create':
    create(ns, v)
  elif f == 'add':
    add(ns, v)
  elif f == 'get':
    get(ns, v)




 -End,"
 class Buffer:
    def __init__(self):
        self.l = []

    def add(self, *a):
        for i in [*a]:
            self.l.append(i)
            if len(self.l) == 5:
                print(sum(self.l))
                self.l = []

    def get_current_part(self):
        return self.l
        # вернуть сохраненные в текущий момент элементы последовательности в порядке, в котором они были добавлены -End,"
 d = {}
for _ in range(int(input())):
  a = input().replace(':', ' ').split()
  d[a[0]] = a[1:]
  
for k, v in d.items():
  for k2, v2 in d.items():
    if k in v2:
      d[k2] += v
for _ in range(int(input())):
  c1, c2 = input().split()
  if c1 == c2:
    print('Yes')
  elif c1 in d[c2]:
    print('Yes')
  else:
    print('No')
               




 -End,"
 class ExtendedStack(list):
  def sum(self):
    if len(self) >= 2:
      self.append(self.pop() + self.pop())

  def sub(self):
    if len(self) >= 2:
      self.append(self.pop() - self.pop())
      
  def mul(self):
    if len(self) >= 2:
      self.append(self.pop() * self.pop())

  def div(self):
    if len(self) >= 2:
      self.append(self.pop() // self.pop())




 -End,"
 d = {}
li = []
s = []
for _ in range(int(input())):
  b = input().replace(':', ' ').split()
  d[b[0]] = b[1:]
for _ in range(int(input())):
  li.append(input())

for k, v in d.items():
  for k2, v2 in d.items():
    if k in v2:
      d[k2] += v

for i in li:
  for j in d[i]:
    if i not in s:
      if j in li and li.index(j) < li.index(i):
        s.append(i)
for i in s:
  print(i)



 -End,"
 import datetime
y, m, d = [int(i) for i in input().split()]
a = datetime.date(y, m, d) + datetime.timedelta(days = int(input()))
print(a.year, a.month, a.day)





 -End,"
 class multifilter:
    def judge_half(pos, neg):
      if pos >= neg:
        return True
      else:
        return False

    def judge_any(pos, neg):
      if pos >= 1:
        return True
      else:
        return False

    def judge_all(pos, neg):
      if neg == 0:
        return True
      else:
        return False

    def __init__(self, iterable, *funcs, judge=judge_any):
      self.iterable = iterable
      self.funcs = funcs
      self.judge = judge

    def __iter__(self):
      for i in self.iterable:
        pos, neg = 0, 0
        for func in self.funcs:
          if func(i) == True:
            pos += 1
          else:
            neg += 1
        if self.judge(pos, neg) == True:
          yield i




 -End,"
 from math import factorial
def primes():
  n = 2
  while True:
    if (factorial(n-1)+1) % n == 0:
      yield n
    n += 1






 -End,"
 import requests
import re
l = []
refA, refB = input(), input()
resA = requests.get(refA).text
refs = re.findall(r'<a href=\""([\S]+)\"">', resA)
for ref in refs:
    res = requests.get(ref).text
    l.extend(re.findall(r'<a href=\""([\S]+)\"">', res))
if refB in l:
    print('Yes')
else:
    print('No')




 -End,"
 import re
import requests
r = re.findall(r'<a.*href *= *[\""\']?(?:.*?//)?(\w+?[\w\d\.\-\_]*)', requests.get(input()).text)
for i in sorted(set(r)):
  print(i)


 -End,"
 import json
d = {}
li = json.loads(input())
for i in range(len(li)):
    for parent in li[i][""parents""]:
        if parent in d.keys():
            d[parent].add(li[i][""name""])
        else:
            d[parent] = {li[i][""name""]}


def count_parents(start):
    visited, queue = set(), [start]
    while queue:
        vertex = queue.pop(0)
        if vertex not in visited:
            visited.add(vertex)
            if vertex in d.keys():
                queue.extend(d[vertex] - visited)
            else:
                pass
    return len(visited)

l = set()
for k, v in d.items():
    l.add(k)
    l = l | v

for i in sorted(l):
    print(i + "" : "" + str(count_parents(i))) -End,"
 def get_int(start, error, end):
    print(start)
    while True:
        try:
            a = int(input())
            print(end)
            break
        except ValueError:
            print(error)
    return a
        




 -End,"
 a = [int(i) for i in input().split()]
b = int(input())
if b in a:
    for num in range(len(a)):
        if b == a[num]:
            print(num, end=' ')
else:
    print('None')




 -End,"
 a = ' abcdefghijklmnopqrstuvwxyz'
b = int(input())
c = str(input().strip())
l = []
for i in c:
  ind = a.index(i)+b
  if ind//27 != 0:
    ind %= 27
  l.append(a[ind])
print('Result: ' + '\""' + ''.join(l) + '\""')





 -End,"
 l = [chr(i) for i in range(int(0x1f600), int(0x1f64f)+1)]
n = int(input())
inp = input().strip()
res = [l[(l.index(c) + n) % len(l)] for c in inp]
print('Result: ""' + ''.join(res) + '""')




 -End,"
 r = input()
s = ''
for i in range(len(r)):
  if r[i].isalpha():
    try:
      print(r[i]*int(s), end="""")
      s = ''
    except ValueError:
      print(r[i], end='')
  elif r[i].isdigit():
    s += r[i] -End,"
 n, m = [int(i) for i in input().split()]
field = [[0 for i in range(m+2)] for j in range(n+2)]
for i in range(n):
  a = input()
  for j in range(m):
    if a[j] == '*':
      field[i+1][j+1] = '*'
      
for i in range(1, n+1):
  for j in range(1, m+1):
    if field[i][j] != '*':
      if field[i][j+1] == '*': field[i][j] += 1
      if field[i][j-1] == '*': field[i][j] += 1
      if field[i+1][j] == '*': field[i][j] += 1
      if field[i-1][j] == '*': field[i][j] += 1
      if field[i+1][j+1] == '*': field[i][j] += 1
      if field[i+1][j-1] == '*': field[i][j] += 1
      if field[i-1][j+1] == '*': field[i][j] += 1
      if field[i-1][j-1] == '*': field[i][j] += 1

for i in field[1:-1]:
  print(*i[1:-1], sep='')




 -End,"
 def fib_digit(n):
    f0 = 0
    f1 = 1
    for i in range(1, n):
        f0, f1 = f1%10, (f0+f1)%10
    return f1


def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 def fib_mod(n, m):
    f0 = 0
    f1 = 1
    l = [f0, f1]
    for i in range(1, n):
        f0, f1 = f1%m, (f0+f1)%m
        if f0 == 0 and f1 == 1:
            l.pop()
            break
        else:
            l.append(f1)
    return l[n % len(l)]


def main():
    n, m = map(int, input().split())
    print(fib_mod(n, m))


if __name__ == ""__main__"":
    main() -End,"
 a, b = input(), input()
print('{0} and {1} sat in the tree.\n{0} had fallen, {1} was stolen.\nWhat\'s remaining in the tree?'.format(a, b))




 -End,"
 c1, c2 = input().split()
s = input()
l = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
if (l.index(c1[:-1])>l.index(c2[:-1]) and c1[-1] == c2[-1]) or (c1[-1] == s and c1[-1] != c2[-1]):
  print('First')
elif (l.index(c2[:-1])>l.index(c1[:-1]) and c1[-1] == c2[-1]) or (c2[-1] == s and c1[-1] != c2[-1]):
  print('Second')
else:
  print('Error')




 -End,"
 n = int(input())
l = sorted([[int(i) for i in input().split()] for j in range(n)], key=lambda x: x[1])
s = [l[0][1]]
start = l[0]
for i in range(1, len(l)):
  if start[1]<l[i][0]:
    s.append(l[i][1])
    start = l[i]
print(len(s))
print(*s)




 -End,"
 c, limit = map(int, input().split())
things = sorted([[int(i) for i in input().split()] for i in range(c)], key=lambda x: x[0]/x[1], reverse=True)
sum = 0
filled = 0
for value, weight in things:
    if weight + filled < limit:
        filled += weight
        sum += value
    else:
        sum += value/weight*(limit-filled)
        break
print('{:.3f}'.format(sum))




 -End,"
 # put your python code here
import heapq
from collections import Counter, namedtuple


class Node(namedtuple('Node', ['left', 'right'])):
  def walk(self, code, acc):
    self.left.walk(code, acc + '0')
    self.right.walk(code, acc + '1')
    
    
class Leaf(namedtuple('Leaf', ['char'])):
  def walk(self, code, acc):
    code[self.char] = acc or '0'
  

def f(s):
  h = []
  for ch, freq in Counter(s).items():
    h.append((freq, len(h), Leaf(ch)))
  heapq.heapify(h)
  count = len(h)
  while len(h) > 1:
    freq1, _count1, left = heapq.heappop(h)
    freq2, _count2, right = heapq.heappop(h)
    heapq.heappush(h, (freq1 + freq2, count, Node(left, right)))
    count += 1
  code = {}
  if h:
    [(_freq, _count, root)] = h
    root.walk(code, '')
  return code

def k(s):
  code = f(s)
  t = ''.join(code[i] for i in s)
  print(len(code), len(t))
  for i in sorted(code):
    print('{}: {}'.format(i, code[i]))
  print(t)

s = input()
k(s)



 -End,"
 # put your python code here
def decode(s, dic):
    n = ''
    for i in s:
        n += i
        if n not in dic.keys():
            pass
        else:
            print(dic[n], end='')
            n = ''


k, l = input().split()
d = {}
for i in range(int(k)):
    k, v = input().split(': ')
    d[v] = k
s = input()
decode(s, d)



 -End,"
 def find_num(x):
  l = 1
  r = n
  while l <= r:
    m = (l+r)//2
    if s1[m] == x:
      return m
    elif s1[m] > x:
      r = m-1
    else:
      l = m+1
  else:
    return -1
    
    
s1 = list(map(int, input().split()))
s2 = list(map(int, input().split()))
n = s1[0]
for num in s2[1:]:
  print(find_num(num), end=' ') -End,"
 def count_sort(a):
  a1 = []
  b = [0 for i in range(10)]
  for j in range(len(a)):
    a1.append(0)
    b[a[j]-1] = b[a[j]-1]+1
  for i in range(1, len(b)):
    b[i] = b[i] + b[i-1]
  for j in range(len(a)-1, -1, -1):
    a1[b[a[j]-1]-1] = a[j]
    b[a[j]-1] = b[a[j]-1] - 1
  return a1

n = int(input())
a = [int(i) for i in input().split()]
print(*count_sort(a))




 -End,"
 # put your python code here
def botup(a):
  d = [0 for i in range(len(a))]
  for i in range(len(a)):
    d[i] = 1
    for j in range(i):
      if a[i] % a[j] == 0 and d[j] + 1 > d[i]:
        d[i] = d[j] + 1 
  ans = 0
  for i in range(len(a)):
    ans = max(ans, d[i])
  return ans

n = int(input())
a = [int(i) for i in input().split()]
print(botup(a))



 -End,"
 a, b = input(), input()
def find(a, b):
    d = [[0 for i in range(len(b)+1)] for j in range(len(a)+1)]
    for i in range(len(a)+1):
        d[i][0] = i
    for j in range(len(b)+1):
        d[0][j] = j
    for i in range(1, len(a)+1):
        for j in range(1, len(b)+1):
            if a[i-1] == b[j-1]:
                c = 0
            else:
                c = 1
            d[i][j] = min(d[i-1][j]+1, d[i][j-1]+1, d[i-1][j-1]+c)
    return (d[len(a)][len(b)])
print(find(a, b))



 -End,"
 W, n = map(int, input().split())
w = [int(i) for i in input().split()]


def find(W, w, c):
  d = [[i for i in range(n+1)] for j in range(W+1)]
  for i in range(W+1):
    d[i][0] = 0
  for i in range(n+1):
    d[0][i] = 0
  for i in range(1, n+1):
    for j in range(1, W+1):
      d[j][i] = d[j][i-1]
      if w[i-1] <= j:
        d[j][i] = max(d[j][i], d[j-w[i-1]][i-1]+c[i-1])
  return d[W][len(c)]

print(find(W, w, w))




 -End,"
 def cumsum_and_erase(A, erase=1):
    B = []
    sum = 0
    for i in A:
        sum += i
        B.append(sum)
    while B.__contains__(erase):
        B.remove(erase)
    return B -End,"
 def process(sentences):
    result = []
    for i in sentences:
        row = i.split()
        text = ' '.join(list(filter(lambda x: x.isalpha(), row)))
        result.append(text)
    return result -End,"
 class Neuron:

    def __init__(self, w, f = lambda x: x):
        self.weight = w
        self.func = f
        self.x = None

    def forward(self, x):
        self.x = x
        result = self.func(sum(list(map(lambda x: x[0]*x[1], zip(self.weight, x)))))
        return result

    def backlog(self):
        return self.x -End,"
 import numpy as np

def no_numpy_scalar(v1, v2):
    #YOUR CODE: please do not use numpy
    result = []
    result.append(sum(list(map(lambda x: x[0] * x[1], zip(v1, v2)))))
    return sum(result)

def numpy_scalar (v1, v2):
    #YOUR CODE

    result = np.dot(v1, v2)
    return result -End,"
 import numpy as np

def cumsum(A):
    result = np.cumsum(A, axis=1)
    result.reshape(np.shape(A))
    return result -End,"
 import numpy as np

def transform(x, a=1):
    x_tr = np.array([[a if j % 2 != 0 else i[j]**3 for j in range(len(i))] for i in list(x)])
    result = np.concatenate([x, np.flip(x_tr, axis = 1)], axis = 1)
    return result -End,"
 def numerical_derivative(func):
    def deriv_func(x):
      return (func(x+0.0001) - func(x)) / 0.0001
    return deriv_func -End,"
 def grad_descent(funbc, deriv, good_point):
    #func: float -> float - function to minimize
    #deriv: float -> float - derivative of f
    #good_point: float - a good starting point
    start = good_point
    h = 0.001
    for i in range(100000):
        start = start - h * deriv(start)
    return start -End,"
 def sigmoid(h):
        return 1. / (1 + np.exp(-h))
class LogisticRegressionGD:

    def __init__(self):
        pass
    
    def __extend_X(self, X):
        n, k = X.shape
        X_ext = np.concatenate((np.ones((n, 1)), X), axis=1)
        return X_ext

    #def sigmoid(h):
        #return 1. / (1 + np.exp(-h))

    def init_weights(self, input_size, output_size):
        np.random.seed(42)
        self.W = np.random.normal(0, 0.01, size=(input_size, output_size))
        
    def get_loss(self, p, y):   
        return np.mean(y * np.log(p) + (1 - y) * np.log(1 - p))
    
    def get_prob(self, X):
        if X.shape[1] != self.W.shape[0]:
            X = self.__extend_X(X)
        return sigmoid(X @ self.W)
    
    def get_acc(self, p, y, threshold=0.5):
        correct = 0
        pred = p >= threshold
        correct = y == pred
        accuracy = (correct.sum()) / len(y)
        return accuracy

    def fit(self, X, y, num_epochs=100, lr=0.001):
        
        X = self.__extend_X(X)
        self.init_weights(X.shape[1], y.shape[1])
        
        accs = []
        losses = []
        for _ in range(num_epochs):
            p = self.get_prob(X)

            W_grad = np.dot(X.T, (p - y)) / len(y)
            self.W -= lr * W_grad
            
            p = np.clip(p, 1e-10, 1 - 1e-10)
            
            log_loss = self.get_loss(p, y)
            losses.append(-log_loss)
            acc = self.get_acc(p, y)
            accs.append(acc)
        
        return accs, losses
 -End,"
 def batch_generator(X, y, batch_size=100):
    num_samples = X.shape[0]
    num_batches = int(num_samples / batch_size)
    for i in range(num_batches-1):
        yield X[::batch_size], y[::batch_size]

class LogisticRegressionSGD:
    def __init__(self):
        pass
    
    def __sigmoid(self, h):
        return 1. / (1 + np.exp(-h))

    
    def __extend_X(self, X):
        n, k = X.shape
        X_ext = np.concatenate((np.ones((n, 1)), X), axis=1)
        return X_ext

    def init_weights(self, input_size, output_size):
        np.random.seed(42)
        self.W = np.random.normal(0, 0.01, size=(input_size, output_size))
        
    def get_loss(self, p, y):
        return -(y * np.log(p) + (1 - y) * np.log(1 - p)).mean()
    
    def get_prob(self, X):
        if X.shape[1] != self.W.shape[0]:
            X = self.__extend_X(X)
        return self.__sigmoid(X @ self.W)
    
    def get_acc(self, p, y, threshold=0.5):
        correct = 0
        pred = p >= threshold
        correct = y == pred
        accuracy = (correct.sum()) / len(y)
        return accuracy

    def fit(self, X, y, num_epochs=10, lr=0.001):
        
        X = self.__extend_X(X)
        self.init_weights(X.shape[1], y.shape[1])
        
        accs = []
        losses = []
        for _ in range(num_epochs):
            gen = batch_generator(X, y)
            for X_, y_ in gen:
                p = self.get_prob(X_)

                W_grad = np.dot(X_.T, (p - y_)) / len(y_)
                self.W -= lr * W_grad

                p = np.clip(p, 1e-10, 1 - 1e-10)

                log_loss = self.get_loss(p, y_)
                losses.append(log_loss)
                acc = self.get_acc(p, y_)
                accs.append(acc)
        
        return accs, losses -End,"
 # put your python code here
dct = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
s = [dct[num] for num in [num for num in input()]]
num = s[0]
sum = sum(s)
for i in s:
    if (i > num):
        sum  = sum  - (2 * num)
    num = i
print(sum) -End,"
 n = int(input())
matrix = [[0 for i in range(n+2)] for j in range(n+2)]
c = 1
a = 1
b = 1
angle = ['right', 'down', 'left', 'up']
ang = 0
for i in range(n+2):
    matrix[0][i]=1
    matrix[n+1][i]=1
    matrix[i][0]=1
    matrix[i][n+1]=1


def revers(step):
    global a
    global b
    global c
    global ang
    if (step == 'right'):
        while(matrix[a][b]==0):
            matrix[a][b]=c
            b+=1
            c+=1
        ang +=1
        b-=1
        a+=1
    if (step == 'down'):
        while(matrix[a][b]==0):
            matrix[a][b]=c
            a+=1
            c+=1
        ang +=1
        b-=1
        a-=1
    if (step == 'left'):
        while(matrix[a][b]==0):
            matrix[a][b]=c
            b-=1
            c+=1
        ang +=1
        a-=1
        b+=1
    if (step == 'up'):
        while(matrix[a][b]==0):
            matrix[a][b]=c
            a-=1
            c+=1
        ang = 0
        a+=1
        b+=1


while c<=n*n:
    revers(angle[ang])
for i in range(1,n+1):
    print(*matrix[i][1:n+1]) -End,"
 # put your python code here
import re, sys
[print(line.rstrip()) for line in sys.stdin if re.search(r'z\w{3}z', line)]



 -End,"
 p = float(input())
print(p*p/8)




 -End,"
 while(True):
    n = int(input())
    if n < 10: continue
    elif n > 100: break
    print(n)



 -End,"
 for i in range(0,4):
    print(int(input())**3)




 -End,"
 def num_sum(num):
    s = 0
    while num != 0:
        s += num % 10
        num = num // 10
    return s
n = int(input())
s_num = num_sum(n)
p = False
for i in range(n):
    tmp = num_sum(i)
    if tmp == s_num:
        if not p:
            p = True
            print(""Найденные числа:"")
        print(i)
if not p: print('Искомых чисел не найдено')



 -End,"
 print(len(list(n for n in [int(input()) for i in range(int(input()))] if not (n % 4))))




 -End,"
 print(min([i for i in [int(input()) for s in range(int(input()))] if not i % 3]))




 -End,"
 print(sum([i for i in [int(input()) for s in range(int(input()))] if not i % 3]))




 -End,"
 print(max([i for i in [int(input()) for s in range(int(input()))] if not i % 4]))




 -End,"
 print(max(list(filter(lambda x: not x % 4, [int(input()) for s in range(int(input()))]))))




 -End,"
 print(sum(list(filter(lambda x: not x % 3, [int(input()) for s in range(int(input()))]))))




 -End,"
 print(min(list(filter(lambda x: not x % 3, [int(input()) for s in range(int(input()))]))))




 -End,"
 from functools import reduce
print(reduce(lambda x,y: y if y <=x else x, filter(lambda x: not x % 3, [int(input()) for s in range(int(input()))])))




 -End,"
 from functools import reduce
print(reduce(lambda x,y: y if y >=x else x, filter(lambda x: not x % 4, [int(input()) for s in range(int(input()))])))




 -End,"
 print(sum([i for i in [int(input()) for s in range(int(input()))] if i % 10 == 4]))




 -End,"
 speed = [round(float(input())) for n in range(int(input()))]
print(max(speed), ""YES"" if min(speed) < 30 else ""NO"", sep = '\n')




 -End,"
 speed = [round(float(input())) for n in range(int(input()))]
print(max(speed)-min(speed), len([i for i in speed if i <= 30]), sep = '\n')




 -End,"
 print(sum([j for j in [int(input()) for i in range(5)] if not j % 4 and j % 10 == 6]))




 -End,"
 lst = ([int(input()) for i in range(int(input()))])
print(max(lst), ""YES"" if 0 in lst else ""NO"", sep = '\n')




 -End,"
 m = min([int(input()) for i in range(int(input()))])
print(m,""\nYES"" if m <-15 else ""\nNO"", sep='')




 -End,"
 from functools import reduce
print(reduce(lambda x, y: str(y)+""\nYES"" if y < x else str(y)+""\nNO"", [-15, min([int(input()) for i in range(int(input()))])]))




 -End,"
 x = [int(input()) for i in range(4)]
print(""YES"" if (x[0]-x[2])==0 or (x[1]-x[3])==0 else ""NO"")




 -End,"
 lst  = [int(input()) for _ in range(int(input()))]
print(sum(lst)/len(lst))



 -End,"
 input()
print(len(list(filter(lambda x: x < 8,[int (x) for x in input ().split ()]))))


 -End,"
 print(len(list(filter(lambda p: p < 8, [int(i) for i in list((map(lambda x, y: y, [input()], [input().split()])))[0]]))))




 -End,"
 print(sum([int (n) for n in input ().split ()]))




 -End,"
 x = int(input())
a = [3, 4, 2, 1, 0, 7, 8]
print(a.index(x) if x in a else -1)




 -End,"
 a = [3, 5, 65, 67, 4, 2, 3, 6, 9, -10, -27, 6, 0, 8]
print(*sorted(a)[0:len(a):len(a)-1], sep='\n')





 -End,"
 print([i for i in sorted([int(i) for i in input().split()])])


 -End,"
 import re
print(True if re.search(r""^[-+]?[0-9]*[.]?[0-9]+$"", input()) else False) -End,"
 import re
print(True if re.search(r""^[-+]?[0-9]*$"", input()) else False)




 -End,"
 a = input()
print(a[int(input()):int(input())+1],a[int(input()):int(input())+1])



 -End,"
 print(*list(map(lambda x: x[int(input()):int(input())+1]+"" ""+x[int(input()):int(input())+1], [input()]))) -End,"
 print([int(input()), max([int(i) for i in input().split()])][1])




 -End,"
 import numpy
int(input())
lst = [int(i) for i in input().split()]
print(len([i for i in lst if i>=numpy.mean(lst)]))




 -End,"
 print(*list(map(lambda x, y: [y//x, y%x], [int(input())],[int(input())]))[0], sep='\n')




 -End,"
 print(len(list(map(lambda x, y: [i for i in y if i>=sum(y)/x],[int(input())],[[int(i) for i in input().split()]]))[0]))




 -End,"
 print(round(sum([int(input()) for _ in range(3)])/2))



 -End,"
 print(*list(map(lambda x:x // 2 + x % 2, [sum([int(input()) for _ in range(3)])])))


 -End,"
 print(*list(map(lambda x: [x//100, x%100],[(int(input())*100+int(input()))*int(input())]))[0])




 -End,"
 print(*list(map(lambda x: [x//100, x%100],[int((1+(int(input())/100))*(int(input())*100+int(input())))]))[0])

 -End,"
 n, a = None, []
while True:
   n = int(input())
   if (not n): break
   else:
       a.append(n)
print(sum(a), max(a), sep = '\n')




 -End,"
 n,a = int(input()), []
while (n):
       a.append(n)
       n = int(input())
print(sum(a), max(a), sep = '\n') -End,"
 lst = [0]
for _ in lst:
    n = int(input())
    if (n): lst.append(n)
    else: break
print(sum(lst), max(lst), sep = '\n') -End,"
 lst = list(map(lambda x: [x[:4], 2018-int(x[7:11])],[input()]))[0]
print(""Привет, {}! Ждем тебя на {}"".format(lst[0], ""первой секции (дети)"" if lst[1]<18 else \
""второй секции (молодежь)"" if lst[1]>=18 and lst[1]<=35 else ""третьей секции""))


 -End,"
 lst = list(map(lambda x: [x[:4], 2018-int(x[7:11])],[input()]))[0]
print(""Привет,"",lst[0]+""!"", ""Ждем тебя на"", (""{0} секции {2}"" if lst[1]<18 else ""{1} секции {3}"" \
if lst[1]>=18 and lst[1]<=35 else ""третьей секции"").format(""первой"", ""второй"", ""(дети)"", ""(молодежь)""))
 -End,"
 lst = [input(),sorted([int(input()) for _ in range(int(input()))])][1]
print(sum(lst), lst[-1], lst[0], sum(lst)/len(lst))




 -End,"
 print(*list(map(lambda x: [sum(x), x[-1], x[0], sum(x)/len(x)], [[input(),sorted([int(input()) for _ in range(int(input()))])][1]]))[0])




 -End,"
 def recExp(a, n):
    if n==0:
        return 1
    if not n%2:
        return recExp(a, n/2)**2
    return a*recExp(a, n-1)
print(recExp(int(input()), int(input()))) -End,"
 def age(x):
    lst = []
    a,b = 1,1
    for i in range(27):
        a,b = b,b+a
        lst.append(a)
    b = 10000
    i = 1
    while i<=10000 and b!=x:
        if i in lst:
            b = b-i
        else:
            b = b+1
        i+=1
    return i-1

print(age(int(input()))) -End,"
 import math
def age(x):
    def fib(n): return n >= 0 and (n == 0 or math.sqrt(5 * n * n - 4).is_integer() or math.sqrt(5 * n * n + 4).is_integer())
    b = 10000
    i = 1
    while i<=10000 and b!=x:
        if fib(i):
            b = b-i
        else:
            b = b+1
        i+=1
    return i-1

print(age(int(input()))) -End,"
 x = int(input())
lst = []
a, b = 1, 1
for i in range(27):
    a, b = b, b + a
    lst.append(a)
b = 10000
i = 1
while i <= 10000 and b != x:
    if i in lst:
        b = b - i
    else:
        b = b + 1
    i += 1
print(i - 1) -End,"
 f = int(input())
b, n = 0, 0
while f > 0:
    n += 1
    b += n
    f -= b
print(b + max(f, -n)) -End,"
 print(*list(map(lambda x: ""YES"" if abs(x[0]-x[2])==abs(x[1]-x[3]) or x[0]==x[2] or x[1]==x[3] else ""NO"", [[int(input()) for _ in range(4)]])))




 -End,"
 lst = [int(i) for i in input().split()]
print(*sorted(filter(lambda x: x>99, {lst[0]*100+lst[1]*10+lst[2], lst[0]*100+lst[2]*10+lst[1], lst[1]*100+lst[0]*10+lst[2], lst[1]*100+lst[2]*10+lst[0], lst[2]*100+lst[0]*10+lst[1], lst[2]*100+lst[1]*10+lst[0]})), sep='\n')





 -End,"
 import itertools
print(*sorted(filter(lambda x: int(x)>99, {''.join(x) for x in itertools.permutations(input().replace(' ', ''))})), sep='\n')




 -End,"
 import itertools
print(*sorted({''.join(x) for x in itertools.permutations(input().replace(' ', '')) if int(''.join(x))>99}), sep='\n') -End,"
 print(*list(map(lambda x: max(sum(x[:3]),sum(x[3:6]), sum(x[6:])), [[int(i) for i in input().split()]])))



 -End,"
 print(*list(map(lambda x: (x[2]-x[0])//x[1], [[int(input()) for _ in range(3)]])))




 -End,"
 print(*list(map(lambda x: [(x - 4 * (x%3)) //3, x%3] if (x - 4 * (x%3)) //3>=0 else [0,0], [int(input())]))[0], sep='\n')



 -End,"
 print(*list(map(lambda x: x[0]*(x[0]+1)//2*x[1]*(x[1]+1)//2,[[int(input()), int(input())]]))) -End,"
 d = int(input())
known_words = []
input_words = []
for i in range(d):
    known_words.append(input().lower())
l = int(input())
for i in range(l):
    input_words += input().lower().split()
output_words = set(input_words)
for word in output_words:
    if word not in known_words:
        print(word) -End,"
 coord = [0, 0]
n = int(input())
for i in range(n):
    command = input().split()
    if command[0] == 'восток':
        coord[0] += int(command[1])
    elif command[0] == 'север':
        coord[1] += int(command[1])
    elif command[0] == 'запад':
        coord[0] -= int(command[1])
    else:
        coord[1] -= int(command[1])
print(coord[0], coord[1]) -End,"
 def comb(n, k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    else:
        return comb(n - 1, k) + comb(n - 1, k - 1)
n, k = map(int, input().split())
print(comb(n, k)) -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.value = 0

    def can_add(self, v):
        if v + self.value <= self.capacity:
            return True
        else:
            return False

    def add(self, v):
        if self.can_add(v):
            self.value += v -End,"
 class Buffer:
    def __init__(self):
        self.storage = []

    def add(self, *a):
        for _ in range(len(a)):
            self.storage.append(a[_])
            if len(self.storage) >= 5:
                print(sum(self.storage))
                self.storage.clear()

    def get_current_part(self):
        return self.storage -End,"
 parents_dictionary = dict()
extended_parents_dictionary = dict()

# читаем ввод, заполняем словарь вида {потомок: [список предков]}
n = int(input())
for _ in range(n):
    input_data = input().split(':')
    if len(input_data) == 1:
        parents_dictionary[input_data[0]] = list()
    else:
        parents_dictionary[input_data[0].split()[0]] = input_data[1].split()

# заполняем расширенный словарь предков
extended_parents_dictionary.update(parents_dictionary)
# добавляем все существующие классы
for child in parents_dictionary.keys():
    for parent in parents_dictionary[child]:
        if parent not in extended_parents_dictionary.keys():
            extended_parents_dictionary[parent] = []
# добавляем в список предков предков предков :)
for child in extended_parents_dictionary.keys():
    for parent in extended_parents_dictionary[child]:
        extended_parents_dictionary[child] += extended_parents_dictionary[parent]

# обрабатываем запросы проверяя есть ли предок в словаре
q = int(input())
for _ in range(q):
    parent, child = input().split()
    if parent == child:
        print('Yes')
    elif parent in extended_parents_dictionary[child]:
        print('Yes')
    else:
        print('No') -End,"
 parents_dictionary = dict()
extended_parents_dictionary = dict()

# читаем ввод, заполняем словарь вида {потомок: [список предков]}
n = int(input())
for _ in range(n):
    input_data = input().split(':')
    if len(input_data) == 1:
        parents_dictionary[input_data[0]] = list()
    else:
        parents_dictionary[input_data[0].split()[0]] = input_data[1].split()

# заполняем расширенный словарь предков
extended_parents_dictionary.update(parents_dictionary)
# добавляем все существующие классы
for child in parents_dictionary.keys():
    for parent in parents_dictionary[child]:
        if parent not in extended_parents_dictionary.keys():
            extended_parents_dictionary[parent] = []

# добавляем в список предков предков предков :)
for child in extended_parents_dictionary.keys():
    for parent in extended_parents_dictionary[child]:
        extended_parents_dictionary[child] += extended_parents_dictionary[parent]

# преобразуем списки  в множества
for key, value in extended_parents_dictionary.items():
    extended_parents_dictionary[key] = set(value)

exceptions = []
unnecessary_exceptions = []
m = int(input())
for _ in range(m):
    exceptions.append(input())

# проходимся по списку исключений в обратном порядке, выбираем исключение и проверяем
# нет ли среди предыдущих его предков, если есть и исключение еще не добавлено в список
# лишних - то добавляем его, затем печатаем перевернутый список лишних исключений
for _ in range(len(exceptions) - 1, -1, -1):
    unnecessary_exception = exceptions[_]
    for __ in range(_, -1, -1):
        checked_exception = exceptions[__]
        if exceptions.index(unnecessary_exception) == exceptions.index(checked_exception):
            continue
        else:
            if checked_exception in extended_parents_dictionary[unnecessary_exception]\
                    and unnecessary_exception not in unnecessary_exceptions:
                unnecessary_exceptions.append(unnecessary_exception)

unnecessary_exceptions.reverse()
for unnecessary_exception in unnecessary_exceptions:
    print(unnecessary_exception) -End,"
 s = input()
t = input()
counter = 0
for i in range(len(s)):
    count = s.count(t, i, i + len(t))
    counter += count
print(counter) -End,"
 from sys import stdin
import re

pattern = r'cat'

for line in stdin:
    line = line.rstrip()
    if len(re.findall(pattern, line)) >= 2:
        print(line) -End,"
 from sys import stdin
from re import findall

pattern = r'\bcat\b'

for line in stdin:
    line = line.rstrip()
    if findall(pattern, line):
        print(line) -End,"
 from sys import stdin
from re import findall

pattern = r'\\'

for line in stdin:
    line = line.rstrip()
    if findall(pattern, line):
        print(line) -End,"
 from sys import stdin
from re import sub

pattern = r'human'
repl = 'computer'

for line in stdin:
    line = line.rstrip()
    print(sub(pattern, repl, line)) -End,"
 from sys import stdin
from re import sub

pattern = r'\b(\w)(\w)'
repl = r'\2\1'

for line in stdin:
    line = line.rstrip()
    print(sub(pattern, repl, line)) -End,"
 import re
import requests

url_a = input()
url_b = input()

pattern = r'https.*html'
two_transitions = False

r = requests.get(url_a)
links_in_a = re.findall(pattern, r.text)

for url in links_in_a:
    r = requests.get(url)
    links_in_c = re.findall(pattern, r.text)
    if url_b in links_in_c:
        two_transitions = True

if two_transitions:
    print('Yes')
else:
    print('No') -End,"
 import json

json_data = input()
data = json.loads(json_data)

child_parents = dict()
parent_children = dict()
parents_list = list()

# заполняем словарь {""потомок"": [предки]}
for class_ in data:
    child_parents[class_['name']] = class_['parents']

# заполняем словарь {""предок"": [потомки]}
for child, parents in child_parents.items():
    parent_children[child] = []
    for parent in parents:
        parent_children[parent] = []
for child, parents in child_parents.items():
    for parent in parents:
        parent_children[parent].append(child)

# добавляем к потомкам их потомков
for parent in parent_children.keys():
    for child in parent_children[parent]:
        parent_children[parent] += parent_children[child]

for parent in parent_children.keys():
    parents_list.append(parent)
    parent_children[parent] = set(parent_children[parent])
    
parents_list.sort()

# +1 в результате потому что: ""гарантируется, что никакой класс не наследуется от себя явно или косвенно..."" (c) :D
for parent in parents_list:
    print(parent, ':', len(parent_children[parent]) + 1) -End,"
 import numpy as np


def matrix_from_input():
    matrix_shape = tuple(map(int, input().split()))
    matrix = np.fromiter(map(int, input().split()), np.int).reshape(matrix_shape)
    return matrix

X = matrix_from_input()
Y = matrix_from_input()

try:
    print(X.dot(Y.T))
except ValueError:
    print('matrix shapes do not match') -End,"
 from urllib.request import urlopen
import numpy as np

filename = input()
f = urlopen(filename)
data = np.loadtxt(f, skiprows=1, delimiter=',')

Y = data[:, 0].reshape(data.shape[0], 1)
B0 = np.ones_like(Y)
X = np.hstack((B0, data[:, range(1, data.shape[-1])]))
B_ = np.linalg.inv(X.T.dot(X)).dot(X.T.dot(Y))

print(' '.join(map(str, B_.flatten())))
 -End,"
 import numpy as np

def SGD(self, X, y, batch_size, learning_rate=0.1, eps=1e-6, max_steps=200):
    res = 0
    step = 0
    while res != 1 and step < max_steps:
        mini_batch = np.random.choice(len(X), batch_size, replace=False)
        res = self.update_mini_batch(X[mini_batch], y[mini_batch], learning_rate, eps)
        step += 1

    return res

def update_mini_batch(self, X, y, learning_rate, eps):
    J_before_weights_update = J_quadratic(self, X, y)
    grad = compute_grad_analytically(self, X, y)
    self.w = self.w - learning_rate * grad
    J_after_weights_update = J_quadratic(self, X, y)
    dJ = abs(J_before_weights_update - J_after_weights_update)

    return int(dJ < eps) -End,"
 def knapsack(volume, objects):
    max_value = 0
    for obj in objects:
        obj[0] = obj[0] / obj[1]
    objects.sort(reverse=True)
    for obj in objects:
        if obj[1] <= volume:
            max_value += obj[0] * obj[1]
            volume -= obj[1]
            if volume <= 0:
                break
        else:
            max_value += obj[0] * volume
            break
    return max_value


things = []
n, W = [int(i) for i in input().split(' ')]
for i in range(n):
    things.append([int(j) for j in input().split(' ')])

print('{0:.3f}'.format(knapsack(W, things)))
 -End,"
 from skimage.io import imread, imsave

img = imread('img.png')

img_mid_pixel_x = img.shape[0] // 2
img_mid_pixel_y = img.shape[1] // 2
img[img_mid_pixel_x, img_mid_pixel_y] = [102, 204, 102]

imsave('out_img.png', img)
 -End,"
 from skimage.io import imread, imsave

img = imread('img.png')
edit_area_size = [7, 15]
pink_color = [255, 192, 203]

img_mid = [i // 2 for i in img.shape[:2]]
edit_area_mid = [i // 2 for i in edit_area_size]

edit_area_first_row = img_mid[0] - edit_area_mid[0]
edit_area_first_col = img_mid[1] - edit_area_mid[1]
edit_area_second_row = img_mid[0] + edit_area_mid[0] + 1
edit_area_second_col = img_mid[1] + edit_area_mid[1] + 1

img[edit_area_first_row:edit_area_second_row, edit_area_first_col:edit_area_second_col] = pink_color

imsave('out_img.png', img)
 -End,"
 from skimage.io import imread
from skimage.color import rgb2gray

img = imread('img.png')
g_img = rgb2gray(img)
frame = g_img[0, 0]
h_mid_line = g_img.shape[0] // 2
v_mid_line = g_img.shape[1] // 2

right_border = 0
top_border = 0
left_border = 0
bottom_border = 0

for pix in list(g_img[h_mid_line]):
    if pix == frame:
        right_border += 1
    else:
        break

for pix in (g_img[:, v_mid_line]):
    if pix == frame:
        top_border += 1
    else:
        break

for pix in reversed(list(g_img[h_mid_line])):
        if pix == frame:
            left_border += 1
        else:
            break

for pix in reversed(list(g_img[:, v_mid_line])):
        if pix == frame:
            bottom_border += 1
        else:
            break

print(right_border, top_border, left_border, bottom_border)
 -End,"
 import numpy as np
from skimage.io import imread, imsave

img = imread('img.png')
inv = np.zeros(img.shape, dtype='uint8') - 1
imsave('out_img.png', inv - img)
 -End,"
 from skimage.io import imread, imsave
from numpy import dstack

img = imread('img.png')

r = img[:, :, 0]
g = img[:, :, 1]
b = img[:, :, 2]

imsave('out_img.png', dstack((b, r, g)))
 -End,"
 from skimage.io import imread, imsave
from skimage import img_as_float, img_as_ubyte

img = imread('img.png')
img_f = img_as_float(img)

r = img_f[:, :, 0]
g = img_f[:, :, 1]
b = img_f[:, :, 2]

imsave('out_img.png', img_as_ubyte(r * 0.2126 + g * 0.7152 + b * 0.0722))
 -End,"
 from skimage.io import imread, imsave
from skimage import img_as_float
from numpy import dstack, roll


def color_channels_align(aligned_channel, base_channel, pix_range_start=-15, pix_range_end=16):
    """""" Функция выравнивает цветовые каналы с фотографии Прокудина-Горского друг относительно друга.

    Принимает вырезанные массивы цветовых каналов с фотографии
    и диапазон перекрытия каналов.
    Возвращает значения сдвига каналов относительно друг друга.

    """"""

    aligned_channel_shift = []

    for col in range(pix_range_start, pix_range_end):
        shifted_aligned_channel_col = roll(aligned_channel, col, 1)
        for row in range(pix_range_start, pix_range_end):
            shifted_aligned_channel_row = roll(shifted_aligned_channel_col, row, 0)
            aligned_channel_shift.append(((base_channel * shifted_aligned_channel_row).sum(), row, col))

    aligned_channel_row, aligned_channel_col = max(aligned_channel_shift)[1], max(aligned_channel_shift)[2]

    return aligned_channel_row, aligned_channel_col


def align(img, coords_g):
    """""" Функция сопоставляет изображения с фотографий Прокудина-Горского.

     Принимает загруженное изображение и координаты точки на зеленом канале,
     возвращает координаты точек на синем и красном каналах.

    """"""

    row_g, col_g = coords_g
    img_f = img_as_float(img)

    color_channel_vert_size = img_f.shape[0] // 3
    b = img_f[:color_channel_vert_size]
    g = img_f[color_channel_vert_size:2 * color_channel_vert_size]
    r = img_f[2 * color_channel_vert_size:3 * color_channel_vert_size]

    trim_val = 7
    v_trim = color_channel_vert_size * trim_val // 100
    h_trim = img_f.shape[1] * trim_val // 100
    b = b[v_trim:b.shape[0] - v_trim, h_trim:b.shape[1] - h_trim]
    g = g[v_trim:g.shape[0] - v_trim, h_trim:g.shape[1] - h_trim]
    r = r[v_trim:r.shape[0] - v_trim, h_trim:r.shape[1] - h_trim]

    b_row, b_col = color_channels_align(b, g)
    r_row, r_col = color_channels_align(r, g)

    row_b = (row_g - color_channel_vert_size) - b_row
    col_b = col_g - b_col
    row_r = (img_f.shape[0] - (2 * color_channel_vert_size - row_g)) - r_row
    col_r = col_g - r_col

    return (row_b, col_b), (row_r, col_r)
 -End,"
 from skimage.io import imread, imsave


def auto_contrast(image):
    max_bright = 255
    image_min = image.min()
    return (image - image_min) * (max_bright / (image.max() - image_min))


img = imread('img.png')
imsave('out_img.png', auto_contrast(img).astype('uint8'))
 -End,"
 from skimage.io import imread, imsave
from numpy import clip


def search_bright_min_max(image):

    pixels = sorted(image.flatten().tolist())
    pixels_length = len(pixels)
    k = round(pixels_length * 0.05)
    sliced_pixels = pixels[k + 1:pixels_length - k]

    return sliced_pixels[0], sliced_pixels[-1]


def stable_auto_contrast(image):
    
    max_bright = 255
    image_min = search_bright_min_max(image)[0]
    image_max = search_bright_min_max(image)[1]
    
    return (image - image_min) * (max_bright / (image_max - image_min))


img = imread('img.png')
comp_img = stable_auto_contrast(img.astype('float'))
out_img = clip(comp_img, 0, 255)
imsave('out_img.png', out_img.astype('uint8'))
 -End,"
 from skimage.io import imread, imsave
from skimage import img_as_float, img_as_ubyte
from numpy import clip, dstack


def search_bright_min_max(image):

    pixels = sorted(image.flatten().tolist())
    pixels_length = len(pixels)
    k = round(pixels_length * 0.05)
    sliced_pixels = pixels[k + 1:pixels_length - k]

    return sliced_pixels[0], sliced_pixels[-1]


def stable_auto_contrast(image):

    max_bright = 1
    image_min = search_bright_min_max(image)[0]
    image_max = search_bright_min_max(image)[1]

    return (image - image_min) * (max_bright / (image_max - image_min))


img = img_as_float(imread('img.png'))

r = img[:, :, 0]
g = img[:, :, 1]
b = img[:, :, 2]

y = 0.2126 * r + 0.7152 * g + 0.0722 * b
u = -0.0999 * r - 0.3360 * g + 0.4360 * b
v = 0.6150 * r - 0.5586 * g - 0.0563 * b

y = clip(stable_auto_contrast(y), 0, 1)

r = y + 1.2803 * v
g = y - 0.2148 * u - 0.3805 * v
b = y + 2.1279 * u

out_img = clip(dstack((r, g, b)), 0, 1)
imsave('out_img.png', img_as_ubyte(out_img))
 -End,"
 from skimage.io import imread, imsave
from skimage import img_as_float, img_as_ubyte
from numpy import clip, dstack


def get_grey_world_coefficients(image):

    red_average = image[:, :, 0].mean()
    green_average = image[:, :, 1].mean()
    blue_average = image[:, :, 2].mean()

    average = (red_average + green_average + blue_average) / 3

    red_coefficient = red_average / average
    green_coefficient = green_average / average
    blue_coefficient = blue_average / average

    return red_coefficient, green_coefficient, blue_coefficient


img = img_as_float(imread('img.png'))

r_w, g_w, b_w = get_grey_world_coefficients(img)
new_r, new_g, new_b = img[:, :, 0] / r_w, img[:, :, 1] / g_w, img[:, :, 2] / b_w
out_img = clip(dstack((new_r, new_g, new_b)), 0, 1)

imsave('out_img.png', img_as_ubyte(out_img))
 -End,"
 from skimage.io import imread, imsave
from numpy import histogram


def cdf(x, h):
    return h[:x + 1].sum()


def find_min_cdf(cdfs):
    for key in sorted(cdfs.keys()):
        if cdfs[key] != 0:
            return cdfs[key]


img = imread('img.png')
img_shape = img.shape
h, bins = histogram(img, bins=range(257))

cdfs = {i: cdf(i, h) for i in range(256)}
cdf_min = find_min_cdf(cdfs)
d = h.sum() - 1
max_bright = 255
img_ = img.ravel()

for i in range(len(img_)):
    img_[i] = round(((cdfs[img_[i]] - cdf_min) / d) * max_bright)

imsave('out_img.png', img_.reshape(img_shape))
 -End,"
 import numpy as np
from skimage.io import imread, imsave


def convolution_step(batch, kernel):
    return (batch * kernel).sum() / kernel.sum()


def convolution(image, kernel):

    convolved_image = np.zeros((image.shape[0] - kernel.shape[0] + 1, image.shape[1] - kernel.shape[1] + 1))

    for row in range(image.shape[0] + 1):
        for col in range(image.shape[1] + 1):
            if row + kernel.shape[0] <= image.shape[0] and col + kernel.shape[1] <= image.shape[1]:
                batch = image[row:row + kernel.shape[0], col:col + kernel.shape[1]]
                convolved_image[row][col] = convolution_step(batch, kernel)
            else:
                continue

    return convolved_image


img = imread('img.png')
kernel = np.ones((5, 5))

imsave('out_img.png', convolution(img, kernel).astype('uint8'))
 -End,"
 import numpy as np


def gaussian(sigma, x, y):
    return (1 / (2 * np.pi * sigma ** 2)) * np.e ** ((-x ** 2 - y ** 2) / (2 * sigma ** 2))


sigma, x, y = [int(x) for x in input().split()]
print(gaussian(sigma, x, y))
 -End,"
 import numpy as np


def gaussian(sigma, x, y):
    return (1 / (2 * np.pi * sigma ** 2)) * np.e ** ((-x ** 2 - y ** 2) / (2 * sigma ** 2))


def create_gauss_core(sigma):
    k = round(3 * sigma) * 2 + 1
    gauss_core = np.ones((k, k))
    x = np.arange(-(k // 2), k // 2 + 1)
    y = np.arange(k // 2, -(k // 2 + 1), -1)

    for row in range(gauss_core.shape[0]):
        for col in range(gauss_core.shape[1]):
            gauss_core[row][col] = gaussian(sigma, x[row], y[col])

    return gauss_core / gauss_core.sum()


sigma = float(input())
gauss_core = create_gauss_core(sigma)

for row in range(gauss_core.shape[0]):
    for val in gauss_core[row]:
        print('%.5f' % val, end=' ')
    print()
 -End,"
 import numpy as np
from skimage.io import imread, imsave


def gaussian(sigma, x, y):
    return (1 / (2 * np.pi * sigma ** 2)) * np.e ** ((-x ** 2 - y ** 2) / (2 * sigma ** 2))


def create_gauss_core(sigma):
    k = round(3 * sigma) * 2 + 1
    gauss_core = np.ones((k, k))
    x = np.arange(-(k // 2), k // 2 + 1)
    y = np.arange(k // 2, -(k // 2 + 1), -1)

    for row in range(gauss_core.shape[0]):
        for col in range(gauss_core.shape[1]):
            gauss_core[row][col] = gaussian(sigma, x[row], y[col])

    return gauss_core / gauss_core.sum()


def gaussian_blur(image, core):

    blurred_image = np.zeros((image.shape[0] - core.shape[0] + 1, image.shape[1] - core.shape[1] + 1))

    for row in range(image.shape[0] + 1):
        for col in range(image.shape[1] + 1):
            if row + core.shape[0] <= image.shape[0] and col + core.shape[1] <= image.shape[1]:
                batch = image[row:row + core.shape[0], col:col + core.shape[1]]
                blurred_image[row][col] = (batch * core).sum()
            else:
                continue

    return blurred_image


img = imread('img.png')
sigma = 0.66
gauss_core = create_gauss_core(sigma)
imsave('out_img.png', gaussian_blur(img, gauss_core).astype('uint8'))
 -End,"
 import numpy as np
from skimage.io import imread, imsave


def convolution(image, kernel):

    convolved_image = np.zeros((image.shape[0] - kernel.shape[0] + 1, image.shape[1] - kernel.shape[1] + 1))
    k = kernel / kernel.sum()

    for row in range(image.shape[0] + 1):
        for col in range(image.shape[1] + 1):
            if row + kernel.shape[0] <= image.shape[0] and col + kernel.shape[1] <= image.shape[1]:
                batch = image[row:row + kernel.shape[0], col:col + kernel.shape[1]]
                convolved_image[row][col] = (batch * k).sum()
            else:
                continue

    return convolved_image


img = imread('img.png')
kernel = np.array([[-1, -2, -1], [-2, 22, -2], [-1, -2, -1]])

imsave('out_img.png', np.clip(convolution(img, kernel), 0, 255).astype('uint8'))
 -End,"
 import numpy as np
from skimage.io import imread, imsave


def median_filter(image, filter_size):

    filtered_image = np.zeros((image.shape[0] - filter_size[0] + 1, image.shape[1] - filter_size[1] + 1))

    for row in range(image.shape[0] + 1):
        for col in range(image.shape[1] + 1):
            if row + filter_size[0] <= image.shape[0] and col + filter_size[1] <= image.shape[1]:
                batch = image[row:row + filter_size[0], col:col + filter_size[1]]
                filtered_image[row][col] = np.median(batch)
            else:
                continue

    return filtered_image


imsave('out_img.png', median_filter(imread('img.png'), (7, 7)).astype('uint8'))
 -End,"
 def modify_list(l):
    li = l.copy()
    l.clear()
    for elem in li:
        if elem % 2 == 0:
            l.append(elem // 2) -End,"
 def cc_encrypt(shift, message, alphabet):
    message = list(message)
    alphabet = list(alphabet)
    shift_border = len(alphabet)

    encrypted_chars = [alphabet[(alphabet.index(char) + shift) % shift_border] for char in message]

    return ''.join(encrypted_chars)


alphabet = ' abcdefghijklmnopqrstuvwxyz'
print('Result: ""' + cc_encrypt(int(input()), input().strip(), alphabet) + '""')
 -End,"
 grades = input().replace(' ', '')
print('{:.2f}'.format((grades.count('A') / len(grades)))) -End,"
 def unicode_cc_encrypt(shift, message, alphabet):
    message = [ord(char) for char in message]
    alphabet = [char for char in alphabet]
    shift_border = len(alphabet)

    encrypted_chars = [chr(alphabet[(alphabet.index(char) + shift) % shift_border]) for char in message]

    return ''.join(encrypted_chars)


alphabet = range(128512, 128592)
print('Result: ""{}""'.format(unicode_cc_encrypt(int(input()), input().strip(), alphabet)))
 -End,"
 import numpy as np

n, m = (int(x) for x in input().split())
lst = []

for i in range(n):
    lst.extend([int(x) for x in input().split()])

transpose_matrix = np.array(lst).reshape((n, m)).T

for row in range(transpose_matrix.shape[0]):
    print(*transpose_matrix[row])
 -End,"
 string = input()
sub = input()
slice_len = len(sub)
idx = []

for i in range(len(string)):
    try:
        slice_ = string[i:i+slice_len]
        if slice_ == sub:
            idx.append(i)
    except IndexError:
        pass

print(*idx) if idx else print(-1)
 -End,"
 cards_values = {'6': 1, '7': 2, '8': 3, '9': 4, '1': 5, 'J': 6, 'Q': 7, 'K': 8, 'A': 9}

cards = input().split()
trump = input()

if cards[0][-1] == cards[1][-1]:
    if cards_values[cards[0][0]] > cards_values[cards[1][0]]:
        print('First')
    elif cards_values[cards[0][0]] < cards_values[cards[1][0]]:
        print('Second')

elif (cards[0][-1] != cards[1][-1]) and (trump not in cards[0] and trump not in cards[1]):
    print('Error')

elif cards[0][-1] != cards[1][-1]:
    if trump in cards[0]:
        print('First')
    elif trump in cards[1]:
        print('Second')
 -End,"
 def twin_numbers_generator(number):
    for i in range(number + 1):
        for j in range(i):
            yield i


n = int(input())
counter = 0

for i in twin_numbers_generator(n):
    print(i, end=' ')
    counter += 1
    if counter == n:
        break
 -End,"
 from collections import Counter

for key, value in sorted(Counter([len(word) for word in input().split()]).items()):
    print('{0}: {1}'.format(key, value))
 -End,"
 def shiftChar(char, key):
    alphabet = [chr(x) for x in range(ord('a'), ord('z') + 1)]
    return ""'{}'"".format(alphabet[(alphabet.index(char) + key) % len(alphabet)])
 -End,"
 def unshiftChar(char, key):
    alphabet = [chr(x) for x in range(ord('a'), ord('z') + 1)]
    return ""'{}'"".format(alphabet[(alphabet.index(char) - (key % len(alphabet)))])
 -End,"
 def aBeforeB(s, a, b):
    words = s.split()
    index_b = 0

    for i in range(len(words)):
        if words[i] == b:
            index_b = i
            break

    if a in words[index_b:]:
        return False

    return True
 -End,"
 def isBetween(a, b, c):
    return b <= a <= c if b <= c else c <= a <= b
 -End,"
 from statistics import mean


def numAboveAverage(list1, list2):
    return len([x for x in list2 if x > mean(list1)])
 -End,"
 def numGreaterAtIndex(list1, list2):
    assert len(list1) == len(list2)
    return len([x for x, y in zip(list1, list2) if x < y])
 -End,"
 def swapper(items, d):
    return [(x if x not in d else d[x]) for x in items]
 -End,"
 def recCount(items, x):
    if not items:
        return 0
    return recCount(items[:-1], x) + int(items[-1] == x)
 -End,"
 def counter(T):
    return max(max([(len(set(s.lower())), len(s)) for s in T]))
 -End,"
 from functools import reduce


def dfactorial(n):
    if not n:
        return 1    
    start_number = 1 if n % 2 != 0 else 2    
    return reduce(lambda x, y: x * y, range(start_number, n + 1, 2))
 -End,"
 from functools import reduce

def Kfactorial(n, k=1):
    if not n:
        return 1
    return reduce(lambda x, y: x * y, range(n, 1, -k))
 -End,"
 import numpy as np


def read_arr_atr(string):
    atr = string.split()

    if atr[-1].isdigit():
        return tuple(int(x) for x in atr), 'float64'

    return tuple(int(x) for x in atr[:-1]), atr[-1]


Z = np.zeros(*read_arr_atr(input()))
 -End,"
 import numpy as np

X = np.array([list(map(float, input().split())) for x in range(2)])
print(*np.linalg.solve(X[:, :-1], X[:, -1:]).ravel())
 -End,"
 import numpy as np


def linear_equation_solver(equation_matrix):
    if np.linalg.det(equation_matrix[:, :-1]):
        return ' '.join(map(str, np.linalg.solve(equation_matrix[:, :-1], equation_matrix[:, -1:]).ravel()))
    
    return 'Система не имеет решений'


matrix_size = int(input())
matrix = np.array([list(map(float, input().split())) for x in range(matrix_size)])

print(linear_equation_solver(matrix))
 -End,"
 import numpy as np


def linear_equation_solver(equation_matrix):
    if np.linalg.det(equation_matrix[:, :-1]):
        return ' '.join(map(str, np.linalg.solve(equation_matrix[:, :-1], equation_matrix[:, -1:]).ravel()))

    return 'Система не имеет решений'


def create_equation_matrix_string(deg, xy):
    return [1] + [xy[0] ** i for i in range(1, deg)] + [xy[1]]


size = int(input())
X = np.array([create_equation_matrix_string(size, [float(x) for x in input().split()]) for i in range(size)])
print(linear_equation_solver(X))
 -End,"
 Z[(Z > 3) & (Z < 9)] *= -1 -End,"
 print(df[:3]) -End,"
 n,m=int(input()),int(input())
print(*divmod(abs(n-m), 60))




 -End,"
 a=input()
l=True
for i in a:
    if i.isdigit():
        l=False
print('Bad password' if ('qwerty' in a or '1234' in a) or len(a)<8 or l  else ""Good password"")




 -End,"
 s={'Арагорн', 'Леголас', 'Мериадок Брендибак', 'Боромир', 'Фродо Бэггинс'}
k=input()
l=False
for i in s:
    if i in k:
        l=True
print ('Проходи!' if l else ""Ты не пройдешь!"")




 -End,"
 a=int(input())
print (tuple(i for i in range (a,a*10+1) if i%2==0))




 -End,"
 color=('Красный', 'Оранжевый', 'Желтый', 'Зеленый', 'Голубой', 'Синий', 'Фиолетовый')
num=int(input())
if num<=7:
    print ( *[color[i] for i in range(num)], sep='\n')  
else:print(""Радуга состоит только из семи цветов"")




 -End,"
 kesh, n=int(input()),int(input())
print (""Покупает"" if sum(int(input()) for i in range(n))<=kesh else ""Не покупает"")




 -End,"
 b=int(input())
for i in range(1,b+1):
    if 10<i<20 or 4<i%10<=9 or i%10==0:
        a=''
    elif i%10==1:
        a='а'
    elif 1<i%10<5:
        a='ы'
    print (f'На лугу {i} коров{a}')




 -End,"
 b=int(input())
k=[0 for i in range (b)]
for i in range(b):
    if 0<=i<=1:
        k[i]=1
    else:
        k[i]=k[i-2]+k[i-1]
print (*k)




 -End,"
 b=int(input())
l=True
if b>2:
    for i in range(2,b):
        if b%i==0:
            l=False
            break
if b==1:
    l=False
print ('Простое' if l else 'Составное')




 -End,"
 n = int(input())
k=[input() for i in range (n)]
l=True
i=0
while i<n:
    if k[i].count('rat')>0:
        print(i+1)
        l=False
    i+=1
if l:
    print(-1)




 -End,"
 s=0
while True:
    d=int(input())
    s+=d
    if d==0:
        break
print(s)




 -End,"
 kesh=int(input())
s=0
while True:
    a=int(input())
    if s+a>kesh:
        break
    s+=a
print (""Стоп, Джон!\n"",s,sep='')




 -End,"
 n = int(input())
k=[input() for i in range (n)]
l=True
i=0
while i<n:
    if k[i].count('rat')>0:
        print(i+1)
        l=False
        break
    i+=1
if l:
    print(-1)




 -End,"
 n = int(input())
k=sorted([int(input()) for i in range (n)])
for j in range(1,k[0]+1):
    l=0
    for i in k:
        if i%j==0:
            l+=1
    if l==n:
        m=j
print (m)




 -End,"
 n = int(input())
k=sorted([int(input()) for i in range (n)])
for j in range(1,k[0]+1):
    if k[0]%j==k[n-1]%j==0:
            m=j
print (m)
pr=True
for j in range(2,m+1):
    if m%j==0 and j!=m:
        print ('NO')
        pr=False
        break
if m==1:
    print('NO')
    pr=False
if pr:
    print('YES')





 -End,"
 n = int(input())
k=sorted([int(input()) for i in range (n)])
for i in k:
    if i%10==4:
        print (i)
        break




 -End,"
 n = tuple(map(int, input().split()))
l=len(n)
m=0
for i in range (l):
    if len(str(n[i]))==2 and n[i]%3!=0 and n[i]>m:
        m=n[i]
print (m if m>0 else'Не найдено')




 -End,"
 l=[int(i) for i in iter(input, '.')]
for i in range (1,len(l)+1):
    if not l[-i]%2:
        print(l[-i], end=' ')




 -End,"
 l=[int(input()) for i in range(int(input()))]
m1,m2=0,0
for i in range(len(l)):
    if not l[i]%2 and (l[i]<m1 or m1==0):
        m1=l[i]
    if l[i]%2 and (l[i]<m2 or m2==0):
        m2=l[i]
m=m1+m2
for i in range(len(l)):
    if l[i]<m:
        l[i]+=m
print(*l)




 -End,"
 l=[i for i in iter(input,'.')]
print (*[l[int(input())-1] for i in range(int (input()))], sep='')




 -End,"
 l=[i for i in iter(input,'.')]
w='python'
k=0
for j in l:
    if w in j.lower().split():
        k+=1
print (*[j[k-1] for j in l if k>0])




 -End,"
 n=input()
print(' '.join(n.split('.')),'\n',sum([int(i) for i in n.split('.')]),sep='')




 -End,"
 l=input().split()
n,k=int(input()), int(input())
print (*[l[i] for i in range(k-1,len(l),n)])




 -End,"
 print (*list(reversed([int(i)**2 for i in iter(input,'.')])))




 -End,"
 d={'@':'ошибка', '!':'предупреждение','/':'информация','*':'подробное сообщение'}
l=[i for i in iter(input,'.')]
for j in l:
    for key in d:
        if j[:2]==j[-2:]==2*key:
            print (d[key])



 -End,"
 a,b,c=map(int, input().split())
s={'+','-','*','/'}
m=True
for i in s:
    if eval('{0}{2}{1}'.format(a,b,i))==c:
        print('{0} {1} {2} = {3}'.format(a,i,b,c))
        m=False
if m:
    print('Error')




 -End,"
 a=''
s=0
for i in input():
    if i.isdigit():
        if int(i)<9:
            a+=str(int(i)+1)
            s+=int(i)+1
        else:
            a+='0'
    else:
        a+=i
print(a,s,sep='\n')




 -End,"
 a=input().lower().split()
b=list(''.join(a))
c=[i for i in b]
c.reverse()
print ('YES' if b==c else 'NO')




 -End,"
 n=int(input())
b=[input().split(', ') for i in range(n)]
d=[]
for i in range (n):
    a=[int(b[i][j].split()[1]) for j in range(3)]
    c=[b[i][j].split()[0] for j in range(3)]
    d.append(c[a.index(min(a))])
    a.clear()
    c.clear()
print(*d,sep=', ')




 -End,"
 a,b= map(int, input().split())
k=[int(i) for i in input().split(', ')]
for j in range(a):
    k=[2*i for i in k if 2*i<=b]
print(len(k)) 



 -End,"
 d=['Константная O(1)','Линейная O(n)','Квадратичная O(n^2)','Кубическая O(n^3)','Логарифмическая O(log n)']
for i in iter(input,'Я запомнил'):
    print(*['O'+j.split('O')[1] for j in d if i in j ])
print('Молодец, Вася!')




 -End,"
 a,b= map(int, input().split())
k=[int(i) for i in input().split(', ')]
for j in range(a):
    k=[2*i if 2*i<=b else 0 for i in k ]
print(*[k.index(i)+1 for i in k if i>0], sep=', ')




 -End,"
 n=(int (input()))
def factorial(n):
    return n if n<2 else n*factorial(n-1)
def fib(n):
    return 1 if n<=2 else fib(n-1)+fib(n-2)
print (fib(n)+factorial(n)) -End,"
 def mx(d):
    d=str(abs(d))
    a=[int(i) for i in d]
    b=len(a)
    c=''
    for i in range (b):
        c+=str(max(a))
        a.pop(a.index(max(a)))
    l=int(c)
    return l
n=int (input())
k=[int(input()) for i in range(n)]
nol=0
for i in k:
    if mx(i)>nol:
        nol=mx(i)
        cet=i
print(cet)




 -End,"
 def check_variable(v):
    if not v[0].isdigit() and len(v)==len([i for i in v if i.isalnum() or i=='_']):
        print('Можно использовать')
    else:
        print('Нельзя использовать')
while True:
    pas=input()
    if pas==""Поработали, и хватит"":
        break
    check_variable(pas)




 -End,"
 def get_weight(*weight):
    s=0
    for n in weight:
        s+=n
    return s
weight=get_weight(*map(float,input().split()))
sw=float(input())
print('Повезло' if weight<=sw else ""Не повезло"")




 -End,"
 from datetime import date
 
def check_date(y, m, d):
    try:
        date(y, m, d)
        return True
    except:
        return False
s=0
for i in iter(input,'.'):
    i=reversed([int(j) for j in i.split('.')])
    if check_date(*i):
        print('Корректная')
        s+=1
    else:
        print('Некорректная')
print(s)


 -End,"
 def numer (a):
    s=0
    for i in a:
        s+=int(i)
    return s
a=input().split()
b=[numer(i) for i in a]
for i in range(len(a)):
    print(a[b.index(min(b))], end=' ')
    a.pop(b.index(min(b)))
    b.pop(b.index(min(b)))




 -End,"
 def shift_list(lst, shift): 
    b=lst[:]
    for i in range(len(lst)):
        b[(i+shift)%len(b)]=lst[i]
    return b

 -End,"
 def binary_to_decimal(n):
    return int(n,2)
def decimal_to_binary(n):
    n = int(n)
    b = ''
    while n > 0:
        b = str(n % 2) + b
        n = n // 2
    return b
 -End,"
 def akker(m,n):
    if m==0:
        return (n+1) 
    if m>0 and n==0:
        return akker(m-1,1) 
    if m>0 and n>0:
        return akker(m-1, akker(m,n-1)) 
print(akker(n=int(input()),m=int(input())))




 -End,"
 def get_length(obj):
    if not obj:
        return 0
    if obj:
        return 1+get_length(obj[1:])




 -End,"
 def is_power(n):
    if n==1:
        return True
    if n%2!=0:
        return False
    if n%2==0:
        return is_power(n//2)




 -End,"
 cache = {1: 1, 2: 1} 
def fib(n):
    s = cache.get(n)
    if s is None:
        s = fib(n-2) + fib(n-1)
        cache[n] = s
    return s




 -End,"
 from itertools import permutations
s=[i for i in range(1,int(input())+1)]
print (*[' '.join(map(str,n))+'\n' for n in permutations (s,len(s))],sep='')




 -End,"
 def solve_hanoi(n, start, end):
    if n:
        solve_hanoi(n-1, start, 6-start-end)
        print (""Переносим диск {} с {} на {}"".format(n, start, end))
        solve_hanoi(n-1, 6-start-end, end)




 -End,"
 a=dict([tuple(i.split(' – ')) for i in iter(input,'.')])
n=int(input())
for i in range(n):
    c=input()
    print(a.get(c) if c in a.keys() else ""Не найдено"")




 -End,"
 a=''.join([i for i in input() if i not in {"","", ""."", ""?"", ""!""}]).lower()
d={}
for i in set(a.split()):
    d[i]=a.split().count(i)
print(*[key+' '+ str(max(d.values()))+'\n' for key in d.keys() if d[key]==max(d.values())])




 -End,"
 a=dict([i.split() for i in iter(input,'.')])
while True:
    d=input()
    if d=='.':
        break
    b={d.split()[0]: d.split()[1:]}
    for key in b:   
        l=True
        if b[key][1]=='experienced':
            if b[key][0]=='read' and a[key]=='confidential' or b[key][0]=='edit' and (a[key]=='settings' or a[key]=='system'):
                l=False
        if b[key][1]=='user':
            if a[key] in ('confidential','settings','system'):
                l=False
        print ('Access granted' if l else 'Access denied' )     
        


 -End,"
 a=[i for i in iter(input,'.')]
d={}
for i in a:
    i=''.join([j for j in i if j!="",""])
    if len(i.split())==1:
        if d.get(i.split()[0])!=None:
            print(*d.get(i.split()[0]), sep=', ')  
        else:
            print(""Не найдено"")
    if len(i.split())>1:
        d[i.split()[0]]=d.setdefault(i.split()[0],[])+i.split()[1:]



 -End,"
 a=dict([i.split(': ') for i in iter(input,'.')])
while True:
    d=input()
    if d=='.': break    
    l=True
    for key in a:
        if a.get(key)==d:
            print(key)
            l=False
        if key==d:
            print (a.get(key))
            l=False
    if l:
        print('Нет данных')
          




 -End,"
 # для Вашего удобства словарь вида ""буква: код Морзе"" уже готов
d=morze = {'a': '•—', 'b': '—•••', 'c': '—•—•', 'd': '—••',
           'e': '•', 'f': '••—•', 'g': '——•', 'h': '••••',
           'i': '••', 'j': '•———', 'k': '—•—', 'l': '•—••', 
           'm': '——', 'n': '—•', 'o': '———', 'p': '•——•', 
           'q': '——•—', 'r': '•—•', 's': '•••', 't': '—', 
           'u': '••—', 'v': '•••—', 'w': '•——', 'x': '—••—',
           'y': '—•——', 'z': '——••', 
           '1':'•————', '2':'••———', '3':'•••——',
           '4':'••••—','5':'•••••','6':'—••••',
           '7':'——•••','8':'———••','9':'————•','0':'—————'}
l={}
for i in d.keys():
    l[d.get(i)]=i
d.update(l)
a=input()
if ('•' or '—') in a:
    for i in a.split('\t'):
                print(*[d[j] if j in d else j for j in i.split()],end=' ',sep='')
    print(' ', end='')        
else:        
    for j in a.lower().split():
        print(*[d[i] if i in d else i for i in j],end='\t',sep=' ')




 -End,"
 d={}
name={}
for i in input().split(','):
       d[i.split('""')[-1][1:]]=d.setdefault(i.split('""')[-1][1:],[])+[''.join(i.split('""')[1:-1])]
for i in iter(input, '.'):
            if i.split()[0]!='Посоветуй':
                name[i.split()[0]]=name.setdefault(i.split()[0],set())|{' '.join(i.split()[1:])[1:-1]}
            else:
                give=i.split()[-1][1:-1]
                name[give]=name.setdefault(give,set())
                s={}
                for j in name[give]:
                    for k in d:
                        if j in d[k]:
                            s[k] = s.get(k, 0) + 1
                k=[]
                for l,v in s.items():
                    if v==max(s.values()):
                        k+=['""'+d[l][i]+'""' for i in range(len(d[l])) if d[l][i] not in name[give]]
                if len(k)>0:
                    print(*k, sep="", "")  
                else: 
                    print ('Список пуст')
                     
                     


 -End,"
 a={'+', ' ', '-', '(', ')'}
d={}
for i in iter(input,'.'):
    if len(i.split())==1:
        if d.get(i.split()[0])!=None:
            print(*d.get(i.split()[0]), sep=', ')  
        else:
            print(""Не найдено"")
    if len(i.split())>1:
        number=i.split(maxsplit=1)[1].split(', ')
        for p in number:
            p=''.join([j for j in p if j not in a])
            if len(p)==11:
                if p[0]=='7' or p[0]=='8':
                    p='+7 ('+ p[1:4]+') '+p[4:7]+'-'+p[7:9]+'-'+p[9:11]
                    d[i.split()[0]]=d.setdefault(i.split()[0],[])+[p]




 -End,"
 import time
l={i:[] for i in input().split(', ')}
a=[j for j in iter(input, '.')]

n=len(a)
for p in range(n-1):
    for k in range (p+1,n):
        t1=time.strptime(a[k].split('""')[2].split()[0],""%d.%m.%Y"")
        t2=time.strptime(a[p].split('""')[2].split()[0],""%d.%m.%Y"")
        if t1<t2:
            a[k],a[p]=a[p],a[k]
for j in a:
    action=j.split()[0]
    book='""'+j.split('""')[1]+'""'
    date1=j.split('""')[2].split()[0]
    if action==""Вернуть"":
        l[book].append([date1,action])
    if action==""Взять"":
        name=j.split('""')[2].split()[1][1:-1]
        l[book].append([date1,action,name])

for j in a:
    action=j.split()[0]
    book='""'+j.split('""')[1]+'""'
    date1=j.split('""')[2].split()[0]
    if action==""Взять"":
        name=j.split('""')[2].split()[1][1:-1]
        for i in range(len(l[book])):
            if date1 in l[book][i]:
                if i>0:
                    if l[book][i-1][1]=='Взять':
                        t1=time.strptime(l[book][i-1][0],""%d.%m.%Y"")
                        t2=time.strptime(l[book][i][0],""%d.%m.%Y"")
                        dt=t2.tm_yday-t1.tm_yday
                        print (f'Книга {book} отсутствует. Ее забрал(а) {l[book][i-1][2]}' if dt<30 else f'Книгу {book} забрал(а) {name}')
                    if l[book][i-1][1]=='Вернуть':
                        print (f'Книгу {book} забрал(а) {name}')                               
                if i==0:
                    print (f'Книгу {book} забрал(а) {name}')
                    



 -End,"
 n,m,k,p=[int(input()) for i in range(4)]
print(n-(m+k)+p)




 -End,"
 у,ч,е,н,и,к=[int(input()) for i in 'ученик']
print(у+ч+е-н-и+к)




 -End,"
 a=[]
for i in range (int(input())):
    p1,p2=set(input().split()), set(input().split())
    a.append(len(p1&p2)/len(p1))
print(a.index(max(a))+1)




 -End,"
 m,n,k,a,b,c,d,x=[int(input()) for i in 'множество'[:-1]]
two=2*(m+n+k)-(a+b+c)-3*d
one=(a+b+c)-(m+n+k)-two
null=x-(one+two+d)
print (one,two,null, sep='\n')





 -End,"
 d={'+','-','/','*'}
stack=[]
a=input().split()
for i in a:
    if i not in d:
        stack.append(i)
    else:
        a,b=stack.pop(),stack.pop()
        temp=eval(str(b)+i+str(a))
        stack.append(temp)
print(stack.pop())




 -End,"
 queue =[]
n,m=int(input()), int(input())
for i in iter(input,'.'):
    if i=='Customer':
        queue.append(i)
    else:
        queue.insert(len(queue)//2+len(queue)%2,i)
if len(queue)>=n*m:
    queue=queue[n*m:]
else:
    queue.clear()
print(len(queue),queue.count('VIP-customer'), sep='\n')




 -End,"
 d={'{','}','[',']','(',')'}
e={'{}','[]','()'}
stack=[]
Right=True
for i in input():
    if i in d:        
        stack.append(i)
        if len(stack)>=2:
            if (stack[-2]+stack[-1]) in e:
                g=stack.pop(-1)
                m=stack.pop(-1)                              
print('YES' if len(stack)==0 else 'NO')




 -End,"
 a = int(input())
while a != 1:
    print (a, end =' ')
    if a%2 == 0: a = a//2
    else: a = a * 3 + 1
print (a)   -End,"
 comm = input()
while comm != 'End':
    print (""Processing \""%s\"" command..."" %comm)
    comm = input()
print (""Good bye!"")
 -End,"
 def get_int (start_message, error_message, end_message):
    print(start_message)
    while True:
        try:
            vvod = int(input())
            print(end_message)
            return(int(vvod))
        except ValueError:
            print (error_message)
         -End,"
 cards = input().split()
koz = input()
poker = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
if cards[0][-1] == cards[1][-1]:
    if poker.index(str(cards[0][0:-1])) > poker.index(str(cards[1][0:-1])):
        print ('First')
    elif poker.index(str(cards[0][0:-1])) == poker.index(str(cards[1][0:-1])):
        print ('Error')
    else:
        print ('Second')
elif cards[0][-1] != cards[1][-1]:
    if cards[0][-1] == koz:
        print ('First')
    elif cards[1][-1] == koz:
        print ('Second')
    else:
        print('Error')
        
 -End,"
 inp = input()

d1 = {'IV' : 4, 'IX' : 9, 'XL' : 40, 'XC' : 90, 'CD' : 400, 'CM' : 900}
d2 = {'I' : 1, 'V' : 5, 'X' : 10, 'L' : 50, 'C' : 100, 'D' : 500, 'M' : 1000}
out = 0

for inv in d1.keys():
    if inv in inp:
        out += d1[inv]
        inp = inp.replace(inv,'')
for char in inp:
    out += d2[char]

print (out) -End,"
 print(int(input())**2)

 -End,"
 n, m = [int(input()) for i in (0, 1)]
print(f'{(n+m)/2}')
 -End,"
 a, b = [float(input()) for i in (0,1)]
print(f'{a + b + (a**2 + b**2) ** 0.5}') -End,"
 x1, y1, x2, y2 = [int(input()) for i in (0, 1, 2, 3)]
print((f'{((x1-x2)**2 + (y1-y2)**2)**0.5}'))
 -End,"
 n = str(float(input()))
print(f""0.{n.split('.')[1]}"")
 -End,"
 print(str(float(input())).split('.')[1][0])
 -End,"
 n, k = [int(input()) for i in (0, 1)]
print(f'{0 if k%n==0 else n-k%n}') -End,"
 k = int(input())
print(f""{int(k/abs(k)) if k!=0 else 0}"") -End,"
 print('NO' if int(input()[-1])%2 else 'YES') -End,"
 n = input()
print(f""{'YES' if n[0]!=n[1]!=n[2]!=n[0] else 'NO'}"") -End,"
 n=input()
print(f""{'YES' if sum(map(int,n[:3]))==sum(map(int,n[3:])) else 'NO'}"") -End,"
 n = int(input())
print(f""{'YES' if (-3<=n<=1)or(5<=n<=9) else 'NO'}"") -End,"
 n = [int(input()) for i in range(2)]
print(f""{'1' if n[0]>0 and n[1]>0 else '2' if n[0]<0 and n[1]>0 else '3' if n[0]<0 and n[1]<0 else '4'}"")
 -End,"
 a, b, c = [float(input()) for i in range(3)]
D=(b**2 - 4*a*c)
n1='\n'
if D==0:
    print(f""{-b/(2*a)}"")
elif D>0:
    print(f""{n1.join(sorted([str((-b-D**0.5)/(2*a)),str((-b+D**0.5)/(2*a))]))}"") -End,"
 n = int(input())
print(f""{'31' if n in [1,3,5,7,8,10,12] else '29' if n==2 else '30'}"")
 -End,"
 n = int(input())
print(f""{'Зима' if n in [12,1,2] else 'Весна' if n in [3,4,5] else 'Лето' if n in [6,7,8] else 'Осень'}"")
 -End,"
 n = int(input())
print(f""{n+1 if n%2 else n+2}"") -End,"
 n, k = [int(input()) for i in range(2)]
print(f""{(n+k-1)//k}"") -End,"
 a, b, c = [int(input()) for i in range(3)]
print(f""{a//2 + a%2 + b//2 +b%2 + c//2 + c%2}"") -End,"
 print(f""{'NO' if int(input()[-1])%2 else 'YES'}"") -End,"
 n = [int(input()) for i in range(4)]
print(f""{'YES' if n[0]==n[2] or n[1]==n[3] or abs(n[0]-n[2]) == abs(n[1]-n[3]) else 'NO'}"")
 -End,"
 n = [int(input()) for i in range(4)]
print(f""{'YES' if abs(n[0]-n[2])<2 and abs(n[1]-n[3])<2 else 'NO'}"") -End,"
 n = [int(input()) for i in range(4)]
print(f""{'YES' if (abs(n[0]-n[2])==2 and abs(n[1]-n[3])==1) or (abs(n[1]-n[3])==2 and abs(n[0]-n[2])==1) else 'NO'}"")
 -End,"
 n=input()
print(f""{'YES' if n[0]<n[1]<n[2] else 'NO'}"") -End,"
 a, b, c = [int(input()) for i in range(3)]
print(f""{'YES' if a<(b+c) and b<(a+c) and c<(a+b) else 'NO'}"")
 -End,"
 a, b, c = sorted(int(input()) for i in range(3))
print(f""{'impossible' if a+b<=c else 'right' if (a**2 + b**2 - c**2)==0 else 'obtuse' if (a**2 + b**2 - c**2)<0 else 'acute'}"") -End,"
 n = ('000'+input())[-4:]
print(f""{'YES' if n==n[::-1] else 'NO'}"")
 -End,"
 n1='\n'
print(f""{n1.join(['Hello, BeeGeek!' for i in range(19)])}"") -End,"
 n1='\n'
print(f""{n1.join([str(i) for i in range(int(input()),int(input())+1) if not i%2])}"") -End,"
 n = int(input())
n1 = '\n'
print(f""{n1.join([str(i) for i in range(1,n+1) if not n%i])}"")
 -End,"
 n1 = '\n'
print(f""{n1.join([str(i) for i in range(int(input()),int(input())+1)][::-1])}"")
 -End,"
 def divisors(n):
    divs = [1]
    for i in range(2,int((n**0.5))+1):
        if n%i == 0:
            divs.extend([i,n/i])
    divs.extend([n])
    return list(set(divs))

print(len(divisors(int(input())))) -End,"
 print(f""{sum([j for j in [int(input()) for i in range(int(input()))] if not j%2 and j%3])}"")
 -End,"
 print(f""{sum([1 for j in [int(input()) for i in range(int(input()))] if not j%10])}"") -End,"
 print(f""{'YES' if 0 in [int(input()) for i in range(int(input()))] else 'NO'}"")

 -End,"
 from functools import reduce
print(reduce(lambda x, y: x*y, [i for i in range(1,int(input())+1)])) -End,"
 from functools import reduce
print(reduce(lambda x, y: x*y, [i for i in range(int(input()),int(input())+1)]))
 -End,"
 from functools import reduce
print(reduce(lambda x, y: x*y, [int(j) for j in [str(i) for i in range(int(input()),int(input())+1)] if j[-1]=='7']))
 -End,"
 from functools import reduce
print(f""{reduce(lambda x, y: x*y, [i for i in range(2,int(input())+1,2)])}"")
 -End,"
 n=int(input())
n1 = '\n'
print(f""{n1.join([str(2**i) for i in range(n) if 2**i<=n])}"")
 -End,"
 n = int(input())
i,q=0,1
while(q<n):
    i=i+1
    q=q*2
print(i)
    
    
    
 -End,"
 n,i=int(input()),0
while 2**i<n:
    i+=1
print(i) -End,"
 array = [input() for i in (0,1,2,3)]
print(f""{'YES' if array[0]==array[2] or array[1]==array[3] else 'NO'}"")
 -End,"
 n = [int(input()) for i in (0,1,2,3)]
print(f""{'YES' if abs(n[0]-n[2]) == abs(n[1]-n[3]) else 'NO'}"")
 -End,"
 n = [int(input()) for i in (0,1,2)]
print(f""{'3' if n[0]==n[1]==n[2] else '2' if n[0]==n[1] or n[1]==n[2] or n[2]==n[0] else '0'}"")
 -End,"
 n = [int(input()) for i in (0,1)]
print(f""{'1' if n[0]>0 and n[1]>0 else '2' if n[0]<0 and n[1]>0 else '3' if n[0]<0 and n[1]<0 else '4'}"")
 -End,"
 a, b, c = [float(input()) for i in (0,1,2)]
D=(b**2 - 4*a*c)
n1='\n'
if D==0:
    print(f""{-b/(2*a)}"")
elif D>0:
    print(f""{n1.join(sorted([str((-b-D**0.5)/(2*a)),str((-b+D**0.5)/(2*a))]))}"") -End,"
 n, k = [int(input()) for i in (0,1)]
print(f""{(n+k-1)//k}"")
 -End,"
 a, b, c = [int(input()) for i in(0,1,2)]
print(f""{a//2 + a%2 + b//2 +b%2 + c//2 + c%2}"") -End,"
 n = [int(input()) for i in (0,1,2,3)]
print(f""{'YES' if n[0]==n[2] or n[1]==n[3] or abs(n[0]-n[2]) == abs(n[1]-n[3]) else 'NO'}"")
 -End,"
 n = [int(input()) for i in (0,1,2,3)]
print(f""{'YES' if abs(n[0]-n[2])<2 and abs(n[1]-n[3])<2 else 'NO'}"")
 -End,"
 n = [int(input()) for i in(0,1,2,3)]
print(f""{'YES' if (abs(n[0]-n[2])==2 and abs(n[1]-n[3])==1) or (abs(n[1]-n[3])==2 and abs(n[0]-n[2])==1) else 'NO'}"")
 -End,"
 a, b, c = [int(input()) for i in(0,1,2)]
print(f""{'YES' if a<(b+c) and b<(a+c) and c<(a+b) else 'NO'}"")
 -End,"
 a, b, c = sorted(int(input()) for i in(0,1,2))
print(f""{'impossible' if a+b<=c else 'right' if (a**2 + b**2 - c**2)==0 else 'obtuse' if (a**2 + b**2 - c**2)<0 else 'acute'}"")
 -End,"
 n = input()
print(f""{'NO' if int(n)%sum([int(n[i])for i in range(len(n))]) else 'YES'}"") -End,"
 n,s= int(input()),''
while n>0:
    s += str(n%2)
    n = n//2
print(s) -End,"
 a,b=int(input()),int(input())

if a>=b: maX,miN=a,b
else: miN,maX=a,b

c=int(input())  

if c<=miN: miN=c
elif c>=maX: maX=c

print(maX,'\n',miN,'\n',((a+b+c)-(maX+miN)))




 -End,"
 a=int(input())

if a<0: a*=-1

if 0<=a<=19 or a>=100 and 0<=a%100<=19 :    x=a%100
else:                                       x=a%10

if x==0 or 5<=x<=19: print (a, 'программист'+'ов')
elif 2<=x<=4:        print (a, 'программист'+'а')
else:                print (a, 'программист')





 -End,"
 while True:
    a=int(input())
    if a<10:  continue
    if a>100: break
    print (a)




 -End,"
 s=input()
k=len(s)
i,j=0,1
y=str()

while i<k:
  while j<=k:
    if s[i]==s[j-k]:
      x=s[i:j+1]
    else:
      x=s[i:j]
      break
    j+=1
  y=s[i]+str(len(x))
  print(y,end='')
  i=j
  j+=1




 -End,"
 a=0
for i in list(input().split()):
     a+=int(i)
print(a)




 -End,"
 s=[int(i) for i in input().split()]

a=s[1:len(s)]
b=s[:len(s)-1]
a.append(s[0])
b.insert(0,s[len(s)-1])

if len(s)>1:
    for j in range(len(s)): print(a[j]+b[j],end=' ')
else:                      print(s[0])




 -End,"
 s=sorted([int(i) for i in input().split()])
i=0

while i<len(s):
    if s.count(s[i])>1:
        print(s[i],end=' ')
        i+=s.count(s[i])
    else:
        i+=1




 -End,"
 Чак_Норрис_намазывает_нож_на_хлеб = True
b,s=0,0

while Чак_Норрис_намазывает_нож_на_хлеб:
    a=int(input())
    s+=a
    b+=a**2
    if s==0: break
print(b)




 -End,"
 j=int(input())
if j==0: print(j)
else:
    s=[]
    for i in range(1,j+1):
        s+=[i]*i
        a=s[:i]
        print(int(a[i-1]), end=' ') -End,"
 s=[int(i) for i in input().split()]
x=int(input())

if x not in s: print('Отсутствует')
else:
    for j in range(len(s)):
        if x==s[j]:
            print(j, end=' ') -End,"
 s = []
while ['end'] not in s:
    s.append([i for i in input().split()])
del s[-1]

row = len(s)
for i in range(row):
    col = len(s[i][:])
    for j in range(col):
        print(int(s[i-1][j]) + int(s[i][j-1]) + int(s[i+1-row][j]) + int(s[i][j+1-col]), end=' ')
    print() -End,"
 #ввод
m = n =int(input())
#начало записи с проверкой на ввод единицы
if n>1:
  x=[[0 for i in range(n)] for j in range(n)] #список для записи
  z=[int(i) for i in range(n)]                #список индексов
  #переменные
  b,k=0,0
  a,st=1,1
  #запись списка
  while a<n**2:
      for y in range(2):
          #цикл по горизонтали
          for j in z[b:m-1:st]:
              x[k][j]=a
              a+=1
          k=j+st
          #цикл по вертикали
          for i in z[b:m-1:st]:
              x[i][k]=a
              a+=1
          k=i+st
          #реверс диапазона
          st*=-1
          b=k
          m=n-k
      #уменьшение диапазона - переход на следущий круг
      b+=1
      k+=1
      m-=1
  #проверка последнего числа для нечетного n
  if n%2!=0: x[i][j]=a    
  #вывод    
  for i in range(n):
      for j in range(n):
          print(x[i][j], end='\t')
      print()
else: print(n) #вывод единицы -End,"
 def f(x):
    if x<=-2: return 1-(x+2)**2
    if x<=2:  return -x/2
    else:     return 1+(x-2)**2




 -End,"
 def modify_list(l):
    for i in l[::-1]:
        if i%2 != 0: del l[l.index(i)] 
        else:            l[l.index(i)] = int(i/2)   
    return -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key in d:     d[key] = d.get(key) + [value]
    elif key*2 in d: d[key*2] = d.get(key*2) + [value]
    else:            d[key*2] = [value]

# не добавляйте кода вне функции -End,"
 x,s = input().lower().split(),set()

for i in x: s.add(i + ' ' + str(x.count(i)))
for i in s: print(i) -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
d = {}
for i in range(int(input())):
    k = int(input())
    if k not in d.keys(): d[k] = f(k)
    print(d.get(k))


 -End,"
 import sys
print(*sys.argv[1:]) -End,"
 set,table = [input().split(';') for i in range(int(input()))],{}

for i in set:
  for j in i:
    if not j.isdigit(): table[j] = [0,0,0,0,0]

for i in set:
  if int(i[1]) > int(i[3]): 
    table.get(i[0])[1] += 1
    table.get(i[0])[4] += 3
    table.get(i[2])[3] += 1

  if int(i[1]) < int(i[3]):
    table.get(i[2])[1] += 1
    table.get(i[2])[4] += 3
    table.get(i[0])[3] += 1

  if int(i[1]) == int(i[3]):
    table.get(i[0])[2] += 1
    table.get(i[0])[4] += 1
    table.get(i[2])[2] += 1
    table.get(i[2])[4] += 1

  table.get(i[0])[0] += 1
  table.get(i[2])[0] += 1

for k,v in table.items():
  print(k + ':',*v) -End,"
 inp,cript,code,decode = [input() for i in range(4)]

def uncode(f,key,value):
    h = []
    for j in f: h.append(key[value.index(j)])
    return h
    
print(*uncode(code,cript,inp), sep='')  
print(*uncode(decode,inp,cript), sep='')  -End,"
 a = [input().lower() for i in range(int(input()))]
b = [input().lower().split() for j in range(int(input()))]
s = {k for k in sum(b, []) if k not in a}
print(*s, sep = '\n')
 -End,"
 a = [input().split() for i in range(int(input()))]
x, y = 0, 0

for i in a:
    k, v = i
    if k == 'восток': x += int(v)
    if k == 'запад':  x -= int(v)
    if k == 'север':  y += int(v)
    if k == 'юг':     y -= int(v)
    
print(x, y) -End,"
 s = [int(input()) for i in range(int(input()))]
print(sum(s))
 -End,"
 ans = {id(i) for i in objects}
print(len(ans)) -End,"
 def closest_mod_5(x):
    if x % 5 == 0 and x != 0: return x
    return ((x // 5) + 1) * 5 -End,"
 a1, a2 = map(int, input().split())

def c(n, k):
    if k == 0: return 1
    if k > n:  return 0
    else:      return c(n-1, k) + c(n-1, k-1)

print(c(a1, a2)) -End,"
 dic = {'global': {'parent': 'None', 'var': set()}}  

def f(x):
    a, b, c = x
    if a == 'create': 
                      dic[b] =  {'parent': c, 'var': set()}
    if a == 'add':    
                      dic[b]['var'].add(c)  
    if a == 'get':
                      while b != 'None' and c not in dic[b]['var']: b = dic[b]['parent']                             
                      print(b)

for i in range(int(input())): f(input().split()) -End,"
 class MoneyBox:
    def __init__(self, z):
        self.quit = z

    def can_add(self, i):
        return i <= self.quit 
       
    def add(self, j):
        self.quit -= j -End,"
 class Buffer:
    def __init__(self):
        self.inn = []

    def add(self, *a):
        for i in a:
            self.inn.append(i)
            if len(self.inn) == 5:
                print(sum(self.inn))
                self.inn.clear()
        
        
    def get_current_part(self):
        return self.inn -End,"
 class ExtendedStack(list):
    def sum(self):
        self.append(self.pop() + self.pop())

    def sub(self):
        self.append(self.pop() - self.pop())

    def mul(self):
        self.append(self.pop() * self.pop())

    def div(self):
        self.append(self.pop() // self.pop()) -End,"
 d = {}

def innt(x):
    d[x[0]] = x[2:] if len(x) > 1 else []

def quit(y):
    father, son = y
    if father == son or res(father, son): print('Yes')
    else:                                 print('No')

def res(father, son):
    if son in d.keys():
        for j in d[son]:
            if father in d[son] or res(father, j): return 1

for i in range(int(input())): innt(input().split())
for j in range(int(input())): quit(input().split()) -End,"
 try:
    foo()
except (ZeroDivisionError, AssertionError) as err: 
    print(err.__class__.__name__) 
except (ArithmeticError):
    print('ArithmeticError')  -End,"
 d, s = {}, []

def input_dt(x):
    d[x[0]] = x[2:] if len(x) > 1 else []

def res(k, i):
    if k in d.keys():
        for v in d[k]:
            if v in s and s.index(v) < s.index(i) or res(v, i): return 1 

for _ in range(int(input())): input_dt(input().split())
for _ in range(int(input())): s.append(input())

for k in s[1:]:
    if res(k, i = k): print(k) -End,"
 class NonPositiveError(Exception):
    pass
  
class PositiveList(list):
    def append(self, x):
        if x > 0: 
            list.append(self, x)
        else:
            raise NonPositiveError -End,"
 from datetime import date, timedelta
y, m, d = (int(i) for i in input().split())
x = date(y, m, d) + timedelta(days = int(input()))
print(x.year, x.month, x.day) -End,"
 def primes():
    from math import factorial
    x = 2
    while x >= 2:
        if (factorial(x - 1) + 1) % x == 0: yield x
        x += 1 -End,"
 class multifilter:
    def judge_half(pos, neg):
        return pos >= neg

    def judge_any(pos, neg):
        return pos >= 1

    def judge_all(pos, neg):
        return neg == 0

    def __init__(self, iterable, *funcs, judge = judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        for i in self.iterable:
            pos, neg = 0, 0
            for j in self.funcs:
                if j(i):      pos += 1
                else:         neg += 1
            if self.judge(pos, neg):
                yield i -End,"
 def mod_checker(x, mod = 0):
    return lambda y: y % x == mod -End,"
 s, t, k = input(), input(), 0

for i in range(len(s)):
    if s[i:i+len(t)] == t: 
        k += 1        
print(k) -End,"
 s, a, b, k = input(), input(), input(), 0

if a in b and a in s:
    print('Impossible')
else:
    while a in s:
        s = s.replace(a, b)
        k += 1
    print(k) -End,"
 import sys, re

x = r""(.*cat.*){2}""
for line in sys.stdin:
    line = line.rstrip()
    if re.match(x, line): 
        print(line) -End,"
 import sys, re

x = r"".*\bcat\b.*""
for line in sys.stdin:
    line = line.rstrip()
    if re.match(x, line): 
        print(line) -End,"
 import sys, re

x = r"".*z.{3}z.*""
for line in sys.stdin:
    line = line.rstrip()
    if re.match(x, line): 
        print(line) -End,"
 import sys, re

x = r"".*\\""
for line in sys.stdin:
    line = line.rstrip()
    if re.match(x, line): 
        print(line) -End,"
 import sys, re

x = r""\b(\w+)\1\b""
for line in sys.stdin:
    line = line.rstrip()
    if re.search(x, line): 
        print(line) -End,"
 import sys, re

for line in sys.stdin:
    print(re.sub(r""human"", r""computer"", line.rstrip())) -End,"
 import sys, re

x = r""\b[aA]+\b""
for line in sys.stdin:
    print(re.sub(x, r""argh"", line.rstrip(), count=1)) -End,"
 import sys, re

x = r""\b(\w)(\w)""
for line in sys.stdin:
    print(re.sub(x, r""\2\1"", line.rstrip())) -End,"
 import sys, re

x = r""(\w)\1+""
for line in sys.stdin:
    print(re.sub(x, r""\1"", line.rstrip())) -End,"
 import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if re.fullmatch(r""[01]+"", line):
        x = re.sub(r""(\d)(\d)?(?<!\b)"", r""\1-\2+"", line)
        if not (eval(x) % 3): 
            print(line) -End,"
 import requests, re

a, b, ans = input().strip(), input().strip(), 'No'

for i in re.findall(r'(htt.+ml)', requests.get(a).text):
        if b in requests.get(i).text:
            ans = 'Yes'
            break
print(ans) -End,"
 import requests, re

reg = r'<a[^>]*?href=[""\'](?:\w*://)?(\w[\w.-]*)'

x = set(re.findall(reg, requests.get(input().strip()).text))

for i in sorted(list(x)):
    print(i) -End,"
 import json

x = {}
def inp(d):
    n, p = d[0][1], d[1][1]
    for i in p:
        x[i] = [n] if i not in x else x[i]+[n]
    if n not in x: 
        x[n] = []

def ans(k):
    for j in x[k]:
        s.add(j)
        ans(j)

json.loads(input(), object_pairs_hook=inp)

for k in sorted(x):
    s = set()
    ans(k)
    print(k, ':', (len(s)+1)) -End,"
 import lxml.etree as ETree

d = {'red':[], 'green':[], 'blue':[]}

def deep(i):
    j = 0
    while i is not None:
        j += 1
        i = i.getparent()
    return j

root = ETree.fromstring(input())
for i in root.iter():
    x = i.attrib['color']
    d[x].append(deep(i))

print(sum(d['red']), sum(d['green']), sum(d['blue'])) -End,"
 import torch

x = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
limit = x > int(input())

print(x[limit].sum()) -End,"
 import torch

w =  torch.tensor([[5,10], [1,2]], dtype=torch.float, requires_grad=True)

function =  (torch.log(torch.log(w + 7))).prod().backward()

print(w.grad) -End,"
 import torch

w =  torch.tensor([[5,10], [1,2]], dtype=torch.float, requires_grad=True)

for i in range(500):
    function =  (torch.log(torch.log(w + 7))).prod().backward()
    w.data -= 0.001 * w.grad
    w.grad.zero_()

print(w) -End,"
 import torch

w =  torch.tensor([[5,10], [1,2]], dtype=torch.float, requires_grad=True)
optimizer = torch.optim.SGD([w], lr=0.001)

for i in range(500):
    function =  (w + 7).log().log().prod().backward()
    optimizer.step()
    optimizer.zero_grad()

print(w) -End,"
 import torch

class RegressionNet(torch.nn.Module):
    def __init__(self, neurons):
        super().__init__()
        self.act = torch.nn.Tanh()
        self.fc1 = torch.nn.Linear(1, neurons + 2)
        self.fc2 = torch.nn.Linear(neurons + 2, int(neurons/2))
        self.fc3 = torch.nn.Linear(int(neurons/2), 1)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.fc2(x)
        x = self.act(x)
        x = self.fc3(x)
        return x

net = RegressionNet(16)

def target_function(x):
    return 2**x * torch.sin(2**-x)

# ------Dataset preparation start--------:
x_train =  torch.linspace(-10, 5, 100)
y_train = target_function(x_train)
noise = torch.randn(y_train.shape) / 20.
y_train = y_train + noise
x_train.unsqueeze_(1)
y_train.unsqueeze_(1)

x_validation = torch.linspace(-10, 5, 100)
y_validation = target_function(x_validation)
x_validation.unsqueeze_(1)
y_validation.unsqueeze_(1)
# ------Dataset preparation end--------:

def metric(pred, target):
    return (pred - target).abs().mean()

optimizer = torch.optim.Adam(net.parameters(), lr=0.05)

def loss(pred, target):
    squares = (pred - target) ** 2
    return squares.mean()

for epoch_index in range(500):
    optimizer.zero_grad()

    y_pred = net.forward(x_train)
    loss_value = loss(y_pred, y_train)
    loss_value.backward()
    optimizer.step()

print(metric(net.forward(x_validation), y_validation).item()) -End,"
 import random

def f(x):
    random.seed(x)
    print(random.randint(0, 10))

a = 0
while random.randint(0, 10) != 5:
    random.seed(a)
    a += 1

f(a-1)
 -End,"
 def update_dictionary(d, key, value):
    if key in d:
        if type(d[key])==list:
            d[key].append(value)
        else:
            d[key]=d[key]
            d[key].append(value)
    if key not in d:
        if d.get(key*2)!=None:
            if type(d[key*2])==list:
                d[key*2].append(value)
            else:
                d[key*2]=[d[key*2]]
                d[key*2].append(value)
        else:
            d[key*2]=[value] -End,"
 years = int(input())
money = 100000
print (int (money * (1.1 ** years))) -End,"
 a=int(input())
b=int(input())
if a>b:
    print(a)
else:
    print(b)



 -End,"
 a=int(input())
if a<0:
    print(-1)
elif a>0:
    print(1)
else:
    print(0) -End,"
 a=int(input())
b=int(input())
if a>b:
    print(1)
elif b>a:
    print(2)
else:
    print(0) -End,"
 a=int(input())
b=['zero','one','two','three','four','five','six','seven','eight','nine']
for i in range(len(b)):
    if a==i:
        print(b[i]) -End,"
 a=int(input())
b=int(input())
left=0
right=0
top=0
bottom=0
if 1<a<8 and 1<b<8:
    print(8)
elif (a==1 and b==1) or (a==8 and b==1) or (a==1 and b==8) or (a==8 and b==8):
    print(3)
else:
    print(5) -End,"
 a=int(input())
b=int(input())
if abs(a-b)%2==1:
    print('WHITE')
else:
    print('BLACK') -End,"
 i = input()
a = []
while i != '.':
    a.append(float(i))
    i = input()
a = sorted(a)
print(a[-2]) -End,"
 a=input()
for i in range(len(a)-1,-1,-1):
    print(a[i],end='') -End,"
 a=''
l=[]
while True:
    a=input()
    if a!='.':
        l.append(int(a))
    else:
        break
print(l) -End,"
 a=''
l=[]
while True:
    a=input()
    if a!='.':
        l.append(int(a))
    else:
        break
n=[]
p=[]
for i in range(len(l)):
    if l[i]<3:
        n.append(l[i])
    else:
        p.append(l[i])
print(n+p) -End,"
 k = int(input())
for i in range(k):
    print(['#' for i in range(k)]) -End,"
 b=[]
n=[]
while True:
    a=input()
    if a=='.': break
    else: b.append(a)
n.append(int(max(b)))
b.remove(max(b))
for i in b:
    n.append(int(i))
print(n) -End,"
 b=[]
n=[]
while True:
    a=input()
    if a=='.': break
    else: b.append(int(a))
nn = b.copy()
b.sort(reverse=True)
n = b[:3]
for i in range(3):
    nn.remove(max(nn))
for i in range(len(nn)):
    n.append(nn[i])
print(n) -End,"
 new=[]
field = input()
if field[0]=='#':
    if field[1]=='.':
        new.append('.')
    else:
        new.append('#')
elif field[0]=='.':
    if field[1]=='#':
        new.append('#')
    else:
        new.append('.')
for i in range(1,len(field)-1):
    if field[i]== '#':
        if (field[i - 1] == '#' and field[i + 1] == '#') or (field[i - 1] == '.' and field[i + 1] == '.'):
            new.append('.')
        else:
            new.append('#')
    elif field[i]== '.':
        if field[i - 1]== '#' or field[i + 1]== '#':
            new.append('#')
        else:
            new.append('.')
if field[-1]=='#':
    if field[-2]=='.':
        new.append('.')
    else:
        new.append('#')
elif field[-1]=='.':
    if field[-2]=='#':
        new.append('#')
    else:
        new.append('.')
print(new) -End,"
 field = input()
new=list(field).copy()
if field[0]=='#':
    if field[1]=='.': new[0]=('.')
elif field[0]=='.':
    if field[1]=='#': new[0]=('#')
for i in range(1,len(field)-1):
    if field[i]== '#':
        if (field[i - 1] == '#' and field[i + 1] == '#') or (field[i - 1] == '.' and field[i + 1] == '.'):
            new[i]=('.')
    elif field[i]== '.':
        if field[i - 1]== '#' or field[i + 1]== '#': new[i]=('#')
if field[-1]=='#':
    if field[-2]=='.': new[-1]=('.')
elif field[-1]=='.':
    if field[-2]=='#': new[-1]=('#')
print(new) -End,"
 k = int(input())
field = ['#', '.', '.', '.', '.', '#']
new=field.copy()
for j in range(k):
    if field[0]=='#':
        if field[1]=='.': new[0]=('.')
    elif field[0]=='.':
        if field[1]=='#': new[0]=('#')
    for i in range(1,len(field)-1):
        if field[i]== '#':
            if (field[i - 1] == '#' and field[i + 1] == '#') or (field[i - 1] == '.' and field[i + 1] == '.'):
                new[i]=('.')
        elif field[i]== '.':
            if field[i - 1]== '#' or field[i + 1]== '#': new[i]=('#')
    if field[-1]=='#':
        if field[-2]=='.': new[-1]=('.')
    elif field[-1]=='.':
        if field[-2]=='#': new[-1]=('#')
#    new=list(field).copy()
print(new) -End,"
 import copy
field = [['.', '#', '.', '.', '.', '.', '.', '.', '.', '.'],
 ['.', '.', '#', '.', '.', '.', '.', '.', '.', '.'],
 ['#', '#', '#', '.', '.', '.', '.', '.', '.', '.'],
 ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
 ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
 ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
 ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
 ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
 ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
 ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
#new = field.copy()
new=copy.deepcopy(field)
k = int(input())
for z in range(k):
    for m in range(0,10):
        for n in range(0,10):
            l = []
            for i in range(-1,2):
                for j in range(-1,2):
                    if i == 0 and j == 0: continue
                    try:
                        l.append(field[m+j][n+i])
                    except:
                        continue
            if field[m][n] == '.':
                if l.count('#') == 3:
                    new[m][n] = '#'
            if field[m][n] == '#':
                if l.count('#')<2 or l.count('#')>3:
                    new[m][n] = '.'
    field = copy.deepcopy(new)
for i in new:
    print(i) -End,"
 k = int(input())
for i in range(k-1):
    print(' '*(k-i-2),'#'*(i*2+1),' '*(k-i-2))
print('#'*((i+1)*2+1)) -End,"
 a=input()
try: print(int(a)*2)
except: print(str(a)*2) -End,"
 a = input().split('_')
b = []
for i in range(1,len(a)):
    a[i] = a[i][0].upper()+a[i][1:]
for i in a:
    print(i,end='')

 -End,"
 a = input()
b = []
c=0
while a!='.':
    if a.split(' ')[1] == 'true':
        b.append(a.split(' ')[0])
        c+=1
    a = input()
print(' '.join(b))
print(c) -End,"
 a = input()
c = []
while a != '.':
    c.append(a)
    a = input()
    if a =='.':
        s=float(input())
for i in c:
    if i.split(' ')[0] == '+':
        s+=float(i.split(' ')[1])
    elif i.split(' ')[0] == '-':
        s-=float(i.split(' ')[1])
    elif i.split(' ')[0] == '*':
        s*=float(i.split(' ')[1])
    elif i.split(' ')[0] == '/':
        s/=float(i.split(' ')[1])
print(s) -End,"
 a = input().split()
x = 0
y = 0
s = 1
for i in a:
    if i == 'l':
        x -= 1
    elif i == 'r':
        x += 1
    elif i == 'u':
        y += 1
    elif i == 'd':
        y -= 1
    elif i == '*':
        s += 1
    elif i == '#':
        s -= 1
    if s == 0:
        break
print(x, y)
print(s) -End,"
 def func(l):
    m = []
    for i in l:
        if i in m:
            continue
        m.append(i)
    return m



 -End,"
 def call(f, *args, **kwargs):
    if len(args)>0 and len(kwargs)>0:
        return f(*args, **kwargs)
    if len(args)>0 and len(kwargs)==0:
        return f(*args)
    if len(args)==0 and len(kwargs)>0:
        return f(**kwargs)
    if len(args)==0 and len(kwargs)==0:
        return f() -End,"
 def first(*aa,**bb):
    if len(aa)>0:
        return aa[0]
    if len(bb) == 1:
        return bb
    if len(aa) == 0 and len(bb) > 0:
        return bb[min(bb.keys())]
    if len(aa) == 0 and len(bb) == 0:
        return None -End,"
 def vector_sum(v1, v2):
    s = []
    for i in range(len(v1)):
        m = v1[i]+v2[i]
        s.append(m)
    return tuple(s)



 -End,"
 def character_count(s):
    keys, values = [], []
    for i in s:
        if i not in keys:
            keys.append(i)
            values.append(s.count(i))
    d = dict((keys[i], values[i]) for i in range(len(keys)))
    return d -End,"
 def calc(a, op, b):
    d = {'+': add, '-': sub, '/': div, '*': mul}
    return d.get(op)(a,b)




 -End,"
 def average_attempts(attempts, names):
    d = {}
    for i in attempts:
        if i[0] not in d:
            d[i[0]] = [1,i[2]]
        elif i[0] in d:
            d[i[0]][0] += 1
            d[i[0]][1] += i[2]  
    for i in names:
        if i[0] in d:
            d[i[1]] = d[i[0]]
            d.pop(i[0])
    for i in d:
        d[i] = float(d[i][1])/float(d[i][0])
    return d          -End,"
 def max_par(a, b, c):
    if a < 0: return -b/(2*a), a*(-b/(2*a))**2 + b*(-b/(2*a)) + c
    else: return None -End,"
 def code_number(num):
    d = {'0': 'zero', '1': ""one"", '2': ""two"", '3': ""three"", '4': 'four', '5': 'five', '6': 'six', '7': 'seven', '8': 'eight', '9': 'nine'}
    s = ''
    for i in str(num):
        s += d.get(i) + ' '
    return s[:-1]




 -End,"
 def dog_owners(pets):
    d = {}
    for i in pets:
	    d[(i[1],i[2],i[3])] = []
    for i in pets:
	    d[(i[1],i[2],i[3])] += [i[0]]
    return d -End,"
 def update_age(owners, owner, new_age):
    for i in owners:
        if new_age == owner[2]:
            break
        if i == owner:
            owners[(owner[0],owner[1],new_age)] = owners[owner]
            owners.pop(owner)
            break
    return owners -End,"
 a, b = input().split(', '), input().split(', ')
print(', '.join(set(a)&set(b))) -End,"
 a,b = input().split(' '), input().split(' ')
if set(a) & set(b) == set(a) and set(b) | set(a) == set(a): print('YES')
else: print('NO') -End,"
 a, b = set(input().split(', ')), set(input().split(', '))
print(', '.join(a | b)) -End,"
 k, m, d = int(input()), set(input().split(', ')), set(input().split(', '))
print(k-len(m|d)) -End,"
 a, b = input().split(', '), input().split(', ')
print(', '.join(set(a).difference(set(b))))



 -End,"
 a, b = input().split(', '), input().split(', ')
print(', '.join(set(a).symmetric_difference(set(b)))) -End,"
 print(chr(10).join(['0123456789'[x:]+'0123456789'[0:x] for x in range(10)])) -End,"
 def line_count(filename):
    f = open(filename)
    return len(f.readlines()) -End,"
 def char_count(filename):
#    lines = open(filename).readlines()
#    s = 0
#    for i in lines:
#        s += len(i[:-1])
#    return s
    col = open(filename).read()
    return len(col) -End,"
 def sum_numbers(filename):
    s = 0
    for i in open(filename).read().split('\n'):
        if i !='':
            s += int(i)
    return s -End,"
 def write_message(f, message):
    a = open(f,'w')
    a.write(message)
    a.close() -End,"
 def log(f, message):
    open(f,'a').write(message+'\n') -End,"
 def total_sum(f):
    s = 0
    with open(f) as f:
        for i in f.read().split('\n'):
            s += sum(map(float,i.split()))
    return s -End,"
 def minmax_coords(filename):
    s1, s2 = [], [] #s1 - первые координаты, s2 - вторые
    with open(filename) as f:
        a = f.read().split()
        if len(a) == 0:
            return None, None, None, None,
        for i in range(len(a)):
            if i != '':
                if i%2 == 0: s1.append(float(a[i]))
                else: s2.append(float(a[i]))
    return min(s1), max(s1), min(s2), max(s2) -End,"
 def solved_tasks(filename):
    d = dict()
    with open(filename) as f:
        a = f.read().split('\n')
        b = []
        for i in a:
            try:
                b.append(tuple(map(int,i.split(','))))
            except:
                continue
        for i in b:
            d[int(i[0])] = 0
        for i in b:
            d[int(i[0])] += 1
    return d -End,"
 def solved_tasks(filename):
    d = dict()
    with open(filename) as f:
        a = list(set(f.read().split('\n'))) # ['1,2','1,3','2,3'] список без повторений
        b = []
        for i in a:
            try:
                b.append(tuple(map(int,i.split(','))))
            except:
                continue
        for i in b:
            d[int(i[0])] = 0
        for i in b:
            d[int(i[0])] += 1
    return d -End,"
 def mean_petal(filename, variety):
    with open(filename) as f:
        s = 0
        c = 0
        a = f.read().split(""\\n"")
        for i in a:
            if i.split(',')[-1][1:-1] == variety:
                s += float(i.split(',')[2])
                c += 1
    return s/c -End,"
 class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def dist(self, other):
        return abs(((self.x-other.x)**2 + (self.y-other.y)**2)**(1/2)) -End,"
 class Circle:
    def __init__(self,Point, radius):
        self.center = Point
        self.radius = radius
    def square(self):
        return (self.radius)**2 * 3.14 -End,"
 class Circle:
    def __init__(self,Point, radius):
        self.center = Point
        self.radius = radius
    def square(self):
        return (self.radius) ** 2 * 3.14
    def do_intersect(self, other):
        return self.center.dist(other.center) < self.radius + other.radius
    def __lt__(self, other):
        return self.radius < other.radius
    def __le__(self, other):
        return self.radius <= other.radius
    def __eq__(self, other):
        return self.radius == other.radius
    def __ne__(self, other):
        return self.radius != other.radius
    def __gt__(self, other):
        return self.radius > other.radius
    def __ge__(self, other):
        return self.radius >= other.radius -End,"
 class Wall(GameObject):
    def __init__(self, x, y, game):
        GameObject.__init__(self,x,y,game)
        self.passable = False
        self.interactable = False
    def render(self):
        return ""#"" -End,"
 class HeatWave(GameObject):
    def __init__(self, x, y, game):
        GameObject.__init__(self, x, y, game)
    def interact(self, object):
        if isinstance(object, Player) or isinstance(object, SoftWall):
            object.alive = False
    def process(self):
        self.alive = False
    def render(self):
        return ""+"" -End,"
 class SoftWall(GameObject):
    def __init__(self, x, y, game):
        GameObject.__init__(self, x, y, game)
        self.passable = False
    def process(self):
        self.alive = False
    def render(self):
        return ""%"" -End,"
 class ShellRender(Render):
    def init_screen(self, h, w):
        self._screen = [[' ' for i in range(w)] for i in range(h)]
        return self._screen
    def add_object(self, char, x, y):
        self._screen[y][x] = char
    def draw_screen(self):
        for i in range(len(self._screen)): print(''.join(self._screen[i]))
    def get_input(self):
        return input() -End,"
 number = int(input())
lenght = int(input())
print(number % 10 ** lenght)
 -End,"
 number = int(input())
a = number // 100
c = number % 10
b = ((number - c) - (a * 100)) / 10
print(int(a**3 + b**3 + c**3))




 -End,"
 a = input()
b = input()
print(a!=b)



 -End,"
 n = int(input())
m = int(input())
between = max(m, n) - min(m, n)
h = between // 60
m = between % 60
print(h,m)
 -End,"
 rub = int(input())
cop = int(input())
amt = int(input())
cost = (rub * 100 + cop) * amt
print(cost // 100, cost % 100)




 -End,"
 h = int(input())
x = int(input())
y = int(input())
step = x - y   # размер стандартного шага
step_days = (h - x) // step  # дней со стандартными шагами без учета поcледнего шага вперед(x)
piece = (h - x) - (step * step_days) # разница расстояния без шага вперед и  расстояния пройденного за дней со станд. шагами  
length = (len(str(piece == 0))) # количество букв в результате сравнения: true = 4, false = 5. если маленький кусочек дороги не равен 0, то прибавится еще один день
days = step_days + 1 + (length - 4) # дней со стандартными шагами + день с последним шагом вперед + день остатка
print(days)
 -End,"
 n = int(input())
if n < 10:
    print(""Число однозначное"")
else:
    if n < 100:
        print(""Число двузначное"")
    else:
        print(""Число трехзначное"")




 -End,"
 a = int(input())
b = int(input())
c = int(input())
if b <= a:
    print(""2 <= 1"")
    if c <= b:
        print(""3 <= 2"")
else:
    if c <= b:
        print(""3 <= 2"")
    else:
        print(""Все в порядке"")


 -End,"
 name = str(input())
a = ""Энрико Ферми""
b = ""Нильс Бор""
c = ""Джон фон Нейман""
d = ""Ричард Фейнман""
e = ""Роберт Оппенгеймер""
f = ""Ганс Бизе""
g = ""Ханс Бете""
if name == a:
    print(""Доступ разрешен"")
elif name == b:
    print(""Доступ разрешен"")
elif name == c:
    print(""Доступ разрешен"")
elif name == d:
    print(""Доступ разрешен"")
elif name == e:
    print(""Доступ разрешен"")
elif name == f:
    print(""Доступ разрешен"")
elif name == g:
    print(""Доступ разрешен"")
else:
    print(""Доступ запрещен"")
 -End,"
 x = int(input())
y = int(input())
if x > 0:
    if y > 0:
        print(""1"")
    else:
        print(""4"")
if x < 0:
    if y > 0:
        print(""2"")
    else:
        print(""3"")




 -End,"
 a = float(input())
b = float(input())
c = input()
if c == ""+"":
    print(a + b)
elif c == ""-"":
    print(a - b)
elif c == ""*"":
    print(a * b)
else:
    print(a / b)



 -End,"
 pasw = str(input())
if ""qwerty"" in pasw or ""1234"" in pasw or len(pasw) < 8:
    print(""Bad password"")
elif (str(1) not in pasw and str(2) not in pasw and str(3) not in pasw and str(4) not in pasw and str(5) not in pasw and str(6) not in pasw and str(7) not in pasw and str(8) not in pasw and str(9) not in pasw and str(0) not in pasw):
    print(""Bad password"") 
else:
    print(""Good password"")


 -End,"
 n_feed = int(input())
place = input()
lang = input()
if n_feed < 7 or place != ""Рим"" or ""русский"" not in lang and ""английский"" not in lang :
    print(""Не подходит"")
else:
    print(""Подходит"")
    



 -End,"
 a = int(input())
b = int(input())
x = 0
for i in range(min(a, b), max(b, a)):
    x = i + x
print(x)
    




 -End,"
 money = int(input())
amt = int(input())
cost = 0
for i in range(amt):
    prod = int(input())
    cost += prod
print(""Покупает"") if cost <= money else print(""Не покупает"")
    




 -End,"
 a = int(input())
b = int(input())
summa = 0
for i in range(min(a, b),max(a, b)):
    summa = (i ** 2) + summa
print(summa)




 -End,"
 a = int(input())
b = int(input())
summa = 0
numbers = tuple(range(min(a, b),max(a, b)))
for i in numbers:
    summa = i ** 2 + summa
print(summa)    -End,"
 n = int(input())
numbers = tuple(range(1, n + 1))
numbers_1 = tuple(range(1, n + 1, 10))
numbers_234 = tuple(range(2, n + 1, 10)) + tuple(range(3, n + 1, 10)) + tuple(range(4, n + 1, 10))
numbers_121314 = (12,13,14)
word = (""корова"", ""коровы"", ""коров"")
for i in numbers:
    if i in numbers_1 and i != 11:
        print(""На лугу"", i, word[0])
    elif (i in numbers_234 and i not in numbers_121314): 
        print(""На лугу"", i, word[1])
    else:
        print(""На лугу"", i, word[2])





 -End,"
 n = tuple(range(int(input())))
x = 0
y = 1
for i in n:
    y = x + y
    x = y - x
    print(x, end = "" "")




 -End,"
 n = int(input())
row = tuple(range(2, n))
answer = ""Простое""
for i in row:
    if n % i == 0:
        answer = ""Составное""
print(answer)
     -End,"
 n  = tuple(range(1, int(input()) + 1))
for row in n:                               #цикл для строк
    for column in n:                        #цикл для колонок в данной строке
        pif = row * column
        print(pif, end=""\t"") if column != max(n) else print(pif)
       




 -End,"
 q = 0
i = 0
while i == 0:
    if q != 0:
        print(q)
    pasw = input()
    if ""qwerty"" in pasw or ""1234"" in pasw:
        print(""Слабый пароль"")
        q = 0
        continue
    if len(pasw) < 8:
        print(""Короткий пароль"")
        q = 0
        continue
    for t in range(10):
        if str(t) in pasw:
            i = 1
            break
        else:
            q = ""Пароль должен содержать цифры"" -End,"
 n = int(input())
sst = 0
for i in range(2,n+1):
    for d in range(2,int(i**(1/2))+2):
        if i % d == 0:
            sst +=  1
            break
print(n-sst)



 -End,"
 n = int(input())
num1 = int(input())
max = num1
min = num1
for i in range(n-1):
    a = int(input())
    if a >= max:
        max = a    
    elif a < min:
        min = a
while min != 0:
    max, min = min, max % min
    nod = max
answer = ""YES""    
for delit in range(2, int(nod ** 0.5) + 2):
    if nod % delit == 0 and nod != delit:
        answer = ""NO""
if nod == 1:
    answer = ""NO""
print(nod)
print(answer)
    





 -End,"
 numbers = []
while ""."" not in numbers:
    numbers.append(input())
numbers.reverse()
for i in range(1, len(numbers)):
    if int(numbers[i]) % 2 == 0:
        print(numbers[i], end="" "")


 -End,"
 n = int(input())
a = []
chet = []
nechet = []
#### Находит четные и нечетные и строим из них 2 списка.
for i in range(n):
    a.append(int(input()))
for i in a:
    if i % 2 == 0:
        chet.append(i)
    else:
        nechet.append(i)
#### Добавляем в список 0,если список получился пустой.
if len(chet) == 0:
    chet.append(0)
if len(nechet) == 0:
    nechet.append(0)
#### Находим минимум обоих списков и складываем.
sum = min(chet) + min(nechet)
#### Прибавляем сумму к элементам списка.
for i in range(n):
    if a[i] < sum:
        a[i] = a[i] + sum
#### Выводим их по одному, через пробел.
for i in range(n):
    print(a[i], end="" "")
 -End,"
 login = input()
login = login.split()
login = '_'.join(login)
print(login)




 -End,"
 ip = input().split('.')
print(*ip)
print(int(ip[0]) + int(ip[1]) + int(ip[2]) + int(ip[3]))
 -End,"
 sent = input().lower()
for i in {""."", "","", ""!"", ""?"", "":"", "";"", ""–""}:
    sent = sent.replace(i,'')
print(sent)




 -End,"
 sample = input()
n = int(input())
k = int(input())-1
sample = sample.split()  # разбиваем строку на лист с подстроками
print(*sample[k:len(sample):n])
 -End,"
 numbers = []
while True:
    num = input()
    if num == '.':
        break
    numbers.append(num)
numbers.reverse()
for numbers in numbers:
    i  = int(numbers) ** 2
    print('{}'.format(i), end="" "")
 -End,"
 log= []
while True:
    message = input()
    if message == '.':
        break
    if '@@' in message:
        log.append('ошибка')
    if '!!' in message:
        log.append('предупреждение')
    if '//' in message:
        log.append('информация')
    if '**' in message:
        log.append('подробное сообщение')
print(*log, sep='\n')




 -End,"
 data = []
while True:
    message = input()
    if message == '.':
        break    
    command = message.split()
    if 'POST' in command:
        command.remove('POST')
        data.append(command)
    if 'GET' in command:
        print(*data[-1])
    if 'DELETE' in command: 
        data.pop()
for i in data:
    print(*i, end=' ')
 -End,"
 numbers = input().split()
if int(numbers[0]) + int(numbers[1]) == int(numbers[2]):
    print(numbers[0], '+', numbers[1], '=', numbers[2])
elif int(numbers[0]) - int(numbers[1]) == int(numbers[2]):
    print(numbers[0], '-', numbers[1], '=', numbers[2])
elif int(numbers[0]) * int(numbers[1]) == int(numbers[2]):
    print(numbers[0], '*', numbers[1], '=', numbers[2])
elif int(numbers[0]) / int(numbers[1]) == int(numbers[2]):
    print(numbers[0], '/', numbers[1], '=', numbers[2])
else:
    print('Error')

 -End,"
 string = input()
do  = len(string)
string = (string.strip())
posle = len(string)
print(string)
print(do - posle)
 -End,"
 ns = []
s = input()
for i in s:
    if i in s:
        ns.append(i)
        s = s.replace(i,'')
print(''.join(ns))        
 -End,"
 row = input().split(', ')   # Разбиваем строку в список подстрок.
numbers = []
for i in row:
    numbers.append(int(i))  # Делаем из подстрок список цифр.  

sum = 0
for i in range(len(numbers)):
    if numbers[i] == min(numbers):
        sum += i

print(sum)



 -End,"
 out = []
while True:
    string = input()
    if string == string.upper() or string == string.lower():
        break
    out.append(string.swapcase())
print('\n'.join(out))    
 -End,"
 string = input()
string = list(string)
summ = 0
for i in range(len(string)):
    if string[i].isdigit() and int(string[i]) != 9:
        string[i] = str(int(string[i]) + 1)
        summ = int(string[i]) + summ
    elif string[i].isdigit() and int(string[i]) == 9:
        string[i] = str(0)
        summ = int(string[i]) + summ
print(''.join(string))
print(summ)
 -End,"
 num = [int(x) for x in input().split(', ')]
print(num.count(max(num)))
 -End,"
 raw =[int(n) for n in input().split(', ')] # Разбиваем вводимую строку на список с числами.
raw.sort(key=abs)                          # Сортируем по модулю числа.
print(*raw[-2:])                            # Выводим 2 последних числа нашего списка.



 -End,"
 nums = [int(i) for i in input().split(', ')]   # строку в список
nums.sort()                                    # сортируем
s = int(input())
k = 0
for i in range(len(nums)):                     # Перебираем список и считаем количество повторов серий   
    if nums[i] in nums[(i+1):]:
        k = k + 1

print(len(nums) - k)                           # Из длины списка отнимаем повторы. Выводим.  

for i in range(len(nums)):                     # Перебираем список и ищем следующую серию после s. Выводим её.   
    if nums[i] > s:
        print(nums[i])
        break   
 -End,"
 p = int(input())
f = []
for i in range(p):    
    a = (input().replace(',','')).split(' ')
    r = [int(a[x]) for x in range(len(a)) if a[x].isdigit()]
    f.append(a[a.index(str(min(r))) - 1])
print(*f, sep=', ')    
 -End,"
 cond = [int(c) for c in input().split(' ')]
contain = [int(c) for c in input().split(', ')]
for h in range(cond[0]):
    contain = [c*2 for c in contain if c*2 <= cond[1]]
print(len(contain))
 -End,"
 answers = ['Константная', 'O(1)', 'Линейная', 'O(n)', 'Квадратичная', 'O(n^2)', 'Кубическая', 'O(n^3)', 'Логарифмическая', 'O(log n)']
while True:
    a = input()
    if a == ""Я запомнил"":
        print('Молодец, Вася!')
        break
    for i in range(10):
        if a == answers[i]:
            print(answers[i+1])
 -End,"
 n = int(input())
row=[]                                        # оригинальный список цифр
for_max = []                                  # список для нахождения максимального из сортированных чисел                      
for i in range(n):
    x = input()
    row.append(int(x))                        # добавляем в оригинальный список цифр
    abs = [int(g) for g in x if g.isdigit()]  # разбиваем строчную цифру на отдельные числа  
    abs.sort(reverse = True)                  # сортируем от большего к меньшему      
    abs = [str(g) for g in abs]               # список из чисел ввиде подстрок
    abs = int(''.join(abs))                   # объединяем в строку и переводим в число
    for_max.append(abs)                       # добавляем в список для нахождения максимального
    
ind = for_max.index(max(for_max))             # находим индекс максимального 
print(row[ind])                               # выводим из оригинального списка цифр, соответсвующую. 
 -End,"
 def check_variable(v):
    if v[0].isdigit():
        answer = 'Нельзя использовать'
        return answer
    for i in range(len(v)):       
        if v[i].isdigit() or v[i].isalpha() or v[i] == '_':
            answer = 'Можно использовать'
        else:
            answer = 'Нельзя использовать'
            break
    return(answer)        
    
while True:
    password = input()
    if password == 'Поработали, и хватит':
        break
    else:
        print(check_variable(password))
 -End,"
 def get_winner(a,b,c,d=0,e=0):
    money = [a,b,c,d,e]
    ind = money.index(max(money))
    print(['Первый','Второй','Третий','Четвертый','Пятый'][ind])

dep = [int(i) for i in input().split()]
get_winner(*dep)

 -End,"
 def visokos(y):
    if (y % 4 == 0) and (y % 100 != 0) or (y % 400 == 0):        
        return True
    else:
        return False
    

def check_date(d=0, m=0, y=0):
    if m > 12 or m < 0:
        answer = 'Некорректная'
        return(answer)
    elif m in [4, 6 ,9 ,11] and d > 30:
        answer = 'Некорректная'
        return(answer)
    elif m == 2 and visokos(y) == False and d > 28:
        answer = 'Некорректная'
        return(answer)
    elif m == 2 and visokos(y) == True and d > 29:
        answer = 'Некорректная'
        return(answer)
    elif d > 31:
        answer = 'Некорректная'
        return(answer)
    else:
        answer = 'Корректная'
        return(answer)    
    
cor = 0
while True:    
    string = input()
    if string == '.':
        print(cor)
        break
    date = [int(i) for i in string.split('.')]
    if check_date(*date) == 'Корректная':
        cor += 1        
        print('Корректная')
    else:    
        print('Некорректная')

 -End,"
 def summa(string):      
    num = [int(i) for i in list(string)]
    return (sum(num))   
    
row = [i for i in input().split(' ')]
sum_row = []
for string in row:
    sum_row.append(summa(string))

# Bubble sort в моем исполнении :)
for j in range(len(sum_row) - 1):
    for i in range(len(sum_row) - 1):
        while sum_row[i] > sum_row[i + 1]:
            sum_row[i], sum_row[i + 1] = sum_row[i + 1], sum_row[i]
            row[i], row[i + 1] = row[i + 1], row[i]       
        
print(*row)
 -End,"
 def get_length(obj):
    if len(obj) == 1:
        return 1
    return get_length(obj[1:]) + 1
 -End,"
 book = {}
while True:
    i = input()
    if i == '.':
        break
    i = i.split(' ')
    if len(i) > 1:
        book.update({i[0]: i[1]})
    else:
        print(book.get(i[0]))
 -End,"
 book = {}
while True:
    i = input()
    if i == '.':
        break
    i = i.split(' – ')
    book.update({i[0]: i[1]})
m = int(input())
for i in range(m):
    print(book.get(input(), 'Не найдено'))
 -End,"
 s = input().lower()
for i in ("","", ""."", ""?"", ""!""):
    s = s.replace(i ,'')
s = s.split(' ')

book = {}

for i in s:
    book.update({i : s.count(i)})
    
    
for k in book.keys():
    if book.get(k) == max(book.values()):
        print(k, max(book.values()))
 -End,"
 book = {}
while True:
    i = input()
    if i == '.':
        break
    i = (i.replace(',', '')).split(' ')

        
    if len(i) == 1 and i[0] in book.keys():
        print(*book.get(i[0]),sep=', ')
    elif len(i) == 1 and i[0] not in book.keys():
        print(""Не найдено"")    
    elif i[0] in book.keys():
        book[i[0]].extend(i[1:]) 
    else:     
        book.update({i[0] : i[1:]})
        

 -End,"
 def letter_to_morse(s):
    morse_word = []
    s = s.split()
    for word in s:        
        list(word)
        word_m = []
        for i in range(len(word)):                        
            word_m.append(book.get(word[i]))
        word_m = ' '.join(word_m)        
        morse_word.append(word_m)
    return('	'.join(morse_word))
     
    

def morse_to_letter(s):
    morse_word = []
    s = s.split('	')
    for word in s:
        word = word.split(' ')
        word_m = []
        for i in range(len(word)):                    
            for key, value in book.items():
                if value == word[i]:
                    word_m.append(key)
        word_m = ''.join(word_m)            
        morse_word.append(word_m)            
    return(' '.join(morse_word))        



book = {'a' : '•—','b' : '—•••','c' : '—•—•','d' : '—••','e' : '•', 'f' : '••—•','g' : '——•','h' : '••••',
        'i' : '••','j' : '•———','k' : '—•—','l' : '•—••','m' : '——','n' : '—•','o' : '———',
        'p' : '•——•','q' : '——•—','r' : '•—•','s' : '•••','t' : '—','u' : '••—','v' : '•••—',
       'w' : '•——','x' : '—••—','y' : '—•——','z' : '——••'}

sw = input().lower()
if sw[0].isalpha():    
    print(letter_to_morse(sw))
else:
    print(morse_to_letter(sw))
 -End,"
 book = {}
while True:
    i = input()
    if i == '.':
        break
    i = i.split(': ')
    book.update({i[0]: i[1]})
while True:
    i = input()
    if i == '.':
        break
        
    for k, v in book.items():
        if k == i:
            print(book[k])            
        elif book[k] == i:
            print(k)
    
    if i not in book.keys() and i not in book.values():
        print('Нет данных')





 -End,"
 d = {}
stuff = input().split(', ')
ini_price = int(input())

for i in iter(stuff):
    d[i] = ini_price

names = input().split(', ')

summary = {}
for i in iter(input, 'Аукцион закончен!' ):
    i = i.split(' ')
    if i[0] not in names:
        continue
    else:
        item = ' '.join(i[1:-1])
        if int(i[-1]) > d[item]:
            d.update({item : int(i[-1])})
            summary.update({ item : (i[0] + ' ' + i[-1])})
for k in d.keys():
    if k in summary:
        print(k, summary[k])
    else:
        print(k, 'Предложений не было')

 -End,"
 # put your python code here
for c in iter(input,'End'):
    print('Processing ""{}"" command...'.format(c))
print('Good bye!')    




 -End,"
 n = int(input())
row = []
for i in range(n):    
    row.append( [[int(i) for i in input().split()],[int(i) for i in input().split()]])

max = 0

for i in range(n):    
    sov = set(row[i][0]).intersection(row[i][1]) 
    p = len(sov)/len(row[i][0])
    if p > max:
        max = p
        award = i + 1
print(award)    




 -End,"
 # put your python code here
fig = input()
a = float(input())
if fig == 'круг':    
    S = 3.14 * a**2
else:    
    b = float(input())
    if fig == 'прямоугольник':
        S = a * b
    elif fig == 'треугольник':
        c = float(input())
        p = (a + b + c) / 2
        S = (p * (p-a) * (p-b) * (p-c)) ** 0.5
    else:
        S = 'Неведомая фигура'
print(S) -End,"
 # put your python code here
s = input().lower().split()
d = {}
for key in s: d[key] = s.count(key)
for key, value in d.items(): print(key, value) -End,"
 s, n = [i for i in input().split()], input()
if n not in s:  r = ['None']
else:  r = [ i for i in range(len(s)) if s[i] == n ]
print(*r)   -End,"
 class ExtendedStack(list):
    def get(self):
        # читаем числа
        if len(self) > 1:
            self.top1 = self.pop()
            self.top2 = self.pop()
            return True
        else:   
            return False

    def sum(self):
        # операция сложения
        if self.get(): self.append(self.top1 + self.top2)

    def sub(self):
        # операция вычитания
        if self.get(): self.append(self.top1 - self.top2)

    def mul(self):
        # операция умножения
        if self.get(): self.append(self.top1 * self.top2)

    def div(self):
        # операция целочисленного деления
        if self.get() and self.top2!=0: self.append(self.top1 // self.top2) -End,"
 import collections
d = collections.Counter(input().lower().split())
[print(word, numbers) for word, numbers in d.items()] -End,"
 # Используя модуль re работы с регулярными выражениями (попробуйте сделать так, чтобы пробелы в начале и конце строки обрабатывались правильно).
import re
print(re.sub(r'\s+', '_', re.sub(""^\s+|\s+$"", """", input()))) -End,"
 class multifilter:
    def judge_any(pos, neg):
        return pos > 0

    def judge_half(pos, neg):
        return pos >= neg

    def judge_all(pos, neg):
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        for x in self.iterable:
            # Если у вас есть конкретный элемент, для которого нужно посчитать значения всех функций
            # из какого-то списка (как в нашем случае), то здесь тоже можно использовать
            # генерацию списков:
            # x - элемент, для которого считаем значения
            # functions - список функций
            # тогда список всех значений генерируется следующим образом:
            res = [f(x) for f in self.funcs]
            #дальше остается посчитать, сколько раз встречаются нужные значения - не заводить счетчики,
            # а воспользоваться методом count() для списка.
            if self.judge(res.count(True),res.count(False)): yield x -End,"
 def S3(a):
    p = 3 * a / 2
    return (p * (p - a) ** 3) ** 0.5

a = float(input())
S = 6 * (S3(a) + S3(a/2)) + 3*a**2
print(round(S)) -End,"
 def sum2(a,b):
    t_a, t_b = False, False
    #typ = ['int','float','complex']
    typ = ['int', 'float']
    if type(a).__name__ in typ: t_a = True
    if type(b).__name__ in typ: t_b = True
    if not t_a and not t_b:
        return 'all arguments are not a numbers'
    elif not t_a and t_b:
        return '1st argument is not a number'
    elif t_a and not t_b:
        return '2nd argument is not a number'
    else:
        return a + b -End,"
 def factorial(n):
    f = 1
    while n:
        f *= n
        n -= 1
    return f

def sf(n):
    f = 1
    while n:
        f *= factorial(n)
        n -= 1
    return f -End,"
 n, m = map(int, input().split())
tm = list(zip(*[map(int, input().split()) for _ in range(n)]))
for i in range(m): print(*tm[i]) -End,"
 a, b = [*input().strip().lower()], [*input().strip().lower()]
print(sorted(a) == sorted(b)) -End,"
 r = input().strip()
d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000,
     'IV': 4, 'IX': 9, 'XL': 40, 'XC': 90, 'CD': 400, 'CM': 900}
d2 = ['IV', 'IX', 'XL', 'XC', 'CD', 'CM']
n = 0
while r:
    if len(r) > 1:
        key = r[:2]
        if key not in d2: key = r[:1]
    else:
        key = r[:1]
    if key in d.keys(): n += d[key]
    r = r[len(key):]
print(n) -End,"
 m = [*map(int,list(input().rjust(4,'0')[::-1]))]
d = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}
r = ''
for p in range(3,-1,-1):
    e = 1
    for j in range(p): e *= 10
    if m[p]*e in d.keys():           r += d[m[p]*e]
    elif m[p] < 5:
        for i in range(m[p]):        r += d[e]
    elif m[p] > 5:
        r += d[5*e]
        for i in range(m[p]-5):      r += d[e]
print(r) -End,"
 import re
import sys

for line in sys.stdin:
    line = line.strip()
    for x in line:
        if re.search(r""\w"",x):
            for i in range(1000,1,-1):
                line = line.replace(x*i, x)
    print(line) -End,"
 import requests
import re

str_a = input()
str_b = input()
yes = False
ptn = r""(?<=href=[\""\']).+(?=[\""\']\>)""
for url in re.findall(ptn, requests.get(str_a).text, flags=re.MULTILINE):
    if str_b in re.findall(ptn, requests.get(url).text, flags=re.MULTILINE):
        yes = True
        break
print(""Yes"" if yes else ""No"") -End,"
 import requests
import re

res = requests.get(input().strip()).text
site = set()
sts = re.findall(r""<a[^>]*?(?<=href=[\""\'])(\w.*?)(?=[\""\'])[^\>]*?>"", res, flags=re.MULTILINE)
for adr in sts:
    if adr.find(r""//"") > 0 and adr[-1] != '/': adr += '/'
    links = re.search(r""(?<=//)(\b.*?)(?=[/: ])"", adr)
    if links: adr = links[0] 
    if re.search(r""[^\w\-\.]"", adr): continue
    site.add(adr)
print(*sorted(site),sep='\n') -End,"
 import json

kids = set()

def find_child(parent, kids, clr_set=False):
    if clr_set:
        kids = set()
        kids.add(parent)
    for c in child[parent]:
        kids.add(c)
        kids = find_child(c, kids)
    return kids

json_str = json.loads(input())
child = {}
for js in json_str:
    if js['name'] not in child: child[js['name']] = []
    for jp in js['parents']:
        if jp not in child: child[jp] = []
        child[jp].append(js['name'])
for key in sorted(child.keys()):
    kids = find_child(key, kids, clr_set=True)
    print(key, ':', len(kids)) -End,"
 import json

kids = set()

def find_child(parent, clr_set=False):
    global kids
    if clr_set: kids = set()
    kids.add(parent)
    for c in child[parent]: 
        kids = find_child(c)
    return kids

child = {}
for js in json.loads(input()):
    if js['name'] not in child: child[js['name']] = []
    for jp in js['parents']:
        if jp not in child: child[jp] = []
        child[jp].append(js['name'])
for key in sorted(child.keys()):
    print(key, ':', len(find_child(key, True))) -End,"
 import xml.etree.ElementTree as ET

cubes = dict.fromkeys([""blue"", ""red"", ""green""], 0)

def children(root,level):
    cubes[root.attrib['color']] += level
    for child in root: children(child, level+1)

root = ET.fromstring(input().strip())
children(root, 1)
[print(val, end=' ') for key, val in sorted(cubes.items(), reverse=True)] -End,"
 from lxml import etree
import requests
import re

root = etree.fromstring(requests.get(input().strip()).text, etree.HTMLParser())
site = set()
urls = [element.attrib['href'] for element in root.iter(""a"") if 'href' in element.attrib]
for adr in urls:
    if adr.find(r""//"") > 0 and adr[-1] != '/': adr += '/'
    links = re.search(r""(?<=//)(\b.*?)(?=[/: ])"", adr)
    if links: adr = links[0] 
    if re.search(r""[^\w\-\.]"", adr): continue
    site.add(adr)
print(*sorted(site),sep='\n') -End,"
 def even_indeces(lst):
    return [elem for i, elem in enumerate(lst) if not i%2] -End,"
 def donuts(n):
    return ""Всего пончиков: много"" if n > 9 else ""Всего пончиков: "" + str(n)

print(donuts(int(input()))) -End,"
 def both_ends(s):
    return """" if len(s) < 2 else s[:2]+s[-2:]

print(both_ends(input())) -End,"
 def kaprekar_step(L):
    a = int(''.join(map(str, sorted(L))))
    b = int(''.join(map(str, sorted(L,reverse=True))))
    return a-b if a>b else b-a -End,"
 prn_numbers = set()

def numerics(n):
    return list(map(int, str(n)))

def kaprekar_check(n):
    return len(str(n)) in (3, 4, 6) and n not in (100, 1000, 100000) and len(set(numerics(n))) > 1

def kaprekar_step(L):
    str_sort = ''.join(map(str, sorted(L)))
    return int(str_sort[::-1])-int(str_sort)

def kaprekar_loop(n):
    global prn_numbers
    if n not in prn_numbers: prn_numbers.add(n)
    if kaprekar_check(n):
        print(n)
        if n not in {495, 6174, 549945, 631764}:
            next_kaprekar = kaprekar_step(numerics(n))
            if next_kaprekar in prn_numbers:
                print(""Следующее число - {}, кажется процесс зациклился..."".format(next_kaprekar))
            else:
                kaprekar_loop(next_kaprekar)
    else:
        print(""Ошибка! На вход подано число {}, не удовлетворяющее условиям процесса Капрекара"".format(n)) -End,"
 def fi(L0, L1, n):
    for i in range(2,n+1):
        L0, L1 = L1, L0+L1
    return Decimal(L1) / Decimal(L0) -End,"
 def luka(n):
    L0, L1 = 2, 1
    for i in range(n):
        L0, L1 = L1, L0 + L1
    return L0

def L6n(n):
    n //= 6
    Ln = super_L(n)
    return Ln ** 6 - 6 * (-1) ** n * Ln ** 4 + 9 * Ln ** 2 - 2 * (-1) ** n

def L5n(n):
    n //= 5
    Ln = super_L(n)
    return Ln ** 5 - 5 * (-1) ** n * Ln ** 3 + 5 * Ln

def L4n(n):
    n //= 4
    Ln = super_L(n)
    return Ln ** 4 - 4 * (-1) ** n * Ln ** 2 + 2

def L3n(n):
    n //= 3
    Ln = super_L(n)
    return Ln ** 3 - 3 * (-1) ** n * Ln

def L2n(n):
    n //= 2
    Ln = super_L(n)
    return Ln ** 2 - 2 * (-1) ** n

def super_L(n):
    if n < 2:
        return luka(n)
    elif not n % 6:
        return L6n(n)
    elif not n % 5:
        return L5n(n)
    elif not n % 4:
        return L4n(n)
    elif not n % 3:
        return L3n(n)
    elif not n % 2:
        return L2n(n)
    else:
        return luka(n) -End,"
 def kaprekar(n):
    str_kv = str(n**2)
    for i in range(1, len(str_kv)):
        if int(str_kv[i:]) and int(str_kv[:i]) + int(str_kv[i:]) == n:
            return True
    else:
        return False -End,"
 def convert(num, to_base=10, from_base=10):
    abc = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    num = str(num).upper()
    B10 = int(num, base=from_base)
    TBS = ''
    while B10:
        B10, ost = divmod(B10, to_base)
        TBS = abc[int(ost)] + TBS
    return TBS -End,"
 def convert(num, to_base=10, from_base=10):
    abc = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    B10 = int(str(num).upper(), base=from_base)
    TBS = ''
    while B10:
        B10, ost = divmod(B10, to_base)
        TBS = abc[int(ost)] + TBS
    return TBS

def kaprekar(n, base=10):
    n_dcml = int(convert(n, to_base=10, from_base=base))
    str_kv = convert(n_dcml**2, to_base=base, from_base=10)
    for i in range(1, len(str_kv)):
        DRL = convert(str_kv[:i], to_base=10, from_base=base)
        DNR = convert(str_kv[i:], to_base=10, from_base=base)
        if len(DRL) and len(DNR) and int(DNR) and int(DRL) + int(DNR) == n_dcml:
            return True
    else:
        return False -End,"
 def front_back(a, b):
    half_a = (len(a)+1)//2
    half_b = (len(b)+1)//2
    return a[:half_a] + b[:half_b] + a[half_a:] + b[half_b:] -End,"
 from collections import defaultdict

def mimic_dict(string):
    string = string.split()
    mdict = defaultdict(list)
    key = """"
    for word in string:
        mdict[key].append(word)
        key = word
    return mdict -End,"
 def print_mimic(mimic_dict, word):
    out_str = []
    while len(out_str) < 200:
        if len(word): out_str.append(word)
        if word in mimic_dict.keys():
            word = random.choice(mimic_dict[word])
        else:
            word = ''
    return ' '.join(out_str) -End,"
 import numpy as np

n = int(input())
m = list(map(int, input().split()))
Z = np.arange(n).reshape(m[0], m[1]) -End,"
 import numpy as np

print(list(x for x in Z.flatten() if x > 3)) -End,"
 Z = np.sum(A*B) -End,"
 Z = A.dot(B) if A.shape[1] == B.shape[0] else 'Упс! Что-то пошло не так...' -End,"
 import numpy as np

n, m = list(map(int, input().split()))
k = int(input())
Z = np.zeros((n,m)) + np.arange(k,k+m) -End,"
 import numpy as np

n, m = list(map(int, input().split()))
k = int(input())
Z = np.reshape(np.array([x for x in np.arange(k, k+n) for _ in np.arange(m)], dtype=float),(n,m)) -End,"
 print(df.loc[df.index[[0, 2, 3]]]) -End,"
 print(df.loc[df.index[[0, 2, 3]], ['name','age']]) -End,"
 print(np.sum(df['age'].fillna(0))) -End,"
 df[column] = df[column].map({'yes': True, '1': True, 1: True, 'no': False, '0': False, 0: False})
print(df) -End,"
 with open('text.txt','r') as inf:
    for line in inf:
        print(line.strip()) -End,"
 import numpy as np

n = int(input())
x_y = [list(map(float, input().split())) for _ in range(n)]
M = np.array([[x[0]**i for i in range(n)] for x in x_y])    # Матрица (левая часть системы)
v = np.array([y[1] for y in x_y])                           # Вектор (правая часть системы)
if abs(np.linalg.det(M)) > 0:
    print(*np.linalg.solve(M, v))
else:
    print(""сингулярная матрица"") -End,"
 s = list(map(int, input().split()))
if len(s) < 2:
    print('Ошибка. Кучек слишком мало, чтобы можно было решить задачу.')
elif sum(s)%2 and not len(s)%2 or len(s)==2 and s[0] != s[1]:
    print('Кучки нельзя уравнять')
else:
    print('Кучки можно уравнять') -End,"
 prms = list(map(int, input().split()))
nums = len(prms)
summ = sum(prms)
if nums < 2:
    print('Ошибка. Кучек слишком мало, чтобы можно было решить задачу.')
elif summ % 2 and not nums % 2 or nums == 2 and prms[0] != prms[1]:
    print('Кучки нельзя уравнять')
else:
    # print('Кучки можно уравнять')
    cntr = 0
    while not (summ >= max(prms) * nums and not summ % nums):
        summ += 2
        cntr += 1
    print(cntr, summ // nums) -End,"
 import numpy as np

n, m = map(int, input().split())
Z = np.zeros((m, n), dtype=str)
Z[0::2, 1::2] = 'B'
Z[1::2, 0::2] = 'B'
Z[0::2, 0::2] = '0'
Z[1::2, 1::2] = '0'
Z[0,-1] = 'X'
Z[-1,0] = 'X'
if np.sum(np.char.count(Z, 'B')) == np.sum(np.char.count(Z, '0')):
    print('Замостить можно')
else:
    print('Замостить нельзя') -End,"
 fst, ost = divmod(int(input()),9)
print(int(str(ost)+'9'*fst)) -End,"
 def parity(snake):
    pair = 0
    for i in range(len(snake)):
        x = snake[i]
        for y in snake[i+1:]:
            if x > y:
                pair +=1
    return -1 if pair % 2 else 1

bingo = [1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 15, 14, 13]
snake = []
for _ in range(4):
    snake += list(map(int, input().split()))
print(""Бинго!"" if parity(snake) == parity(bingo) else ""Не повезло..."") -End,"
 def parity(snake):
    pair = 0
    for i in range(len(snake)):
        x = snake[i]
        for y in snake[i+1:]:
            if x > y:
                pair +=1
    return -1 if pair % 2 else 1

n, m = map(int, input().split())
sorts = [i for i in range(1,n*m)]
bingo = []
for i in range(n):
    tmp = sorts[m*i:m*(i+1)]
    if i%2: tmp = tmp[::-1]
    bingo += tmp
snake = []
for _ in range(n):
    snake += list(map(int, input().split()))
print(""Бинго!"" if parity(snake) == parity(bingo) else ""Не повезло..."") -End,"
 class animal():
    def __init__(self, name):
        self.name = name

    def echo(self, name):
        print(name.upper())
        print(name)
        print(name.lower()) -End,"
 def caesar(text, key):
    alfabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    zcaesar = ''
    for x in text.upper():
        if x in alfabet:
            zcaesar += alfabet[(alfabet.find(x) + key) % len(alfabet)]
    return zcaesar -End,"
 def caesar(text, key, alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'):
    zcaesar = ''
    for x in text.upper():
        if x in alphabet:
            zcaesar += alphabet[(alphabet.find(x) + key) % len(alphabet)]
    return zcaesar -End,"
 def caesar(text, key, alphabet='ABCDEFGHIJKLMNOPQRSTUVWXYZ'):
    zcaesar = ''
    for x in text.upper():
        if x in alphabet:
            zcaesar += alphabet[(alphabet.find(x) + key) % len(alphabet)]
    return zcaesar


def bruteforce(text, alphabet='ABCDEFGHIJKLMNOPQRSTUVWXYZ'):
    for key in range(1, len(alphabet)):
        print(caesar(text, -key, alphabet)) -End,"
 def jarriquez_encryption(text, key, alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', reverse = False):
    jarriquez = ''
    num_key = 0
    for x in text.upper():
        if x in alphabet:
            key_n = int(str(key)[num_key])
            if reverse: key_n *= -1
            jarriquez += alphabet[(alphabet.find(x) + key_n) % len(alphabet)]
            num_key = num_key + 1 if num_key < len(str(key))-1 else 0
    return jarriquez -End,"
 def disc_generator(alphabet):
    lst_alf = list(alphabet)
    random.shuffle(lst_alf)
    return ''.join(lst_alf) -End,"
 def disc_generator(alphabet):
    lst_alf = list(alphabet)
    random.shuffle(lst_alf)
    return ''.join(lst_alf)

discs = [disc_generator(clear_alphabet) for _ in range(n)]

def jefferson_encryption(text, discs, step, reverse=False):
    jefferson = ''
    num_disc = 0
    if reverse: step *= -1
    for x in text.upper():
        if x in discs[num_disc]:
            alphabet = discs[num_disc]
            jefferson += alphabet[(alphabet.find(x) + step) % len(alphabet)]
            num_disc = num_disc + 1 if num_disc < len(discs) - 1 else 0
    return jefferson -End,"
 def kidds_encryption(text, reverse=False):
    alf_out = '8;4‡)*56(1†092:3?¶-.'
    alf_in = 'ethosnairfdlmbyguvcp'
    kidds = ''
    for x in text.lower():
        if reverse:
            if x in alf_out:
                kidds += alf_in[(alf_out.find(x))]
        else:
            if x in alf_in:
                kidds += alf_out[(alf_in.find(x))]
    return kidds -End,"
 n=int(input())
print(n,'программист'+('ов' if n%10==0 or 4<n%10<10 or 10<n%100<15 else 'а' if 1<n%10<5 else '')) -End,"
 a=input()
print('Счастливый' if int(a[0])+int(a[1])+int(a[2])==int(a[3])+int(a[4])+int(a[5]) else 'Обычный') -End,"
 s=input()
i=0
j=0
while i+j<len(s):
  j+=i
  i=0
  while i+j<len(s) and s[i+j]==s[j]:
    i+=1
  print (s[j]+str(i),sep='',end='') -End,"
 s=input()
j=1
for i in range(0,len(s)):
    if i<len(s)-1 and s[i]==s[i+1]:
        j+=1
    else:
        print (s[i]+str(j),end='')
        j=1 -End,"
 print (sum(int (i) for i in input().split())) -End,"
 s=[int(s) for s in input().split()]*2
for i in range(int(len(s)/2)):
    print(s[i+1]+s[int(len(s)/2)-1+i], end=' ') if len(s)!=2 else print(s[0]) -End,"
 s=sorted([int(s) for s in input().split()])
s+=['','']
for i in range(len(s)):
    print(s[i], end=' ') if i+2<len(s) and s[i]==s[i+1] and s[i]!=s[i+2] else '' -End,"
 lst=[int(lst) for lst in input().split()]
x=int(input())
[print(i, end=' ') for i in range(len(lst)) if lst[i]==x]
print ('Отсутствует') if lst.count(x)==0 else '' -End,"
 m=[]
i=0
while 1:
    j=input().split()
    if j[0]=='end':
        break
    m.append([int(j) for j in j])
    i+=1
l=i
for i in range(i):
    for j in range(int(len(m[0]))):
        p=m[i-1][j]+m[i+1-l][j]+m[i][j-1]+m[i][j+1-len(m[0])]
        print(p,end=' ')
    print() if i!=l else '' -End,"
 a,n,i,j=0,int(input()),0,0
l=[[0 for w in range(n)] for h in range(n)]
while a<n**2:
    a+=1
    l[i][j]=a
    if 0<=j-1<n and l[i][j-1]==0 and 0<=i-1<n and l[i-1][j]==0:
        j-=1
    elif 0<=i-1<n and l[i-1][j]==0 and 0<=j+1<n and l[i][j+1]==0:
        i-=1
    elif 0<=j+1<n and l[i][j+1]==0:
        j+=1
    elif 0<=i+1<n and l[i+1][j]==0:
        i+=1
    elif 0<=j-1<n and l[i][j-1]==0:
        j-=1
    elif 0<=i-1<n and l[i-1][j]==0:
        i-=1
for i in range(n):
    for j in range(n):
        print(l[i][j],end=' ')
    print() if i!=l else '' -End,"
 s=input().lower().split()
for i in set(s):
    print(i,s.count(i)) -End,"
 a,b,c=int(input ()),int(input ()),int(input ())
if a<b: a,b=b,a
if a<c: a,c=c,a
if b<c: c,b=b,c
print (a,c,b,sep='\n') -End,"
 d={}
for i in range(int(input())):
    s=input().split(';')

    if s[0] not in d: d.setdefault(s[0],[0,0,0,0,0])
    if s[2] not in d: d.setdefault(s[2],[0,0,0,0,0])

    d[s[0]][0]+=1
    d[s[2]][0]+=1

    if s[1]>s[3]:
        d[s[0]][1]+=1
        d[s[2]][3]+=1
        d[s[0]][4]+=3
    if s[1]==s[3]:
        d[s[0]][2]+=1
        d[s[2]][2]+=1
        d[s[0]][4]+=1
        d[s[2]][4]+=1
    if s[1]<s[3]:
        d[s[0]][3]+=1
        d[s[2]][1]+=1
        d[s[2]][4]+=3

for i in d:
    print(i+':',end='')
    print(*d[i]) -End,"
 o,k,l,s=input(),input(),input(),input()
l=[k[o.find(l[i])] for i in range(len(l))]
s=[o[k.find(s[i])] for i in range(len(s))]
print(*l, sep='')
print(*s, sep='') -End,"
 o,k=input(),input()
print(*[k[o.find(i)] for i in input()],sep='')
print(*[o[k.find(i)] for i in input()],sep='') -End,"
 l,s=set(),{(input().lower()) for i in range(int(input()))}
[[l.add(i) for i in input().lower().split(' ') if i not in s] for j in range(int(input()))]
print(*l,sep='\n') -End,"
 def closest_mod_5(x):
    return x if x % 5 == 0 else (x//5+1)*5 -End,"
 d,l={'global':[]},[input().split() for i in range(int(input()))]
def get_ns(k,j):
    if k not in d:
        print(None)
    elif j in d[k]:
        print(k)
    else:
        if [get_ns(n,j) for n in d if k in d[n]]==[]: print(None)
for i in l:
    if i[0]=='create':
        d[i[1]]=[]
        d[i[2]]+=[i[1]]
    if i[0]=='add':
        if i[1] in d:
            d[i[1]]+=[i[2]]
        else:
            d.setdefault(i[1],[i[2]])
    if i[0]=='get': get_ns(i[1],i[2]) -End,"
 class Buffer:
    def __init__(self):
        self.b=[]
    def add(self, *a):
        self.b+=a
        while len(self.b)>=5:
            print(sum(self.b[:5]))
            del self.b[:5]
    def get_current_part(self):
        return self.b -End,"
 l=[input().split(' : ') for i in range(int(input()))]
d={i[0]:i[1].split() if len(i)>1 else [''] for i in l}
def f(a):
    k,j=a.split()
    if k==j: return 1
    for i in d[j]:
        if k==i or (i!='' and f(k+' '+i)==1): return 1
[print('Yes') if f(input())==1 else print('No') for i in range(int(input()))] -End,"
 try: foo()
except (ZeroDivisionError, AssertionError) as e: print(str(type(e))[8:-2])
except ArithmeticError: print('ArithmeticError') -End,"
 try: foo()
except (ZeroDivisionError, AssertionError, ArithmeticError ) as e:
    if isinstance(e, ZeroDivisionError): print('ZeroDivisionError')
    elif isinstance(e, ArithmeticError): print('ArithmeticError')
    elif isinstance(e, AssertionError): print('AssertionError') -End,"
 from datetime import *
print(*[int(i) for i in str((date(*[int(i) for i in input().split()])+timedelta(int(input())))).split('-')]) -End,"
 class multifilter:
    def judge_half(l): return l.count(True)>=l.count(False)
    def judge_any(l): return True in l
    def judge_all(l): return False not in l
    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable=iterable
        self.judge=judge
        self.funcs=funcs
        self.n=-1
    def __iter__(self): return self
    def __next__(self):
        self.n+=1
        if self.n<len(self.iterable):
            if self.judge([f(self.iterable[self.n]) for f in self.funcs]):
                return self.iterable[self.n]
            else: return self.__next__()
        else: raise StopIteration -End,"
 def primes(): return [i for i in range(2,10001) if True not in [i%j==0 for j in range(2,i)]] -End,"
 s, t, n = input(), input(), 0
while t in s: s, n = s[s.find(t)+1:], n+1
print(n) -End,"
 import sys
from re import search
for line in sys.stdin:
    if search(r'(cat).*\1',line.rstrip()): print(line.rstrip()) -End,"
 import sys
from re import match, search, findall, sub
for line in sys.stdin:
    line = line.rstrip()
    if search(r'\b(\w+)\1\b',line): print(line) -End,"
 import sys
from re import match, search, findall, sub
for line in sys.stdin:
    line = line.rstrip()
    print (sub(r'human', 'computer', line)) -End,"
 import sys
from re import match, search, findall, sub
for line in sys.stdin:
    line = line.rstrip()
    print(sub(r'\b(\w)(\w)(\w*)\b', r'\2\1\3', line)) -End,"
 import sys
from re import match, search, findall, sub
for line in sys.stdin:
    line = line.rstrip()
    print(sub(r'(\w)\1+', r'\1', line)) -End,"
 import requests
import re
a, b = input(), input()
def pars_link_list(url):
    return re.findall(r'\<a.*href=\""(.*)\"".*\>.*\<\/a\>', requests.get(url).text)
print('Yes' if [i for i in pars_link_list(a) if b in pars_link_list(i)]!=[] else 'No') -End,"
 import requests
import re
s = re.findall(r'\<a.*?href\=[\""|\']\w*?\:?\/{2}(.*?)[\'|\""|\/|\:]', requests.get(input()).text)
s = list(set(s))
s.sort()
print(*s, sep='\n') -End,"
 print('_'.join(input().split())) -End,"
 import re
print(re.sub(r'\b(\s+)\b', '_', input())) -End,"
 s=input().lower().split()
[print(i, s.count(i)) for i in set(s)] -End,"
 print('{0} and {1} sat in the tree.\n{0} had fallen, {1} was stolen.\nWhat\'s remaining in the tree?'.format(input(),input())) -End,"
 a, n = ' abcdefghijklmnopqrstuvwxyz', int(input())%27
print('Result: \""{}\""'.format(''.join([(a*3)[a.find(i)+len(a)+n] for i in input().strip()]))) -End,"
 import json
d = json.loads(input())
d={i['name']:i['parents'] for i in d}
def f(c):
    n = [c]
    for i in d:
        if c in d[i]:
            n+=[i]
            n+=f(i)
    return n
k=list(d)
k.sort()
[print(i,':', len(set(f(i)))) for i in k]
 -End,"
 s,n = list(map(int, input().split())),int(input())
if [print(i,end=' ') for i in range(len(s)) if s[i]==n]==[]: print(None) -End,"
 if (lambda s, n: [print(i,end=' ') for i in range(len(s)) if s[i]==n])(input().split(),input())==[]: print(None) -End,"
 s, n, k = input().split(),input(), 0
for i in range(s.count(n)):
    k = s.index(n, k)+1
    print(k-1, end=' ')
if n not in s: print(None) -End,"
 print ((lambda x: x==-10 or -5<x<=3 or 8<x<12 or 16<=x)(int(input()))) -End,"
 print (eval(input().replace('plus','+').replace('minus','-').replace('multiply','*').replace('divide','//'))) -End,"
 d = {'mile':1609, 'yard':0.9144, 'foot':0.3048, 'inch':0.0254, 'km':1000, 'm': 1, 'cm':0.01, 'mm':0.001}
print ('%.2e' % (lambda s: float(s[0])*d[s[1]]/d[s[3]])(input().split())) -End,"
 print (*(lambda x: [x//60, x%60])(int(input ())), sep='\n') -End,"
 print((lambda x: 'Високосный' if x%4==0 and x%100!=0 or x%400==0 else 'Обычный')(int(input()))) -End,"
 print(['Обычный', 'Високосный'][(lambda x: x%4==0 and x%100!=0 or x%400==0)(int(input()))]) -End,"
 print ((lambda a, b, c: ((a+b+c)/2*((a+b+c)/2-a)*((a+b+c)/2-b)*((a+b+c)/2-c))**(1/2))(int(input()),int(input()),int(input()))) -End,"
 a, b, c = '('+input()+')', input(), input()
d = {'+':'+', '-':'-', '/':'/', '*':'*', 'mod':'%', 'pow':'**', 'div':'//'}
print ('Деление на 0!' if c in 'div/mod' and float(b)==0 else eval(a+d[c]+b)) -End,"
 try:
    print (eval((('({0}){2}{1}').format(input(), input(), input())
                                .replace('mod','%')
                                .replace('pow','**')
                                .replace('div','//'))))
except ZeroDivisionError:
    print('Деление на 0!') -End,"
 d = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
s = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
n = int(input())
for i in range(len(d)):
    print(d[i]*(n//s[i]), end='')
    n -= n//s[i]*s[i] -End,"
 s, n = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1], int(input())
for i in range(len(s)):
    print(['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'][i]*(n//s[i]), end='')
    n -= n//s[i]*s[i] -End,"
 d = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
s = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
n = input()
x = 0
for i in range(len(d)):
    while n.startswith(d[i]):
        x += s[i]
        n = n.partition(d[i])[2]
print(x) -End,"
 def three_n_plus_one(n):
    yield int(n)
    while n != 1:
        if n%2: n = n*3+1
        else: n /= 2
        yield int(n)
print(*list(three_n_plus_one(int(input())))) -End,"
 def three_n_plus_one(n):
    n = [n]
    while n[-1] != 1: n+=[int(n[-1]*3+1 if n[-1]%2 else n[-1]/2)]
    return n
print(*three_n_plus_one(int(input())), sep=' ') -End,"
 print('{:.2f}'.format((lambda s:s.count('A')/len(s))(input().split()))) -End,"
 s = input().split()
print('{:.2f}'.format(sum([1/len(s) for i in s if i=='A']))) -End,"
 from collections import Counter
i = input().split()
c = Counter(i)
print('{:.2f}'.format(c['A']/len(i))) -End,"
 son = int(input())
chas = int(input())
minut = int(input())
print(son // 60 + chas + (son % 60 + minut) // 60)
print((son % 60 + minut) % 60)




 -End,"
 a = float(input())
b = float(input())
c = input()
if c == '+':
    print(a + b)
if c == '-':
    print(a - b)
if c == '/':
    if b == 0:
        print('Деление на 0!')
    else:
        print(a / b)
if c == '*':
    print(a * b)
if c == 'mod':
    if b == 0:
        print('Деление на 0!')
    else:
        print(a % b)
if c == 'pow':
    print(a ** b)
if c == 'div':
    if b == 0:
        print('Деление на 0!')
    else:
        print(a // b)






 -End,"
 a = input()
if a == 'прямоугольник':
    b = float(input())
    c = float(input())
    print(b * c)
if a == 'треугольник':
    b = float(input())
    c = float(input())
    d = float(input())
    p = (b + c + d) / 2
    S = (p * (p - b) * (p - c) * (p - d)) ** .5
    print(S)
if a == 'круг':
    b = float(input())
    p = 3.14
    print(p * (b ** 2))
    



 -End,"
 a = int(input())
b = int(input())
c = int(input())
s = a + b + c;
print(max(a,b,c))
print(min(a,b,c))
print(s - max(a,b,c) - min(a,b,c)) -End,"
 a = int(input())
b = a // 1000
c = a % 1000
d = b % 10
e = b // 100
f = b % 100 // 10
g = c % 10
h = c // 100
j = c % 100 // 10
if d + e + f == g + h + j:
    print('Счастливый')
else:
    print('Обычный') -End,"
 a = int(input())
sum = 0
while(a != 0):
    sum = sum + a
    a = int(input())
print(sum)
 -End,"
 a = int(input())
b = int(input())
c = 0
k = 0
while (k == 0):
    if (c % a == 0 and c % b == 0 and c != 0):
        k +=1
        break
    c = c + 1
print(c)






 -End,"
 a = int(input())
while True:
    if a > 100:
        break
    if a < 10:
        a = int(input())
        continue
    print(a)
    a = int(input()) -End,"
 a = int(input())
b = int(input())
c = int(input())
d = int(input())
print('\t', end ='' )
for k in range (c, d + 1):
    print (k, '\t', end ='')
print()    
for i in range(a, b + 1):
    print(i, '\t', end = '')
    for j in range (c, d + 1):
        print (i * j, '\t', end = '')
    print()


     -End,"
 a = input()
print((a.upper().count('G') + a.upper().count('C')) / len(a) * 100)





 -End,"
 a = input()
b = 0
k = len(a)
for i in range(k - 1):
    if a[i] == a[i+1]:
        b = b + 1
    else:
        print(a[i], b + 1, sep = '', end='')
        b = 0
if b != 0 or b == 0:
    print(a[k-1], b + 1, sep = '',)       -End,"
 a = [int(i) for i in input().split()]
if len(a) == 1:
    print(a[0])
else:
    for i in range(len(a)):
        if i == 0:
            k = a[1] + a[len(a) - 1]
            print(k, end = ' ')
        if i != 0 and i != len(a) - 1:
            k = a[i - 1] + a[i + 1]
            print(k, end = ' ')
        if i == len(a) - 1:
            k = a[0] + a[len(a) - 2]
            print(k) -End,"
 b = []
sum2 = 0
sum1 = 0
while True:
    a = int(input())
    b = [a] + b
    sum1 = sum1 + a 
    if sum1 == 0:
        break
for x in b:
    n = x * x
    sum2 += n
print(sum2) -End,"
 a = int(input())
chislo = 2
m = [1]
m2 = []
while True:
    if len(m) > a:
        vivod = m[:a]
        for i in vivod:
            print(i, end = ' ')
        break
    while len(m2) != chislo:
        m2 += [chislo]
    m += m2
    m2 = []
    chislo += 1    -End,"
 a = [int(i) for i in input().split()]
b = int(input())
k = 0
for i in range(len(a)):
    if a[i] == b:
        print(i, end = ' ')
        k += 1
if k == 0:
    print('Отсутствует') -End,"
 #создание и заполнение массива
c = []
while True:
    b = input()
    if b == 'end':
        break
    else: 
        b = [int(i) for i in b.split()]
        c += [b]
# копирование матрицы
copy = [row[:] for row in c]
# преобразование данных копии массива
for i in range(len(c)):
    for j in range(len(c[0])):
        copy[i][j] = c[(i-1) % len(c)][j] + c[(i+1) % len(c)][j] + c[i][(j-1) % len(c[0])] + c[i][(j+1) % len(c[0])]
# вывод преобразованных данных скопированного массива
for i in range(len(copy)):
    print(*copy[i]) -End,"
 def modify_list(l):
    k = []
    for i in l:
        if i % 2 == 0:
            k += [i // 2]
    del l[:]
    for i in k:
        l += [i] -End,"
 def update_dictionary(d, key, value):
    if key in d:
        d[key] += [value]
    elif key * 2 in d:
        d[key * 2] += [value]
    else:
        d[key * 2] = [value] -End,"
 h = input()
m = h.lower().split()
k = 0
x = {}
for i in m:
    for j in m:
        if i == j:
            k += 1
    x[i] = k
    k = 0
for key, value in x.items():
    print(key, value) -End,"
 n = int(input())
k = {}
while n > 0:
    m = int(input())
    if m in k:
        print(k[m])
    else:
        k[m] = f(m)
        print(f(m))
    n -= 1 -End,"
 n = int(input())
m = 0
while n != 0:
    m += int(input())
    n -= 1
print(m) -End,"
 kol = int(input())
i = v = n = p = ochki = sch = 0
vivod = vivod1 = vivod2 = []
sttr = ''
while kol > 0:
    kom = input().split(';')
    if kom[1] > kom[3]:
        v += 1
        i += 1
        ochki += 3
        vivod += [kom[0], i,  v, n, p, ochki]
        v = ochki = 0
        p += 1
        vivod += [kom[2], i,  v, n, p, ochki]
        p = i = 0
    if kom[1] == kom[3]:
        n += 1
        ochki += 1
        i += 1
        vivod += [kom[0], i,  v, n, p, ochki]
        vivod += [kom[2], i, v, n, p, ochki]
        n = ochki = i = 0
    if kom[1] < kom[3]:
        p += 1
        i += 1
        vivod += [kom[0], i, v, n, p, ochki]
        p = 0
        v += 1
        ochki += 3
        vivod += [kom[2], i, v, n, p, ochki]
        v = ochki = i = 0
    kol -= 1
z = v = n = p = ochki = sch = 0
g = []
for i in vivod:
    if type(i) == str and i not in g:
        g += [i]
for i in range(len(g)):
    for j in range(len(vivod)):
        if g[i] == vivod[j]:
            z += vivod[j + 1]
            v += vivod[j + 2]
            n += vivod[j + 3]
            p += vivod[j + 4]
            ochki += vivod[j + 5]
    print(g[i] + ':' + str(z), v, n, p, ochki)
    z = v = n = p = ochki = sch = 0             -End,"
 a = input()
b = input()
a1 = input()
b1 = input()
k = []
k1 = []
for t in range(len(a1)):
    for i in range(len(a)):
        if a1[t] == a[i]:
            k += b[i]
            print(b[i], end='')
print()
for t in range(len(b1)):
    for i in range(len(b)):
        if b1[t] == b[i]:
            k += a[i]
            print(a[i], end='') -End,"
 a = int(input())
k = []
k1 = []
k2 = []
while a != 0:
    k += input().lower().split()
    a -= 1
b = int(input())
while b != 0:
    k1 += input().lower().split()
    b -= 1
for i in k1:
    if i not in k and i not in k2:
        k2 += [i]
        print(i) -End,"
 a = int(input())
b = []
c = [0, 0]
while a != 0:
    b = input().split()
    if b[0] == 'север':
        c[1] += int(b[1])
    if b[0] == 'юг':
        c[1] -= int(b[1])
    if b[0] == 'запад':
        c[0] -= int(b[1])
    if b[0] == 'восток':
        c[0] += int(b[1])
    a -= 1
print(c[0], c[1]) -End,"
 ans = 0
a = []
for obj in objects:
    if obj in a:
        continue
    else:
        a += [obj]
        ans += 1
print(ans) -End,"
 def closest_mod_5(x):
    y = x + 1
    while y % 5 != 0:
        y += 1
    return y




 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        
    def can_add(self, v):
        if self.capacity - v >= 0:
            return True
        else:
            return False

    def add(self, v):
        if self.can_add(v) == True:
            self.capacity -= v




 -End,"
 try:
    foo()
except ZeroDivisionError:
    print(""ZeroDivisionError"")
except ArithmeticError:
    print(""ArithmeticError"")
except AssertionError:
    print(""AssertionError"")


 -End,"
 def fib(n):
    fib1 = fib2 = 1
    if n < 2:
        return 1
    for i in range(2, n):
        fib1, fib2 = fib2, fib1 + fib2
    return fib2

def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main() -End,"
 def fib_digit(n):
    fib1 = fib2 = 1
    if n < 2:
        return 1
    for i in range(2, n):
        fib1, fib2 = fib2, (fib1 + fib2) % 10
    return fib2 


def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 from datetime import datetime, timedelta
date_string = input()
date = int(input())
ds = datetime.strptime(date_string, '%Y %m %d') + timedelta(days = date)
print(ds.strftime('%Y %-m %-d')) -End,"
 def mod_checker(x, mod=0):
    sed = lambda y: y % x == mod
    return sed -End,"
 def hg(s, g):
    a = 0
    u = len(g)
    for i in range(len(s) - u):
        if s[i:i+u] == g:
            a += 1
    if s[len(s) - u:] == g:
        a += 1
    return a
s = input()
g = input()
print(hg(s, g)) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    try:
        if int(line, 2) % 3 == 0:
            print(line)
    except:
        pass -End,"
 import pandas as pd
my_data = pd.DataFrame({'type':['A', 'A', 'B', 'B'],
        'value':[10, 14, 12, 23]})



 -End,"
 import pandas as pd    
subset_1 = my_stat[(my_stat['V1'] > 0) & (my_stat['V3'] == 'A')]
subset_2 = my_stat[(my_stat['V2'] != 10) | (my_stat['V4'] >= 1)]




 -End,"
 import pandas as pd    
import numpy as np
my_stat['V5'] = my_stat['V1'] + my_stat['V4']
my_stat['V6'] = my_stat['V2'].apply(lambda x: np.log(x))



 -End,"
 import pandas as pd    
my_stat.columns = ['session_value', 'group', 'time', 'n_users']




 -End,"
 import pandas as pd    
my_stat['session_value'] = my_stat['session_value'].fillna(0)
med_n_users = my_stat[my_stat['n_users'] >= 0]['n_users'].median()
my_stat['n_users'] = my_stat['n_users'].apply(lambda x: med_n_users if x < 0 else x)




 -End,"
 import pandas as pd
mean_session_value_data = my_stat.groupby('group', as_index=False).agg({'session_value': 'mean'}).rename(columns = {'session_value': 'mean_session_value'})




 -End,"
 a = int(input())

for i in range(a+1):
    h = str(i)
    h2 = str(i**2)
    if h == h2[-len(h):]:
        print(i, end = ' ') -End,"
 print(sorted(input().lower()) == sorted(input().lower())) -End,"
 import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import precision_score
from sklearn import tree

clf = tree.DecisionTreeClassifier()
clf.fit(X_train, y_train)
predictions = clf.predict(X_test)
precision = precision_score(y_test, predictions, average='micro') -End,"
 import pandas as pd
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
dt = tree.DecisionTreeClassifier(max_depth=5, min_samples_split=5)


 -End,"
 from sklearn import tree
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris


iris = load_iris()
X = iris.data
y = iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
dt = tree.DecisionTreeClassifier(criterion = 'entropy')
dt.fit(X_train, y_train)
predicted = dt.predict(X_test) -End,"
 import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import load_iris


iris = load_iris()
X = iris.data
y = iris.target
parameters = {'max_depth': range(1,11), 'min_samples_leaf': range(2, 11), 'min_samples_split': range(2, 11)}
search = GridSearchCV(estimator=DecisionTreeClassifier(), param_grid=parameters)
search.fit(X, y)
best_tree = search.best_estimator_  -End,"
 import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import RandomizedSearchCV
from sklearn.datasets import load_iris


iris = load_iris()
X = iris.data
y = iris.target
parameters = {'max_depth': range(1,11), 'min_samples_leaf': range(2, 11), 'min_samples_split': range(2, 11)}
search = RandomizedSearchCV(DecisionTreeClassifier(), parameters)
search.fit(X, y)
best_tree = search.best_estimator_  -End,"
 import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV

y = train.y
x = train.drop(['y'], axis=1)
parameters = {'max_depth': range(1,11), 'min_samples_split': range(2,11), 'min_samples_leaf': range(1,11)}
search = GridSearchCV(DecisionTreeClassifier(), parameters)
search.fit(x, y)
best_tree = search.best_estimator_ 
predictions = best_tree.predict(test)



 -End,"
 import pandas as pd
from sklearn.metrics import confusion_matrix

conf_matrix = confusion_matrix(y, predictions)



 -End,"
 def f(x):
    if x <= -2:
        return 1 - (x + 2)**2
    elif -2 < x <= 2:
        return - (x / 2)
    return (x - 2) ** 2 + 1 -End,"
 def modify_list(l):
    l[:] = [i//2 for i in l if i%2 ==0] -End,"
 import pandas as pd
from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=15, max_depth=5)
rf.fit(x_train, y_train)
predictions = rf.predict(x_test)


 -End,"
 def gcd(a, b):
    while True:
        if a == 0 or b == 0 or a == b:
            if a > b:
                return a
            return b
            break
        if a > b:
            a = a % b
            continue
        b = b % a


def main():
    a, b = map(int, input().split())
    print(gcd(a, b))


if __name__ == ""__main__"":
    main() -End,"
 import numpy as np
print(np.eye(3, 4, k=0) + np.eye(3, 4, k=1) + np.eye(3, 4, k=0))



 -End,"
 import numpy as np
print(mat.reshape(1, 12, 1)[0])



 -End,"
 import numpy as np

x_shape = tuple(map(int, input().split()))
X = np.fromiter(map(int, input().split()), np.int).reshape(x_shape)
y_shape = tuple(map(int, input().split()))
Y = np.fromiter(map(int, input().split()), np.int).reshape(y_shape)

if X.shape[1] == Y.T.shape[0]:
    print(X.dot(Y.T))
else:
    print('matrix shapes do not match') -End,"
 from urllib.request import urlopen
import numpy as np

print(np.loadtxt(urlopen(input()),skiprows=1, delimiter="","").mean(axis=0)) -End,"
 import urllib
from urllib import request
import numpy as np


fname = input()  # read file name from stdin
f = urllib.request.urlopen(fname)  # open file from URL
data = np.loadtxt(f, delimiter=',', skiprows=1)  # load data to work with
Y = data[:,0]
X = np.copy(data)
X[:,0] = 1
print(*np.linalg.lstsq(X, Y, rcond=None)[0], sep=' ')

 -End,"
 # put your python code here
num1 = float(input())
num2 = float(input())
op = input()
if op == '+':
    print(num1 + num2)
elif op == '-':
    print(num1 - num2)
elif op == '/':
    if num2 != 0:
        print(num1 / num2)
    else:
        print(""Деление на 0!"")
elif op == '*':
    print(num1 * num2)
elif op == 'mod':
    if num2 != 0:
        print(num1 % num2)
    else:
        print(""Деление на 0!"")
elif op == 'pow':
    print(num1 ** num2)
elif op == 'div':
    if num2 != 0:
        print(num1 // num2)
    else:
        print(""Деление на 0!"")
 -End,"
 s = input()
n = int(s)
word = 'программист'
ending = ''
result = ''
if (0 <= n <= 1000):
    if ('10' <= s[-2:] <= '19') or (s[-1] == '0') or ('5' <= s[-1] <= '9'):
            ending = 'ов'
    elif (s[-1] == '1'):
            ending = ''
    elif ('2' <= s[-1] <= '4'):
            ending = 'а'
result = word + ending
print(n, result) -End,"
 s = input()
if len(s) == 6:
    if (int(s[0]) + int(s[1]) + int(s[2])) == (int(s[3]) + int(s[4]) + int(s[5])):
        print(""Счастливый"")
    else:
        print(""Обычный"") -End,"
 sum = 0
s = None
while s != 0:
    s = int(input())
    sum += s
print(sum) -End,"
 a = int(input())
b = int(input())
if (a and b) > 0:
    if (a == b):      
        d = a
    else:
        mx = max(a, b)
        mn = min(a, b)
        i = 1
        count = mx
        while not(count % mn == 0):
            i += 1
            count = mx * i
        d = count
print(int(d)) -End,"
 a, s = 0, []
while (a <= 100):
    a = int(input())
    if a > 100:
        break
    if a < 10:
        continue
    s.append(a)
for i in range(len(s)):
    print(s[i]) -End,"
 a = int(input())
b = int(input())
if abs(b - a) >= 2:
    s = list(range(a, b + 1))
    summa, count = 0, 0
    for i in s:
        if (i % 3 == 0):
            summa += i
            count += 1
    arith_mean = summa / count
    print(arith_mean) -End,"
 a,b,c,d = [int(input()) for i in range(4)]
if (0 < (a and b and c and d) <= 10) and (a <= b) and (c <= d):
    column = list(range(a, b + 1))
    line = list(range(c, d + 1))
    for i in line:
        print(""\t"", i, end = '')
    print()
    for i in column:
        print(i, end = '')
        for j in line:
            result = j * i
            print(""\t"", result, end = '')
        print() -End,"
 x = input().upper()
for i in x:
    if (i == 'A') or (i == 'C') or (i == 'G') or (i == 'T'):
        genome = x
G_count = genome.count('G')
C_count = genome.count('C')
percentage = (G_count + C_count)/len(genome)*100
print(percentage) -End,"
 #1 Ввод строки, преобразование в список
g = input()        # Исходная строка 
genome = list(g)   # Исходная строка в виде списка
#2 Проверка соответствия исходных символов алфавиту и регистру 
ABC = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
abc = list(ABC)
for i in genome:
    if i not in abc:
        genome = None
#3 Создание вспомогательного списка вида: [[aaaabbcaa],[111111111]]
repeat = [1 for i in range(len(genome))]  # число повторений
code = [genome, repeat]                   # вспомогательный список
#4 Преобразование вспомогательного списка с подсчётом повторений
count = 0
while count <= len(g):
    for i in range(1, len(g)): 
        if i == len(code[1]):
            break
        elif i > len(code[1]):
            break
        elif code[0][i] != code [0][i-1]:
            continue
        elif (code[0][i] == code [0][i-1]):
            code[1][i] += code [1][i-1]
            del code[0][i-1]
            del code[1][i-1]
    count += 1
#5 Подготовка и вывод результата
result = []                                                # Результат         
repeat = [str(repeat[i]) for i in range(len(repeat))]      # [int] -> [str]
result = [genome[i]+repeat[i] for i in range(len(genome))] # объединение списков
result = ''.join(result)  # Преобразование списка в строку
print(result) -End,"
 numbers = [int(i) for i in input().split()]
result = 0
for i in numbers:
    result += i
print(result) -End,"
 s1 = [int(i) for i in input().split()]
s2 = [0] * len(s1)
for i in range(len(s1)):
    if len(s1) == 1:              # В списке 1 число
        s2 = s1
        break
    elif len(s1) == 2:            # В списке 2 числа
        s2[0] = s1[1] * 2
        s2[1] = s1[0] * 2
        break
    elif len(s1) > 2 and i == 0:  # В списке более 2 чисел 
        s2[0] = s1[1] + s1[-1]    # Крайний левый элемент
    elif 1 <= i < len(s1)-1:      # Некрайние элементы
        s2[i] = s1[i-1] + s1[i+1] 
    elif i == len(s1)-1:          # Крайний правый элемент 
        s2[-1] = s1[-2] + s1[0]
print(*s2) -End,"
 first = [int(i) for i in input().split()]
first.sort()                        # Исходный список
second = first[:]                   # Копия исходного списка
result = []                         # Результат
for i in range(len(second)-1,0,-1): # Перебор с конца списка
    if len(second) == 1:            # Список из одного элемента
        break
    elif second[i] == second[i-1] and second[i] not in result:
        result.append(second[i])    # Есть повтор элементов
        second.pop()
    elif second[i] != second[i-1]:  # Повтора элементов нет
        second.pop()
result.sort()                       # Для удобства
print(*result) -End,"
 summa, sum_squares = 0, 0
while True:
    num = int(input())
    summa += num
    sum_squares += num * num 
    if summa == 0:
        break
print(sum_squares) -End,"
 num = int(input())
s = []
for i in range(1, num + 1):
    s += [i] * i
print(*s[:num]) -End,"
 Lst = [int(i) for i in input().split()]
x = int(input())
index = 0
result = []
if x not in Lst:
    print(""Отсутствует"")
else:
    for i in range(len(Lst)):
        if Lst[i] == x:
            index = i
            result.append(index)
    print(*result) -End,"
 #1 Ввод элементов матрицы
M, row, e = [0], -1, ['end']      # row = -1 для счёта индексов строк с нуля
while True:
    s = input().split()
    row += 1
    if (row == 0) and (s != e):
        M = s
    elif (row == 1) and (s != e):
        M = [M]
        [M.append(s)]
        if (len(M[-2]) != len(M[-1])):
            break
    elif (row > 1) and (s != e):
        [M.append(s)]
        if (len(M[-2]) != len(M[-1])):
            break
    elif (s == e):
        break

#2 Преобразование элементов матрицы из строк в целые числа,
#  создание N - маски матрицы M, заполненной нулями
if row == 1:                         # матрица с 1-й строкой
    for i in range(len(M)):
        M[i] = int(M[i])
    N = [0 * row for i in range(len(M))]
elif row > 1 and len(M[0]) == 1:     # матрица с 1-м столбцом
    for i in range(len(M)):
        M[i][0] = int(M[i][0])
    N = [[0] for i in range(len(M))]
elif row > 1 and len(M[0]) > 1:      # матрица размером n >= 2 
    if row < len(M[0]):              # строк меньше столбцов
        for j in range(len(M[0])):
            for i in range(row):
                M[i][j] = int(M[i][j])
        N = [[0] * len(M[0]) for i in range(row)]
    elif row > len(M[0]):            # строк больше столбцов
        for j in range(len(M[0])):
            for i in range(row):
                M[i][j] = int(M[i][j])
        N = [[0] * len(M[0]) for i in range(row)]
    elif row == len(M[0]):           # строк и столбцов поровну
        for j in range(len(M[0])):
            for i in range(row):
                M[i][j] = int(M[i][j])
        N = [[0] * row for i in range(len(M[i]))]

#3 Расчёт значений элементов выходной матрицы
for j in range(len(M)):
    for i in range(len(M)):
        if row == 1 and len(M) == 1:       # матрица из 1-го элемента 
            N[0] = M[0] * 4
        elif row == 1 and len(M) > 1:      # матрица с 1-й строкой
            if i == 0:                     # крайний слева
                N[0] = M[1] + M[-1] + M[0] * 2    
            elif i < (len(M) - 1):         # между
                N[i] = M[i-1] + M[i+1] + M[i] * 2
            elif i == (len(M) - 1):        # крайний справа
                N[-1] = M[0] + M[i-1] + M[-1] * 2
        elif row > 1 and len(M[0]) == 1:   # матрица с 1-м столбцом
            if i == 0:
                N[0][0] = M[0][0] * 2 + M[i-1][0] + M[i+1][0]
            elif i < (len(M) - 1):
                N[i][0] = M[i][0] * 2 + M[i-1][0] + M[i+1][0]
            elif i == (len(M) - 1):
                N[-1][0] = M[i][0] *2 + M[i-1][0] + M[0][0]
        elif row > 1 and len(M[0]) > 1:
            for j in range(len(M[0])):
                for i in range(row):       # для матриц размером (n x m) >= 2
                    N[i][j] = M[(i-1)%row][j] + M[(i+1)%row][j] + \
                              M[i][(j-1)%(len(M[0]))] + M[i][(j+1)%(len(M[0]))]
#4 Вывод
for i in range(row):
    if row == 1:
        print(*N)
    elif row > 1:
        print(*N[i]) -End,"
 #1 Ввод размера матрицы
n = int(input())

#2 Построение квадратной матрицы [n x n], заполненной нулями
M = [[0 for j in range(n)]for i in range(n)] 

#3 Длина пути: S[i] = n*n
vector = [[i, i] for i in range(1, n + 1)]  # длины i-тых векторов
S = sum(vector, [])[:-1]                    # длина пути         

#4 Координаты центра матрицы для нечётных и чётных n
N = n // 2
if n % 2 == 1:      # нечётные n
    x, y = N, N                             # координаты центра 
    dx, dy = [0,1,0,-1],[-1,0,1,0]          # векторы изменения координат:
elif n % 2 == 0:    # чётные n                (влево-вниз-вправо-вверх)
    x, y = N, N - 1                         # координаты центра
    dx, dy = [0,-1,0,1],[1,0,-1,0]          # векторы изменения координат:
M[x][y] = n*n       # центр матрицы           (вправо-вверх-влево-вниз)

#5 Заполнение матрицы
step = 1
for i in range(len(S)):
    for j in range(S[i]):
        x += dx[i % 4]
        y += dy[i % 4]
        M[x % n][y % n] = n * n - step
        if n * n - step == 1:
            break
        step += 1
M[0][0] = 1         # начало матрицы

#6 Выходная матрица
[print(*M[i]) for i in range(n)] -End,"
 def f(x):
    if x <= -2:
        f = 1 - (x + 2)**2
    elif -2 < x <= 2:
        f = -(x / 2)
    elif 2 < x:
        f = (x - 2)**2 + 1
    return f -End,"
 def modify_list(l):
    m = [i//2 for i in l if i % 2 == 0]
    del l[:]
    l.extend(m) -End,"
 def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    elif key not in d and 2*key in d:
        d[2*key].append(value)
    elif 2*key not in d:
        d[2*key] = [value] -End,"
 s = input().lower().split()
if ''.join(s).isalpha() == False:  # не буквы     
    s = []
d = {key: s.count(key) for key in s}
for key, value in d.items():
    print(key, value) -End,"
 d, values = {}, []
n = int(input())
for i in range(n):
    key = int(input())
    values.append(key)
    if key not in d:
        d[key] = f(values[i])
        print(d[key])
    elif key in d:
        print(d[key]) -End,"
 import math
print(2 * math.pi * float(input())) -End,"
 #1 Исходные данные
results, teams, goals, game_played, table = [],[],[],[],{}
#2 Ввод данных
games = int(input())                    # количество завершённых игр
for i in range(games):
    result = input().strip().split(';') # результат игры
    result[1] = int(result[1])          # забито 1-й командой
    result[3] = int(result[3])          # забито 2-й командой
    results.append(result)              # список результатов игр    
#3 Списки команд, голов 
for i in range(games):
    teams.append(results[i][0])        
    teams.append(results[i][2])
    goals.append(results[i][1])        
    goals.append(results[i][3])
team = sorted(list(set(teams)))         # список команд
#4 Шаблон сводной таблицы команд
table = {team[i]: [0]*5 for i in range(len(team))}
#5 Список количеств всего игр, сыгранных каждой командой
for i in range(len(team)):
    game_played.append(teams.count(team[i]))
    table[team[i]][0] = game_played[i]
#6 Заполнение таблицы
for i in range(games):
    if goals[2*i] > goals[2*i+1]:    # победа 1-й команды
        table[teams[2*i]][1] += 1       # количество побед 1-й команды
        table[teams[2*i+1]][3] += 1     # количество поражений 2-й команды
        table[teams[2*i]][4] += 3       # количество очков 1-й команды
    elif goals[2*i] < goals[2*i+1]:  # победа 2-й команды
        table[teams[2*i]][3] += 1       # количество поражений 1-й команды
        table[teams[2*i+1]][1] += 1     # количество побед 2-й команды
        table[teams[2*i+1]][4] += 3     # количество очков 2-й команды
    elif goals[2*i] == goals[2*i+1]: # ничья
        table[teams[2*i]][2] += 1       # количество ничьих 1-й команды
        table[teams[2*i+1]][2] += 1     # количество ничьих 2-й команды
        table[teams[2*i]][4] += 1       # количество очков 1-й команды
        table[teams[2*i+1]][4] += 1     # количество очков 2-й команды
#7 Вывод итоговой таблицы
for team, numbers in table.items():
    print(team+':', end = '')           # Команда:
    print(*numbers)                     # 15 6 6 3 24 -End,"
 #1 Ввод данных
code, decode = [],[]
abc, key, line, cipher = (input() for i in range(4))
#2 Кодирование
for i in range(len(line)):
    if line[i] in abc:
        code.append(key[abc.index(line[i])])
    else:
        code.append(line[i])
print(''.join(code))
#3 Декодирование
for i in range(len(cipher)):
    if cipher[i] in key:
        decode.append(abc[key.index(cipher[i])])
    else:
        decode.append(cipher[i])
print(''.join(decode)) -End,"
 #1 Заполнение словаря
word_count = int(input())
words = {(input().lower()) for i in range(word_count)}
#2 Ввод текста
number_of_lines = int(input())
text = [set((input().lower().split())) for i in range(number_of_lines)]
#3 Определение и вывод новых слов
new_words = []
for i in range(number_of_lines):
    new_words.append(text[i]-words)
for i in range(len(new_words)):
    new_words[0] |= new_words[i]
for i in new_words[0]:
    print(i) -End,"
 #1 Начальные данные
x, y, dx, dy  = 0, 0, 0, 0
commands, courses, distances = [], [], []
turtle = [[],[]]   # список координат черепашки
#2 Ввод данных
steps = int(input())
for i in range(steps):
    way = input().strip().split()
    way[1] = int(way[1])
    commands.append(way)
#2 Списки курсов и расстояний
for i in range(steps):
    courses.append(commands[i][0])
    distances.append(commands[i][1])
#3 Направления
course = {'север': 1, 'запад': -1, 'юг': -1, 'восток': 1}
#4 Передвижения
for i in range(steps):
    if courses[i % steps] == 'восток' or courses[i % steps] == 'запад':
        dx += course[courses[i % steps]] * distances[i % steps]
        turtle[0].append(x + dx)
        turtle[1].append(y + dy)
    elif courses[i % steps] == 'север' or courses[i % steps] == 'юг':
        dy += course[courses[i % steps]] * distances[i % steps]
        turtle[0].append(x + dx)
        turtle[1].append(y + dy)
#6 Выходные данные
print(turtle[0][i], turtle[1][i], end = '') -End,"
 s = 0
n = int(input())
for i in range(n):
    s += int(input())
print(s) -End,"
 ans = {}
for obj in objects:
    ans[id(obj)] = obj
print(len(ans)) -End,"
 def closest_mod_5(x):
    if type(x) == int and x % 5 == 0:
        return x
    elif type(x) == int:
        return int(x + (5 - x % 5))
    return ""I don't know :("" -End,"
 n, k = map(int, input().split())
if (1 <= n <= 10) and (0 <= k <= 10):
    def c(n, k):
        if k == n or k == 0:
            return 1
        elif k > n:
            return 0
        return c(n - 1, k) + c(n - 1, k - 1)
    print(c(n,k)) -End,"
 #1 Исходные данные
parents = {'global': 'None'}
variables = {'global': []}
requests, get = [], []
#2 Ввод запросов
for i in range(int(input())):
    requests.append(input().lower().split())
#3 Заполнение parents, variables и get
for i in range(len(requests)):
    if requests[i][0] == 'create':
        parents[requests[i][1]] = requests[i][2]
    elif requests[i][0] == 'add' and requests[i][1] not in variables:
        variables[requests[i][1]] = [requests[i][2]]
    elif requests[i][0] == 'add' and requests[i][1] in variables:
        variables[requests[i][1]].append(requests[i][2])
    elif requests[i][0] == 'get':
        get.append(requests[i])
        del requests[i][0]
#4 Поиск пространств имён, ближайших для переменных
for i in range(len(get)):
    ns = get[i][0]
    var = get[i][1]
    while True:
        if ns in variables:
            if var in variables[ns]:
                print(ns)
                break
            elif var not in variables[ns]:
                ns = parents[ns]
        elif ns not in parents and var in variables['global']:
            print('global')
            break
        elif ns not in parents and var not in variables['global']:
            print('None')
            break
        elif ns not in variables:
            ns = parents[ns] -End,"
 class MoneyBox:
    
    def __init__(self, capacity):
        self.capacity = capacity
        self.count = 0
        self.v = 0
        
    def can_add(self, v):
        self.v = v
        if self.capacity - self.v >= 0:
            return True
        return False

    def add(self, v):
        self.v = v
        if self.can_add(self.v) == True:
            self.capacity -= self.v
            self.count += self.v
            return self.count -End,"
 class Buffer:
    def __init__(self):
        self.buffer = []
    def add(self, *a):
        self.buffer += [*a]
        while len(self.buffer) >= 5:
            print(sum(self.buffer[0:5]))
            del self.buffer[0:5]
    def get_current_part(self):
        return self.buffer -End,"
 #1 Список родителей
s, parents = [], {}
for i in range(int(input())):
    s.append(input().split())
    if s[i][0] not in parents:
        parents[s[i][0]] = s[i][2:]
    elif s[i][0] in parents:
        parents[s[i][0]] += s[i][2:]
#2 Список запросов
q = [input().split() for i in range(int(input()))]
#3 Добавление потомкам всех предков
for key1, value1 in parents.items():
    for key2, value2 in parents.items():
        if key1 in value2:
            value2 += value1
#4 Добавление предков без родителей
ancestors = [*parents.values()]
for i in range(len(ancestors)):
    for j in range(len(ancestors[i])):
        if ancestors[i][j] not in parents:
            parents[ancestors[i][j]] = []
#5 Ответы на запросы
for i in range(len(q)):
    if q[i][0] == q[i][1] or q[i][0] in parents[q[i][1]]:
        print('Yes')
    else:
        print('No') -End,"
 class ExtendedStack(list):
    def sum(self):
        self.append(self.pop() + self.pop())
       
    def sub(self):
        self.append(self.pop() - self.pop())

    def mul(self):
        self.append(self.pop() * self.pop())

    def div(self):
        self.append(self.pop() // self.pop()) -End,"
 class LoggableList(list, Loggable):
    def append(self, msg):
        super().append(msg)
        self.log(msg) -End,"
 #1 Описание наследования классов
parents = {}
for i in range(int(input())):
    s = input().split()
    parents[s[0]] = s[2:] if len(s) > 1 else []
#2 Список исключений, записанных Антоном
e = [input() for i in range(int(input()))]
#3 Добавление потомкам всех предков
for key1, value1 in parents.items():
    for key2, value2 in parents.items():
        if key1 in value2:
            value2 += value1
#4 Добавление в parents предков без родителей
ancestors = [*parents.values()]
for i in range(len(ancestors)):
    for j in range(len(ancestors[i])):
        if ancestors[i][j] not in parents:
            parents[ancestors[i][j]] = []
#5 Имена исключений, которые можно удалить из кода
for i in range(len(e)):
    for j in range(len(parents[e[i]])):
        if parents[e[i]][j] in e:
            if e.index(parents[e[i]][j]) < e.index(e[i]):
                print(e[i])
                break -End,"
 class PositiveList(list):
    def append(self, x):
        if x > 0:
            super().append(x)
        else:
            raise NonPositiveError
class NonPositiveError(Exception):
    pass -End,"
 import datetime
year, month, day = [int(i) for i in input().split()]
days = int(input())
date1 = datetime.date(year, month, day)
date2 = date1 + datetime.timedelta(days)
print(date2.year, date2.month, date2.day) -End,"
 class multifilter:
    def judge_half(pos, neg):
        return pos >= neg
        
    def judge_any(pos, neg):
        return pos >= 1

    def judge_all(pos, neg):
        return neg == 0

    def __init__(self, iterable, *funcs, judge = judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge
         
    def __iter__(self):
        for x in self.iterable:
            res = [f(x) for f in self.funcs]
            if self.judge(res.count(True), res.count(False)):
                yield x -End,"
 def primes():
    yield 2
    number = 3
    while True:
        prime = True
        for i in range(2, number):
            if number % i == 0:
                prime = False
                break
        if prime == True:
            yield number
        number += 2 -End,"
 s, t, count = input(), input(), 0
for i in range(len(s) - len(t) + 1):
    if s.startswith(t, i):
        count += 1
print(count) -End,"
 s, a, b, count = input(), input(), input(), 0
temp = s
while count < 1001:
    for i in range(len(s) - len(a) + 1):
        if s.startswith(a, i) and temp != temp.replace(a, b):
            temp = temp.replace(a, b)
            count += 1
    if len(temp) > len(s):
        break
    elif temp == temp.replace(a, b):
        break
if a in temp or a in s and a in b:
    print('Impossible')
else:
    print(count) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.findall(r""(cat.*){2,}"", line):
       print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()  
    if re.search(r""(\bcat\b){1,}"", line):
        print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()  
    if re.search(r""z\w{3}z"", line):
       print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()  
    if re.search(r""\\"", line):
       print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()  
    if re.search(r""\b(\w.*)\1\b"", line):
       print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""human"", ""computer"", line)) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""a+\b"", ""argh"", line, 1, re.IGNORECASE)) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""(\b(\w)(\w))+"", r""\3\2"", line)) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""(\w)\1+"", r""\1"", line)) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.fullmatch(r""(1(01*0)*1|0)*"", line):
        print(line) -End,"
 import requests
import re

url_list_1, url_list_2 = [], []
url_1, url_2 = input(), input()

res = requests.get(url_1)
url_list_1.extend(re.findall(r""href=\""(.*?)\"""", res.text))
for i in range(len(url_list_1)):
    res = requests.get(url_list_1[i])
    url_list_2.extend(re.findall(r""href=\""(.*?)\"""", res.text))
    url_list_1 += url_list_2

if url_2 in url_list_1 and url_2 in url_list_2:
    print(""Yes"")
else:
    print(""No"")
 -End,"
 import requests
import re

# Входные данные
urls, temp, sites = [], [], []
doc_html = requests.get(input()).text
# Извлечение из HTML-документа url, запись их в список urls
urls.extend(re.findall(r""""""<a.*href=[""|'](.*?)[""|']"""""", doc_html))
# Удаление из urls относительных ссылок, протоколов, портов, запись в temp 
for i in range(len(urls)-1,-1,-1):
    if ('../' in urls[i]) or ('./' in urls[i]):
        del urls[i]
    temp.append(re.sub(r""(https://)|(http://)|(ftp://)|(:\d{1,5})"",'', urls[i]))
# Удаление путей, запись в sites
for i in range(len(temp)):
    sites.append(re.sub(r""""""/.*"""""", '', temp[i]))
# Удаление дубликатов, сортировка, печать списка сайтов
for i in sorted(list(set(sites))):
    print(i)
 -End,"
 import json

parent = json.loads(input())
names = [i['name'] for i in parent]
child = {i: [] for i in names}
for i in child:
    for j in range(len(names)):
        if i in parent[j]['parents']:
            child[i] += [names[j]]
for key1, value1 in child.items():
    for key2, value2 in child.items():
        if key1 in value2:
            value2 += value1
        child[key2] = sorted(list(set(value2)))
for key in sorted(child):
    print(key, ':', len(child[key])+1) -End,"
 import xml.etree.ElementTree as ET

root = ET.XML(input())
rgb = {'red': 0, 'green': 0, 'blue': 0}
def walk(root):
    for i in root.iter(""cube""):
        rgb[i.attrib[""color""]] += 1
    for i in root:
        walk(i)
walk(root)
print(*rgb.values()) -End,"
 a,b = int(input()), int(input())
i = max(a,b)
while i % a != i % b:
    i += 1
print(i) -End,"
 a,b = (int(input()) for _ in range(2))
k=0
s=0
if a%3==2 or a%(-3)==-1:
    a=a+1
elif a%3==1 or a%(-3)==-2:
    a=a+2
else:
    a%3==0
for i in range(a,b+1,3):
    s=s+i
    k=k+1
print(s/k) -End,"
 s = input()
c=1
news=""""
while (c) <= (len(s)):
    while s[c-1:c]==s[c:c+1]:
       c=c+1
    news = news + s[c-1] + str(c)    
    s=s.replace(s, s[c:])
    c=1
print (news)



 -End,"
 a = [int(i) for i in input().split()]
len_a = int(len(a))
b=[0]*len_a
if len_a == 1:
    b = a
    print(b[0])
else:
    a.insert(0, a[len_a-1])
    a.insert(len_a+1, a[1])
    for i in range(len_a):
        b[i] = a[i] + a[i+2]
        print(b[i],end=' ') -End,"
 a = [int(i) for i in input().split()]
a.sort()
for i in range(len(a)):
    if len(a) == 1:
        break
    if a[i-len(a)] != a[i-len(a)+1]:
        continue
    else:
        if (a[i-len(a)+1] == a[i-len(a)+2]) and ((i+1) != len(a)):
            continue
        else:
            print(a[i], end=' ') -End,"
 s = 0
a = int(input())
s = s+a
list = []
list.append(a*a)
while s != 0:
    a = int(input())
    list.append(a*a)
    s = s+a
print(sum(list)) -End,"
 a = int(input())
b = [0 for i in range(a)]
c = []
for i in range(a):
    b[i] = [i+1]*(i+1)
    c = c + b[i]
    if len(c) >= a:
        break
print(*c[0:a]) -End,"
 a = int(input())        # ввод целого числа
b = []                  # пустой список
for i in range(a):      # цикл
    b = b + [i+1]*(i+1) # к пустому списку добавляем списки [i+1]*(i+1)
    if len(b) >= a:     # проверяет длину списка
        break           # выход из цикла если длина больше а
print(*b[0:a])          # *убирает лишние знаки - скобки и запятые -End,"
 a = [int(i) for i in input().split()]
b = int(input())
for i in range(len(a)):
    if not b in a:
        print('Отсутствует')
        break
    else:
        print(a.index(b)+i, end = ' ')
        a.remove(b)
        if not b in a:
            break -End,"
 a = []
b = []
s = 0
while True:
    a += [[i for i in input().split()]]
    if a[s] != ['end']:
        s += 1
        continue
    a.remove(['end'])

    for i in range(len(a)):
        for j in range(len(a[i])):
            a[i][j] = int(a[i][j])
            
    b=[[0 for j in range(len(a[i]))] for i in range(len(a))]
    
    for i in range(len(a)):
        for j in range(len(a[i])):
            b[i][j] =(a[i][j+1-len(a[i])] 
                    + a[i][j-1] 
                    + a[i+1-len(a)][j] 
                    + a[i-1][j])
    for i in range(len(a)):
        print(*b[i])
    break -End,"
 n = int(input())
a = [[0]*n for i in range(n)] #пустая матрица n*n
s = 0 #счётчик заполнитель матрицы
m = 0 #поправка
b = n*n 
while s != b:
    for i in range(n):#право начиная с первой ячейки a[0][0]
        a[0+m][i+m] = s+1
        s +=1
    for i in range(1,n):#вниз
        a[i+m][n-1+m] = s+1
        s +=1
    for i in range(1,n):#влево
        a[n-1+m][n-1-i+m] = s+1
        s +=1
    for i in range(1,n-1):#вверх
        a[n-1-i+m][-n-m] = s+1
        s +=1
    n=n-2
    m=m+1

for i in range(int(b**0.5)):
    print(*a[i]) -End,"
 def f(x):
    if x <= -2:
        return(1-(x+2)**2)
    if -2 < x <=2:
        return(-x/2)
    else:
        return(x-2)**2+1
 -End,"
 def modify_list(l):
    s=0
    b=len(l)
    while s!=b:
        if l[s]%2 == 0:
            l[s] = int(l[s]/2)
            s=s+1
        else:
            l.remove(l[s])
        b=len(l) -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key in d:
        d[key] += [value]
    else:
        if key*2 in d: 
            d[key*2] += [value]
        else:
            d[key*2] = [value] -End,"
 a = [str(s).lower() for s in input().split()]
d = {}
for s in a:
    if s not in d:
        d[s] = 1
    else:
        d[s] += 1

for key, value in d.items():
    print(key, value) -End,"
 n = int(input())
d = {}
for i in range(n):
    a = int(input())
    if a not in d.keys():
        d[a] = f(a)
        print(d[a])
    else:
        print(d[a]) -End,"
 import sys
print(*sys.argv[1:len(sys.argv)])
 -End,"
 def lsum(a,b):
    c = []
    for i in range(len(a)):
        c.append(a[i]+b[i])
    return c
    
d = dict()
n = int(input())
l = [input().split(';') for i in range(n)]

for i in range(n):
    if l[i][0] in d.keys():
        d[l[i][0]] = lsum(d[l[i][0]],[1,0,0,0,0])
    else:
        d[l[i][0]] = [1,0,0,0,0]

    if l[i][2] in d.keys():
        d[l[i][2]] = lsum(d[l[i][2]],[1,0,0,0,0])
    else:
        d[l[i][2]] = [1,0,0,0,0]

    if l[i][1] > l[i][3]:
        d[l[i][0]] = lsum(d[l[i][0]],[0,1,0,0,3])
        d[l[i][2]] = lsum(d[l[i][2]],[0,0,0,1,0])
    if l[i][1] == l[i][3]:
        d[l[i][0]] = lsum(d[l[i][0]],[0,0,1,0,1])
        d[l[i][2]] = lsum(d[l[i][2]],[0,0,1,0,1])
    if l[i][1] < l[i][3]:
        d[l[i][0]] = lsum(d[l[i][0]],[0,0,0,1,0])        
        d[l[i][2]] = lsum(d[l[i][2]],[0,1,0,0,3])
for j,i in d.items():
    print(j+':', end='')
    print(*i) -End,"
 l = [input() for i in range(4)]
s1,s2 = """",""""
for k in l[2]:
    for i in range(len(l[0])):
        if k == l[0][i]:
            s1 += l[1][i]
for k in l[3]:
    for i in range(len(l[1])):
        if k == l[1][i]:
            s2 += l[0][i]
print(s1)
print(s2) -End,"
 n = int(input())
s = [input().lower() for i in range(n)]
n = int(input())
l = [input().lower().split() for i in range(n)]
d = {}
for i in range(len(l)):
    for k in l[i]:
        if k not in s:
            d[k] = """"
for i in d.keys() :
    print(i)
 -End,"
 n = int(input())
l = [input().split() for i in range(n)]
c1,c2 = 0,0
for i in range(len(l)):
    if l[i][0] == 'север':
        c2 = c2 + int(l[i][1])
    elif l[i][0] == 'юг':
        c2 = c2 - int(l[i][1])
    elif l[i][0] == 'восток':
        c1 = c1 + int(l[i][1])
    elif l[i][0] == 'запад':
        c1 = c1 - int(l[i][1])
s = [c1,c2]
print(*s) -End,"
 n = int(input())
s=0
for i in range(n):
    s = s + int(input())
print(s) -End,"
 ans = {}
#objects = [1,2,3,1,2,3,456,456,True,0,0,0,-56,-3,-3,-56,False,[4],{'qw':1}]
for obj in objects: # доступная переменная objects
    if id(obj) not in ans.keys():
       ans[id(obj)] = obj
print(len(ans)) -End,"
 # Даны целые числа 1≤n≤10(18) и 2≤m≤10(5),
# необходимо найти остаток от деления
# n-го числа Фибоначчи на m.
# 10(5)  = 100000
# 10(18) = 1000000000000000000

def fib(n,m):
    d = [0,1]
    a,b=0,1
    f = 0
    
    for i in range(0,6*m):
        f = d[i] + d[i+1]
        d.append(f%m)
        if d[len(d)-1]==1 and d[len(d)-2]==0:
            break
            
    for j in range(n%(len(d)-2)): a, b = (a+b), a
    return a%m

def main():
    n, m = map(int, input().split())
    print(fib(n, m))


if __name__ == ""__main__"":
    main()
 -End,"
 # Допишите ваш код вместо многоточия:
a = input()
b = input()
c = input()
# в выводе используйте ровно 3 функции print() #
print(a, end='')
print(' ', end='')
print(b,c,sep='') -End,"
 a, b, c = map(float, input().split())
# Допишите ваш код вместо многоточия:
a=str(int(a))
b=str(int(b))
c=str(int(c))
# в выводе используйте 1 функцию print()!
print(a,b,' ',c,a,' ',b,c,sep='') -End,"
 a, b, c = map(float, input().split())
# Допишите ваш код вместо многоточия:
a=str(int(a))
b=str(int(b))
c=str(int(c))
# в выводе используйте 3 функции print()!
print(a,b,' ',c,a,' ',b,c,sep='',end='')
print(end='')
print(end='') -End,"
 a, b, c = input().split()
# Допишите ваш код вместо многоточия:
a = int(a,16)
b = int(b,16)
c = int(c,16)
# в выводе используйте 1 функцию print()!
print(a,b,' ',c,c,b,' ',a,sep='') -End,"
 # put your python code here
b = int(input())
a=""3.1415926535897932384626433832795028841971693993751058209749445923078164062862 089986280348253421170679821480865132823066470938446095505822317253594081284811 174502841027019385211055596446229489549303819644288109756659334461284756482337 867831652712019091456485669234603486104543266482133936072602491412737245870066 063155881748815209209628292540917153643678925903600113305305488204665213841469 519415116094330572703657595919530921861173819326117931051185480744623799627495 673518857527248912279381830119491298336733624406566430860213949463952247371907 021798609437027705392171762931767523846748184676694051320005681271452635608277 857713427577896091736371787214684409012249534301465495853710507922796892589235 420199561121290219608640344181598136297747713099605187072113499999983729780499 510597317328160963185950244594553469083026425223082533446850352619311881710100 031378387528865875332083814206171776691473035982534904287554687311595628638823 537875937519577818577805321712268066130019278766111959092164201989380952572010 654858632788659361533818279682303019520353018529689957736225994138912497217752 834791315155748572424541506959508295331168617278558890750983817546374649393192 550604009277016711390098488240128583616035637076601047101819429555961989467678 374494482553797747268471040475346462080466842590694912933136770289891521047521 620569660240580381501935112533824300355876402474964732639141992726042699227967 823547816360093417216412199245863150302861829745557067498385054945885869269956 909272107975093029553211653449872027559602364806654991198818347977535663698074 265425278625518184175746728909777727938000816470600161452491921732172147723501 414419735685481613611573525521334757418494684385233239073941433345477624168625 189835694855620992192221842725502542568876717904946016534668049886272327917860 857843838279679766814541009538837863609506800642251252051173929848960841284886 269456042419652850222106611863067442786220391949450471237137869609563643719172 874677646575739624138908658326459958133904780275900994657640789512694683983525 957098258226205224894077267194782684826014769909026401363944374553050682034962 524517493996514314298091906592509372216964615157098583874105978859597729754989 301617539284681382686838689427741559918559252459539594310499725246808459872736 446958486538367362226260991246080512438843904512441365497627807977156914359977 001296160894416948685558484063534220722258284886481584560285060168427394522674 676788952521385225499546667278239864565961163548862305774564980355936345681743 241125150760694794510965960940252288797108931456691368672287489405601015033086 179286809208747609178249385890097149096759852613655497818931297848216829989487 226588048575640142704775551323796414515237462343645428584447952658678210511413 547357395231134271661021359695362314429524849371871101457654035902799344037420 073105785390621983874478084784896833214457138687519435064302184531910484810053 706146806749192781911979399520614196634287544406437451237181921799983910159195 618146751426912397489409071864942319615679452080951465502252316038819301420937 621378559566389377870830390697920773467221825625996615014215030680384477345492 026054146659252014974428507325186660021324340881907104863317346496514539057962 685610055081066587969981635747363840525714591028970641401109712062804390397595 156771577004203378699360072305587631763594218731251471205329281918261861258673 215791984148488291644706095752706957220917567116722910981690915280173506712748 583222871835209353965725121083579151369882091444210067510334671103141267111369 908658516398315019701651511685171437657618351556508849099898599823873455283316 355076479185358932261854896321329330898570642046752590709154814165498594616371 802709819943099244889575712828905923233260972997120844335732654893823911932597 463667305836041428138830320382490375898524374417029132765618093773444030707469 211201913020330380197621101100449293215160842444859637669838952286847831235526 582131449576857262433441893039686426243410773226978028073189154411010446823252 716201052652272111660396665573092547110557853763466820653109896526918620564769 312570586356620185581007293606598764861179104533488503461136576867532494416680 396265797877185560845529654126654085306143444318586769751456614068007002378776 591344017127494704205622305389945613140711270004078547332699390814546646458807 972708266830634328587856983052358089330657574067954571637752542021149557615814 002501262285941302164715509792592309907965473761255176567513575178296664547791 745011299614890304639947132962107340437518957359614589019389713111790429782856 475032031986915140287080859904801094121472213179476477726224142548545403321571 853061422881375850430633217518297986622371721591607716692547487389866549494501 146540628433663937900397692656721463853067360965712091807638327166416274888800 786925602902284721040317211860820419000422966171196377921337575114959501566049 631862947265473642523081770367515906735023507283540567040386743513622224771589 150495309844489333096340878076932599397805419341447377441842631298608099888687 413260472156951623965864573021631598193195167353812974167729478672422924654366 800980676928238280689964004824354037014163149658979409243237896907069779422362 508221688957383798623001593776471651228935786015881617557829735233446042815126 272037343146531977774160319906655418763979293344195215413418994854447345673831 624993419131814809277771038638773431772075456545322077709212019051660962804909 263601975988281613323166636528619326686336062735676303544776280350450777235547 105859548702790814356240145171806246436267945612753181340783303362542327839449 753824372058353114771199260638133467768796959703098339130771098704085913374641 442822772634659470474587847787201927715280731767907707157213444730605700733492 436931138350493163128404251219256517980694113528013147013047816437885185290928 545201165839341965621349143415956258658655705526904965209858033850722426482939 728584783163057777560688876446248246857926039535277348030480290058760758251047 470916439613626760449256274204208320856611906254543372131535958450687724602901 618766795240616342522577195429162991930645537799140373404328752628889639958794 757291746426357455254079091451357111369410911939325191076020825202618798531887 705842972591677813149699009019211697173727847684726860849003377024242916513005 005168323364350389517029893922334517220138128069650117844087451960121228599371 623130171144484640903890644954440061986907548516026327505298349187407866808818 338510228334508504860825039302133219715518430635455007668282949304137765527939 751754613953984683393638304746119966538581538420568533862186725233402830871123 282789212507712629463229563989898935821167456270102183564622013496715188190973 038119800497340723961036854066431939509790190699639552453005450580685501956730 229219139339185680344903982059551002263535361920419947455385938102343955449597 783779023742161727111723643435439478221818528624085140066604433258885698670543 154706965747458550332323342107301545940516553790686627333799585115625784322988 273723198987571415957811196358330059408730681216028764962867446047746491599505 497374256269010490377819868359381465741268049256487985561453723478673303904688 383436346553794986419270563872931748723320837601123029911367938627089438799362 016295154133714248928307220126901475466847653576164773794675200490757155527819 653621323926406160136358155907422020203187277605277219005561484255518792530343 513984425322341576233610642506390497500865627109535919465897514131034822769306 247435363256916078154781811528436679570611086153315044521274739245449454236828 860613408414863776700961207151249140430272538607648236341433462351897576645216 413767969031495019108575984423919862916421939949072362346468441173940326591840 443780513338945257423995082965912285085558215725031071257012668302402929525220 118726767562204154205161841634847565169998116141010029960783869092916030288400 269104140792886215078424516709087000699282120660418371806535567252532567532861 291042487761825829765157959847035622262934860034158722980534989650226291748788 202734209222245339856264766914905562842503912757710284027998066365825488926488 025456610172967026640765590429099456815065265305371829""
if int(a[(b+2):(b+3)]) >= 5:
    c=int(a[2:(b+2)])+1
else:
    c=int(a[2:(b+2)])
print('3.',c,sep='')



 -End,"
 a = int(input())
print('Следующее за числом ',a,' число - ',a+1,'.',sep='')
print('Для числа ',a,' предыдущее число - ',a-1,'.',sep='') -End,"
 a,b = int(input()),int(input())
print(""%d+%d="" % (a, b), a+b, sep="""")
print(""%d-%d="" % (a, b), a-b, sep="""")
print(""%d*%d="" % (a, b), a*b, sep="""")
print(""%d/%d="" % (a, b), a/b, sep="""")
print(""(%d+%d)/2="" % (a, b), (a+b)/2, sep="""") -End,"
 a,b = int(input()),int(input())
print(""%s+%s=%s"" % (a, b, a+b), sep="""")
print(""%s-%s=%s"" % (a, b, a-b), sep="""")
print(""%s*%s=%s"" % (a, b, a*b), sep="""")
print(""%s/%s=%s"" % (a, b, a/b), sep="""")
print(""(%s+%s)/2=%s"" % (a, b, (a+b)/2), sep="""") -End,"
 a = int(input())
print(""%s, %s, %s"" % (a//100, (a-(a//100)*100)//10, a%10)) -End,"
 a = input()
s=0
for i in a:
    s=s+int(i)
print(s)




 -End,"
 import math
a,b = int(input()),int(input())
print(""%s"" % round(math.sqrt(a**2+b**2),2))




 -End,"
 x1, y1 = map(int, input().split())
x2, y2 = map(int, input().split())
print(round(((x1-x2)**2+(y1-y2)**2)**0.5,2)) -End,"
 n = int(input())
print((n-1)*(n))
 -End,"
 n = int(input())
if n//10 > 0 and n//10 <10:
    print('число двузначное')
else:
    print('число не двузначное')

 -End,"
 n = int(input())
m = int(input())
print('да' if n%m==0 or m%n==0 else 'нет') -End,"
 n = int(input())
print('да' if n//1000 == n%10 and n%1000//100 == n%100//10 else 'нет')

 -End,"
 a,b,c = int(input()),int(input()),int(input())
print('да' if a==b or a==c or c==b else 'нет') -End,"
 a,b,c = int(input()),int(input()),int(input())
s=0
if a>0:
    s=s+1
if b>0:
    s=s+1
if c>0:
    s=s+1
print(s)

 -End,"
 a, b, c, d, e, f, g = [int(input()) for i in range(7)]
s=0
if a%2==0:
    s=s+a
if b%2==0:
    s=s+b
if c%2==0:
    s=s+c
if d%2==0:
    s=s+d
if e%2==0:
    s=s+e
if f%2==0:
    s=s+f
if g%2==0:
    s=s+g
print(s) -End,"
 n, m, x, y = [int(input()) for i in range(4)]
if n>m:
    n,m=m,n
print(max(x,y,n-x,m-y))
 -End,"
 n, m, k = [int(input()) for i in range(3)]
s=n*m
print(True if s/m==k or s/n==k or s-m==k or s-n==k or s-k==n or s-k==m or (s-n)/n==k or (s-m)/m==k else False) -End,"
 n, m, k = [int(input()) for i in range(3)]
s=n*m
print(True if s/m==k or s/n==k or s-m==k or s-n==k or s-k==n or s-k==m or (s-n)/n==k or (s-m)/m==k or 
      (n-(s-n)/n)==k or (m-(s-m)/m)==k else False) -End,"
 a,b = [int(input()) for i in range(2)]
s=""""
if a%2 == 0:
    a=a/2
    s=s+""1""
else:
    a=a-1
    s=s+""2""
if a%2 == 0:
    a=a/2
    s=s+""1""
else:
    a=a-1
    s=s+""2""
if a%2 == 0:
    a=a/2
    s=s+""1""
else:
    a=a-1
    s=s+""2""
if a%2 == 0:
    a=a/2
    s=s+""1""
else:
    a=a-1
    s=s+""2""
if a%2 == 0:
    a=a/2
    s=s+""1""
else:
    a=a-1
    s=s+""2""
print(s) -End,"
 a,b = [int(input()) for _ in range(2)]
for i in range (a,b):
    print(i)
 -End,"
 a,b = map(int,input().split())
for i in range(a,b+1):
    print(i,end="" "")



 -End,"
 a = int(input())
b = int(input())
s = 0
for i in range(a,b):
    
    if a+s<b:
        s=s+1
        print(s,"". "",a-1+s, sep="""") -End,"
 a,b = int(input()),int(input())
for i in range(a,b+1):
    if i%2 ==0:
        print(i) -End,"
 a,b = int(input()),int(input())
for i in range(a,b+1):
    if i%2 ==0 and i%3!=0:
        print(i) -End,"
 a,b = int(input()),int(input())
print(*[i for i in range(int(a+a%2)-1,b+1,2) if (i%3==0 or i%7==0) and i%9!=0], sep='\n')




 -End,"
 b = int(input())
print(*[i**3 for i in range(10,b+1)], sep='\n')
 -End,"
 b = int(input())
print(*[(""%d x %d = %d"" %(i,b,i*b)) for i in range(1,10)], sep='\n') -End,"
 n, m, k = [int(input()) for i in range(3)]
s=n*m
s1=s-n
s2=s-m
print(True if s>=k and (m==1 or n==1 or k%n==0 or k%m==0 or (s%k==0 and k>1) or (s1%k==0 and k>1) or (s2%k==0 and k>1)or s/m==k or s1/m==k or s2/m==k or s/n==k or s-m==k or s-n==k or s-k==n or s-k==m or s1/n==k or s1-m==k or s1-n==k or s1-k==n or s1-k==m or s1/n==k or s2-m==k or s2-n==k or s2-k==n or s2-k==m or s1/n==k or s2/m==k or k<n or k<m) else False) -End,"
 b = int(input())
s= """"
s2=""""
for i in range(1,b+1):
    s=str(i)+s
    s2=s[::-1]
    print("" ""*(b-i),s, s2[1:i],sep="""")

 -End,"
 n=int(input())
i=1
while i<=n:
    print(i)
    i=i+1 -End,"
 n=int(input())
print(n)
while n!=0:
    n=n//10
    print(n) -End,"
 X = int(input())
H = int(input())
M = int(input())
t = H * 60 + M
t1 = t + X
print(t1 // 60)
print(t1 % 60)
 -End,"
 figure = input()

if figure == 'треугольник':
    n = 3
elif figure == 'прямоугольник':
    n = 2
elif figure == 'круг':
    n = 1
    
d = []
for i in range(n):
    d.append(float(input()))    

if len(d) == 3:
    p = (d[0] + d[1] + d[2]) / 2
    s = (p * (p - d[0]) * (p - d[1]) * (p - d[2])) ** 0.5
if len(d) == 2:
    s = d[0] * d[1]
if len(d) == 1:
    s = 3.14 * (d[0] ** 2)

print(s)
 -End,"
 n = int(input())
n_max = n
n_min = n
rem = n

n = int(input())
if n > n_max:
    n_max = n
elif n < n_min:
    n_min = n
    
n = int(input())
if n >= n_max:
    rem = n_max
    n_max = n    
elif n <= n_min:
    rem = n_min
    n_min = n
else:
    rem = n
    
print(n_max)
print(n_min)
print(rem)
 -End,"
 n = int(input())
n_prog = n
if 99 < n < 1000:
    n %= 100
if n > 20:
    n %= 10
if n == 1:
    str = ''
if 2 <= n <= 4:
    str = 'а'
if n == 0 or 5 <= n <= 20 or n == 1000:
    str = 'ов'
print(n_prog, 'программист{0}'.format(str))
 -End,"
 num = list(input())
sum_left = 0
sum_right = 0
for n in num[0:3]:
    sum_left += int(n)
for n in num[3:6]:
    sum_right += int(n)
if sum_left == sum_right:
    print('Счастливый')
else:
    print('Обычный')
 -End,"
 sum = 0
n = None
while n != 0:
    n = int(input())
    sum += n
print(sum)
 -End,"
 a = int(input())
b = int(input())
c = a * b
while b != 0:
   a, b = b, a % b
print(c // a)
 -End,"
 while True:
    n = int(input())
    if n < 10:
        continue
    elif n > 100:
        break
    else:
        print(n)
 -End,"
 n = []
for i in range(4):
    n.append(int(input()))
print('', *range(n[2], n[3] + 1), sep='\t')
for row in range(n[0], n[1] + 1):
    print(row, end='\t')
    for col in range(n[2], n[3] + 1):
        print(row * col, end='\t')
    print()
 -End,"
 s = input().lower()
print((s.count('g') + s.count('c')) / len(s) * 100)
 -End,"
 s = input() + '_'
res = ''
n = 1
for i in range(len(s) - 1):
    if s[i + 1] == s[i]:
        n += 1
    else:
        res += s[i] + str(n)
        n = 1
print(res)
 -End,"
 a = [int(i) for i in input().split()]
a_sum = []
if len(a) == 1:
    a_sum = a
else:
    for i in range(len(a)):
        a_sum.append(a[i-1] + a[(i+1)%len(a)])
print(*a_sum)
 -End,"
 a = [int(i) for i in input().split()]
a.sort()
b = []
for i in range(len(a) - 1):
    if a[i] == a[i+1]:
        if a[i] not in b:
            b += [a[i]]
print(*b)
 -End,"
 sum_a = int(input())
sum_square = sum_a ** 2
while sum_a != 0:
    n = int(input())
    sum_a += n
    sum_square += n ** 2
print(sum_square)
 -End,"
 n = int(input())
a = []
for i in range(n + 1):
    for j in range(i):
        a += [i]
print(*a[:n])
 -End,"
 a = [int(i) for i in input().split()]
x = int(input())
b = []
for i in range(len(a)):
    if a[i] == x:
        b += [i]
if len(b) == 0:
    print('Отсутствует')
else:
    print(*b)
 -End,"
 n = int(input())
a = [[0 for j in range(n)] for i in range(n)]
k = 1
for f in range(n // 2):
    h = n - (f + 1)
    for j in range(f, h): # строка
        a[f][j] = k
        k += 1
    for i in range(f, h): # колонка
        a[i][h] = k
        k += 1
    for j in range(h, f, -1): # строка
        a[h][j] = k
        k += 1
    for i in range(h, f, -1): # колонка
        a[i][f] = k
        k += 1
if n % 2 != 0:
    a[n // 2][n // 2] = k
for i in range(n):
    print(*a[i])
 -End,"
 def modify_list(l):
    k = len(l) - 1
    for i, val in enumerate(l[::-1]):
        if val % 2 == 0:
            l[k - i] = val // 2
        else:
            l.remove(val)
 -End,"
 str = input().lower().split()
s = set(str)
for k in s:
    sum = 0
    for w in str:
        if w == k:
            sum += 1
    print(k, sum)
 -End,"
 n = int(input())
d = {}
for i in range(n):
    x = int(input())
    if x not in d:
        d[x] = f(x)
    print(d[x])
 -End,"
 import sys
print(*sys.argv[1:len(sys.argv)])
 -End,"
 n = int(input())
champ = []
matches = []
for i in range(n):
    str = input().split(';')
    champ += [str]
    matches += [v for v in str[0:4:2]]
teams = set(matches)
dic = {}
for team in teams:
    dic[team] = [0,0,0,0,0]
    for t in matches:
        if t == team:
            dic[team][0] += 1 # Всего_игр
for team in champ:
    if team[1] == team[3]:
        dic[team[0]][4] += 1 # Всего_очков
        dic[team[2]][4] += 1 # Всего_очков
        dic[team[0]][2] += 1 # Ничьих
        dic[team[2]][2] += 1 # Ничьих       
    elif team[1] > team[3]:
        dic[team[0]][4] += 3 # Всего_очков
        dic[team[0]][1] += 1 # Побед
        dic[team[2]][3] += 1 # Поражений
    else:
        dic[team[2]][4] += 3 # Всего_очков
        dic[team[2]][1] += 1 # Побед
        dic[team[0]][3] += 1 # Поражений 
for team in dic:
    print('{0}:'.format(team), end='')
    print(*dic[team])
 -End,"
 def decoder(str, key_cod):
    cod = []
    cod += str
    for i, ch in enumerate(cod):
        for key in key_cod:        
            if key == ch:
                cod[i] = key_cod[key]
    print(*cod, sep='')

cod = []
decod = []
cod += input()
decod += input()
dict_cod = dict(zip(cod, decod))
dict_decod = dict(zip(decod, cod))

decoder(input(), dict_cod)
decoder(input(), dict_decod)
 -End,"
 n = int(input())
words, words_new = set(), set()
for i in range(n):
    [words.add(str.lower()) for str in [input()]]
n = int(input())
for i in range(n):
    [words_new.add(str.lower()) for str in input().split()]
for w in words_new:
    if w not in words:
        print(w)
 -End,"
 n = int(input())
instr = []
for i in range(n):
    instr += [input().split()]
point = [0, 0]
for val in instr:
    if val[0] == 'север':
        point[1] += int(val[1])
    elif val[0] == 'юг':
        point[1] -= int(val[1])
    elif val[0] == 'восток':
        point[0] += int(val[1])
    elif val[0] == 'запад':
        point[0] -= int(val[1])
print(*point)
 -End,"
 a = set()
for obj in objects:
    a.add(id(obj))
print(len(a))
 -End,"
 def foo(c, p, d):
    global ans
    if c == p:
        ans = 'Yes'
        return
    if c in d:
        if p in dic[c]:
            ans = 'Yes'
        else:
            temp = dic[c]
            for val in temp:
                foo(val, p, temp)


n = int(input())
dic = {}
for n in range(n):
    lst = input().split(' : ')
    dic[lst[0]] = [] if len(lst) == 1 else lst[1].split()
n = int(input())
for n in range(n):
    per, child = input().split()
    ans = 'No'
    foo(child, per, dic)
    print(ans)
 -End,"
 class LoggableList(list, Loggable):
    def append(self, x):
        Loggable.log(self, x)
        super(LoggableList, self).append(x)        
 -End,"
 def foo(c, p, d):
    global ans
    if c == p:
        ans = True
        return
    if c in d:
        if p in dic[c]:
            ans = True
        else:
            temp = dic[c]
            for val in temp:
                foo(val, p, temp)


n = int(input())
dic = {}
for n in range(n):
    lst = input().split(' : ')
    dic[lst[0]] = [] if len(lst) == 1 else lst[1].split()
n = int(input())
err = []
for n in range(n):
    err += [input()]
s = set()
for j, val in enumerate(err):
    for i in range(j + 1, len(err)):
        ans = False
        foo(err[i], val, dic)
        if ans is True:
            if err[i] not in s:
                s.add(err[i])
for val in err:
    if val in s:
        print(val)
 -End,"
 class NonPositiveError(Exception):
    pass


class PositiveList(list):
    def append(self, x):
        if x > 0:
            super(PositiveList, self).append(x)
        else:
            raise NonPositiveError
 -End,"
 import datetime as dt
date = map(int, input().split())
days = dt.timedelta(int(input()))
date = dt.date(*date) + days
print(date.year, date.month, date.day)
 -End,"
 class multifilter:
    def judge_half(pos, neg):
        # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)
        if pos >= neg:
            return True

    def judge_any(pos, neg):
        # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)
        if pos >= 1:
            return True

    def judge_all(pos, neg):
        # допускает элемент, если его допускают все функции (neg == 0)
        if neg == 0:
            return True

    def __init__(self, iterable, *funcs, judge=judge_any):
        # iterable - исходная последовательность
        # funcs - допускающие функции
        # judge - решающая функция
        self.list = []
        for x in iterable:
            pos = 0
            neg = 0
            for f in funcs:
                if f(x):
                    pos += 1
                else:
                    neg += 1
            if judge(pos, neg):
                self.list.append(x)                

    def __iter__(self):
        # возвращает итератор по результирующей последовательности
        for i in self.list:
            yield i
 -End,"
 def primes():
    lst = []
    n = 1
    while True:
        n += 1
        lim = int(n ** (1 / 2))
        k = lim + 1 if len(lst) > lim else len(lst) + 1
        if all(n % i != 0 for i in lst[:k]):
            lst += [n]
            yield n
 -End,"
 s0 = input()
s1 = input()
s2 = input()
n = 0
while True:
    if s1 in s0:
        s0 = s0.replace(s1, s2)
        n += 1
    else:
        print(n)
        break
    if n > 1000:
        print('Impossible')
        break
 -End,"
 s = input()
t = input()
n = 0
while t in s:
    n += 1
    i = s.index(t) + 1
    s = s.replace(s[:i], '', 1)
print(n)
 -End,"
 import re
import sys
pattern = r'cat.*cat'
for line in sys.stdin:
    line = line.rstrip()
    if re.search(pattern, line) is not None:
        print(line)
 -End,"
 import re
import sys
pattern = r'\bcat\b'
for line in sys.stdin:
    line = line.rstrip()
    if re.search(pattern, line) is not None:
        print(line)
 -End,"
 import re
import sys
pattern = r'z.{3}z'
for line in sys.stdin:
    line = line.rstrip()
    if re.search(pattern, line) is not None:
        print(line)
 -End,"
 import re
import sys
pattern = r'(\b\w+)\1\b'
for line in sys.stdin:
    line = line.rstrip()
    if re.search(pattern, line) is not None:
        print(line)
 -End,"
 import sys
import re
pattern = r'human'
for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(pattern, 'computer', line)
    print(line)
 -End,"
 import sys
import re
pattern = r'\b(\w)(\w)'
for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(pattern, r'\2\1', line)
    print(line)
 -End,"
 import sys
import re
pattern = r'(\w)\1+'
for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(pattern, r'\1', line)
    print(line)
 -End,"
 import requests
import re

def get_urls(url):
    r = requests.get(url)
    if r.status_code != 200:
        return
    string = r.text
    pattern = r'<a href=""(http.*)"">'
    return re.findall(pattern, string)

url_A = input()
url_B = input()

ans = 'No'
lst_A = get_urls(url_A)
for url in lst_A:
    try:
        lst_B = get_urls(url)
        if url_B in lst_B:
            ans = 'Yes'
            break
    except TypeError:
        pass
print(ans)
 -End,"
 import json

def foo(c, p, d):
    global ans
    if c == p:
        ans = True
        return
    if c in d:
        if p in cls[c]:
            ans = True
        else:
            temp = cls[c]
            for val in temp:
                foo(val, p, temp)

data = json.loads(input())
cls = {}
res = {}
for dic in data:
    cls[dic['name']] = dic['parents']
    res[dic['name']] = 0

for cls_per in res:
    for cls_ch in res:
        ans = False
        foo(cls_ch, cls_per, cls)
        if ans:
            res[cls_per] += 1

res_sort = list(res.keys())
res_sort.sort()
for i in res_sort:
    print(i, ':', res[i])
 -End,"
 import pandas as pd
my_data = pd.DataFrame({'type': ['A', 'A', 'B', 'B'], 'value': [10, 14, 12, 23]})
 -End,"
 import pandas as pd    
subset_1 = my_stat.iloc[:10, :3:2]
index = list(range(1, 4)) + list(range(5, 20))
subset_2 = my_stat.loc[index, 'V2':'V4':2]
 -End,"
 import pandas as pd    
# переменная my_stat уже создана
subset_1 = my_stat.query(""V1 > 0 & V3 == 'A'"")
subset_2 = my_stat.query(""V2 != 10 | V4 >= 1"")
 -End,"
 import pandas as pd    
# переменная my_stat уже создана
my_stat.columns = ['session_value', 'group', 'time', 'n_users']
 -End,"
 import pandas as pd    
# переменная my_stat уже создана
my_stat = my_stat.fillna({'session_value': 0})
my_stat.loc[my_stat.n_users < 0, 'n_users'] = my_stat.query('n_users >= 0').n_users.median()
 -End,"
 import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import precision_score
# X_train, y_train, X_test, y_test
clf = DecisionTreeClassifier()
dtc = clf.fit(X_train, y_train)
predictions = dtc.predict(X_test)
precision = precision_score(y_test, predictions, average='micro')
 -End,"
 import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV

x = train.drop('y', axis=1)
y = train.y
dt = DecisionTreeClassifier()
parametrs = {'max_depth': range(1, 11), 'min_samples_split': range(2, 11), 'min_samples_leaf': range(1, 11)}
search = GridSearchCV(dt, parametrs, cv=5)
search.fit(x, y)
best_tree = search.best_estimator_
predictions = best_tree.predict(test)
 -End,"
 import pandas as pd

total_birds = wintering.expanding().sum()
 -End,"
 def fib(n):
    f = [0, 1]
    for i in range(2, n + 1):
        f += [f[i - 1] + f[i - 2]]
    return f[n]

print(fib(int(input()))) -End,"
 def fib_digit(n):
    a, b = 0, 1
    for i in range(2, n + 1):
        a, b = b, (a + b) % 10
    return b

print(fib_digit(int(input())))
 -End,"
 def gcd(a, b):
    if a == 0:
        return b
    if b == 0:
        return a
    if a >= b:
        return gcd(a % b, b)
    if b >= a:
        return gcd(b % a, a)

a, b = map(int, input().split())
print(gcd(a, b))
 -End,"
 str = input()

pat = ('(', ')', '{', '}', '[', ']')
dic = {')': '(', '}': '{', ']': '['}
stack = []
result = 'Success'
for i, ch in enumerate(str):
    if ch not in pat:
        continue
    elif ch not in dic and i != len(str) - 1:
            stack += [[i, ch]]
    elif len(stack) != 0 and stack[-1][1] == dic[ch]:
        stack.pop()
    else:
        result = i + 1        
        break
    
if i == len(str) - 1 and len(stack) != 0 and result == 'Success':
    result = stack[-1][0] + 1
print(result)
 -End,"
 def Height(node):
    height = 1
    if lst[node] != -1:
        height = Height(lst[node]) + 1 if depth[node] == 0 else depth[node]
    depth[node] = height
    return height

n = int(input())
lst = [int(i) for i in input().split()]
depth = [0 for i in range(n)]
for i in range(n):
    Height(i)
print(max(depth))
 -End,"
 s, n = [int(i) for i in input().split()]
queue = [[0, 0]] # [t_start, t_d]
for i in range(n):
    t_a, t_d = [int(j) for j in input().split()]
    t_now = t_a # текущее время
    t_end = queue[-1][0] + queue[-1][1] # время конца обработки предыдущего пакета
    t_start = t_end if t_end >= t_now else t_now # время начала обработки входящего пакета
    while len(queue) > 1 and queue[1][0] + queue[1][1] <= t_now:
        queue.pop(1)
    if len(queue) <= s:
        queue += [[t_start, t_d]]
        print(t_start)
    else:
        print(-1) -End,"
 q = int(input())
stack = []
s_max = 0
for i in range(q):
    instr = input().split()
    if instr[0] == 'push':
        s = int(instr[1])
        if s > s_max:
            s_max = s
        stack.append([s, s_max if len(stack) != 0 else s])
    if instr[0] == 'pop' and len(stack) != 0:
        stack.pop(-1)
        if len(stack) != 0:
            s_max = stack[-1][1]
    if instr[0] == 'max' and len(stack) != 0:
        print(stack[-1][1]) -End,"
 
def main():
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155]
    n = int(input())
    print(fib[n])


if __name__ == ""__main__"":
    main() -End,"
 import heapq
import sys
lines = list(line for line in sys.stdin)
h = []
for line in lines[1:]:
    try:
        element = int(line.strip().split()[1])
        heapq.heappush(h, -element)
    except:
        print(-heapq.heappop(h))
 -End,"
 import sys
import bisect
n_m, *intervals, dots = [tuple(int(num) for num in line.strip().split()) for line in sys.stdin]
left, right = zip(*intervals)
left = sorted(list(left))
right = sorted(list(right))
res =  []
for dot in dots:
    i = bisect.bisect_right(left, dot) #as right as possible
    j = bisect.bisect_left(right, dot) #as left as possible
    res.append(str(i - j))
print("" "".join(res)) -End,"
 minutes = int(input())
print(minutes // 60, minutes % 60, sep = '\n') -End,"
 import calendar
print(""Високосный"") if calendar.isleap(int(input())) else print(""Обычный"")




 -End,"
 import operator

a = float(input())
b = float(input())
op = input()

ops = {'+' : operator.add, 
      '-' : operator.sub,
      '*' : operator.mul,
      '/' : operator.truediv,
      'mod' : operator.mod,
      'pow' : operator.pow,
      'div' : operator.floordiv
     }

try:
    print(ops[op](a,b))
except:
    print(""Деление на 0!"")
 -End,"
 res = r'''
figure = {'треугольник': [3, lambda a, b, c: ((a+b+c)/2*((a+b+c)/2-a)*((a+b+c)/2-b)*((a+b+c)/2-c))**0.5], 
          'прямоугольник': [2, lambda a, b: a*b], 
          'круг': [1, lambda r: 3.14*r**2]}
f = input()
print(figure[f][1](*(float(input()) for _ in range(figure[f][0]))))
'''
exec(res)



 -End,"
 import sys

next(sys.stdin)
nums = [int(num) for num in next(sys.stdin).strip().split()]

res_dict, res = dict(), 0
#реализация через словарь res_dict, 
#key - последний элемент подпоследовательности, value - длина подпоследовательности
#res - инвариант: ""в каждый момент времени показывает длину наибольшей подпоследовательности""
#res - это просто максимум, который нужно вывести в конце
for i,num in enumerate(nums):   #однопроходный алгоритм
    sub_seq = 0                 #subsequence подпоследовательность
    for key,value in res_dict.items():
        if num % key == 0 and value > sub_seq:
            sub_seq = value    
    res_dict[num] = sub_seq + 1

    if sub_seq +1 > res:        #подсчет максимума за один проход
        res = sub_seq +1
    
print(res)
 -End,"
 import sys

s1, s2 = list([ch for ch in line.strip()] for line in sys.stdin)
n, m = len(s1) + 1, len(s2) + 1

opt_arr = [[0 for i in range(n)] for j in range(m)]

for raw in range(m):
    for column in range(n):
        if raw == 0 or column == 0:
            opt_arr[raw][column] = raw + column
        else:            
            current = min(opt_arr[raw-1][column-1], opt_arr[raw-1][column], opt_arr[raw][column-1])            
            if current == opt_arr[raw-1][column-1] and s1[column-1] == s2[raw-1]:
                opt_arr[raw][column] = current
            else:
                opt_arr[raw][column] = current + 1
            
print(opt_arr[m-1][n-1])

""""""
def print_matrix(arr):
    for i in arr:
        print(*i)

print_matrix(opt_arr)
print("""")

raw, column = m-1, n-1
out1 = """"
out2 = """"
while raw > 0 and column > 0:   
    cur = min(opt_arr[raw][column-1], opt_arr[raw-1][column-1], opt_arr[raw-1][column])
    if cur == opt_arr[raw-1][column-1]:
        out1 += s1[column-1]
        out2 += s2[raw-1]
        opt_arr[raw][column] = ""#""
        raw -= 1
        column -= 1
    elif cur == opt_arr[raw-1][column]:
        out1 += '_'
        out2 += s2[raw-1]
        opt_arr[raw][column] = ""#""
        raw -= 1
    elif cur == opt_arr[raw][column-1]:
        out1 += s1[column-1]
        out2 += '*'
        opt_arr[raw][column] = ""#""
        column -= 1
    else:
        print(""WTF"")

while raw > 0:
    opt_arr[raw][column] = ""#""
    out1 += '_'
    out2 += s2[raw-1]
    raw -= 1
while column > 0:
    opt_arr[raw][column] = ""#""
    out1 += s1[column-1]
    out2 += '*'
    column -= 1
opt_arr[raw][column] = '#'    

print_matrix(opt_arr)
print(out1[::-1], out2[::-1], sep = ""\n"")
"""""" -End,"
 a, b = int(input()), int(input())

s1 = sum([i for i in range(a, b+1) if i % 3 == 0])
s2 = sum([1 for i in range(a, b+1) if i % 3 == 0])

print(s1/s2) -End,"
 nums = [int(num) for num in input().split()]
if len(nums) == 1:
    print(*nums)
else:
    a = nums[1:] + [nums[0]]
    b = [nums[-1]] + nums[:-1]
    #c = list(map(sum, zip(a,b)))
    c = list(map(lambda x, y: x + y, a, b))
    print(*c)
 -End,"
 from collections import Counter
nums = [int(num) for num in input().split()]
for key, value in Counter(nums).items():
    if value > 1:
        print(key, end = "" "")
print("""")
 -End,"
 import sys

w, n = map(int, next(sys.stdin).strip().split())
weights = list(map(int, next(sys.stdin).strip().split()))

for i,item in enumerate(weights):
    
    curr = [0 for j in range(w+1)]
    for j in range(w+1):
        if i == 0:
            if j >= item:
                curr[j] = item
        else:
            if j < item:
                curr[j] = prev[j]
            else:
                curr[j] = max(prev[j], item + prev[j-item])
        pass
    prev = curr
    pass
    
print(curr[-1]) -End,"
 import sys
from functools import lru_cache

@lru_cache(maxsize=None)
def staircase(nums):    
    n = len(nums)
    if n == 1:       
        return max(0, nums[0])
    elif n == 2:        
        return max(nums[0], nums[1], nums[0] + nums[1])
    else:
        s_1 = staircase(nums[:-1])
        s_2 = staircase(nums[:-2])
        return max(nums[-1] + s_1, nums[-2] + s_2)
    

def main():   
    _ = int(next(sys.stdin))
    nums = list(map(int, next(sys.stdin).split()))
    nums = tuple([0] + nums)  
    print(nums[-1] + staircase(nums[:-1]))


if __name__ == ""__main__"":
    main()
 -End,"
 def calc(n):
    arr = [{n}]
    p = 0

    while True:
        curr = set()
        for i,val in enumerate(arr[p]):
            if val % 3 == 0:
                curr.update({val // 3})
            if val % 2 == 0:
                curr.update({val // 2})
            curr.update({val - 1})
            pass
        arr.append((curr))
        p += 1
        if 1 in curr:
            break
        pass

    output = [1]
    for i, current in enumerate(reversed(arr[1:-1])):
        prev = output[i]
        if prev * 3 in current:
            output.append(prev * 3)
            continue
        if prev * 2 in current:
            output.append(prev * 2)
            continue
        if prev + 1 in current:
            output.append(prev + 1)
            continue
        pass
    output.append(n)
    
    print(p)
    print(*output)

    
def main():   
    n = int(input())
    if n == 1:
        print(0, 1, sep = ""\n"")
    else:
        calc(n)


if __name__ == ""__main__"":
    main()
 -End,"
 import sys
import re

pattern = r'((0|11)|(10(1|00)*01))*'
for line in sys.stdin:
    line = line.rstrip()
    if re.fullmatch(pattern, line):
        print(line)
 -End,"
 def closest_mod_5(x):
    return list(filter(lambda x: x % 5 == 0, range(x, x+5)))[0]   
    return [a for a in range(x, x+5) if a % 5 == 0][0]
 -End,"
 class LoggableList(list, Loggable):
    def append(self, a):
        super().log(a)
        super().append(a) -End,"
 class multifilter:
    def judge_half(pos, neg):
        return pos >= neg

    def judge_any(pos, neg):
        return pos >= 1

    def judge_all(pos, neg):
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = []
        n = len(funcs)
        for x in iterable:
            pos = sum([funcs[i](x) for i in range(n)])
            if judge(pos, n - pos):
                self.iterable.append(x)

    def __iter__(self):
        return self

    def __next__(self):
        try:
            el = self.iterable.pop(0)
        except:
            raise StopIteration
        else:
            return el
 -End,"
 import requests
import re
pattern = r'(https://.*?html)'

def check(home, addr, level):   
    if home == addr and level == 2:
        return True
    if level >= 2:
        return False
    home_data = requests.get(home)
    text = home_data.content.decode('utf-8')
    hrefs = re.findall(pattern, text)
    return any(list(check(href, addr, level + 1) for href in hrefs))

home_page, final_page = input(), input()
res = check(home_page, final_page, 0)
print([""No"", ""Yes""][res]) -End,"
 from xml.etree import ElementTree as xml
from collections import OrderedDict

root = xml.fromstring(input())
colors = OrderedDict(dict.fromkeys(['red', 'green', 'blue'], 0))


def show_level(cube, level):
	if cube.attrib['color'] in colors:
		colors[cube.attrib['color']] += level
	for element in cube.findall('cube'):
		show_level(element, level + 1)


show_level(root, 1)
print(*[val for val in colors.values()]) -End,"
 import sys
sys.setrecursionlimit(2000)

n = int(next(sys.stdin))
parents_list = [int(parent) for parent in next(sys.stdin).split()]
parents_dict = dict(enumerate(parents_list))
parents_list = [0 for i in range(n)]


def from_child_to_root(child, level):
	if parents_list[child] or parents_dict[child] == -1:
		return parents_list[child] + level - 1
	else:
		return from_child_to_root(parents_dict[child], level + 1) 

depth = 1
for child in parents_dict:
	curr_depth = from_child_to_root(child, 1)
	parents_list[child] = curr_depth
	if curr_depth > depth:
		depth = curr_depth

print(depth + 1) -End,"
 dict_1 = {'IV': 4, 'IX': 9, 'XL': 40, 'XC': 90, 'CD': 400, 'CM': 900}
dict_2 = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}

rome = str(input()).upper()
res = 0

while rome:
    if any((rome.startswith(key) for key in dict_1.keys())):
        res += dict_1[rome[0:2]]
        rome = rome[2:]
    else:
        res += dict_2[rome[0]]
        rome = rome[1:]    
print(res)
 -End,"
 from collections import Counter
marks = str(input()).replace("" "", """")
c = Counter(marks)
print(""{:.2f}"".format(c['A'] / len(marks)))

 -End,"
 import sys
		
n, m = map(int, next(sys.stdin).split())
data = []
for line in sys.stdin:
	bool_line = []
	for symbol in line.strip():
		bool_line.append(int(symbol == '*'))
	data.append(bool_line)

mines = [(row, column) for column in range(m) for row in range(n) if data[row][column]]

for row in range(n):
	for column in range(m):
		if (row, column) in mines:
			print('*', sep='', end='')
		else:
			s = sum([1 for i in range(-1,2) for j in range(-1,2) if (row+i, column+j) in mines])
			print(s, sep='', end='')
	print()
 -End,"
 arr, num = list(input().split()), input()
print(' '.join([str(i) for i, val in enumerate(arr) if val == num]) or ""None"")  -End,"
 dict_rome = {0:'',
    1:'I', 2:'II', 3:'III', 4:'IV', 5:'V', 6:'VI', 7:'VII', 8:'VIII', 9:'IX',
    10:'X', 20:'XX', 30:'XXX', 40:'XL', 50:'L', 60:'LX', 70:'LXX', 80:'LXXX', 90:'XC',
    100:'C', 200:'CC', 300:'CCC', 400:'CD', 500:'D', 600:'DC', 700:'DCC', 800:'DCCC', 900:'CM',
    1000:'M', 2000:'MM', 3000:'MMM'}

n = int(input())
number = ""{:0>4d}"".format(n)
for i in reversed(range(4)):
    res = int(number[3-i]) * 10**i
    print(dict_rome[res],end='')
print() -End,"
 import sys
		
n, m = map(int, next(sys.stdin).split())
data = []
for line in sys.stdin:
	binary_line = []
	for symbol in line.strip():
		binary_line.append(int(symbol == 'X'))
	data.append(binary_line)

for row in range(n):
	for column in range(m):
		area = sum([1 for i in (-1,0,1) for j in (-1,0,1) if data[(row + i)%n][(column + j)%m]])
		print(['.', 'X'][2 < area - 0.5*data[row][column] < 4], end='')
	print()
 -End,"
 import re
s = input()
pattern = r'(\d*\D)'
for i in re.findall(pattern, s):
    print(i[-1] * int(i[:-1] or 1), end='')
print() -End,"
 nums = [int(num) for num in input().split()]
jolly= [1 for i in range(len(nums)-1)]

for i in range (len(nums)-1):
    try:
        jolly[abs(nums[i+1] - nums[i]) - 1] = 0
    except IndexError:
        break
print([""Jolly"", ""Not jolly""][any(jolly)]) -End,"
 operator_dict = {
    'plus' : lambda x,y: x + y,
    'minus' : lambda x,y: x - y,
    'multiply' : lambda x,y: x * y,
    'divide' : lambda x,y: x // y
    }

print(eval(""operator_dict['{1}']({0}, {2})"".format(*input().split()))) -End,"
 n = int(input())
row, column, dy, dx = 0, 0, 0, 1
spiral = [[0] * n for i in range(n)]

for curr in range(n ** 2):
    spiral[row][column] = curr + 1
    if not(-1 < column + dx < n) or not(-1 < row + dy < n) or not(spiral[row+dy][column+dx] == 0):    
        dx, dy = -dy, dx
    row, column = row + dy, column + dx
    
[print(*line) for line in spiral]
 -End,"
 def hanoi(n, start, finish, middle):
    if n == 1:
        print(f""{start} - {finish}"")
    else:
        hanoi(n-1, start, middle, finish)
        print(f""{start} - {finish}"")
        hanoi(n-1, middle, finish, start)
        
hanoi(int(input()), 1, 3, 2)
 -End,"
 import re

def duplication(values):
    hand = """".join(sorted(values))
    pattern = r'((\w)(\2+))'
    res = re.findall(pattern, hand)
    if len(res) == 1:
        if len(res[0][0]) == 2:
            return 100
        elif len(res[0][0]) == 3:
            return 300
        else:
            return 800
    elif len(res) == 2:  
        if len(res[0][0]) == 2 and len(res[1][0]) == 2:
            return 200
        else:
            return 700
    return 0

def flush(suits):
    hand = """".join(sorted(suits))
    pattern = r'((\w)(\2+))'    
    res = re.findall(pattern, hand)
    if len(res[0][0]) == 5:
        return 500
    else:
        return 0
    
def straight(values):
    cards = ""23456789TJQKA""
    values.sort(key = lambda x: cards.find(x))
    hand = """".join(values)
    if hand in cards:
        if hand.endswith(""A""):
            return 499
        else:
            return 400
    else:
        return 0
    
def hand_score(hand):    
    hand = hand.replace(""10"", ""T"").split()
    values = [card[0] for card in hand]
    suits = [card[1] for card in hand]
    d = duplication(values)
    f = flush(suits)
    s = straight(values)

    score = {
          0 : ""High Card"",
        100 : ""Pair"",
        200 : ""Two Pairs"",
        300 : ""Three of a Kind"",
        400 : ""Straight"",
        499 : ""Straight"",
        500 : ""Flush"",
        700 : ""Full House"",
        800 : ""Four of a Kind"",
        900 : ""Straight Flush"",
        999 : ""Royal Flush""
    }
    
    return score[d + f + s]

print(hand_score(input()))

 -End,"
 import calendar 
print([""Regular"",""Leap""][calendar.isleap(int(input()))]) -End,"
 dict_rome = {0:'',
    1:'I', 2:'II', 3:'III', 4:'IV', 5:'V', 6:'VI', 7:'VII', 8:'VIII', 9:'IX',
    10:'X', 20:'XX', 30:'XXX', 40:'XL', 50:'L', 60:'LX', 70:'LXX', 80:'LXXX', 90:'XC',
    100:'C', 200:'CC', 300:'CCC', 400:'CD', 500:'D', 600:'DC', 700:'DCC', 800:'DCCC', 900:'CM',
    1000:'M', 2000:'MM', 3000:'MMM'}

n = int(input())
number = ""{:0>4d}"".format(n)
for i in reversed(range(4)):
    res = int(number[3-i]) * 10**i
    print(dict_rome[res],end='')
print()
 -End,"
 import sys

n, m = map(int, next(sys.stdin).split())
data = []
for line in sys.stdin:
    binary_line = []
    for symbol in line.strip():
        binary_line.append(int(symbol == 'X'))
    data.append(binary_line)

for row in range(n):
    for column in range(m):
        area = sum([1 for i in (-1,0,1) for j in (-1,0,1) if data[(row + i)%n][(column + j)%m]])
        print(['.', 'X'][2 < area - 0.5*data[row][column] < 4], end='')
    print() -End,"
 def Koch(n):
    if n == 1:
        print(""turn 60\nturn -120\nturn 60"")
    else:
        Koch(n-1)
        print(""turn 60"")
        Koch(n-1)
        print(""turn -120"")
        Koch(n-1)
        print(""turn 60"")
        Koch(n-1)
        
Koch(int(input())) -End,"
 def hanoi(n, start, finish, middle):
    if n == 1:
        print(f""{start} - {finish}"")
    else:
        hanoi(n-1, start, middle, finish)
        print(f""{start} - {finish}"")
        hanoi(n-1, middle, finish, start)
        
hanoi(int(input()), 1, 3, 2) -End,"
 led_dict = {
    '0' : [' -- ', '|  |', '|  |', '    ', '|  |', '|  |', ' -- '],
    '1' : ['    ', '   |', '   |', '    ', '   |', '   |', '    '],
    '2' : [' -- ', '   |', '   |', ' -- ', '|   ', '|   ', ' -- '],
    '3' : [' -- ', '   |', '   |', ' -- ', '   |', '   |', ' -- '],
    '4' : ['    ', '|  |', '|  |', ' -- ', '   |', '   |', '    '],
    '5' : [' -- ', '|   ', '|   ', ' -- ', '   |', '   |', ' -- '],
    '6' : [' -- ', '|   ', '|   ', ' -- ', '|  |', '|  |', ' -- '],
    '7' : [' -- ', '   |', '   |', '    ', '   |', '   |', '    '],
    '8' : [' -- ', '|  |', '|  |', ' -- ', '|  |', '|  |', ' -- '],
    '9' : [' -- ', '|  |', '|  |', ' -- ', '   |', '   |', ' -- ']
}

def form_message(number_line):
    res = """"
    n = len(number_line)
    res += 'x' + '----'*n + '-'*(n - 1) + 'x\n'
    for row in range(7):
        res += '|'
        for digit in number_line:
            res += led_dict[digit][row]
            res += ' '
        res = res[:-1]
        res += '|\n'
    res += 'x' + '----'*n + '-'*(n - 1) + 'x\n'
    return res

print(form_message(input()))
 -End,"
 import sys

n, m = map(int, next(sys.stdin).split())
data = []
for line in sys.stdin:
    bool_line = []
    for symbol in line.strip():
        bool_line.append(int(symbol == '*'))
    data.append(bool_line)

mines = [(row, column) for column in range(m) for row in range(n) if data[row][column]]

for row in range(n):
    for column in range(m):
        if (row, column) in mines:
            print('*', sep='', end='')
        else:
            s = sum([1 for i in (-1, 0, 1) for j in (-1, 0, 1) if (row+i, column+j) in mines])
            print(s, sep='', end='')
    print()
 -End,"
 n = int(input())
row, column, dy, dx = 0, 0, 0, 1
spiral = [[0] * n for i in range(n)]

for curr in range(n ** 2):
    spiral[row][column] = curr + 1
    if not(-1 < column + dx < n) or not(-1 < row + dy < n) or not(spiral[row+dy][column+dx] == 0):    
        dx, dy = -dy, dx
    row, column = row + dy, column + dx
    
[print(*line) for line in spiral] -End,"
 class Point:
	def __init__(self, x, y):
		self._x = x
		self._y = y

	def distance(self, point):
		return ((self._x - point._x)**2 + (self._y - point._y)**2) ** 0.5

a = Point(float(input()), float(input()))
b = Point(float(input()), float(input()))
print(""{0:.5f}"".format(a.distance(b))) -End,"
 _, word, *_ = input().split()
print([word, word[:-1]][word[-1] == ',']) -End,"
 length, a, b = int(input()), int(input()), int(input())

days = (length - a) // (a - b)
if (length - a) % (a - b) == 0:
    days += 1
else:
    days += 2
print(days) -End,"
 from collections import Counter

class Node:
	def __init__(self, freq=0, letter="""", code="""", leaf=False):
		self.letter = letter
		self.freq = freq
		self.code = code
		self.is_leaf = leaf

	def left_right(self, left, right):
		self.left = left
		self.right = right

def tree_walk(node, res):
	if node.is_leaf == True:
		res[node.letter] = node.code
	else:
		node.left.code = node.code + ""0""		
		node.right.code = node.code + ""1""
		tree_walk(node.left, res)
		tree_walk(node.right, res)


def main():
	message = input()
	nodes = []
	for key,val in Counter(message).items():
		nodes.append(Node(letter=key, freq=int(val), leaf=True, code=""0""))


	nodes.sort(key = lambda x: -x.freq)
	while len(nodes) > 1:
		node_right = nodes.pop()
		node_left = nodes.pop()
		new_node = Node(freq = node_left.freq + node_right.freq)
		new_node.left_right(node_left, node_right)
		nodes.append(new_node)
		nodes.sort(key = lambda x: -x.freq)

	codebook = dict()
	tree_walk(nodes[0], codebook)

	encoded_message = """"
	for letter in message:
		encoded_message += codebook[letter]

	print(len(codebook), len(encoded_message))
	for key,val in codebook.items():
		print(f""{key}: {val}"")
	print(encoded_message)




if __name__ == ""__main__"":
	main()
 -End,"
 
n, _ = map(int, input().split())
codebook = dict()
for i in range(n):
	value, key = input().split("": "")
	codebook[key] = value
encoded_message = input()

decoded_message = """"
while encoded_message:
	for key in codebook:
		if encoded_message.startswith(key):
			decoded_message += codebook[key]
			encoded_message = encoded_message[len(key):]
			break
print(decoded_message) -End,"
 
import sys
import heapq
from collections import namedtuple

Process = namedtuple(""Process"", [""end"",""id"",""start""])

n, m = map(int, next(sys.stdin).split())
requests = iter([request for request in next(sys.stdin).split()])

processes = [Process(0, i, 0) for i in range(n)]
heapq.heapify(processes)
for i in range(m):
	process_time = int(next(requests))
	old_process = heapq.heappop(processes)
	new_process = Process(old_process.end + process_time, old_process.id, old_process.start)
	heapq.heappush(processes, new_process)
	print(old_process.id, old_process.end) -End,"
 import sys
from collections import namedtuple  

def in_order(tree, curr):
	res = []
	if curr == -1:
		return []
	else:
		res += in_order(tree, tree[curr].left)
		res += [tree[curr].value]
		res += in_order(tree, tree[curr].right)
	return res

def pre_order(tree, curr):
	res = []
	if curr == -1:
		return []
	else:
		res += [tree[curr].value]
		res += pre_order(tree, tree[curr].left)		
		res += pre_order(tree, tree[curr].right)
	return res

def post_order(tree, curr):
	res = []
	if curr == -1:
		return []
	else:
		res += post_order(tree, tree[curr].left)
		res += post_order(tree, tree[curr].right)
		res += [tree[curr].value]
	return res

def main():
	Node = namedtuple(""Node"", [""value"", ""left"", ""right""])
	n = int(next(sys.stdin))
	tree = [Node(*map(int, line.split())) for line in sys.stdin]
	print(*in_order(tree, 0))
	print(*pre_order(tree, 0))
	print(*post_order(tree, 0))


if __name__ == ""__main__"":
	main()
	 -End,"
 import sys
from collections import namedtuple

Node = namedtuple(""Node"", [""value"", ""left"", ""right""])
Order = namedtuple(""Order"", [""pre"", ""middle"", ""post""])

def walk(tree, curr, order):
	if curr != -1:
		order.pre.append(tree[curr].value)
		walk(tree, tree[curr].left, order)
		order.middle.append(tree[curr].value)
		walk(tree, tree[curr].right, order)
		order.post.append(tree[curr].value)


n = int(next(sys.stdin))
tree = [Node(*map(int, line.split())) for line in sys.stdin]
order = Order([], [], [])
walk(tree, 0, order)
print(*order.middle)
print(*order.pre)
print(*order.post) -End,"
 import sys
from collections import namedtuple

import sys
sys.setrecursionlimit(15000)

Node = namedtuple(""Node"", [""value"", ""left"", ""right""])
res = []

def in_order(tree, curr):
	global res
	if curr == -1:
		return None
	else:
		in_order(tree, tree[curr].left)
		res += [tree[curr].value]
		in_order(tree, tree[curr].right)


n = int(next(sys.stdin))
tree = [Node(*map(int, line.split())) for line in sys.stdin]
flag = True

if n: in_order(tree, 0)

for i in range(len(res) - 1):
	if res[i] > res[i+1]:
		flag = False
		break

print([""INCORRECT"", ""CORRECT""][flag]) -End,"
 def pack(digits, radixes):
    n = 0
    for i in range(len(digits)):
        n = n * radixes[i] + digits[i]
    return n

t1 = pack([int(input()), int(input()), int(input())], [24, 60, 60])
t2 = pack([int(input()), int(input()), int(input())], [24, 60, 60])
print(t2 - t1) -End,"
 a, b, c = (int(input()) for _ in ""123"")
print([""NO"", ""YES""][max(a, b, c) < a + b + c - max(a, b, c)]) -End,"
 (a, b, h) = (int(input()) for _ in ""123"")
if h < a: print(""Deficiency"")
elif h > b: print(""Excess"")
else: print(""Normal"")
     -End,"
 print({""1"":""You have chosen a square"", 
       ""2"":""You have chosen a circle"",
       ""3"":""You have chosen a triangle"",
       ""4"":""You have chosen a rhombus""}.get(input(), ""There is no such shape!"")) -End,"
 x = input()
a = ""0""*(4-len(x)) + x
if a == a[::-1]: print(1)
else: print(0) -End,"
 x1, y1, x2, y2 = map(int, input().split())

area = [(x1, y1)]
if x1 == x2 or y1 == y2:
    print(""YES"")
else:
    x, y = x1, y1
    alpha = 1
    for i in range(16):
        x += alpha
        y += alpha
        area.append((x, y))
        if x == 9 or x == 0 or y == 9 or y == 0:
            alpha *= -1
            
    x, y = x1, y1
    alpha = 1    
    for i in range(16):
        x += alpha
        y -= alpha
        area.append((x, y))
        if x == 9 or x == 0 or y == 9 or y == 0:
            alpha *= -1
            
    if (x2, y2) in area:
        print(""YES"")
    else:
        print(""NO"")

 -End,"
 x, y, z = [float(input()) for _ in ""123""]

p = (x + y + z) / 2
print((p * (p-x) * (p-y) * (p-z)) ** 0.5)
 -End,"
 M, N, nums = *map(int, input().split()), list(map(int, input().split()))
print(*[nums.count(i + 1) for i in range(N)]) -End,"
 from collections import Counter
for k, v in sorted(Counter([len(w) for w in input().split()]).items()): print('%d: %d' % (k, v)) -End,"
 a, b, oper = float(input()), float(input()), input()
print(eval('a %s b' % (oper.replace('mod', '%').replace('div', '//').replace('pow', '**'))) if oper not in ['div', 'mod', '/'] or b != 0 else 'Division by 0!') -End,"
 print(""{X} and {Y} sat in the tree.\n{X} had fallen, {Y} was stolen.\nWhat's remaining in the tree?"".format(X=input(), Y=input()))


 -End,"
 a, b = map(int, input().split())
print(*list(map(lambda x, y: y[x % 3 != 0][x % 5 != 0].replace('@', str(x)), range(a, b+1), [[['FizzBuzz', 'Fizz'], ['Buzz', '@']]] * (b - a + 1))), sep='\n') -End,"
 print((int(input()) + 2) // 2 * 2) -End,"
 print(-int(input()) * 3600 - int(input()) * 60 - int(input()) + int(input()) * 3600 + int(input()) * 60 + int(input())) -End,"
 print(sum([x * t * int(input()) for t in (-1, 1) for x in (3600, 60, 1) ])) -End,"
 print(*divmod((int(input()) * 100 + int(input()))* int(input()), 100)) -End,"
 print('YES' if sum(map(int, list(input()))) % 3 == 0 else 'NO') -End,"
 l, p = map(int, input().split())
print([['No user with login @ found'] * 2,['Wrong password', 'Login success']][l == 100500][p == 424242].replace('@', str(l))) -End,"
 class ExtendedStack(list):
    def push(self, x):
        self.append(x)
           
    def sum(self):
        self.push(self.pop() + self.pop())
        
    def sub(self):
        self.push(self.pop() - self.pop())
        
    def mul(self):
        self.push(self.pop() * self.pop())
    
    def div(self):
        self.push(self.pop() // self.pop()) -End,"
 l = list(map(int, input().split()))   
print(*(l[i - 1] + l[i + 1 - len(l)] for i, x in enumerate(l)) if len(l) != 1 else l) -End,"
 N, M, K = map(int, (input() for _ in range(3)))
print('YES' if K % N == 0 and K // N <= M or K % M == 0 and K // N <= M else 'NO') -End,"
 from functools import reduce
def f(n):
    return reduce(lambda x, y: x * y, range(n, 0, -2)) if n >= 1 else 1 -End,"
 x1, y1, x2, y2 = map(int, input().split())
print('YES' if x1 == x2 or y1 == y2 or x1 + y1 == x2 + y2 or x1 - y1 == x2 - y2 else 'NO') -End,"
 enc_dic = dict(zip(input(), input()))
dec_dic = {w:k for k, w in enc_dic.items()}
print(''.join([enc_dic[c] for c in input()]))
print(''.join([dec_dic[c] for c in input()])) -End,"
 n = int(input())
win, draw, defeat, points = {}, {}, {}, {}
for _ in range(n):
    values = input().split(';')
    teamA, scoreA, teamB, scoreB = values[0], int(values[1]), values[2], int(values[3])
    if scoreA < scoreB:
        tmp = scoreA
        scoreA = scoreB
        scoreB = tmp
        tmp = teamA
        teamA = teamB
        teamB = tmp    
    if scoreA == scoreB:
        draw[teamA] = draw.get(teamA, 0) + 1
        draw[teamB] = draw.get(teamB, 0) + 1
        points[teamA] = points.get(teamA, 0) + 1
        points[teamB] = points.get(teamB, 0) + 1
    else:
        win[teamA] = win.get(teamA, 0) + 1
        points[teamA] = points.get(teamA, 0) + 3
        defeat[teamB] = defeat.get(teamB, 0) + 1
        points[teamB] = points.get(teamB, 0)
for team in points.keys():
    print('%s:%d %d %d %d %d' % (team, win.get(team, 0) + draw.get(team, 0) + defeat.get(team, 0), 
                                 win.get(team, 0), draw.get(team, 0), defeat.get(team, 0), points[team])) -End,"
 _, l = input(), list(input().split())
print(*[y for x in zip(l[1::2], l[::2]) for y in x], ['', l[len(l) - 1]][len(l) % 2 != 0], sep=' ') -End,"
 n, m = map(int, input().split())
a = list(input().split() for i in range(n))
print(*[' '.join([a[j][i] for j in range(n - 1, -1, -1)]) for i in range(m)], sep='\n') -End,"
 s = '%04d' % int(input())
print(int(s[0] == s[3] and s[2] == s[1])) -End,"
 print(*map({'A': '00', 'C': '01', 'G': '10', 'T': '11'}.get, input()), sep='') -End,"
 N, M, X, Y = map(int, (input() for _ in range(4)))
print(min(X, Y, min(N, M) - X, max(N, M) - Y)) -End,"
 def fib(n):   
    return fib(n - 1) + fib(n - 2) if n > 2 else 1
print(fib(int(input()))) -End,"
 input(), print(*sorted(map(int, input().split()))) -End,"
 from collections import Counter
print(*[f'{k} {v}' for k, v in Counter(input().lower().split()).items()], sep='\n') -End,"
 n, m = map(int, input().split())
l, i, j = [input().split() for i in range(n)], *map(int, input().split())
for k in range(n):
    l[k][i], l[k][j] = l[k][j], l[k][i]
print(*[' '.join(row) for row in l], sep='\n') -End,"
 print(sum(filter(lambda n: n % 6 == 0, map(int, [input() for _ in range(int(input()))])))) -End,"
 from sys import stdin
x = list(map(float, stdin.read().split('\n')[:-1]))
m = sum(x) / len(x)
print((sum((v - m) ** 2 for v in x) / (len(x) - 1)) ** 0.5) -End,"
 from sys import stdin
from statistics import stdev
print(stdev(map(float, stdin.read().split('\n')[:-1]))) -End,"
 def gcd(a, b):
    return gcd(b % a, a) if a != 0 else b
a, b = map(int, input().split())
print(a * b // gcd(a, b)) -End,"
 from sys import stdin
print(sum(map(int, filter(lambda x: x.startswith('-') and x[1:].isdigit() or x.isdigit(), stdin.read().split())))) -End,"
 print('YES' if f'{int(input()):b}'.count('1') == 1 else 'NO') -End,"
 from math import gcd
a, b = int(input()), int(input())
print(a * b // gcd(a, b)) -End,"
 from sys import stdin
l = [list(map(int, r.split())) for r in stdin if r.strip() != 'end']
n = len(l)
m = len(l[0]) if n > 0 else 0
print(*[' '.join(map(str, [l[i - 1][j] + l[i + 1 - n][j] + l[i][j - 1] + l[i][j + 1 - m] for j in range(m)])) for i in range(n)], sep='\n') -End,"
 a = list(map(int, input().split()))
for i in range(1, len(a)):
    j = i - 1
    k = a[i]
    while j >= 0 and k < a[j]:
        a[j + 1] = a[j]
        j -= 1
    a[j + 1] = k
print(*a) -End,"
 def primes():
    x = 1
    yield 2
    while True:
        x += 2
        isprime = True
        i = 3
        while i * i <= x:
            if x % i == 0:
                isprime = False
                break
            i += 2
        if isprime:
            yield x -End,"
 _, l = input(), sorted(map(int, input().split()))
print(l[-1] * l[-2]) -End,"
 C = 1
for i in range(0, int(input())):
    C = (2 * (2 * i + 1) * C // (i + 2))
print(C % 1000000007) -End,"
 from functools import reduce
print(*reduce(lambda a, b: (a[0] + b[0], a[1] + b[1]), [([[0, int(dist)], [-int(dist), 0]][dir == 'West'][dir == 'East'], [[0, -int(dist)], [int(dist), 0]][dir == 'North'][dir == 'South']) for dir, dist in [input().split() for _ in range(int(input()))]], (0, 0))) -End,"
 dic = {input().lower() for _ in range(int(input()))}
print(*{x for _ in range(int(input())) for x in input().lower().split() if x not in dic}, sep='\n') -End,"
 print(sum(int(x) for x in [input() for _ in range(int(input()))] if x[-1] == '4')) -End,"
 import math
def closest_mod_5(x):
    return math.ceil(x / 5) * 5




 -End,"
 from sys import stdin
print(max(map(int, stdin.readlines()))) -End,"
 print(max(map(int, __import__('sys').stdin.readlines()))) -End,"
 isPointInCircle = lambda x, y, xc, yc, r: (x - xc) ** 2 + (y - yc) ** 2 <= r ** 2
print('YES' if isPointInCircle(*map(float, __import__('sys').stdin.readlines())) else 'NO') -End,"
 print('YES' if (lambda x, y, xc, yc, r: (x - xc) ** 2 + (y - yc) ** 2 <= r ** 2)(*map(float, __import__('sys').stdin.readlines())) else 'NO') -End,"
 distance = lambda x1, y1, x2, y2: ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
print(distance(*map(float, __import__('sys').stdin.readlines()))) -End,"
 print(*map(lambda s: __import__('re').sub(r'(?i)\b[Aa]+\b', 'argh', s, count=1), __import__('sys').stdin.readlines()), sep='') -End,"
 print((lambda n: '1 programmer' if n == 1 else '%d programmers' % n)(int(input()))) -End,"
 print(__import__('re').sub(r'([a-zA-Z])\1+', lambda mo: ""%d%s"" % (len(mo.group(0)), mo.group(0)[0]), input()))




 -End,"
 print(*[k for k, v in __import__('collections').Counter(input().split()).items() if v > 1]) -End,"
 from functools import reduce

def cumsum_and_erase(A, erase=1):
    B = reduce(lambda l, x: l + [l[-1] + x] if len(l) > 0 else [x], A, [])
    B = list(filter(lambda x: x != erase, B))
    return B -End,"
 from itertools import accumulate

def cumsum_and_erase(A, erase=1):    
    return list(filter(lambda x: x != erase, accumulate(A))) -End,"
 def process(sentences):
    return list(map(lambda s: ' '.join(filter(str.isalpha, s.split())), sentences)) -End,"
 class Neuron:    
    def __init__(self, w, f = lambda x: x):
        self.w = w
        self.f = f
    
    def forward(self, x):
        self.last_x = x
        return self.f(sum(wi*xi for xi, wi in zip(self.w, x)))
        
    def backlog(self):
        return self.last_x -End,"
 n = int(input())
divisor = 2
while n > 1:
    if n % divisor == 0:
        n //= divisor
        print(divisor, end=' ')
    else:
        divisor += 1 -End,"
 n, A, B = int(input()), *[list(map(int, input().split())) for _ in range(2)]
imaxA = ibestA = ibestB = 0
for i in range(1, n):
    if A[imaxA] < A[i]:
        imaxA = i
    if A[ibestA] + B[ibestB] < A[imaxA] + B[i]:
        ibestA = imaxA
        ibestB = i
print(ibestA, ibestB)  -End,"
 def translate(n,k=2):
    m=n
    l=[]
    while int(m/k):
        l.append(str(m%k))
        m=int(m/k)
    l.append(str(m%k))
    return """".join(l[-1::-1])
         -End,"
 def factorial(n):
    if n<=1: return 1
    else: return n*factorial(n-1)

def sf(n):
     if n<=1: return 1
     else: return factorial(n)*sf(n-1)    -End,"
 #your code
def maxId(L):
    k=[]
    for word in L: 
        k.append(int(word))
    return k.index(max(k)) -End,"
 # import libraries
import math
def f(x):
    return 2.*math.atan(x)
    # You code of function
arg=10000
lim = f(arg)#Your code of lim
print (round(lim,3)) -End,"
 from math import exp
# import libraries
def def_e(x):
    return round((exp(x)-exp(x-0.0000001))/0.0000001,3) -End,"
 def even_elements(l):
    return [x for x in l if x%2==0]
    #your code -End,"
 def last_to_first(l):
    return l[-1::-1]
    #your code -End,"
 n = int(input()) # Input and convert to int
res=0
for i in range(0,n+1):
    if i%5==0 and i%3!=0:
        res+=i
# Your code
print(res) -End,"
 def common(list_a, list_b):
    return [a for a in list_a if a in list_b]       
    #your code -End,"
 x_first=[]
other=[]
def front_x(l):
    x_first=[word for word in l  if word!=str("""") and word[0]==""x""]
    other=[item for item in l if item not in x_first ]
   # others=words-x_first
    return sorted(x_first)+sorted(other) -End,"
 def fib(n):
    if n <=2: return 1
    else: return fib(n-1)+fib(n-2)
    #your code -End,"
 def is_prime(n):
    answer=True
    for i in range(2,int(n**0.5)+1):
        if n%i==0 : 
            answer= False 
            break
    
    return answer
    #your code -End,"
 s = input()
def both_ends(s):
    if len(s)>=2: return s[0]+s[1]+s[-2]+s[-1]
    else: return """"
    
    # Your code

print (both_ends(s))# Your code -End,"
 s = input()


print (s[0]+s[1:].replace(s[0],""*"")) -End,"
 # put your python code here
import math
def f(x):
    return (math.sin(math.pi * x/2)) /x

print(round(f(1000000),3)) -End,"
 def derivative(f, x0=0):
    h=0.0000001
    return     round( (f(x0+h)-f(x0)) /h,3)
    # your code -End,"
 k=[]
def list_pull(L):
    for elems in L:
        cicle(elems)
    return k

def cicle(element):
    if type(element) is list: 
        for elem in element: cicle(elem)
    else: 
        k.append(element)
        return k
         -End,"
 def front_back(a,b):
    k1=int(len(a)/2+0.5)
    k2=int(len(b)/2+0.5)
    return a[0:k1]+b[0:k2]+a[k1::]+b[k2::]
    # your code -End,"
 D={}
def mimic_dict(string):
    words=string.split()
    D[""""]=[words[0]]
    i=0
    for word in words: 
        if word!=words[-1]: 
            if word in D:
                D[word].append(words[i+1])
            else: D[word]=[words[i+1]]
            #print words[i+1]
            i+=1
    return D
 -End,"
 mylist=[]
def print_mimic(mimic_dict, word):
    j=0
    #print (word)
    while j<200:
        if word : 
            mylist.append(word)
            j+=1
        try:
            word = random.choice(mimic_dict[word])
        except:
            word=""""
        #print string 
    return "" "".join(mylist)
 -End,"
 k=[]

def mydeep(L1,k):
    for L in L1: 
        cicle(L,L1,k)
    return k
    
    
def cicle(L,L1,k) :   
    if type(L) is list:
        t=[]
        for elem in L: 
            cicle(elem,L,t) 
        k.append(t)
        
    else: 
        k.append(L)
    return k


        
    
L2= mydeep(L1,k) -End,"
 # put your python code here
import re
print (re.split('[^a-z]', input().lower())) -End,"
 # put your python code here
import numpy
n=int(input())
M1 = numpy.eye(n)
v1 = numpy.ones(n)
L=[]
i=0
while i<n:  
    L = list(map(float,input().split()))
    M1[i]=L[0:-1]
    v1[i]=L[-1]
    i+=1


if numpy.linalg.det(M1)==0: print(""Система не имеет решений"")
else: 
    r = numpy.linalg.solve(M1,v1) #Находим решение системы
    print ("" "".join(list(map(str,r)))) -End,"
 import numpy
n=int(input())
M1 = numpy.eye(n)
v1 = numpy.ones(n)

i=0
while i<n:  
    L = list(map(float,input().split()))
    j=0
    while j<n:
        M1[i][j]=L[0]**float(j)
        j+=1
    v1[i]=L[1]
    i+=1


#if numpy.linalg.det(M1)==0: print(""Система не имеет решений"")
#else: 
r = numpy.linalg.solve(M1,v1) #Находим решение системы
print ("" "".join(list(map(str,r)))) -End,"
 from scipy.optimize import golden
def f(x):
    return (x+a)**2.-b
    #your code

def g(x):
    return abs(f(x))
    #your code

print(golden(f,brack=(-10, -4),full_output=True)[1],  golden(g,brack=(-10, -4),full_output=True)[1]) -End,"
 L=list(map(int,input().split()))
if len(L)<2: print(""Ошибка. Кучек слишком мало, чтобы можно было решить задачу."")
else:
    if len(L)==2 and L[0]!=L[1]: print(""Кучки нельзя уравнять"")
    elif sum(L)%2==len(L)%2 or (sum(L)%2!=len(L)%2 and sum(L)%2==0): print(""Кучки можно уравнять"")
    else: print(""Кучки нельзя уравнять"")




 -End,"
 L=list(map(int,input().split()))
if len(L)<2: print(""Ошибка. Кучек слишком мало, чтобы можно было решить задачу."")
else:
    if len(L)==2 and L[0]!=L[1]: print(""Кучки нельзя уравнять"")
    elif sum(L)%2==len(L)%2 or (sum(L)%2!=len(L)%2 and sum(L)%2==0): 
      cond =True
      count = 0
      L=sorted(L)
      while sum(L)/len(L) != L[-1]:
        #print (L)
        L[0]+=1
        L[1]+=1
        L=sorted(L)
        count+=1
      print(count, L[-1])
    else: print(""Кучки нельзя уравнять"")



 -End,"
 L=list(map(int,input().split()))
i=0
Chet=-1
Nechet=0

if (L[0]+L[1])%2: Nechet-=1
else: Chet-=1

while i<L[0]:
  j=0
  while j<L[1]:
    if (i+j)%2: Nechet+=1
    else: Chet+=1
    #print (j)
    j+=1
  i+=1
if Chet==Nechet: print(""Замостить можно"")
else: print(""Замостить нельзя"")





 -End,"
 L=int(input())
if L<10: print(L)
else:
    k=int(L/9)
    p=str(L%9)
    print(p+""9""*k)




 -End,"
 L=list(map(int,(input().split())))


def chetnost(L):
  
  c=1
  for element in L:
      i=L.index(element)
      while i<len(L):
        if element<=L[i]: c*=1
        else: c*=-1
        i+=1
  return c
  
print (chetnost(L))
  



 -End,"
 line1=[]
[line1.append(int(x)) for x in input().split()]

L=[] 
E=[]
i=1
while i<=line1[0]:
  [L.append(int(x)) for x in input().split()]
  if i%2!=0:
        [E.append(x) for x in range(1+line1[1]*(i-1),1+line1[1]*(i))]     
  else:
        [E.append(x) for x in range(line1[1]*(i),line1[1]*(i-1),-1)]
  #print E      
  i+=1
if line1[0]%2 !=0: E.remove(E[-1]) 
else: E.remove(E[-line1[1]]) 
#print E


def chetnost(L):
  c=1
  for element in L:
      i=L.index(element)
      while i<len(L):
        if element>L[i]: c*=-1
        i+=1
  return c  
if chetnost(L)==chetnost(E): print(""Бинго!"")
else: print(""Не повезло..."")
  



 -End,"
 L=[str(input()) for i in range(3)]
if L[2]==""mod"": L[2]=""%""
elif L[2]==""pow"": L[2]=""**""
elif L[2]==""div"": L[2]=""//""


if (L[2] ==""/"" or L[2] ==""//""or L[2] ==""%"") and float(L[1])==0: print (""Деление на 0!"")
else: 
    L[2]="")""+L[2]+""(""
    exec (          ""print(( ""+         "" "".join([str(float(L[0])),L[2],str(float(L[1]))])     +""))""                )




 -End,"
 n=(input())
k=int((n[-1]))
k3=0
if int(n)>=10:
 k3=n[-2]+n[-1]

if k==0 or 5<=k<=9 or 10<=int(k3)<=19 : print(n+ "" программистов"")    
elif k==1: print(n+"" программист"")
elif 2<=k<=4: print(n+ "" программиста"")





 -End,"
 # put your python code here
n=input()
if sum(list(map(int,[l for l in n[0:3]]))) == sum(list(map(int,[l for l in n[3:6]]))): print (""Счастливый"")
else: print (""Обычный"")



 -End,"
 n=int(input())
m=[[0 for j in range(n)] for i in range(n)]

def frame(start,length,m,counter):
  for i in range(start, start+length):
    counter+=1
    m[start][i]=counter
  for i in range(start+1,start+length):
    counter+=1
    m[i][length-1+start]=counter
  
  for i in range(length+start-1,start,-1):
    counter+=1
    m[start+length-1][i-1]=counter
  for i in range (length+start-2,start,-1):
    counter+=1
    m[i][start]=counter
  return counter, m

k=n # lenght of the row
j=0 # row's number
counter=0

while True:
  counter,m = frame(j,k,m,counter)
  j+=1
  k-=2
  if n==1 or m[j][j]!=0: break

for l in m:
  for w in l:
    print (w, end=""\t"")
  print () -End,"
 n = int(input())
d={}
for i in range(n):
    l=input().split("";"")
    if l[0] in d:
        d[l[0]][0]+=1
    else:
        d[l[0]]=[1,0,0,0]
    if l[2] in d:
        d[l[2]][0]+=1
    else:
        d[l[2]]=[1,0,0,0]
    if l[1]==l[3]: 
        d[l[0]][2]+=1
        d[l[2]][2]+=1
    elif int(l[1])>int(l[3]): 
        d[l[0]][1]+=1
        d[l[2]][3]+=1
    else          : 
        d[l[0]][3]+=1
        d[l[2]][1]+=1
for key in d.keys():
    print (key, end="":"")
    for i in d[key]:
      print (i, end="" "")
    print (d[key][1]*3+d[key][2])



 -End,"
 l1=input()
l2=input()

to_encode=input()
to_decode=input()

for s in to_encode:
  print(l2[l1.index(s)],end="""")
print()

for s in to_decode:
  print(l1[l2.index(s)],end="""")

 -End,"
 n=int(input())

def add(namespase, var):
  global d
  d[namespase].append(var) 
    
def create(what, where):
  global d
  d[what]= []
  d[where].append(d[what])
  dicts[what]=where
    
def get(where, what):
  temp=True
  global dicts
  global d
  for el in d[where]:
    #print (what , el, d[where])
    if what == el: 
      print (where)
      temp=False
  if temp and where== ""global"" and  not what in d[""global""]: print ( ""None"")
  elif temp: get(dicts[where], what)

d={}
d[""global""]=[]
dicts={}

dicts[""global""]=""stop""

for i in range(n):
  l = input().strip().split()
  if l[0]==""add"": add(l[1],l[2])  
  if l[0]==""create"": create(l[1],l[2])
  if l[0]==""get"": get(l[1],l[2]) -End,"
 import sys
import re



for line in sys.stdin:
    line = line.rstrip()
    if len(re.findall(""cat"", line)) > 1:
        print (line)

 -End,"
 import sys
import re


for line in sys.stdin:
    line = line.rstrip()
    print(     re.sub(r""(\b\W*)(\w)(\w)"",r""\1\3\2"",line)           )
    
        
    
            

 -End,"
 import sys
import re


for line in sys.stdin:
    line = line.rstrip()
    print(     re.sub(r""(\w)\1*"",r""\1"",line)           )


 -End,"
 import json

d = {}
d_out = {}

data = json.loads(input())

for el in data:
    d[el[""name""]] = el[""parents""]
    d_out[el[""name""]] = set()

    



    
    
def add_all_child (current, parent, d, d_out):
    for  element in d.keys():
        if parent in d[element]:
            d_out[current].add(element)
            add_all_child (current, element, d, d_out)
    
            
for name in sorted(d.keys()):
    current = name
    add_all_child (current, name, d, d_out)  
    print (name, len(d_out[name])+1, sep ="" : "" )

    






 -End,"
 def numerics(n):
    return [int(i) for i in str(n)]
    #your code




 -End,"
 def kaprekar_step(L):
    a = """"
    b = """"
    for i in sorted(L):
        a=a+str(i)
        b=str(i)+b
    return int(b)-int(a)    
    #your code




 -End,"
 def numerics(n):
    return [int(i) for i in str(n)]

def kaprekar_step(L):
    a = """"
    b = """"
    for i in sorted(L):
        a=a+str(i)
        b=str(i)+b
    return int(b)-int(a) 

def kaprekar_loop(n):
    print (n)
    new = kaprekar_step(numerics(n))
    if new!=n:
        kaprekar_loop(new)
    pass
 -End,"
 M=[]

def kaprekar_loop(n):
    if not kaprekar_check(n): print (""Ошибка! На вход подано число {}, не удовлетворяющее условиям процесса Капрекара"".format(str(n)))
    else:
        print (n)
        new = kaprekar_step(numerics(n))
        M.append(n)
        if new!=n:
            if new in M: 
                print(""Следующее число - {}, кажется процесс зациклился..."".format(str(new)))
            else: kaprekar_loop(new)
        pass



def numerics(n):
    return [int(i) for i in str(n)]
    #your code

def kaprekar_check(n):
    k = str(n)
    if len(k)!=3 and len(k)!=4 and len(k)!=6 : return False
    elif n==100 or n==1000 or n==100000 : return False
    elif len(set(numerics(n)))==1: return False
    else: return True
    #your code   
    
def kaprekar_step(L):
    a = """"
    b = """"
    for i in sorted(L):
        a=a+str(i)
        b=str(i)+b
    return int(b)-int(a)

 -End,"
 def kaprekar(n):
    n2=str(n**2)
    #print (n2)
    for i in range(0,len(n2)-1):
        if n2[i+1:].lstrip(""0"") == """": return False
        #print(i)
        if int(n2[0:i+1])+int(n2[i+1:].lstrip(""0"")) == n:
            return True
    return False
    #your code

 -End,"
 def convert(n, base_to=10, base_from=10):
    string = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    n = str(n)
    k = len(n)-1
    n10 = 0
    # conv n to base10:
    while k>=0:
        n10+=(string.index(n[k]))*base_from**(len(n)-1-k)
        k=k-1
    #return n10
    n_out=""""
    while n10 >= 1:
        n_out=str(n_out)+string[int(n10%base_to)]
        n10/=base_to
      
    return n_out[-1::-1]
    
    


 -End,"
 import numpy as np
Z = np.diag([1.]*int(input()))



 -End,"
 
import numpy as np
np.random.seed(42)
d = [int(x) for x in input().split()]
Z = np.random.rand(d[0],d[1],d[2])




 -End,"
 

import numpy as np
np.random.seed(42)

Z = np.random.rand(*map(int, input().split()))
print (np.amin(Z), np.amax(Z), sep=""\n"")



 -End,"
 import numpy as np
np.random.seed(42)
print (np.mean(np.random.rand(*map(int,input().split()))))


 -End,"
 

import numpy as np
np.random.seed(42)
x = np.mean(np.random.rand(*map(int,input().split())),axis=0)
print (np.amin(x), np.amax(x), sep = ""\n"" )


 -End,"
 
import numpy as np
Z = np.zeros(list(map(int,input().split())))
Z[0,:] = 1
Z[-1,:] = 1
Z[:,-1] = 1
Z[:,0] =1


 -End,"
 import numpy as np
Z = np.ones(list(map(int,input().split())))
Z[1:-1,1:-1] = 0




 -End,"
 import numpy as np
A = np.zeros((Z.shape[0]+2,Z.shape[1]+2), dtype=int)
A[1:-1,1:-1]=Z
Z = A





 -End,"
 import numpy as np
Z = np.pad(Z,1,'constant' )



 -End,"
 a = int(input())*60
b = int(input())
print(a+b)




 -End,"
 a = int(input())
print(a//60)
print(a%60)

 -End,"
 a = int(input())
if a % 4 == 0 and a % 100 != 0 or a % 400 == 0:
    print('Високосный')
else:
    print('Обычный')


 -End,"
 a, b, c = (int(input()) for i in range(3))
p = (a+b+c)/2
S = (p*(p-a)*(p-b)*(p-c))**0.5
print(S)



 -End,"
 a, b, oper = float(input()), float(input()), input()
if (oper == '/' or oper == 'mod' or oper == 'div') and b == 0:
    print('Деление на 0!')
elif oper == '+':
    print(a+b)
elif oper == '-':
    print(a-b)
elif oper == '/':
    print(a/b)
elif oper == '*':
    print(a*b)
elif oper == 'mod' and b != 0:
    print(a%b)
elif oper == 'pow':
    print(a**b)
elif oper == 'div' and b != 0:
    print(a//b) -End,"
 a = int(input())
if a % 10 == 1 and not a % 100 == 11:
    print(a,'программист')
elif (a % 10 == 2 or a % 10 == 3 or a % 10 == 4) and not (a % 100 == 11 or a % 100 == 12 or a % 100 == 13 or a % 100 == 14):
    print(a,'программиста')
else:
    print(a,'программистов')

 -End,"
 a, b = int(input()), 0
while a != 0:
    b += a
    a = int(input())
print(b)


 -End,"
 a, b, c , d = (int(input()) for i in range(4))
print('', end = '\t')
for p in range(c, d+1):
    print(p, end = '\t')
print()
for i in range(a, b+1):
    print(i, end = '\t')
    for j in range(c, d+1):
        print(i*j, end = '\t')
    print()

 -End,"
 a = input()
print(((a.upper().count('G') + a.upper().count('C')) / len(a))*100)




 -End,"
 a, b, c = input(), 0, 1
while b < len(a):
    if b+1 == len(a):
        print(a[b]+str(c), end = '')
    elif a[b] == a[b+1]:
        c += 1
    else:
        print(a[b]+str(c), end = '')
        c = 1
    b += 1




 -End,"
 a = [int(i) for i in input().split()]
s = 0
for j in a:
    s += j
print(s)




 -End,"
 a = [int(j) for j in input().split()]
if len(a) != 1:
    for i in range(len(a)):
        print(a[i-1]+a[i-(len(a)-1)], end = ' ')
else:
    print(a[0])


 -End,"
 a = [int(i) for i in input().split()]
b = []
for j in a:
    if a.count(j) > 1 and j not in b:
        b.append(j)
if len(b) > 0:
    for x in b:
        print(x, end = ' ')



 -End,"
 b = [int(input())]
while sum(b) != 0:
    a = int(input())
    b.append(a)
for i in range(len(b)):
    b[i] = b[i]*b[i]
print(sum(b)) -End,"
 a = int(input())
b = []
for i in range(1, a+1):
    while b.count(i) < i and len(b) < a:
        b.append(i)
for i in b:
    print(i, end = ' ')

 -End,"
 a, b = [int(i) for i in input().split()], int(input())
for i in range(len(a)):
    if a[i] == b:
        print(i, end = ' ')
if b not in a:
    print('Отсутствует')




 -End,"
 a = [input().split()]
b = []
while ['end'] not in a: # принимает на вход данные, которые преобразуются в прямоугольную матрицу
    b += a
    a = [input().split()]
for i in range(len(b)): # преобразует все элементы в матрице в числа
    for j in range(len(b[i])):
        b[i][j] = int(b[i][j])
a = [[0 for j in range(len(b[i]))] for i in range(len(b))] # присваивает перменной a список с нулями, равный по количеству элементов в b
for i in range(len(b)):
    for j in range(len(b[i])):
        a[i][j] =  (b[i-1][j]) + (b[(i+1)%len(b)][j]) + (b[i][j-1]) + (b[i][(j+1)%len(b[i])])
for i in a:
    print(*i)




 -End,"
 a, b = int(input()), 1
c = [[0 for j in range(a)] for i in range(a)]
x, y, z = 0, 0, 0
while b <= a**2:
    for i in range(a):
        for j in range(a-z):
            c[x][y] = b
            b += 1
            y += 1
        y -= 1
        x += 1
        z += 1
        for j in range(a-z):
            c[x][y] = b
            b += 1
            x += 1
        y -= 1
        x -= 1
        for j in range(a-z):
            c[x][y] = b
            b += 1
            y -= 1
        y += 1
        x -= 1
        z += 1
        for j in range(a-z):
            c[x][y] = b
            b += 1
            x -= 1
        x += 1
        y += 1

for i in c:
    print(*i)



 -End,"
 def f(x):
    if x <= -2: y = 1 - (x + 2) ** 2
    elif -2 < x <= 2: y = - x / 2
    else: y = (x - 2) ** 2 + 1
    return y



 -End,"
 def modify_list(l):
    i = 0
    while i < len(l):
        if l[i] % 2 == 0:
            l[i] = l[i] // 2
            i += 1
        else:
            l.remove(l[i])



 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key in d:
        d[key] += [value]
    elif key*2 in d:
        d[2*key] += [value]
    else:
        d[2*key] = [value]

# не добавляйте кода вне функции -End,"
 s = input().lower().split()
for i in set(s):
    print(i, s.count(i))



 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
dic = dict()
for x in range(int(input())):
    x = int(input())
    if x not in dic:
        dic[x] = f(x)
    print(dic[x])
      



 -End,"
 from math import pi
print(2*pi*float(input())) -End,"
 a = [input().split(';') for i in range(int(input()))]
result = dict()
for i in range(len(a)):
        result[a[i][0]] = [0, 0, 0, 0, 0]
        result[a[i][2]] = [0, 0, 0, 0, 0]
for i in range(len(a)):   #победы, ничьи, поражения
    if a[i][1] > a[i][3]:
        result[a[i][0]][1] += 1
        result[a[i][2]][3] += 1
    elif a[i][1] == a[i][3]:
        result[a[i][0]][2] += 1
        result[a[i][2]][2] += 1
    else:
        result[a[i][2]][1] += 1
        result[a[i][0]][3] += 1
for key in result:   #  очки
    result[key][4] = (result[key][1]*3)+(result[key][2]*1)
for key in result:   #  количество сыгранных игр
    result[key][0] = result[key][1]+result[key][2]+result[key][3]
for key, value in result.items():
    print(key, end = ':'), print(*value)



 -End,"
 alphabet, cipher, encrypt, decipher = [list(input()) for i in range(4)]
key1, key2 = dict(zip(alphabet, cipher)), dict(zip(cipher, alphabet))
for i in encrypt:   print(key1[i], end = '')
print()
for i in decipher:  print(key2[i], end = '')



 -End,"
 a = set(input().lower() for i in range(int(input())))
b = [set(input().lower().split(' ')) for i in range(int(input()))]
c = set()
for i in b:
    c = c | i
for i in c:
    if i not in a:
            print(i)




 -End,"
 a = [input().split(' ') for i in range(int(input()))]
b = [0, 0]
for i in a:
    if 'север' in i:    b[1] += int(i[1])
    elif 'восток' in i: b[0] += int(i[1])
    elif 'юг' in i: b[1] -= int(i[1])
    elif 'запад' in i:  b[0] -= int(i[1])
print(*b)



 -End,"
 print(sum(int(input()) for i in range(int(input())))) -End,"
 print(len({id(i) for i in objects}))



 -End,"
 def closest_mod_5(x):
    while x % 5 != 0:
        x += 1
    return x




 -End,"
 namespaces = {'global': None}
varibles = {'global': set()}
def create(nmsp, prnt):
    namespaces[nmsp] = prnt
    varibles[nmsp] = set()

def add(nmsp, var):
    varibles[nmsp].add(var)

def get(nmsp, var):
   if nmsp == None:
       print(nmsp)
   elif var in varibles[nmsp]:
       print(nmsp)
   else:
       get(namespaces[nmsp], var)


for i in range(int(input())):
    cmd, nmsp, var = input().split()
    if cmd == 'create':
        create(nmsp, var)
    elif cmd == 'add':
        add(nmsp, var)
    else:
        get(nmsp, var)





 -End,"
 class MoneyBox:
    def __init__(self, capacity=100):
        self.capacity = capacity
        self.s = 0

    def can_add(self, v):
        return (self.capacity - self.s - v) >= 0

    def add(self, v):
        if self.can_add(v):
            self.s += v





 -End,"
 class Buffer:
    def __init__(self):
        self.lst = []

    def add(self, *a):
        for i in a:
            self.lst.append(i)
            if len(self.lst) >= 5:
                print(sum(self.lst[:5]))
                del self.lst[:5]

    def get_current_part(self):
        return self.lst -End,"
 all_parents = []
def checker(x, y):
    global all_parents

    all_parents += dict_mro[y]
    for i in dict_mro[y]:
        checker(x, i)

dict_mro = dict()
for i in range(int(input())):
    a = input().split(' ')
    if ':' in a:
        a.remove(':')
    for i in a:
        if i not in dict_mro:
            dict_mro[i] = []
    dict_mro[a[0]] = a[1:]
for i in range(int(input())):
    x, y = input().split()
    checker(x, y)
    if x in all_parents or x == y:
        print('Yes')
    else:
        print('No')
    all_parents = []

 -End,"
 class LoggableList(list, Loggable):
    def append(self, x):
        super(LoggableList, self).append(x)
        self.log(x)
 -End,"
 try:
    foo()
except ZeroDivisionError:
    print('ZeroDivisionError')
except ArithmeticError:
    print('ArithmeticError')
except AssertionError:
    print('AssertionError')


 -End,"
 exception_mro = dict()
exception_list = []
def f(x):
    for i in exception_mro[x]:
        if i in exception_list:
            return True
    for i in exception_mro[x]:
        return f(i)

for i in range(int(input())):
    a = input().split()
    if len(a) == 1:
        exception_mro[a[0]] = []
    else:
        exception_mro[a[0]] = a[2:]
for i in range(int(input())):
    x = input()
    if f(x) == True:
        print(x)
    exception_list += [x]





 -End,"
 class NonPositiveError(Exception):
    pass

class PositiveList(list):
    def append(self, x):
        if x > 0:
            super(PositiveList, self).append(x)
        else:
            raise NonPositiveError

 -End,"
 import datetime

year, month, day = map(int, input().split())
date = datetime.date(year, month, day) + datetime.timedelta(days=int(input()))
print(date.year,date.month, date.day)




 -End,"
 class multifilter:
    def judge_half(pos, neg):
        return pos >= neg

    def judge_any(pos, neg):
        return pos >= 1

    def judge_all(pos, neg):
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        for i in self.iterable:
            pos, neg = 0, 0
            for j in self.funcs:
                if j(i):
                    pos += 1
                else:
                    neg += 1
            if self.judge(pos, neg):
                yield i




 -End,"
 from math import factorial

def primes():
    a = 2
    while True:
        if (factorial(a-1) + 1) % a == 0:
            a += 1
            yield a - 1
        else:
            a += 1




 -End,"
 s, a, b = [input() for i in range(3)]
x = 0
if a in s and a in b:
    print('Impossible')
else:
    while a in s:
        x += 1
        s = s.replace(a, b)
    print(x)




 -End,"
 s, t, c = [input() for i in range(2)] + [0]
for i in range(len(s)):
    if s.startswith(t, i):
        c += 1
print(c) -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    if re.findall(r'\bcat\b', line):
        print(line)
 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    if re.findall(r'z.{3}z', line):
        print(line)
 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    if re.findall(r'\\', line):
        print(line)
 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    if re.findall(r'\b(\w+)\1\b', line):
        print(line)
 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'human', 'computer', line))



 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'\ba+\b', 'argh', line, 1, re.IGNORECASE))



 -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'\b(\w)(\w)(\b|\w+)\b', r'\2\1\3', line)) -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'(\w)\1+', r'\1', line))




 -End,"
 import re
import sys
pattern = r'(1(01*0)*1|0)*'
for line in sys.stdin:
    line = line.rstrip()
    if re.fullmatch(pattern, line):
        print(line)
 -End,"
 import requests
import re

pattern = r'.*\""(.*?)\"".*'
link1 = input()
link2 = input()
res = requests.get(link1)
status = ''
if res.status_code == 200:
    for link in re.findall(pattern, res.text.rstrip()):
        res1 = requests.get(link)
        for url in re.findall(pattern, res1.text.rstrip()):
            if url == link2:
                status = True
                break

else:
    status = False
if status:
    print('Yes')
else:
    print('No')




 -End,"
 import requests
import re

f = requests.get(input()).text.rstrip()
b = re.findall(r""<a.*?href=[\""|\']?(?:\w+://)?(\w[\w\.-]+)"", f)
list = []
for i in b:
    if i not in list and i != '..':
        list.append(i)
list.sort()
print(*list, sep = '\n')




 -End,"
 import json

output = dict()
py_obj = json.loads(input())

def checker(key,  dict):
    for i in dict[key]:
        for j in dict[i]:
            checker(j, dict)
            if j not in dict[key]:
                dict[key].append(j)

for i in py_obj:
    output[i['name']] = []
for i in py_obj:
    for l in i['parents']:
        if i['name'] not in output[l]:
            output[l].append(i['name'])
for key in output.keys():
    checker(key, output)

for key in sorted(output.keys()):
    print(key + ' : ' + str(len(output[key]) + 1))

 -End,"
 from xml.etree import ElementTree

root = ElementTree.fromstring(input())


color_value = {'red': 0, 'green': 0, 'blue': 0}

def lvlChecker(root, level=1):
    if root.findall('cube'):
        for element in root.findall('cube'):
            lvlChecker(element, level+1)
    color_value[root.attrib['color']] += level

lvlChecker(root)

for i in color_value:
    print(color_value[i], end=' ')
 -End,"
 c = int(input()); print(-15 < c <= 12 or 14 < c < 17 or 19 <= c)




 -End,"
 n = int(input())
if n % 10 == 1 and n % 100 != 11:
    r = 'программист'
elif n % 10 in [2, 3, 4] and n % 100 not in [11, 12, 13, 14]:
    r = 'программиста'
else:
    r = 'программистов'
print(n, r) -End,"
 ticket = input()
if sum([int(x) for x in ticket[0:3]]) == sum([int(x) for x in ticket[3:]]):
    print('Счастливый') 
else: print('Обычный')




 -End,"
 lst = [0,]
n = int(input())
while n != 0:
    lst.append(n)
    n = int(input())
print(sum(lst))


 -End,"
 a, b, c, d = int(input()), int(input()), int(input()), int(input())
print('\t', end='')
for el in range(c, d + 1):
    print(el, '\t', end='')
print('')
for i in range(a, b + 1):
    print(i, '\t', end = '')
    for z in range(c, d + 1):
        print(z*i, end='\t', sep='\t')
    print('')
 -End,"
 a, b = int(input()), int(input())
lst = []
for i in range(a, b + 1):
    if i % 3 == 0:
        lst.append(i)
print(sum(lst) / len(lst))
 -End,"
 s = input().lower()
z = len(s)
a, b = s.count('g'), s.count('c')
print((a + b) / z * 100) -End,"
 s = input() + '#'
ch = s[0]
ct = 0
out = ''
for el in s:
    if el == ch:
        ct += 1
    else:
        out += (ch + str(ct))
        ch = el; ct = 1
print(out)
 -End,"
 string = input() + '#'
ch = string[0]
counter = 0
out = ''

for el in string:
    if el != ch:
        out += (ch + str(counter))
        counter = 0
        ch = el
    counter += 1

print(out) -End,"
 print(sum(int(x) for x in input().split()))
 -End,"
 out = 0
for el in input().split():
    out += int(el)
print(out)
 -End,"
 s = [int(x) for x in input().split()]
if len(s) == 1:
    print(s[0])
else:
    for ind, el in enumerate(s):
        if ind == 0:
            print(s[1] + s[-1], end = ' ')
        elif ind < len(s) - 1:
            print(s[ind-1] + s[ind+1], end = ' ')
        else:
            print(s[-2] + s[0], end = ' ')

 -End,"
 inp = [int(x) for x in input().split()]
out = []
for el in inp:
    if el not in out and inp.count(el) > 1:
        out.append(el)
        print(el, end = ' ')
 -End,"
 inp = [int(z) for z in input().split()]
for el in set(inp):
    if inp.count(el) > 1: print(el, end = ' ') -End,"
 lstIn = []
lstIn.append(int(input()))

lstOut = []
temp = lstIn[0]

while temp != 0: 
    a = int(input())
    temp += a
    lstIn.append(a)

for el in lstIn:
    lstOut.append(el * el)

temp = 0

for el in lstOut:
    temp += el

print(temp)


 -End,"
 n = int(input())
ct = 1
for i in range(n):
    for j in range(i + 1):
        if ct <= n:
            print(i + 1, end = ' ')
            ct += 1
 -End,"
 lstOp = [int(x) for x in input().split()]
n = int(input())
ct = 0; flag = False

for el in lstOp:
    if el == n:
        print(ct, end = ' ')
        flag = True
    elif ct + 1 == len(lstOp) and not flag: 
        print('Отсутствует')
    ct += 1
 -End,"
 lstIn = [int(x) for x in input().split()]
n = int(input())
for ind, el in enumerate(lstIn):
    if el == n:
        print(ind, end=' ')
if not n in lstIn: print('Отсутствует')
 -End,"
 lst = [] # Создаем главный список
m = input()

while m != 'end':
    lst.append([int(x) for x in m.split()]) # Пока ввод не равен end считывем строку и разбиваем её элементы, создаем из них список и добавляем в главный список
    m = input() # Обновляем ввод

out = [[0 for i in range(len(lst[z]))] for z in range(len(lst))] # Создаем пустую выходную матрицу

for i in range(len(lst)):
    for j in range(len(lst[i])):
          out[i][j] += (lst[i-1][j] + lst[i+1-len(lst)][j] + lst[i][j-1] + lst[i][j+1-len(lst[i])]) # Вся магия происходит здесь

for el in out:
    for l in el:
        print(l, end=' ') # Вывод результатов
    print() -End,"
 #v1.2
matrix = [] #Создаем основу матрицы
inp = input() #Первый элемент матрицы

while inp != 'end': #Пока ввод не равен end считываем и разбиваем строки, создавая из них элементы матрицы
    matrix.append([int(x) for x in inp.split()])
    inp = input() #Обновляем ввод

for i in range(len(matrix)): #Цикл по количеству элементов матрицы
    for j in range(len(matrix[i])): #Цикл по количеству элементов во вложенных списках
          print(matrix[i-1][j] + matrix[i+1-len(matrix)][j] + 
                matrix[i][j-1] + matrix[i][j+1-len(matrix[i])], end=' ') #вывод 
    print() #Вывод символа новой строки
                                       -End,"
 n = int(input())
matrix = [[0 for j in range(n)] for i in range(n)]
y = x = 0
lst = [x for x in range(1, n*n+1)]
w = 0

while lst:
    for i in range(x, n):
        x = i
        matrix[y][x] = lst.pop(0)
    if y < n:
        y += 1
    for i in  range(y, n):
        matrix[y][x] = lst.pop(0)
        if y < n-1:
            y += 1
    n -= 1
    x -= 1
    for i in range(n-1, w-1, -1):
        matrix[y][x]=lst.pop(0)
        if x > w:
            x -= 1
    w += 1
    y -= 1
    for i in range(n-1, w-1, -1):
        matrix[y][x]=lst.pop(0)
        if y > w: 
            y -= 1
    x += 1
for el in matrix:
    for z in el:
        print(z, end=' ')
    print()
 -End,"
 def f(x):
    return 1 - ((x +2)**2) if x <= -2 else -x/2 if -2 < x <= 2 else ((x-2)**2)+1
 -End,"
 def modify_list(l):
    for i in range(len(l)-1, -1, -1):
        if l[i] % 2 != 0:
            del l[i]
    for i in range(len(l)-1, -1, -1):
        tmp = l[i]
        del l[i]
        l.insert(i, tmp//2)
 -End,"
 s = [x.lower() for x in input().split()]
out = []
for el in s:
    if el not in out:
        print(el, s.count(el))
        out.append(el)
 -End,"
 dct = {}


for i in range(int(input())):
    x = int(input())
    if x not in dct.keys():
        dct[x] = f(x)
        print(dct[x])
    else:
        print(dct[x])
 -End,"
 print(float(input())*__import__('math').pi*2)
 -End,"
 print(' '.join(__import__('sys').argv[1:]))
 -End,"
 def closest_mod_5(x):
    while x % 5 != 0:
        x += 1
    return x
 -End,"
 n, k = [int(x) for x in input().split()]
def C(n, k):
    if k == 0:
        return 1
    elif k > n: return 0
    else:
        return C(n - 1, k) + C(n - 1, k - 1)
print(C(n, k))
     -End,"
 import collections
lst = [x.lower() for x in input().split()]
for key, val in collections.Counter(lst).items():
    print(key, val)

 -End,"
 class MoneyBox:
    def __init__(self, capacity, bank=0):
        self.capacity = capacity
        self.bank = bank

    def can_add(self, v):
        return v + self.bank <= self.capacity

    def add(self, v):
        self.bank += v
 -End,"
 class Buffer:
    def __init__(self):
        self.current = []

    def add(self, *a):
        self.current += a
        while len(self.current) >= 5:
            print(sum(self.current[0:5]))
            self.current = self.current[5:]

    def get_current_part(self):
        return self.current
 -End,"
 nspc = {'global':{'parent':None, 'vars':set()}}

def create(dct, nsp, vr):
    if vr in dct.keys():
        dct[vr][nsp]={'vars':set(), 'parent':vr}
    else:
        for key in dct.keys():
            if type(dct[key]) == dict:
                for val in dct[key]:
                    if val == vr:
                        dct[key][vr][nsp]={'vars':set(), 'parent':vr}
                create(dct[key], nsp, vr)

def add(dct, nsp, vr):
    if nsp in dct.keys():
        dct[nsp]['vars'].add(vr)
    else:
        for key in dct.keys():
            if type(dct[key]) == dict:
                for val in dct[key]:
                    if val == nsp:
                        dct[key][nsp]['vars'].add(vr)
                add(dct[key], nsp, vr)

def get(dct, nsp, vr):
    global res
    if nsp in dct.keys():
        if vr in dct[nsp]['vars']:
            res = nsp
        else: 
            get(nspc, dct[nsp]['parent'], vr)
    else:
        for key in dct.keys():
            if type(dct[key]) == dict:
                for val in dct[key]:
                    if val == nsp:
                        if vr in dct[key][val]['vars']:
                            res = nsp
                        else:
                            get(nspc, dct[key][val]['parent'], vr)
                get(dct[key], nsp, vr)
for i in range(int(input())):
    cmd, nsp, vr = input().split()
    if cmd == 'create':
        create(nspc, nsp, vr)
    elif cmd == 'add':
        add(nspc, nsp, vr)
    elif cmd == 'get':
        res = None
        get(nspc, nsp, vr)
        print(res)
 -End,"
 #!/usr/bin/env python3
import re

classes = {}


def add(cl, parent=None, *args):
    classes[cl] = {'parent': [parent, ]}
    for el in args:
        classes[cl]['parent'].append(el)


def get(cl1, cl2):
    global reply
    if cl2 in classes:
        if cl1 == cl2:
            reply = ""Yes""
        for parent in classes[cl2]['parent']:
            if parent == cl1:
                reply = ""Yes""
                break
            else:
                if parent is not None:
                    get(cl1, parent)


for i in range(int(input())):
    args = input()
    args = re.split(r'\s:\s|\s', args)
    add(*args)

for i in range(int(input())):
    args = input().split()
    reply = ""No""
    get(*args)
    print(reply)
 -End,"
 #!/usr/bin/env python3
class ExtendedStack(list):
    def sum(self):
        self.append(self.pop()+self.pop())

    def sub(self): 
        self.append(self.pop()-self.pop())

    def mul(self): 
        self.append(self.pop()*self.pop())

    def div(self): 
        self.append(self.pop()//self.pop())
 -End,"
 #!/usr/bin/env python3

import re

exceptions = {}

except_stack = []

garbage = []


def add(arg):
    arg = re.findall(r'[\w]+', arg)
    exception = arg.pop(0)
    exceptions[exception] = {'parents': []}
    for el in arg:
        exceptions[exception]['parents'].append(el)


def get(exception):
    for parent in exceptions[exception]['parents']:
        if parent in except_stack and arg not in garbage:
            garbage.append(arg)
        else:
            get(parent)


for i in range(0, int(input())):
    add(input())


for i in range(0, int(input())):
    arg = input()
    except_stack.append(arg)
    get(arg)


for el in garbage:
    print(el)
 -End,"
 #!/usr/bin/env python3
import datetime

args = [int(x) for x in input().split()]
days = int(input())
a = datetime.date(*args)
c = datetime.timedelta(days)
b = a.__add__(c)
print(""%d %d %d"" % (b.year, b.month, b.day))
 -End,"
 #!/usr/bin/env python3

key = {}

def encode(string):
    r = ''
    for i in string:
        r += key[i]
    return r

def decode(string):
    r = ''
    deKey = {v : k for k, v in key.items()}
    for i in string:
        r += deKey[i]
    return r

stringOr, stringK = input(), input()

for i in range(len(stringOr)):
    key[stringOr[i]]=stringK[i]

print(encode(input()))
print(decode(input()))
 -End,"
 #!/usr/bin/env python3

cE = 0
cN = 0

for i in range(int(input())):
    args = input().split()
    if 'север' in args:
        cN += int(args[1])
    elif 'юг' in args:
        cN -= int(args[1])
    elif 'восток' in args:
        cE += int(args[1])
    elif 'запад' in args:
        cE -= int(args[1])

print(cE, cN)
 -End,"
 #!/usr/bin/env python3


def primes():
    res = 1
    yield 2
    while True:
        res += 2
        for i in range(3, res + 1):
            if i < res and res % i == 0:
                break
            elif i == res:
                yield res
 -End,"
 #!/usr/bin/env python3

s, a, b = input(), input(), input()

ct = 0
while a in s and ct < 1000:
    s = s.replace(a, b)
    ct += 1

if ct < 1000:
    print(ct)
else:
    print(""Impossible"")
 -End,"
 #!/usr/bin/env python3


s = input()
i = input()
ct = 0

while i in s:
    if s.startswith(i):
        ct += 1
    s = s[1:]

print(ct)
 -End,"
 #!/usr/bin/env python3


res = []

n = input()

while n:
    if n.count('cat') > 1:
        res.append(n)
    try:
        n = input()
    except EOFError:
        n = None

for el in res:
    print(el) -End,"
 #!/usr/bin/env python3
import re, sys


patt = r'cat'
for line in sys.stdin:
    if len(re.findall(patt, line)) > 1:
        print(line.strip())
 -End,"
 #!/usr/bin/env python3
import re, sys


patt = r'\bcat\b'

for line in sys.stdin:
    if re.findall(patt, line):
        print(line.strip())
 -End,"
 [print(x.strip()) for x in __import__('sys').stdin if __import__('re').findall(r'\bcat\b', x)]
 -End,"
 #!/usr/bin/env python3
import re, sys


[print(line.strip()) for line in sys.stdin if re.search(r'z[\w]{3}z', line)]
 -End,"
 import sys, re

for line in sys.stdin:
    if re.search(r'\\', line):
        print(line.strip())
 -End,"
 import sys, re

for line in sys.stdin:
    if re.search(r'(\b\w+)(\1)\b', line):
        print(line.strip())
 -End,"
 [print(line.replace('human', 'computer').strip()) for line in __import__('sys').stdin]
 -End,"
 for line in __import__('sys').stdin:
    print(__import__('re').sub(r'human', 'computer', line).strip())
 -End,"
 for line in __import__('sys').stdin:
    print(__import__('re').sub(r'\b[aA]+\b', 'argh', line, count=1).strip())
 -End,"
 for line in __import__('sys').stdin:
    print(__import__('re').sub(r'(\b\w)(\w)', r'\2\1', line).strip())
 -End,"
 for line in __import__('sys').stdin:
    print(__import__('re').sub(r'([\w])(\1)+', r'\1', line).strip())
 -End,"
 #!/usr/bin/env python3

import requests, sys, re

link, document = input(), input()

patt = r'(<a )(href=\"")(.*)\"">'  # Регулярное выражение для поиска ссылки

links = re.findall(patt, requests.get(link).text)  # Ссылки документа ""A""

for i in range(len(links)):
    links_2 = re.findall(patt, requests.get(links[i][2]).text)  # Ссылки документа ""C""
    for z in range(len(links_2)):
        if links_2[z][2] == document:  # Истина только если ссылка
            print('Yes')               # документа ""C"" ведёт на документ ""B""
            sys.exit()

print(""No"")
 -End,"
 #!/usr/bin/env python3

import requests, re

patt = r'(<a.+)(href=)([\'\""])?(.+?://)?(\w[\w\.\-]+)+'

doc = requests.get(input().strip()).text

links = re.findall(patt, doc)

sites = []

for i in range(len(links)):
    sites.append(links[i][4])

for site in sorted(list(set(sites))):
    print(site)
 -End,"
 x = input()
y=''
ye=True
sum=1
for i in range (0,len(x),1):
    if i==len(x):
        ye=True
    if i<len(x)-1 and x[i]==x[i+1]:
        sum+=1
        ye=False
    else:
        ye=True
    if ye:
        y = y + x[i]+str(sum)
        sum=1
print(y) -End,"
 spisok=[]
while sum !=0:
  if len(spisok)==0:
      sum=0
  x=int(input())
  spisok.append(x)
  sum+=x
ops=0
for i in spisok:
    ops+=i**2
print(ops) -End,"
 x=int(input())
sum=0
for i in range (x):
    for j in range(-1,i):
      if sum !=x:
         print (i+1,end=' ')
         sum+=1 -End,"
 lst=[int (i) for i in input().split()]
x=int(input())
ops=True
for i in range (len(lst)):
    if x == lst[i]:
        print(i,end=' ')
        ops=False
if ops:
    print('Отсутствует') -End,"
 matrix=[]
x='Start'
beginning=True
while x!='end':
    x=input()
    if x=='end':
       break
    x= [int(i) for i in x.split()]
    if beginning:
        cow=len(x)
        beginning=False
    if cow == len(x):
        matrix.append(x)
    else:
        print(""Ошибка!"")
matrix2 =[[0 for j in range(cow)] for i in range(len(matrix))]
for j in range (len(matrix)):
    for i in range(cow):
        if 0 < i < cow-1:
            matrix2[j][i] += matrix[j][i-1]+ matrix[j][i+1]
        if i==0 and i == cow-1:
            matrix2[j][i]+=matrix[j][i]*2
        if i==0 and i < cow-1:
            matrix2[j][i] += matrix[j][cow-1]+ matrix[j][i+1]
        if i==cow-1 and i>0:
            matrix2[j][i] += matrix[j][i-1]+ matrix[j][0]

        if 0 < j < len(matrix)-1:
            matrix2[j][i] += matrix[j-1][i]+matrix[j+1][i]
        if j==0 and j==len(matrix)-1:
            matrix2[j][i] += matrix[j][i] * 2
        if j == 0 and j < len(matrix)-1:
            matrix2[j][i]+=matrix[len(matrix)-1][i]+ matrix[j+1][i]
        if j == len(matrix) - 1 and j > 0:
            matrix2[j][i] +=  matrix[j-1][i]+ matrix[0][i]
for j in range(len(matrix2)):
   for i in range (cow):
       print(matrix2[j][i],end=' ')
   print() -End,"
 yy = int(input())
S=yy
matrix=[[0 for j in range(yy)]for i in range(yy)]
result=0
finish=yy**2
xx=0
while (result!=finish):
    for i in range(S):
        result+=1
        matrix[xx][xx+i]=result
    S-=1
    for i in range(S):
        result+=1
        matrix[xx+i+1][yy-1]=result
    for i in range(S):
        result += 1
        matrix[yy-1][yy-2-i] = result
    S-=1
    for i in range(S):
        result += 1
        matrix[yy-2-i][xx] = result
    xx+=1
    yy-=1
for j in range(len(matrix)):
    for i in range(len(matrix)):
        print(matrix[j][i], end=' ')
    print()
 -End,"
 def modify_list(l):
    for i in range(len(l)-1,-1,-1):
        if l[i]%2 !=0:
            l.remove(l[i])
        else:
            l[i]=l[i]//2
 -End,"
 def modify_list(l):
    matrix=[]
    for i in range(len(l)):
        if l[i]%2 ==0:
            matrix.append(int(l[i]/2))
    l.clear()
    for i in matrix:
        l.append(i) -End,"
 def end_game(game_result):
    if game_result:
           #print('Вводим результаты игр:')
           result=input().split(';')
           table(result[0], int(result[1]),int(result[3]))
           table(result[2], int(result[3]),int(result[1]))
           game_result-=1
           end_game(game_result)
def table(a,b,c,):
    if a not in spisok:
        spisok[a] = [0, 0, 0, 0, 0]
    spisok[a][0] += 1
    if b > c:
        spisok[a][1] += 1
        spisok[a][4] += 3
    elif c > b:
        spisok[a][3] += 1
    else:
        spisok[a][2] += 1
        spisok[a][4] += 1
def print_game():
    for key,value in spisok.items():
        print(key,end =':')
        print(value[0],value[1],value[2],value[3],value[4])
spisok ={}
#print('Вводим количестов сыгранных игр:')
end_game(int(input()))
print_game()
 -End,"
 def method(word,code):
    for step in range (len(word)):
        if code not in encoder:
            encoder[word[step]]=code[step]
def decipher(code,question):
    for step in code:
        for key, value in encoder.items():
            if step==value and question==1:
                print (key, end='')
            if step==key and question==0:
                print (value, end='')
    print()
encoder ={}
x,y=input(),input()
method(x,y)
xx,yy=input(),input()
decipher(xx,0)
decipher(yy,1) -End,"
 def add_dictionary(text):
    dictionary[text]=0
def find_in_dictionary(lines):
    lines=lines.split()
    for line in lines:
        if line not in dictionary:
            if line not in invalid_dictionary:
                invalid_dictionary[line] = 1
            else:
                invalid_dictionary[line] +=1
def print_invalid_dictionary():
    for key in invalid_dictionary.keys():
        print(key)
def number_of_times (number,what):
    sum=number+1
    for step in range(number):
        if what==0:
            #print('Введите словарное слово №', sum-number,' : ', end='')
            add_dictionary(input().lower())
        elif what==1:
            #print('Введите строку №', number, ' : ', end='')
            find_in_dictionary(input().lower())
        number -= 1
dictionary,invalid_dictionary = {},{}
#print('Зададите количество слов для словаря: ',end='')
number_of_times(int(input()),0)
#print('Зададите количество строк, которые будем сверять со словарём: ',end='')
number_of_times(int(input()),1)
#print('Отсутствующие слова в словаре: ')
print_invalid_dictionary() -End,"
 def running(move):
    for run in range (move):
        step=input().split()
        if step[0]=='восток':
            coordinates[0] += int(step[1])
        elif step[0] == 'запад':
            coordinates[0] -= int(step[1])
        elif step[0] == 'север':
            coordinates[1] += int(step[1])
        elif step[0] == 'юг':
            coordinates[1] -= int(step[1])
        move -= 1
coordinates=[0,0]
move=0
running(int(input()))
print(coordinates[0],coordinates[1]) -End,"
 #objects=[10,20,30,300,20,10]
objects2=[]
if len(objects)<=100:
    for obj in range (len(objects)):
        if objects[obj] not in objects2:
            objects2.append(objects[obj])
print(len(objects2)) -End,"
 def creates(func,parrent):
    queries.append([func,parrent])
def adds (func,var):
    for step in range (len(queries)):
        if queries[step][0] == func:
            queries[step].append(var)
            return
def gets (func,var):
    for step in range (len(queries)):
        if queries[step][0] == func:
            if var in queries[step]:
                return queries[step][0]
            elif queries[step][1]==""None"":
                return None
            else:
                return gets(queries[step][1], var)
def parse(x,y,z):
    if x == ""create"" :
        creates(y,z)
    elif x == ""add"" :
        adds(y,z)
    elif x == ""get"" :
        quer.append(gets(y,z))
queries =[[""global"",""None""]]
quer=[]
enter=int (input())
for i in range (enter):
    x,y,z=input().split()
    parse(x,y,z)
for i in quer:
    print(i) -End,"
 class MoneyBox:
    def __init__(self, capacity):# конструктор с аргументом – вместимость копилки
        self.capacity=capacity
    def can_add(self, v):# True, если можно добавить v монет, False иначе
        self.v=v
        if self.capacity - self.v < 0:
            return False
        else: return True
    def add(self, v):# положить v монет в копилку
        if self.can_add(v):
            self.capacity = self.capacity-self.v -End,"
 class Buffer:
    def __init__(self):# конструктор без аргументов
        self.List=[]
    def add(self, *a):# добавить следующую часть последовательности
        for i in range(len(a)):
            self.List.append(a[i])
            if len(self.List)==5:
                print(sum(self.List[0:5]))
                del self.List[0:5]
    def get_current_part(self):# вернуть сохраненные в текущий момент элементы
                               # последовательности в порядке, в котором они были добавлены
        return(self.List[0:len(self.List)]) -End,"
 class ExtendedStack(list):
    def sum(self):# операция сложения
        self.append(self.pop() + self.pop())
    def sub(self):# операция вычитания
        self.append(self.pop() - self.pop())
    def mul(self):# операция умножения
        self.append(self.pop() * self.pop())
    def div(self):# операция целочисленного деления
        self.append(self.pop() // self.pop()) -End,"
 def enter_val(rep,what_do):#обработка количества запросов и что нужно сделать
    for step in range (rep):
        if what_do : ways.append([i for i in (input().split())]) # описание классов
        elif what_do == False :
            find(input())
def find (y): #обработка наследования
    quest.append(y)
    for step in range (len(quest)-1):
            finds(quest[step],y)
    if True in result: quests.append(y) #если хоть в одном ветвлении нашли предка
    result.clear()
def finds(find_y,y):
    if find_y==y: return result.append(True)
    for i in range (len(ways)):
            if y == ways[i][0]:
                if find_y in ways[i]: return result.append(True)
                elif len(ways[i])==1 :return result.append(False)
                else:
                    for j in range (2,len(ways[i])): finds(find_y,ways[i][j])
                    return result.append(False)
ways, result, quest, quests = [],[], [],[]
enter_val(int(input()),True) # число классов для описания наследования
enter_val(int(input()),False)# число запросов по наследованию
for i in quests:
    print(i) -End,"
 import datetime
year,month,day = map(int,input().split())
days_to_date = int(input())
lyear,lmonth,lday = map(int,(str(datetime.date(year,month,day) + datetime.timedelta(days_to_date)).split('-')))
print(lyear,lmonth,lday) -End,"
 def primes():
    a = 1
    while True:  
        a += 1
        flag=True
        for step in range(2,a):
            if a%step==0: flag=False
        if flag: yield a -End,"
 def fib(n):
    x = [0, 1]
    if not n == 0 or n == 1:
        for step in range(2, n+1):
            z = x[step - 2] + x[step - 1]
            x.append(z)
    return x[n]
def main():
    n = int(input())
    print(fib(n))

if __name__ == ""__main__"":
    main() -End,"
 def fib_mod(n, m):
    x = [0, 1] # создаём список n%m пока не найдём последовательность 0,1,...,0,1 (период Пизано)
    #периодом будет длина списка - 2 (так как 0 и 1 уже есть вначале)
    if not n == 0 or n == 1:
        for step in range(2, n + 1):
            z = (x[step - 2] + x[step - 1])%m
            x.append(z)
            if x[step]==1 and x[step-1]==0: # если нашли последовательность, то дальше нету смысла считать
                return x[n % (len(x) - 2)]  # возвращаем наша число n%(период). 
    return x[n]%m #это возвращаем если не нашли период
def main():
    n, m = map(int, input().split())
    print(fib_mod(n, m))
if __name__ == ""__main__"":
     main() -End,"
 def substitution(s, a, b):
    if a in b and a in s:
        return ""Impossible""
    counter = 0
    while a in s:
        s = s.replace(a, b)
        counter += 1
    return counter
print(substitution(input(), input(), input())) -End,"
 def test(s, t):
    counter = 0
    while t in s:
        s = s[s.find(t)+1:]
        counter += 1
    return counter
print(test(input(), input())) -End,"
 import re
import sys
texts = ""cat""
for line in sys.stdin:
    text = line.rstrip()
    find_text = re.findall(texts,text)
    if len(find_text) > 1: 
        print(text)
 -End,"
 import re
import sys
texts = r"".*(\bcat\b).*""
for line in sys.stdin:
    text = line.rstrip()
    find_text = re.findall(texts,text)
    if find_text:
        print(text) -End,"
 import re
import sys
for line in sys.stdin:
    text = line.rstrip()
    if re.search(r"".*z...z.*"", text):
        print(text) -End,"
 import re
import sys
for line in sys.stdin:
    line = line.rstrip()
    if re.search(r""\b(\w+)\1\b"", line):
        print(line)
 -End,"
 import re
import sys
for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(""human"", ""computer"", line)) -End,"
 import re
import sys
for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""\b[aA]+\b"", ""argh"", line,count=1)) -End,"
 import re
import sys
for line in sys.stdin:
    line = line.strip()
    print(re.sub(r""\b(\w)(\w)"", r""\2\1"", line)) -End,"
 import re
import sys
for line in sys.stdin:
    line = line.strip()
    print(re.sub(r""(\w)(\1+)"", r""\1"", line)) -End,"
 import re
import sys
for line in sys.stdin:
    line = line.strip()
    if re.fullmatch (r""(1(01*0)*1|0)*"", line):
        print(line) -End,"
 import requests
import re


def finder(texts):  # поиск интернет адресов
    result_url = re.findall(r"".*<a href=\""(.*)\""\>[\d]</a>"", requests.get(texts).text)
    return result_url


def listing(list_url):  # перебор адресов по списку
    for line in list_url:
        find_requests = finder(line)
        for line2 in find_requests:
            if line2 == reference_B:
                return ""Yes""
    return ""No""
reference_A, reference_B = input(), input()  # стандартный ввод двух интернет адресов
print(listing(finder(reference_A)))  # результат поиска -End,"
 import requests
import re
urls = []  # список адресов
with open(""url_find.txt"", ""w"") as gates:  # открываем файл для записи
    gates.write(requests.get(input()).text)  # записываем с интернет-страницы данные в файл
with open(""url_find.txt"") as gate:  # открываем файл для чтения
    for line in gate:  # считываем строчки файла и проверяем на наличие интернет-адреса
        add_url = re.findall(r""(?:.*)?(?:<a(?:.*)? href=[\""\'])(?:\w+://)?(\w[\w\.-]*)"", line)
        if len(add_url) and add_url[0] not in urls:
            urls.extend(add_url)
urls.sort()
for i in urls:
    print(i) -End,"
 import requests, re
urls = set(re.findall(r""(?:.*)?(?:<a(?:.*)? href=[\""\'])(?:\w+://)?(\w[\w\.-]*)"", requests.get(input()).text))

print('\n'.join(sorted(urls))) -End,"
 import json


def finder(ass, find_el, intersection, step=0):
    for i in range(len(ass)):  # ищем наш элемент в начале каждого списка
        if find_el in ass[i][0]:  # если нашли наш элемент, то добавим все грани неповторяющие в наш список
            [intersection.append(element)for element in ass[i] if element not in intersection]
            copy_dic.remove(copy_dic[i])  # удалим вложенный список, чтобы больше на него не тратить время
            step += 1  # увеличиваем наш шаг на один, чтобы больше не искать наш уже найденный элемент
            for find_nod in range(step,len(intersection)):  # перезапускаем функцию, проверяем следующий элемент
                finder(copy_dic, intersection[find_nod], intersection,step)
            return intersection  # возвращаем список предков, который если надо можно использовать
dic, copy_dic, clear_intersection = [], [], []  # создаём пустой список, будующую его копию, список пердков
x = json.loads(input())  # переработаем json-объекты
for y in range(len(x)):
    dic.append([x[y][""name""]])  # берём имя, добавляем его, как вложенный список, где начало = родитель
    for ii in range(len(x)):  # добавим в наш список в правильном порядке всех прямых деток
        if x[y][""name""] in x[ii][""parents""]:  # ищем прямых деток
            dic[y].append(x[ii][""name""])  # присоединяем наших прямых деток
dic = sorted(dic)  # отсортируем список
for parent in dic:  # пробежимся по нашему списку
    copy_dic.clear()  # очистим наш список для копий
    clear_intersection.clear()  # очистим список наших деток
    [copy_dic.append(i) for i in dic]  # копируем наш список
    print(parent[0], "":"", len(finder(copy_dic, parent[0],clear_intersection)))  # родитель скольки деток(включая себя)
 -End,"
 from xml.etree import ElementTree
colors = [0, 0, 0]  # red, green, blue (для ответа)


def finder(root, x=1):
    if root.attrib == {'color': 'red'}: colors[0] += x
    if root.attrib == {'color': 'green'}: colors[1] += x
    if root.attrib == {'color': 'blue'}: colors[2] += x
    [finder(element, x + 1) for element in root]  # поиск во вложениях
tree = ElementTree.fromstring(input())
finder(tree)
[print(i, end="" "") for i in colors]  # ответ
 -End,"
 from xml.etree import ElementTree
colors = {""red"": 0, ""green"": 0, ""blue"": 0}  # словарь ключ=цвет
def finder(root, count=1):
    colors[root.attrib[""color""]] += count  # нашли цвет добавили к счётчику
    [finder(child, count + 1) for child in root]  # поиск во вложениях        
finder(ElementTree.fromstring(input()))  # считываем xml-строку
print(colors[""red""], colors[""green""], colors[""blue""])  # выдаём ответ -End,"
 def f(x):
    if x<=-2: return 1-(x+2)**2
    elif 2<x: return (x-2)**2 + 1
    else: return -x/2 -End,"
 a, operator, b = input().split()
operator_act = {""plus"": ""+"", ""minus"": ""-"", ""multiply"": ""*"", ""divide"": ""//""}
print(eval(a+operator_act[operator]+b)) -End,"
 def f(x):
    return True if x == -10 or -5 < x <= 3 or 8 < x < 12 or x >= 16 else False
print(f(int(input()))) -End,"
 def number(ii):
        if ii % 3 and ii % 5:
            return ii
        if not (ii % 3) and not (ii % 5):
            return ""FizzBuzz""
        return ""Fizz"" if not(ii % 3) else ""Buzz""


def f(x, y):
    for i in range(x, y+1):
        print(number(i))
a, b = [int(i) for i in (input().split())]
f(a, b) -End,"
 def hanoi(n, f=1, l=3, m=2):  # n - количество дисков, f - с какого снимать, l - на какой снимать, m - промежуточный
    if n != 0:
        hanoi(n - 1, f, m, l)
        print(f, ""-"", l)
        hanoi(n - 1, m, l, f)
hanoi(int(input())) -End,"
 input_str = input()
while input_str != ""End"":
    print(""Processing \"""" + input_str + ""\"" command..."")
    input_str = input()
print(""Good bye!"") -End,"
 import re
print(re.sub('\s{1,}', '_', input())) -End,"
 S = n = int(input())  # S - сколько шагов нужно сделать, n - вспомогательная переменная
finish = n * n  # последнее число
step, line_x = 0, 0  # step - счетчик, line_x - вспомогательная переменная
matrix = [[0 for j in range(n)]for i in range(n)]
while step != finish:
    for i in range(S):  # вправо
        step += 1
        matrix[line_x][line_x + i] = step  # смещение и заполнение ячейки вправо
    S -= 1
    for i in range(S):  # вниз
        step += 1
        matrix[line_x + i + 1][n - 1] = step  # смещение и заполнение ячейки вниз
    for i in range(S):  # влево
        step += 1
        matrix[n - 1][n - 2 - i] = step  # смещение и заполнение ячейки влево
    S -= 1
    for i in range(S):  # вверх
        step += 1
        matrix[n - 2 - i][line_x] = step  # смещение и заполнение ячейки вверх
    line_x += 1  # убираем заполненый ряд
    n -= 1  # убираем заполненый столбик
for j in range(len(matrix)):  # вывод спиральной матрицы
    for i in range(len(matrix)):
        print(matrix[j][i], end=' ')
    print() -End,"
 o_right, text, alphabet = int(input()), input().strip(), "" abcdefghijklmnopqrstuvwxyz""
print('Result: ""%s""' % """".join([alphabet[(alphabet.index(cha_r)+o_right) % len(alphabet)] for cha_r in text]))

''' 
Note:
1) Offset to the right and text that requires an encoding and our alphabet
2) Output the answer.
''' -End,"
 def modify_list(l):
    a = []
    for i in l:
        if i % 2 == 0:
            a.append(i//2)
    l[:] = a -End,"
 def modify_list(l):
    l[:] = [i//2 for i in l if i%2 == 0] -End,"
 dicts = {}
for word in input().lower().split():
    if word not in dicts:
        dicts[word] = 1
    else:
        dicts[word] += 1
[print(word, dicts[word])for word in dicts] -End,"
 dicts = {}
for word in input().split():
    dicts[len(word)] = dicts.setdefault(len(word), 0) + 1
[print(word,"":"",dicts[word])for word in sorted(dicts.keys())] -End,"
 dict_code = {
    'I': 1,
    'V': 5,
    'X': 10,
    'L': 50,
    'C': 100,
    'D': 500,
    'M': 1000
}
sum = 0
code = input()
for i in range (len(code)):
    sum += dict_code[code[i]]
    if i !=0 and dict_code[code[i]] > dict_code[code[i-1]]:
        sum -= dict_code[code[i-1]]*2
print(sum) -End,"
 text = input()
print(""%.02f""%(text.count('A')/(len(text)//2+1))) -End,"
 dict_ = {'mile': 1609,
         'yard': 0.9144,
         'foot': 0.3048,
         'inch': 0.0254,
         'km': 1000,
         'm': 1,
         'cm': 0.01,
         'mm': 0.001
}
text = input().split()
print(""%.2e"" % (float(text[0])*dict_[text[1]]/dict_[text[3]])) -End,"
 import sys
for i in range(1,len(sys.argv)):
    print(sys.argv[i]) -End,"
 n = int(input())
tabl = []
itog = {}
for i in range(n):
    igra = input().split(';')
    if igra[0] not in itog:
        itog[igra[0]] = [0]
    if igra[2] not in itog:
        itog[igra[2]] = [0]
    tabl += [igra]
for i in itog:
    for j in range(4):
        itog[i] += [0]
for i in range(n):
    #считаем кол-во игр
    if tabl[i][0] in itog:
        itog[tabl[i][0]][0] += 1
    if tabl[i][2] in itog:
        itog[tabl[i][2]][0] += 1
    #считаем Побед Ничьих Поражений и Всего_очков
    if tabl[i][1] > tabl[i][3]:
        itog[tabl[i][0]][1] += 1
        itog[tabl[i][0]][4] += 3
        itog[tabl[i][2]][3] += 1
    if tabl[i][1] == tabl[i][3]:
        itog[tabl[i][0]][2] += 1
        itog[tabl[i][0]][4] += 1
        itog[tabl[i][2]][2] += 1
        itog[tabl[i][2]][4] += 1
    if tabl[i][3] > tabl[i][1]:
        itog[tabl[i][2]][1] += 1
        itog[tabl[i][0]][3] += 1
        itog[tabl[i][2]][4] += 3
for key, value in itog.items():
    print(key, ':', ' '.join(str(num) for num in value), sep='') -End,"
 s= []
for i in range(4):
    s += [input()]
for i in range(len(s[2])):
    if s[2][i] in s[0]:
        print(s[1][s[0].find(s[2][i])], end ='')
print()
for i in range(len(s[3])):
    if s[3][i] in s[1]:
        print(s[0][s[1].find(s[3][i])], end='') -End,"
 d = int(input())
dslov = set()
printslov = set()
for i in range(d):
    dslov.add(input().lower())
l = int(input())
llist = []
for i in range(l):
    llist += [input().split(' ')]
for i in range(l):
    for j in range(len(llist[i])):
        if llist[i][j].lower() not in dslov and llist[i][j].upper() not in dslov:
            printslov.add(llist[i][j])
for i in printslov:
    print(i) -End,"
 n = int(input())
x,y = 0,0
roza = ['восток','запад','север','юг']
coord = [1,-1,1,-1]
for i in range(n):
    dest, sm = input().split()
    a = roza.index(dest)
    if a < 2:
        x += int(sm)*coord[a]
    else:
        y += int(sm)*coord[a]
print(x,y) -End,"
 ids = []
for i in objects:
    if id(i) not in ids:
        ids += [id(i)]
print(len(ids)) -End,"
 def closest_mod_5 (x):
    if x % 5 == 0:
        return x
    elif x % 10 <= 5:
        return x + 5 - x % 10
    else:
        return x + 10 - x % 10 -End,"
 def C(n,k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    else:
        return C(n - 1, k) + C(n - 1, k - 1)
n,k = map(int, input().split())
print(C(n,k)) -End,"
 cmds = ['create','add','get']
spacenames = {'global':None}
spacevars = {'global':[]}
n = int(input())
for i in range(n):
    cmd, namespace, varpar = input().split()
    if cmds.index(cmd) == 0: #create
        if varpar in spacenames:
            spacenames[namespace] = varpar
            spacevars[namespace] = []
    if cmds.index(cmd) == 1: #add
        if namespace in spacevars:
            spacevars[namespace]+=[varpar]
    if cmds.index(cmd) == 2: #get
        if spacevars.get(namespace) == None:
            print('None')
        else:
            while True:
                if varpar in spacevars[namespace]:
                    print(namespace)
                    break
                else:
                    if namespace != 'global':
                        namespace = spacenames[namespace]
                    else:
                        print('None')
                        break -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity# конструктор с аргументом – вместимость копилки
    def can_add(self, v):
        if v <= self.capacity:
            return True
        else: return False
        # True, если можно добавить v монет, False иначе
    def add(self, v):
        if v <= self.capacity:
            self.capacity -= v
        # положить v монет в копилку -End,"
 class Buffer:
    def __init__(self): # конструктор без аргументов
        self.lst = []
    def add(self, *a): # добавить следующую часть последовательности
        for i in a:
            self.lst += [i]
            if self.lst.__len__()> 4:
                print(sum(self.lst))
                self.lst.clear()
    def get_current_part(self): # вернуть сохраненные в текущий момент элементы последовательности в порядке, в котором они были добавлены
        return self.lst -End,"
 class ExtendedStack(list):
    def sum(self):
        self.append(self.pop() + self.pop()) # операция сложения
    def sub(self):
        self.append(self.pop() - self.pop()) # операция вычитания
    def mul(self):
        self.append(self.pop() * self.pop()) # операция умножения
    def div(self):
        self.append(self.pop() // self.pop()) # операция целочисленного деления -End,"
 class NonPositiveError(Exception):
    pass

class PositiveList (list):
    def append(self,x):
        if x > 0:
            super(PositiveList,self).append(x)
        else: raise NonPositiveError() -End,"
 import datetime
y, m, d = map(int,input().split())
date = datetime.date(y,m,d)
date += datetime.timedelta(int(input()))
print(date.year,date.month,date.day) -End,"
 class multifilter:
    def judge_half(pos, neg):
        return (pos >= neg)
    def judge_any(pos, neg):
        return (pos >= 1)
    def judge_all(pos, neg):
        return (neg == 0)
    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge
    def __iter__(self):
        def func(x):
            pos, neg = 0, 0
            for f in self.funcs:
                if f(x): pos += 1
                else: neg += 1
            return self.judge(pos,neg)
        return filter(func, self.iterable) -End,"
 def is_prime(num):
    if num == 2: return True
    if num % 2 == 0: return False
    for _ in range(3, num // 2, 2):
        if num % _ == 0:
            return False
    return True

def primes():
    num = 2
    while True:
        if is_prime(num):
            yield num
        num += 1 -End,"
 def mod_checker(x,mod = 0):
    return lambda y: y % x == mod -End,"
 s, a, b = [str(input()) for i in range(3)]
i = 0
while a in s:
        s = s.replace(a, b)
        i += 1
        if i > 1000:
            break
if i > 1000:
    print('Impossible')
else:
    print(i) -End,"
 s, t = str(input()), str(input())
cnt = 0
promezh = ''
for i in range(len(s)):
    for j in range(len(t)):
        if i+j < len(s):
            promezh += s[i+j]
    if promezh == t:
        cnt += 1
    promezh = ''
print(cnt) -End,"
 import sys, re
shbl = r""(cat.*){2,}""
for line in sys.stdin:
    line = line.rstrip()
    if re.search(shbl,line):
        print(line) -End,"
 import sys, re
shbl = r""\b(cat)\b""
for line in sys.stdin:
    line = line.rstrip()
    if re.search(shbl,line):
        print(line) -End,"
 import sys, re
shbl = r""z.{3}z""
for line in sys.stdin:
    line = line.rstrip()
    if re.search(shbl,line):
        print(line) -End,"
 import sys, re
shbl = r""\b(.+)\1\b""
for line in sys.stdin:
    line = line.rstrip()
    if re.search(shbl,line):
        print(line) -End,"
 import sys, re
for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""human"",r""computer"",line)) -End,"
 import sys, re
shbl = r""\b[aA]+\b""
for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(shbl,r""argh"",line,1)
    print(line) -End,"
 import sys, re
shbl = r""\b(\w)(\w)(\w*)\b""
for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(shbl,r""\2\1\3"", line)
    print(line) -End,"
 import sys, re
shbl = r""(\w)(\1)+""
for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(shbl,r""\1"", line)
    print(line) -End,"
 import sys, re
shbl = r""^[01]+$""
for line in sys.stdin:
    line = line.rstrip()
    nline = re.match(shbl, line)
    if nline: 
        rezult = nline[0]
        if int(rezult, base = 2) % 3 == 0:
            print(line) -End,"
 import requests, re
f = open(""C:\_test\stest.html"", ""wb"")
ufr = requests.get(str(input()))
f.write(ufr.content)
f.close()
f = open(""C:\_test\stest.html"", ""r"")
data = f.read()
f.close()
result = []
for link in re.findall(r""<a(.*?)href(.*?)=(.*?)(\""|')(((.*?):\/\/)|(\.\.)|)(.*?)(\/|:|\""|')(.*)"", data):
    domain = link[8]
    if domain not in result:
        result.append(domain)
result.sort()
for domain in result:
    if result.count(domain)>1:
        result.remove(domain)
for domain in result:
    print(domain) -End,"
 from lxml import etree
colors = {'red': 0, 'green' : 0, 'blue' : 0}
root = etree.fromstring(input())
colors[root.attrib['color']] += 1
level = 1
def colorchild(root, level):
    level += 1
    for child in root.getchildren():
        colors[child.attrib['color']] += level
        colorchild(child, level)
colorchild(root, level)
for color in colors.values():
    print(color, end = "" "") -End,"
 list = input().split(' ')
print (""%.2f"" %(list.count('A')/len(list))) -End,"
 list = input().lower().split(' ')
countwords = {}
for i in list:
  if i not in countwords:
    countwords[i] = list.count(i)
for i in countwords:
  print(i, countwords[i]) -End,"
 lst = [int(i) for i in input().split()]
x = int(input())
lst2 = []
for i in range(len(lst)):
    if lst[i] == x:
        lst2 += [lst.index(x,i)]
if len(lst2)< 1: print(""None"")
else: print(*lst2) -End,"
 lst = [str(i) for i in input().split()]
stat = {}
for i in lst:
    if len(i) in stat:
        stat[len(i)] += 1
    else:
        stat[len(i)] = 1
lst = list(stat.keys())
lst.sort()
for i in lst:
    print(i, ':', stat[i]) -End,"
 s = str(input())
def p(prev, count):
    if count > 1:
        print(count, end='')
    print(prev, end='')
prev = s[0]
count = 1
for i in s[1:]:
    if i == prev:
        count += 1
        continue
    p(prev, count)
    prev = i
    count = 1
p(prev, count) -End,"
 cards = ['6','7','8','9','10','J','Q','K','A']
first, second = str(input()).split()
koz = input()
if koz in first and koz not in second:
    print('First')
elif koz in second and koz not in first:
    print('Second')
else:
    if first[-1::] == second[-1::]:
        if cards.index(first[0:-1]) > cards.index(second[0:-1]):
            print('First')
        else: 
            print('Second')
    else: 
        print('Error')
 -End,"
 coding = zip(
    [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1],
    [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
)
def decToRoman(num):
    result = []
    for d, r in coding:
        while num >= d:
            result.append(r)
            num -= d
    return ''.join(result)
print(decToRoman(int(input()))) -End,"
 a, operator, b = (i for i in input().split())
if operator == 'plus':
    print(int(a) + int(b))
elif operator == 'minus':
    print(int(a) - int(b))
elif operator == 'multiply':
    print(int(a) * int(b))
elif operator == 'divide':
    print(int(a) // int(b)) -End,"
 def f(x):
    if x <= -2:
        return 1-(x+2)**2
    elif -2 < x <= 2:
        return -x/2
    elif x > 2:
        return (x-2)**2+1 -End,"
 lst = list(map(int, input().split()))
clr = set()
for i in lst:
  if lst.count(i) > 1:
    clr.add(i)
print(*clr) -End,"
 n = int(input())
save = {}
for i in range(n):
    arg = int(input())
    if arg in save:
        print(save[arg])
    else:
        save[arg] = f(arg)
        print(save[arg]) -End,"
 n = int(input())
spir = [[0]*n for i in range(n)]
num = 1
i = 0
koef = 0
while koef < n//2:
    for j in range(koef,n-koef):
        spir[i][j] = num
        num += 1
    for i in range(koef+1,n-koef):
        spir[i][j] = num
        num += 1
    for j in range(n-(2+koef),koef-1,-1):
        spir[i][j] = num
        num += 1
    for i in range(n-(2+koef),koef,-1):
        spir[i][j] = num
        num += 1
    koef += 1
if n%2> 0: spir[n//2][n//2] = n*n
for i in spir:
    print(*i) -End,"
 sdvig = int(input())
fraza = input().strip()
alph = ' abcdefghijklmnopqrstuvwxyz'
print('Result: \""',end = """")
for i in fraza:
  ind = alph.index(i) + sdvig
  while abs(ind) >= len(alph):
    if ind >= 0:
      ind = ind - len(alph)
    else: ind = len(alph) + ind
  print(alph[ind], end = """")
print('\""') -End,"
 a = int(input())
if (a == -10) or (-5 < a <= 3) or (8 < a < 12) or (a >= 16):
  print(True)
else:
  print(False) -End,"
 n = int(input())
e = []
for i in range(1, n + 1):
  for j in range(i):
    e += [i]
for i in range(n):
  print(e[i] , end = "" "") -End,"
 n = int(input())
print(n, end = "" "")
while n > 1:
  if n % 2 == 0:
    n = int(n/2)
    print(n, end = "" "")
  else:
    n = int(n * 3 + 1)
    print(n, end = "" "") -End,"
 print('_'.join(input().split())) -End,"
 st, en = map(int, input().split())
for i in range(st, en + 1):
  if i % 15 == 0: print('FizzBuzz')
  elif i % 3 == 0: print('Fizz')
  elif i % 5 == 0: print('Buzz')
  else: print(i) -End,"
 s = input().split('_')
for i in s:
  print(i[0].upper()+i[1:], end = """") -End,"
 while True:
  cmd = input()
  if cmd == 'End':
    print('Good bye!')
    break
  else:
    print('Processing \""' + cmd + '\"" command...') -End,"
 print(sorted(input().lower()) == sorted(input().lower())) -End,"
 a, b = input().split('/')
a, b = int(a), int(b)
def calc(a, b):
    while b > 0:
        q = a // b
        c = b
        b = a - b * q
        a = c
        yield str(q)
print(' '.join(list(calc(a, b))))
 -End,"
 def koch_curve_turns(n):
    turns = [0]
    while n > 0:
        new_turns = []
        for l in turns:
            new_turns.extend([l, 60, -120, 60])
        turns = new_turns
        n -= 1
    return turns[1:]

if __name__ == '__main__':
    n = int(input())
    print('\n'.join('turn {}'.format(i) for i in koch_curve_turns(n))) -End,"
 def get_int(start_message, error_message, end_message):
    print(start_message)
    while True:
        try:
            x = int(input())
        except ValueError:
            print(error_message)
        else:
            print(end_message)
            return int(x)
            break -End,"
 def test_input_text(expected_result, actual_result):
    assert expected_result == actual_result, f""expected {expected_result}, got {actual_result}"" -End,"
 def test_substring(full_string, substring):
    assert substring in full_string, f""expected '{substring}' to be substring of '{full_string}'""




 -End,"
 # put your python code here
i = int(input())
a = ((i//(10**5))%10)
b = ((i//(10**4))%10)
c = ((i//(10**3))%10)
d = ((i//(10**2))%10)
e = ((i//(10**1))%10)
f = ((i//1)%10)

if (a+b+c)==(d+e+f):
  print('Счастливый')
else:
  print('Обычный')



 -End,"
 # put your python code here
sum = 0
i = True
while i:
	q = int(input())
	sum += q
	if q == 0:
		i = False
		print(sum)




 -End,"
 # put your python code here
a = int(input())
b = int(input())
q = 1
w = True
while w:
	if q%a == 0 and q%b == 0:
		w =False
		print(q)
	q += 1




 -End,"
 # put your python code here
i  = True
while i:
  a = int(input())
  if a < 10:
  	continue
  if a > 100:
	  break
  print(a)



 -End,"
 # put your python code here
a = int(input())
b = int(input())
c = int(input())
d = int(input())

print(end = '\t')

for e in range(c, d + 1):
	print(e, end = '\t')

print()

for q in range(a, b + 1):
	print(q, end='\t')
	for w in range(c, d + 1):
				print(q * w, end = '\t')
	print()



 -End,"
 # put your python code here
a = int(input())
b = int(input())
s = 0
q = 0

for i in range(a, b + 1):
	if i%3 == 0:
		s += i
		q += 1

print(s / q)




 -End,"
 # put your python code here
g = input()
q = g.lower()
c = 0
for i in q:
	if i == 'g' or i == 'c':
		c += 1

print((c / len(q))* 100)



 -End,"
 s = input()
c = 1
if len(s) == 1:
	print(s + str(c))
else:
	for i in range(len(s) - 1):
		if s[i] == s[i + 1]:
			c += 1
			continue
		print(s[i] + str(c), end='')

		if s[i] != s[i+1]:
			c = 1

	print(s[i+1] + str(c))
	
	



 -End,"
 # put your python code here
a =[int(i) for i in input().split()]

if len(a) == 1:
	print(a[0])

if len(a) > 1:
	for i in range(len(a)):
		s = 0
		if i == 0:
			s = a[i+1] + a[-1]
			print(s, end=' ')
			continue
		if i == (len(a) - 1):
			s = a[0] + a[-2]
			print(s, end=' ')
			break
		s = a[i-1] + a[i+1]
		print(s, end=' ')

	



 -End,"
 # put your python code here
a =[int(i) for i in input().split()]
a.sort()
b = []

for e in a:
	if a.count(e) > 1:
		if e not in b:
			b.append(e)

for e in b:
	print(e, end=' ')




 -End,"
 lst = [int(i) for i in input().split()]
x = int(input())

if x in lst:
    for i, j in enumerate(lst):
      if j == x:
        print(i, end=' ')
if x not in lst:
  print('Отсутствует')


 -End,"
 a = []

while True:
  b = input().split()
  if b == ['end']:
    break
  else:
    a.append(b)

c = [[0 for j in range(len(a[i]))]for i in range(len(a))]

for i in range(len(a)):
  for j in range(len(a[i])):
    c[i][j] = int(a[i][j])

if len(c) == 1 and len(c[i]) == 1:
  print((c[0][0]) + c[0][0] + c[0][0] + c[0][0])
  
elif len(c) == 1 and len(c[i]) >= 2:
  d = [[0 for j in range(len(c[i]))]for i in range(len(c))]
  for i in range(len(c)):
    for j in range(len(c[i])):
      if i == 0 and j == 0:
        d[i][j] = c[i][j] + c[i][j] + c[i][len(c[i])-1] + c[i][j+1]
      if i == 0 and j == (len(c[i])-1):
        d[i][j]= c[i][j] + c[i][j] + c[i][0] + c[i][len(c[i])-2]
      if i == 0 and 0 < j < (len(c[i])-1):
        d[i][j] = c[i][j] + c[i][j] + c[i][j-1] + c[i][j+1]
  for i in range(len(d)):
    for j in range(len(d[i])):
      print(d[i][j], end=' ')
      
elif len(c) > 1 and len(c[i]) == 1:
  f = [[0 for j in range(len(c[i]))]for i in range(len(c))]
  for i in range(len(c)):
    for j in range(len(c[i])):
      if i == 0 and j ==0:
        f[i][j] = c[len(c)-1][j] + c[i+1][j] + c[i][j] + c[i][j]
      if 0 < i < (len(c)-1) and j == 0:
        f[i][j] = c[i-1][j]+ c[i+1][j] + c[i][j] + c[i][j]
      if i == (len(c)-1) and j == 0:
        f[i][j] = c[len(c)-2][j] + c[0][j] + c[i][j] + c[i][j]
  for i in range(len(f)):
    for j in range(len(f[i])):
      print(f[i][j], end=' ')
    print()
      
elif len(c) == 2 and len(c[i]) == 2:
  e = [[0 for j in range(len(c[i]))]for i in range(len(c))]
  for i in range(len(c)):
    for j in range(len(c[i])):
      if i == 0 and j == 0:
        e[i][j] = c[1][j] + c[1][j] + c[i][1] + c[i][1]
      if i == 0 and j == 1:
        e[i][j] = c[1][j] + c[1][j] + c[i][0] + c[i][0]
      if i == 1 and j == 0:
        e[i][j] = c[0][j] + c[0][j] + c[i][1] + c[i][1]
      if i ==1 and j == 1:
        e[i][j] = c[0][j] + c[0][j] + c[i][0] + c[i][0]
  for i in range(len(e)):
    for j in range(len(e[i])):
      print(e[i][j], end=' ')
    print()
      

else:
  ex = [[0 for j in range(len(c[i]))]for i in range(len(c))]

  for i in range(len(c)):
    for j in range(len(c[i])):
      if i == 0 and j == 0:
        ex[i][j] = c[len(c)-1][j] + c[i+1][j] + c[i][len(c[i])-1] + c[i][j+1]
      if i == 0 and 0 < j < (len(c[i])-1):
        ex[i][j] = c[len(c)-1][j] + c[i+1][j] + c[i][j-1] + c[i][j+1]
      if i == 0 and j == (len(c[i])-1):
        ex[i][j] = c[len(c)-1][j] + c[i+1][j] + c[i][len(c[i])-2] + c[i][0]
      if 0 < i < (len(c)-1) and 0 < j < (len(c[i])-1):
        ex[i][j] = c[i-1][j] + c[i+1][j] + c[i][j-1] + c[i][j+1]
      if 0 < i < (len(c)-1) and j == 0:
        ex[i][j] = c[i-1][j] + c[i+1][j] + c[i][len(c[i])-1] + c[i][j+1]
      if 0 < i < (len(c)-1) and j == (len(c[i])-1):
        ex[i][j] = c[i-1][j] + c[i+1][j] + c[i][len(c[i])-2] + c[i][0]
      if i == (len(c)-1) and j == 0:
        ex[i][j] = c[len(c)-2][j] + c[0][j] + c[i][len(c[i])-1] + c[i][j+1]
      if i == (len(c)-1) and 0 < j < (len(c[i])-1):
        ex[i][j] = c[len(c)-2][j] + c[0][j] + c[i][j-1] + c[i][j+1]
      if i == (len(c)-1) and j == (len(c[i])-1):
        ex[i][j] = c[len(c)-2][j] + c[0][j] + c[i][len(c[i])-2] + c[i][0]
      
  for i in range(len(ex)):
    for j in range(len(ex[i])):
      print(ex[i][j], end=' ')
    print()  
    





 -End,"
 def f(x):
    if x <= -2:
        r = 1 - ((x + 2) ** 2)
    if -2 < x <= 2:
        r = -(x / 2)
    if 2 < x:
        r = ((x - 2) ** 2) + 1
    return r
   





 -End,"
 def modify_list(l):

	sp = []
	for i in l:
		if i%2 != 0:
		    sp.append(i)
	for i in sp:
		if i in l:
		    l.remove(i)
	for i in range(len(l)):
		l[i] = int(l[i] / 2)


 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    else:
        if 2*key in d:
            d[2*key].append(value)
        else:
            d.setdefault(2*key,[value])
    # put your python code here

# не добавляйте кода вне функции -End,"
 # put your python code here
s = input().split()
d = []
c = []
for i in range(len(s)):
	x = s[i].lower()
	d.append(x)
#print(d)
for i in d:
	c.append(i + ' ' +str(d.count(i)))
for i in set(c):
	print(i)



 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
n = int(input())
d= {}
for i in range(n):
    x = int(input())
    if x not in d.keys():
        d[x] = f(x)
        print(d[x])
    else:
        print(d[x]) -End,"
 # put your python code here
import math
r = float(input())
print(2 * math.pi * r)




 -End,"
 import sys
for i in sys.argv[1::]: print(i, end=' ')




 -End,"
 d = int(input())
dic = []
for i in range(d):
	word = input().lower()
	dic.append(word)

l = int(input())
tx = []
for i in range(l):
	line = input().lower().split()
	tx.append(line)

not_found = []
for i in range(len(tx)):
	for j in range(len(tx[i])):
		if not tx[i][j] in dic:
			not_found.append(tx[i][j])

for i in set(not_found):
	print(i) -End,"
 d, dic= int(input()), []
for i in range(d):
	dic.append(input().lower())
l, tx = int(input()), []
for i in range(l):
	tx.append(input().lower().split())
not_found = []
for i in range(len(tx)):
	for j in range(len(tx[i])):
		if not tx[i][j] in dic:
			not_found.append(tx[i][j])
for i in set(not_found):
	print(i) -End,"
 a, b = list(input()), list(input())
a1,b1 = list(input()), list(input())
a2, b2 = [], []
d,d1 = {},{}
i = 0
while i < len(a):
	d[a[i]] = b[i]
	i += 1
i = 0
while i < len(b):
	d1[b[i]] = a[i]
	i += 1	
for i in a1:
	if i in d.keys():
		a2.append(d[i])
for i in b1:
	if i in d1.keys():
		b2.append(d1[i])
for i in a2:
	print(i, end='')
print()
for i in b2:
	print(i, end='') -End,"
 n = int(input())
com = []
x, y = 0, 0
for i in range(n):
	com.append(input().split())
for i in range(n):
	if com[i][0] == 'север': y += int(com[i][1])
	elif com[i][0] == 'запад': x -= int(com[i][1])
	elif com[i][0] == 'юг': y -= int(com[i][1])
	elif com[i][0] == 'восток': x += int(com[i][1])
print(x, y)




 -End,"
 com, x, y = [], 0, 0
for i in range(int(input())):
	com.append(input().split())
	if com[i][0] == 'север': y += int(com[i][1])
	elif com[i][0] == 'запад': x -= int(com[i][1])
	elif com[i][0] == 'юг': y -= int(com[i][1])
	elif com[i][0] == 'восток': x += int(com[i][1])
print(x, y)




 -End,"
 n, x = int(input()), 0
for i in range(n):
	x += int(input())
print(x) -End,"
 d = []
s = [id(i) for i in objects]
for i in s:
	if i not in d:
		d.append(i)
print(len(d))





 -End,"
 s = set(id(i) for i in objects)
print(len(s))




 -End,"
 print(len(set(id(i) for i in objects))) -End,"
 def closest_mod_5(x):
	y = x
	while True:
		if y % 5 == 0:
			return y
		else:
			y += 1





 -End,"
 def C(n, k):
	if k == 0: return 1
	elif k > n: return 0
	else: return C(n - 1, k) + C(n - 1, k - 1)
n, k = map(int, input().split())
print(C(n, k)) -End,"
 class Buffer:

	def __init__(self):
		self.lst = []

	def add(self, *a):
		self.lst += a
		while len(self.lst)>= 5: 
			print(sum(self.lst[:5]))
			self.lst[0:5] = []

	
	def get_current_part(self):
		return self.lst -End,"
 class ExtendedStack(list):
	
	top1 = 0
	top2 = 0
	
	def sum(self):
		self.top1 = self.pop()
		self.top2 = self.pop()
		self.append(self.top1 + self.top2)

	def sub(self):
		self.top1 = self.pop()
		self.top2 = self.pop()
		self.append(self.top1 - self.top2)

	def mul(self):
		self.top1 = self.pop()
		self.top2 = self.pop()
		self.append(self.top1 * self.top2)

	def div(self):
		self.top1 = self.pop()
		self.top2 = self.pop()
		self.append(self.top1 // self.top2)




 -End,"
 try:
	foo()
except ZeroDivisionError:
	print('ZeroDivisionError')
except AssertionError:
	print('AssertionError')
except ArithmeticError:
	print('ArithmeticError')




 -End,"
 # put your python code here
import datetime

s = input().split()
q = int(input())
y, m, d, = int(s[0]), int(s[1]), int(s[2])
z = str(datetime.date(y, m, d) + datetime.timedelta(days = q)).split('-')
print(int(z[0]), int(z[1]), int(z[2]))



 -End,"
 import datetime

y, m, d = map(int, input().split())
z = str(datetime.date(y, m, d) + datetime.timedelta(days = int(input()))).split('-')
print(int(z[0]), int(z[1]), int(z[2]))




 -End,"
 class NonPositiveError(Exception):
    pass


class PositiveList(list):

    def append(self, x):
        if x > 0:
           super().append(x)
        else:
            raise NonPositiveError




 -End,"
 def mod_checker(x, mod=0):
	return lambda y: y%x == mod




 -End,"
 # put your python code here
s, a, b = input(), input(), input()
i = 0
for j in range(len(s)):
	if a in s and a in b:
		i = 'Impossible'
		break
	if a in s:
		s = s.replace(a, b)
		i += 1
	if i > 1000:
		i = 'Impossible'
		break

print(i)




 -End,"
 # put your python code here
s = input()
t = input()
count = 0

while t in s:
	index = s.find(t)
	s = s[index+1:]
	count += 1

print(count)



 -End,"
 # put your python code here
import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    pattern = r'cat'
    result = re.findall(pattern, line)
    if len(result) >= 2:
        print(line)



 -End,"
 # put your python code here
import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    pattern = r'\bcat\b'
    result = re.findall(pattern, line)
    if len(result)>=1:
        print(line)



 -End,"
 # put your python code here
import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    pattern = r'z\w{3}z'
    result = re.findall(pattern, line)
    if len(result)>=1:
        print(line)



 -End,"
 import re, sys

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r'z\w{3}z', line):
        print(line)




 -End,"
 import re, sys

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r'\\', line):
        print(line)




 -End,"
 import re, sys

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r'\b(\w+)\1\b', line):
        print(line)



 -End,"
 import re, sys

for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(r'human', 'computer', line)
    print(line)




 -End,"
 import re, sys

[print(re.sub(r'\b[aA]+\b', 'argh', line.rstrip(), count=1)) for line in sys.stdin]



 -End,"
 import re, sys

[print(re.sub(r'\b(\w)(\w)(\w*)\b', r'\2\1\3', line.rstrip())) for line in sys.stdin]




 -End,"
 from collections import Counter

text = input().lower().split()

d = Counter(text)

for i in d:
    print(i, ' ', d[i])



 -End,"
 

lst = input().split()
num = input()

for i, j in enumerate(lst):
    if num not in lst:
        print('None')
        break
    if j == num:
        print(i, end=' ')




 -End,"
 first_name = input()
second_name = input()

text = ['{A} and {B} sat in the tree.', '{A} had fallen, {B} was stolen.',
        'What\'s remaining in the tree?']
replace = {'A':first_name, 'B':second_name}
for str in text:
    print(str.format(**replace))




 -End,"
 import re

str = input()
result = ''
regex = re.findall(r'\d*[a-z]|\d*[A-Z]', str)

for elem in regex:
    qwe = re.findall(r'(\d*)(\w)', elem)
    lst = list(qwe[0])
    if '' in lst:
        lst.remove('')
    if len(lst) == 2:
        e = int(lst[0])*lst[1]
        result = result + e
    else:
        result = result + lst[0]

print(result)




 -End,"
 # put your python code here


n = int(input())
result = []
result.append(n)


def num_collatz(n):
    if n == 1:
        result.append(n)
        return
    if n%2 == 0:
        n = int(n/2)
        result.append(n)
        if n == 1:
            return
    if n%2 != 0:
        n = (n*3) + 1
        result.append(n)
    if n == 1:
        return
    num_collatz(n)


if n != 1:
    num_collatz(n)

for i in result:
    print(i, end=' ')






 -End,"
 from itertools import groupby

text = input()
for i in [list(g) for k, g in groupby(text)]:
    print(str(len(i))+i[0] if len(i)>1 else i[0], end='')




 -End,"
 num, text = int(input()), input().strip()
pattern = ' abcdefghijklmnopqrstuvwxyz'
result = ''

for i in text:
	r = (pattern.index(i) + num)%27
	result += pattern[r]

print('Result: ' + '\""{}\""'.format(result))




 -End,"
 nv, ne = map(int, input().split())

verts = [set() for _ in range(nv)]
for _ in range(ne):
    a, b = map(int, input().split())
    verts[a-1].add(b-1)
    verts[b-1].add(a-1)

visited = [False] * nv
nc = 0
        
def dfs(v):
    visited[v] = True
    for w in verts[v]:
        if not visited[w]:
            dfs(w)

for v in range(len(visited)):
    if not visited[v]:
        nc += 1
        dfs(v)
   
print(nc) -End,"
 from queue import deque

nv, ne = map(int, input().split())
adj = [set() for _ in range(nv)]
for v, w in (map(int, input().split()) for _ in range(ne)):
    adj[v].add(w)
    adj[w].add(v)

depth = [0] * nv
queue = deque([0])
verts = set([0])

while queue:
    v = queue.pop()
    for w in (w for w in adj[v] if w not in verts):
        depth[w] = depth[v] + 1
        verts.add(w)
        queue.appendleft(w)

print(' '.join(map(str, depth))) -End,"
 from sys import stdin
from collections import defaultdict

def cut_points(edges):
    adj = defaultdict(set)
    nv = 0
    for a, b in edges:
        adj[a].add(b)
        adj[b].add(a)
        nv = max(nv, a+1, b+1)
    cuts = set()
    visited = [False] * nv

    for root in adj.keys():
        if visited[root]:
            continue
        cur_val = 0
        k_val = [None] * nv
        l_val = [None] * nv

        root_degree = 0
        visited[root] = True
        k_val[root] = l_val[root] = cur_val
        cur_val += 1
        stack = [(None, root, iter(adj[root]))]

        while stack:
            grand, parent, children = stack[-1]
            for child in children:
                if visited[child]:
                    if k_val[child] < k_val[parent]:  # back edge
                        l_val[parent] = min(l_val[parent], k_val[child])
                    continue
                visited[child] = True
                if parent == root:
                    root_degree += 1
                k_val[child] = l_val[child] = cur_val
                cur_val += 1
                stack.append((parent, child, iter(adj[child])))
                break
            else:
                stack.pop()
                if grand is not None and grand != root:
                    l_val[grand] = min(l_val[grand], l_val[parent])
                    if l_val[parent] >= k_val[grand] and grand != root:
                        cuts.add(grand)
        if root_degree > 1:
            cuts.add(root)
    return sorted(cuts)

print(*cut_points(map(int, s.split()) for s in stdin)) -End,"
 import sys
import math
from collections import defaultdict, deque

# поиск максимального потока в сети алгоритмом Форда-Фолкерсона
def ff_max_flow(input_lines):
    num_verts, num_edges = map(int, next(input_lines).split())
    start, end = 0, num_verts-1

    # преобразуем входные данные в массивы связности и массив ограничений
    adjacency, back_edges = defaultdict(set), defaultdict(set)
    capacity, flow = {}, {}
    start = end = 0
    for line in input_lines:
        a, b, cap = map(int, line.split())
        adjacency[a].add(b)
        back_edges[b].add(a)
        end = max(end, a, b)
        capacity[(a,b)] = cap
        flow[(a,b)] = 0

    def find_improveable_path():
        # путь Форда-Фалкерсона ищем поиском в ширину
        queue = deque([start])  # очередь следующего уровня поиска
        visited = set()         # множество уже пройденных вершин
        paths = {}              # здесь собираем найденные рёбра
        while queue:
            a = queue.popleft()
            if a in visited:
                continue
            visited.add(a)
            if a == end:  # нашли путь, если смогли дойти до конечной вершины
                return paths
            for b in adjacency[a]:
                # ищем прямые рёбра, в которые ещё можно добавить поток
                delta = capacity[(a,b)] - flow[(a,b)]
                if delta > 0:
                    if b not in paths:  # учитаываем только 1-й найденный (поиск в ширину)
                        paths[b] = (a, delta, 1)
                    queue.append(b)
            for b in back_edges[a]:
                # ищем обратные рёбра, из которых ещё можно убрать поток
                delta = flow[(b,a)]
                if delta > 0:
                    if a not in paths:  # учитаываем только 1-й найденный (поиск в ширину)
                        paths[a] = (b, delta, -1)
                    queue.append(b)
        return None  # путь не найден

    paths = find_improveable_path()
    while paths:
        # пройдём по пути в первый раз и найдём минимальную коррекцию
        delta_min = math.inf
        b = end
        while b != start:
            a, delta, sign = paths[b]
            delta_min = min(delta_min, delta)
            b = a

        # пройдём по пути во второй раз и скорректируем потоки
        b = end
        while b != start:
            a, delta, sign = paths[b]
            flow[(a,b)] += delta_min * sign
            b = a

        # продолжаем искать путь Форда-Фалкерсона, пока возможно
        paths = find_improveable_path()

    # наилучший поток равен сумме потоков в начале (или в конце)
    max_flow = sum(flow[(a,b)] for a,b in flow.keys() if a==start)
    return max_flow

#ff_max_flow(to_lines(test_input))
print(ff_max_flow(line for line in sys.stdin)) -End,"
 import sys
import math
from collections import defaultdict, deque

# алгоритм эдмондса-карпа поиска пропускной способности сети
def ek_max_flow(input_lines):
    # словарь словарей ""r"" хранит ненулевые остатки пропускной способности
    # для каждого ребра из вершины ""a"" в вершину ""b"" в ячейке r[a][b]
    # хранится остаток пропускной способности ребра. при увеличении потока
    # через ребро остаток уменьшается. рёбра, в которых пропускная способность
    # упала до нуля, удаляются аллгоритмом.
    r = defaultdict(dict)
    # номер начальной вершины всегда 0
    next(input_lines)  # пропускаем строку с числом вершин (вычислим автоматически)
    t = 0
    for line in input_lines:
        # a - вершина начала ребра, b - конец ребра, с - пропускная способность
        a, b, c = map(int, line.split())
        if a != b and c > 0:  # добавляем только рёбра с ненулевой пропускной способностью
            r[a][b] = c
        t = max(t, a, b)  # номер конечной вершины - наибольший среди найденных

    f = 0  # накопленное значение потока в конечной вершине
    while 1:
        # поиском в щирину ищем кратчайший путь из начальной вершины в конечную
        q = deque([0])  # очередь просмотра вершин сети
        v = set([0])    # множество уже просмотренных вершин
        p = {}   # накопленный путь в виде словаря: p[конец_ребра] -> начало_ребра
        while q:
            a = q.popleft()
            if a == t:  # достигли конечной вершины?
                break
            for b in r[a]:  # пройдём в все рёбра, где осталась пропускная способность
                if b not in v:  # ещё не просматривали?
                    p[b] = a
                    v.add(b)
                    q.append(b)
        else:         # ""else"": цикл закончился без break'a, то есть конца мы не достигли
            return f  # значит, больше путей нет. возвращаем накопленную сумму потока

        # найдём минимум остатка пропускной способности среди рёбер вдоль найденного пути
        d = math.inf
        b = t     # проходим путь от конечной вершины
        while b:  # до начальной вершины с номером 0 (т.е. пока b>0)
            a = p[b]
            d = min(d, r[a][b])
            b = a

        # теперь модифицируем граф остатков
        b = t    # повторно проходим путь от конца в начало
        while b:
            a = p[b]
            r[a][b] -= d     # вычитаем найденный минимум из остатка пропускной способности
            if not r[a][b]:  # удаляем рёбра, в которых пропускная способность исчерпана
                del r[a][b]
            if b == t:  # значение потока вычисляем по конечной вершине
                f += d  # из остатка вычли, к потоку добавляем
            b = a

print(ek_max_flow(line for line in sys.stdin)) -End,"
 from math import log

# моя попытка написать оптимизированный перебор путей на Python
def kpaths(input_str):
    # input_str - входная строка
    start, end = input_str.split()
    
    # оцениваем длину строк
    k = max(len(start), len(end))
    
    # для большей скорости работать будем не со строками, а с битовыми масками
    # поэтому преобразуем двоичные строки вида ""0010..."" в целые числа
    start, end = int(start,2), int(end,2)
    
    # начальная и конечная точка пути должны различаться,
    # иначе алгоритм отработает некорретно
    assert start != end, '%s and %s must be different' % (start, end)

    # в множестве visited будем запоминать уже использованные в путях вершины
    visited = set()
    
    # в массиве result мы будем накапливать полученные пути
    # в принципе, можно было бы их просто печатать по мере получения,
    # но во время тестирования перебором различных входных строк
    # мне нужно было как-то запретить печать
    result = []

    # будем перебирать начальные вершины пути
    # сначала возьмём первую вершину без изменений,
    # потом изменим в ней крайний бит, потом следующий и т.д.
    # получится перебор k+1 начальных вершин, но одна из них будет
    # занята каким-то из путей в ходе поиска, и в итоге получится k путей
    for bit0 in [0] + [1<<i for i in range(k)]:
        # изменяем один из битов начальной вершины и генерируем вторую вершину пути
        # (первой всегда будет start)
        step = start ^ bit0

        # одна из потенциальных начальных вершин будет занята каким-то из путей в ходе поиска
        if step in visited:
            continue
        visited.add(step)

        # добавляем начальную вершину плюс вершину с изменённым битом (если изменяли) в путь
        path = [start] if step == start else [start, step]

        while 1:
            # целое число diff будет содержать единицы в тех битах,
            # которые отличаются между текущей и конечной вершинами
            diff = step ^ end
            if not diff:  # отличий не найдено,
                break     # путь достиг конечной точки

            # перебираем варианты следующего шага. ищем короткий путь: такой,
            # в котором число отличных от конечной вершины битов меньше на один
            while diff:
                bit = 1 << int(log(diff, 2))  # находим следующий ненулевой бит
                diff &= ~bit

                # следующий шаг должен либо привести в конечную (step == end),
                # либо в еще не занятую другими путями (step not in visited) вершину
                val = step ^ bit
                if val == end or val not in visited:
                    step = val         # запоминаем новую вершину в текущей
                    visited.add(step)  # добавляем в набор уже занятых вершин
                    path.append(step)  # и добавляем её в путь
                    break              # выходим из цикла перебора битов
            else:
                # если все вершины уже заняты, значит в алгоритме какая-то ошибка
                raise RuntimeError('no more paths for %s!' % input_str)

        # преобразуем путь из массива целых чисел в строковую форму и добавляем в результат
        result.append(' '.join(bin(val)[2:].rjust(k, '0') for val in path))

    # по теореме Менгера мы должны получить ровно k путей, проверим корректность результата
    assert len(result) == k, '%d paths for %s!' % (len(result), input_str)
    return result

# распечатаем результат, по одному пути в каждой строке
print(*kpaths(input()), sep='\n') -End,"
 def perm(k, s):
    if k > 0 and s:
        if k == 1:
            for x in s:  yield (x,)
        else:
            x,s = s[0], s[1:]
            for p in perm(k-1, s):  yield (x, *p)
            for p in perm(k, s):  yield p
k,n = map(int, input().split())
for p in perm(k, list(range(n))):  print(*p) -End,"
 #  Posted from PyCharm Edu
import sys
x,y,xc,yc,r=map(float,sys.stdin)
print(('NO','YES')[(x-xc)**2+(y-yc)**2 <= r**2])
 -End,"
 x = int(input())
r = ((1000,'M'),(900,'CM'),(500,'D'),(400,'CD'),(100,'C'),(90,'XC'),
     (50,'L'),(40,'XL'),(10,'X'),(9,'IX'),(5,'V'),(4,'IV'),(1,'I'))
s = ''
for n,d in r:
    s += x//n * d
    x %= n
print(s) -End,"
 n,m = map(int, input().split())
lines = [input() for i in range(n)]
mine = lambda i,j: 0<=i<n and 0<=j<m and lines[i][j]=='*'
for i in range(n):
    s = ''
    for j in range(m):
        s += ('*' if mine(i,j) else
              str(sum(mine(a,b) for a in range(i-1,i+2) for b in range(j-1,j+2))))
    print(s) -End,"
 import re
s, t = input(), input()
print(len(re.findall('(?=%s)' % t, s))) -End,"
 import re
print(re.sub(r'(.)\1*', lambda m: '%s%s' % (m.group(1),len(m.group(0))), input())) -End,"
 from sys import stdin
p,r,n,t = map(float,stdin)
print(p*(1+r/n)**(n*t)) -End,"
 n,k = map(int,input().split())
p = ['I'] * n
for i in range(k):
    a,b = map(int, input().split())
    p[a-1:b] = '.' * (b-a+1)
print(*p, sep='') -End,"
 s,a,b = (input() for i in range(3))
n = 0
while a in s:
    if a in b:
        n = 'Impossible'
        break
    n += 1
    s = s.replace(a, b)
print(n) -End,"
 abc = ' abcdefghijklmnopqrstuvwxyz'
offset, line = int(input()), input().strip()
print('Result: ""%s""' % ''.join(abc[(abc.index(ch) + offset) % 27] for ch in line))
 -End,"
 import re
s, ss, ii = input(), input(), []
re.sub('(?=%s)' % ss, lambda m: ii.append(m.start(0)), s)
print(*(ii or [-1])) -End,"
 n, *x = map(int, input().split())
print(*(x[i]+x[n-1-i] for i in range(n//2)), ['', x[(n-1)//2]][n & 1]) -End,"
 a = list(map(int, input().split()))
print(*a[1::2], sum(filter(lambda x: not x%2, a)), sep='\n') -End,"
 x1,y1,x2,y2 = map(int, input().split())
print(['NO','YES'][(x1-x2)**2 + (y1-y2)**2 == 5]) -End,"
 x = int(input())
print(x > -15 and x not in (13,14,17,18)) -End,"
 n=0
while input()!='0': n+=1
print(n)




 -End,"
 a,b = int(input()), int(input())
print((a+b)*(b-a+1)//2) -End,"
 a, b = (int(input()) for _ in '12')
print(1.5 * ((a + 2) // 3 + b // 3)) -End,"
 import re, sys
s, t = sys.stdin
print(len(re.findall(r'(?=%s)' % t, s))) -End,"
 n = int(input())
a = input().split()[:n]
print(a[-1], *a[:-1])




 -End,"
 n, k = map(int, input().split())
a = input().split()[:n]
print(*a[k%n:], *a[:k%n])
 -End,"
 print(sorted(input().lower()) == sorted(input().lower())) -End,"
 import sys, itertools
a1,b1,c1,a2,b2,c2 = map(int, sys.stdin)
def uncomparable(a,b,c):
    if a==a2 and b==b2 and c==c2:
        print('Boxes are equal')
    elif a<=a2 and b<=b2 and c<=c2:
        print('The first box is smaller than the second one')
    elif a>=a2 and b>=b2 and c>=c2:
        print('The first box is larger than the second one')
    else:
        return True
if all(uncomparable(a,b,c) for a,b,c in itertools.permutations((a1,b1,c1), 3)):
    print('Boxes are incomparable')            -End,"
 s = input()
while len(s) > 1:
    s = str(sum(map(int, s)))
print(['NO','YES'][s in '369'])





 -End,"
 print({'1':'move up','2':'move down','3':'move left','4':'move right','0':'do not move'}.get(input(), 'error!'))




 -End,"
 s = input()
digs = [
  ' --      --  --      --  --  --  --  -- ',
  '|  |   |   |   ||  ||   |      ||  ||  |',
  '|  |   |   |   ||  ||   |      ||  ||  |',
  '         --  --  --  --  --      --  -- ',
  '|  |   ||      |   |   ||  |   ||  |   |',
  '|  |   ||      |   |   ||  |   ||  |   |',
  ' --      --  --      --  --      --  -- ',
]
sep = 'x' + '-' * (len(s) * 5 - 1) + 'x'
print(sep)
for row in digs:
    print('|' + ' '.join(row[ofs:ofs+4] for ofs in ('0123456789'.index(d)*4 for d in s)) + '|')
print(sep) -End,"
 h, w = map(int, input().split())
f = [input() for y in range(h)]
for y in range(h):  # for all rows
    print(*(['.','X'][  # returns ""X"" if the ""in"" condition is True, ""."" if False
                ([f[y-1][xi%w] for xi in (x-1,x,x+1)] +      # cells in a row above
                 [f[(y+1)%h][xi%w] for xi in (x-1,x,x+1)] +  # cells in a row below
                 [f[y][x-1], f[y][(x+1)%w]]                  # left and right cells in current row
                 ).count('X')  # count the number of ""X"" in the cells gathered above
                 in
                 [(3,),(2,3)][f[y][x]=='X']]  # must be 3 for a dead cell; 2 or 3 for alive cell
            for x in range(w))  # for all cells in a row
          , sep='')  # print results side-by-side without spaces inbetween -End,"
 from re import sub
from collections import defaultdict
dic = defaultdict(int)
for t in input().replace('-', '+-').lstrip('+').split('+'):
    t = sub('^(-?)x', r'\g<1>1*x', sub('x$', 'x^1', sub(r'^(-?\d+)$', r'\1*x^0', t)))
    c, p = map(int, t.split('*x^'))
    dic[p-1] += c*p
lst = [sub(r'\*x\^1$', '*x', sub(r'\*x\^0$', '', '%d*x^%d' % (c,p)))
       for p, c in sorted(dic.items(), reverse=True) if c]
print('+'.join(lst).replace('+-', '-') or '0') -End,"
 # combined solution
from itertools import islice
PRIME_200K = 2750159
THRESHOLD = 50000

cnt = int(input())
ind = list(map(int, input().split()))[:cnt]
end = max(ind)

if end > THRESHOLD:
    # use Erathosthene`s sieve for large lists of primes
    end = PRIME_200K + 1  # 200000th prime number
    sieve = set(range(1, end))
    for p in range(2, int(end**.5)):
        for i in range(p*p, end, p):
            if i in sieve:
                sieve.remove(i)
    pri = sorted(sieve)
else:
    # simple`n`dirty generator for smaller lists of primes
    def prime_gen():
        yield 1; yield 2; yield 3; yield 5
        n = 7
        while 1:
            if n%3 and n%5:
                for d in range(7, int(n**.5)+1):
                    if not n%d:  break
                else:
                    yield n
            n += 2
    pri = list(islice(prime_gen(), end+1))

print(*(pri[i] for i in ind)) -End,"
 ns, nv = map(int, input().split())
print(2+ns*(1+nv+nv*(nv-1)//2)) -End,"
 import re, requests
from urllib.parse import urlparse
page = requests.get(input().strip()).text
domains = set(re.findall(r'<a[^>]+\bhref=[""\'](?:\w+://)?(\w[^""\':/]+).*?[""\']', page))
print(*sorted(domains), sep='\n') -End,"
 from sys import stdin
read = lambda: map(int, stdin.readline().split())
n_cuts, n_dots = read()
heap = []
for i in range(n_cuts):
    lx, rx = read()
    if lx <= rx:
        heap.append((lx, -1, i))
        heap.append((rx, 1, -i))
for i, dx in enumerate(read()):
    heap.append((dx, 0, i))
assert i+1 == n_dots
hits = [0] * n_dots
heap.sort()
depth = 0
for x, etype, i in heap:
    if etype == 0:
        hits[i] = depth
    elif etype < 0:
        depth += 1
    else:
        depth -= 1
print(*hits) -End,"
 n = int(input())
a = list(map(int, input().split()))
d = [1] * n
for i in range(n):
    try:
        d[i] = 1 + max(d[j] for j in range(i) if a[i] % a[j] == 0)
    except ValueError:
        pass
print(max(d)) -End,"
 vol, n = map(int, input().split())
weights = [*map(int, input().split())]
vol1 = vol + 1
prev, cur = [0]*vol1, [0]*vol1
for w in weights:
    prev, cur = cur, prev
    for v in range(vol1):
        cur[v] = prev[v] if w > v else max(prev[v], prev[v-w]+w)
print(cur[-1]) -End,"
 input()
c = p = 0
for s in input().split():
    p, c = c, max(c,p)+int(s)
print(c) -End,"
 c, N = [1], 1000000007
for k in range(1, int(input())+1):
    c.append(sum(c[i] * c[k-1-i] % N for i in range(k)) % N)
print(c[-1]) -End,"
 n = int(input())
p = 1000000007
c = 1
for k in range(2, n+1):
    c = c * (4*k-2) * pow(k+1, p-2, p) %p
print(c) -End,"
 def buffer_sim(size, packets):
    ends = []
    for start, length in packets:
        time = ends[-1] if ends else start
        while ends and ends[0] <= start:
            del ends[0]
        result = -1
        if len(ends) < size:
            result = max(time, start)
            ends.append(result + length)
        yield result

if __name__ == ""__main__"":
    import sys
    input_gen = (map(int, line.split()) for line in sys.stdin)
    size, npackets = next(input_gen)
    print(*buffer_sim(size, input_gen), sep=""\n"") -End,"
 def main():
    input()
    arr = [int(val) for val in input().split()]
    win = int(input())
    imax = [0] * win
    omax = [0] * win
    res = []
    for i in range(win-1, len(arr)):
        j = i % win
        imax[j] = max(arr[i], imax[j-1]) if j else arr[i]
        if j < win-1:
            res.append(max(imax[j-win], omax[win-2-j]))
            continue
        omax[0] = arr[i]
        for k in range(win-1):
            omax[k+1] = max(arr[i-k-1], omax[k])
        res.append(omax[-1])
    print(*res)

main() -End,"
 from heapq import heappop, heappush
q = [(0, n) for n in range(int(input().split()[0]))]
for d in input().split():
    t, n = heappop(q)
    print(n, t)
    heappush(q, (t + int(d), n)) -End,"
 import sys

input()
sizes = list(map(int, input().split()))
links = list(range(len(sizes)))
szmax = max(sizes)

def root(t):
    r = t
    while r != links[r]:
        r = links[r]
    if r not in (t, links[t]):
        while t != r:
            t, links[t] = links[t], r
    return r

for line in sys.stdin:
    d, s = line.split()
    s = root(int(s)-1)
    d = root(int(d)-1)
    if s != d:
        sizes[d] += sizes[s]
        sizes[s] = 0
        links[s] = d
        szmax = max(szmax, sizes[d])
    print(szmax) -End,"
 from sys import stdin
phones = [None] * (10**7+1)
next(stdin)
for req in stdin:
    req = req.split()
    cmd, num = req[0], int(req[1])
    if cmd == ""add"":
        phones[num] = req[2]
    elif cmd == ""del"":
        phones[num] = None
    else:
        print(phones[num] or ""not found"") -End,"
 from sys import stdin

hash_size = int(next(stdin))
n_reqs = int(next(stdin))
table = [[] for _ in range(hash_size)]

for line in stdin:
    cmd, word = line.split()
    if cmd == ""check"":
        ind = int(word)
    else:
        ind, mul = 0, 1
        for ch in word:
            ind = (ind + ord(ch) * mul) % 1000000007
            mul *= 263
        ind %= hash_size
    if cmd == ""add"":
        if word not in table[ind]:
            table[ind].insert(0, word)
    elif cmd == ""del"":
        if word in table[ind]:
            table[ind].remove(word)
    elif cmd == ""find"":
        print([""no"", ""yes""][word in table[ind]])
    elif cmd == ""check"":
        print(*table[ind]) -End,"
 from random import randint


def rabin_karp(pattern, text):
    prime = 100000007
    factor = randint(1, prime-1)
    npat = len(pattern) - 1

    pat_hash = sum(ord(pattern[i]) * pow(factor, npat - i, prime) % prime
                   for i in range(npat + 1)) % prime
    cur_hash = sum(ord(text[i]) * pow(factor, npat - i, prime) % prime
                   for i in range(npat + 1)) % prime
    hi_factor = pow(factor, npat, prime)
    indexes = []

    if cur_hash == pat_hash and text[:npat+1] == pattern:
        indexes.append(0)

    for i in range(1, len(text) - npat):
        cur_hash = ((cur_hash - ord(text[i-1]) * hi_factor) * factor
                    + ord(text[i+npat])) % prime
        if cur_hash == pat_hash and text[i: i+npat+1] == pattern:
            indexes.append(i)

    return indexes


def test():
    assert rabin_karp(""aba"", ""abacaba"") == [0, 4]
    assert rabin_karp(""Test"", ""testTesttesT"") == [4]
    assert rabin_karp(""aaaaa"", ""baaaaaaa"") == [1, 2, 3]
    print(""OK"")


def main():
    print(*rabin_karp(input(), input()))


if __name__ == ""__main__"":
    main()
 -End,"
 class SimpleNode:
    def __init__(self):
        self.key = self.left = self.right = None

# in_order: left,parent,right
def in_order_seq(node):
    stack = []
    while node or stack:
        if node:
            stack.append(node)
            node = node.left
        else:
            node = stack.pop()
            yield node.key
            node = node.right

# pre_order: parent,left,right
def pre_order_seq(node):
    stack = []
    while node or stack:
        node = node or stack.pop()
        yield node.key
        if node.right:
            stack.append(node.right)
        node = node.left

# post_order: left,right,parent
def post_order_seq(node):
    stack = []
    while node or stack:
        if node:
            if node.right:
                stack.append(node.right)
            stack.append(node)
            node = node.left
            continue
        node = stack.pop()
        if stack and stack[-1] == node.right:
            stack[-1] = node
            node = node.right
        else:
            yield node.key
            node = None

def main():
    num_nodes = int(input())
    tree = [SimpleNode() for i in range(num_nodes)]
    for num in range(num_nodes):
        key, left, right = map(int, input().split())
        tree[num].key = key
        tree[num].left = None if left < 0 else tree[left]
        tree[num].right = None if right < 0 else tree[right]
    root = tree[0]
    print(*in_order_seq(root))
    print(*pre_order_seq(root))
    print(*post_order_seq(root))

main() -End,"
 from collections import namedtuple


def validate_seq():
    node, stack, oldval = 0, [], None
    while tree and node >= 0 or stack:
        if node >= 0:
            stack.append(node)
            node = tree[node].left
            continue
        node = stack.pop()
        curval = tree[node].key
        node = tree[node].right
        if oldval is not None and curval <= oldval:
            return False
        oldval = curval
    return True


num_nodes = int(input())
TupleNode = namedtuple('TupleNode', ['key', 'left', 'right'])
tree = [TupleNode(*map(int, input().split())) for _ in range(num_nodes)]
print(['INCORRECT', 'CORRECT'][validate_seq()])
 -End,"
 from collections import namedtuple
Node = namedtuple('Node', ['key', 'left', 'right'])

num = int(input())
tree = [Node(*map(int, input().split())) for _ in range(num)]

node = 0 if tree else -1
stack = []
lval = rval = None
valid = True

while node != -1 or stack:
    if node != -1:
        stack.append((node, lval, rval))
        key = tree[node].key
        valid = ((lval is None or lval <= key) and
                 (rval is None or key < rval))
        if not valid:
            break
        rval = key if rval is None else min(rval, key)
        node = tree[node].left
        continue
    node, lval, rval = stack.pop()
    key = tree[node].key
    lval = key if lval is None else max(lval, key)
    node = tree[node].right

print(['INCORRECT','CORRECT'][valid]) -End,"
 class SumNode:
    def __init__(self, key=None):
        self.key = self.sum = key
        self._clear()

    def _clear(self):
        self.left = self.right = None
        self.parent = None
        self.height = 0

    @property
    def left_height(self):
        return self.left.height if self.left else -1

    @property
    def right_height(self):
        return self.right.height if self.right else -1

    @property
    def left_sum(self):
        return self.left.sum if self.left else 0

    @property
    def right_sum(self):
        return self.right.sum if self.right else 0

    # вспомогательная операция: обновление высоты и суммы элемента
    def _update_height(self):
        old_h = self.height
        old_s = self.sum
        self.height = 1 + max(self.left_height, self.right_height)
        self.sum = self.key + self.left_sum + self.right_sum
        return self.height != old_h or self.sum != old_s


class SumTree:
    def __init__(self):
        self.root = None

    def find(self, key):
        node, found = self.find_node(key)
        return found

    def add(self, key):
        self.add_node(SumNode(key))

    def remove(self, key):
        node, found = self.find_node(key)
        if found:
            self.remove_node(node)

    def find_node(self, key):
        node = parent = self.root
        while node:
            parent = node
            if key > node.key:
                node = node.right
            elif key < node.key:
                node = node.left
            else:
                assert key == node.key
                return node, True
        if parent:
            assert not (parent.left and parent.right)
        return parent, False

    def add_node(self, node):
        if not node:
            return False
        if not self.root:
            self.root = node
            node.parent = None
            return True
        parent, found = self.find_node(node.key)
        if found:
            return False
        if parent.key > node.key:
            parent.left = node
        else:
            parent.right = node
        node.parent = parent
        self._rebalance(parent)
        return True

    def remove_node(self, node):
        if not node:
            return
        if node.left and node.right:
            # two children
            orig = node
            node = node.left
            while node.right:
                node = node.right
            node.key, orig.key = orig.key, node.key
            self.remove_node(node)
        else:
            # one child or no children
            parent = node.parent
            child = node.left or node.right
            self._replace_child(node, child)
            node._clear()
            self._rebalance(parent)
        return node

    # вспомогательная операция, которая заменяет ссылку на элемент
    # в его родителе; выделена, т.к. используется очень часто
    def _replace_child(self, old_node, new_node):
        parent = old_node.parent
        old_node.parent = None
        if parent is None:
            assert self.root == old_node
            self.root = new_node
            if new_node:
                new_node.parent = None
            return None
        if old_node == parent.left:
            parent.left = new_node
            if new_node:
                new_node.parent = parent
            return True
        elif old_node == parent.right:
            parent.right = new_node
            if new_node:
                new_node.parent = parent
            return False
        else:
            raise RuntimeError('tree broken')

    # перебалансировка элемента в точности как на лекции
    def _rebalance(self, node, force=False):
        while node:
            left_h = node.left_height
            right_h = node.right_height
            if right_h - left_h > 1:
                beta = node.right
                gamma = beta.left
                if beta.right_height > left_h:
                    # малое правое вращение
                    node.right = gamma
                    if gamma:
                        gamma.parent = node
                    beta.left = node
                    self._replace_child(node, beta)
                    node.parent = beta
                else:
                    # большое правое вращение
                    assert gamma is not None
                    node.right = gamma.left
                    if node.right:
                        node.right.parent = node
                    beta.left = gamma.right
                    if beta.left:
                        beta.left.parent = beta
                    gamma.right = beta
                    beta.parent = gamma
                    beta._update_height()
                    self._replace_child(node, gamma)
                    gamma.left = node
                    node.parent = gamma
                    node.height = -1  # force update
            elif left_h - right_h > 1:
                beta = node.left
                gamma = beta.right
                if beta.left_height > right_h:
                    # малое левое вращение
                    node.left = gamma
                    if gamma:
                        gamma.parent = node
                    beta.right = node
                    self._replace_child(node, beta)
                    node.parent = beta
                else:
                    # большое правое вращение
                    assert gamma is not None
                    node.left = gamma.right
                    if node.left:
                        node.left.parent = node
                    beta.right = gamma.left
                    if beta.right:
                        beta.right.parent = beta
                    gamma.left, beta.parent = beta, gamma
                    beta._update_height()
                    self._replace_child(node, gamma)
                    gamma.right = node
                    node.parent = gamma
                    node.height = -1  # force update
            if not (node._update_height() or force):
                break
            node = node.parent

    # сплит и склеивание деревьев тоже работало, но мне не удалось
    # добиться прохождения тестов по скорости, поэтому я поступил иначе.
    # так я придумал неразрушающий метод _sum_above() со временем работы
    # пропорционально высоте дерева, то есть O(log N).
    # этот метод считает сумму тех элементов, где ключ больше границы
    def _sum_above(self, key):
        node = self.root
        # сначала берём полную сумму
        summ = node.sum if node else 0
        while node:
            if node.key > key:
                # пропускаем элементы, которые больше границы
                node = node.left
                continue
            # у остальных элементов вычитаем их значение и сумму левого поддерева
            summ -= node.key + (node.left.sum if node.left else 0)
            # остановка, если наталкиваемся на точное совпадение ключа
            node = None if node.key == key else node.right
        return summ

    def sum_between(self, left, right):
        # проверка корректности интервала очень важна,
        # т.к. иначе разность будет некорректной
        if right > left:
            # вычитаем из более широкой суммы менее широкую
            return self._sum_above(left-1) - self._sum_above(right)
        elif right == left:
            # если границы равны, можно поступить оптимально
            # и вместо расчёта полных сумм просто проверить наличие совпадения
            return left * self.find(left)
        else:
            return 0


def main():
    from sys import stdin

    summ = 0
    tree = SumTree()

    def f(x):
        return (int(x) + summ) % 1000000001

    # число задач не нужно, просто читаем вход до конца
    next(stdin)

    for line in stdin:
        if line[0] == 's':
            op, left, right = line.split()
            left, right = f(left), f(right)
            summ = tree.sum_between(left, right)
            print(summ)
            continue

        op, val = line.split()
        val = f(val)
        if op == '?':
            print(['Not found', 'Found'][tree.find(val)])
        if op == '+':
            tree.add(val)
        elif op == '-':
            tree.remove(val)


if __name__ == '__main__':
    main()
 -End,"
 a = int(input())
if a % 100 != 12 and a % 100 != 13 and a % 100 != 14 and (a % 10 == 2 or a % 10 == 3 or a % 10 == 4):
    print(""%s программиста"" % a)
elif a % 10 == 1 and a % 100 != 11:
    print(""%s программист"" % a)
else:
    print(""%s программистов"" % a)
 -End,"
 rows, cols = map(int, input().split())
field = [[0 if x == '.' else x for x in input()] for _ in range(rows)]
for i in range(rows):
    for j in range(cols):
        if field[i][j] != '*':
            rmin = max(i - 1, 0)
            rmax = min(i + 1, rows - 1)
            cmin = max(j - 1, 0)
            cmax = min(j + 1, cols - 1)
            field[i][j] = sum([1 for n in range(rmin, rmax + 1) for m in range(cmin, cmax + 1) if field[n][m] == ""*""])
print(*[''.join(map(str, row)) for row in field], sep=""\n"")
 -End,"
 a = [int(input())]
while a[-1] != 1:
    a.append(a[-1] * 3 + 1 if a[-1] % 2 else a[-1] // 2)
print(*a) -End,"
 def gen(a):
    yield a
    while a != 1:
        a = a * 3 + 1 if a % 2 else a // 2
        yield a
print(*list(gen(int(input()))))
 -End,"
 path = ""F""
for _ in range(int(input())):
    path = path.replace(""F"", ""FLFRFLF"")
path = [60 if a == ""L"" else -120 for a in path if a != ""F""]
print(*map(lambda x: ""turn %s"" % x, path), sep=""\n"") -End,"
 count = """"
for a in input():
    if a.isdigit():
        count += a
        continue
    if count == """":
        count = ""1""
    print(a * int(count), end="""")
    count = """" -End,"
 rows, cols = list(map(int, input().split()))
board = [input() for _ in range(rows)]
future = ["""" for _ in range(rows)]
for i in range(rows):
    for j in range(cols):
        count = sum([1 for ii in range(-1, 2) for jj in range(-1, 2)  if (ii != 0 or jj != 0) and board[(i + ii + rows) % rows][(j + jj + cols) % cols] == ""X""])
        if board[i][j] == ""X"" and count > 3:
            future[i] += "".""
        elif board[i][j] == ""X"" and count < 2:
            future[i] += "".""
        elif board[i][j] == ""."" and count == 3:
            future[i] += ""X""
        else:
            future[i] += board[i][j]
print(*future, sep=""\n"")
 -End,"
 def is_parent(classes, parent, child):
    return parent == child or any([is_parent(classes, parent, tmp_parent) for tmp_parent in classes[child] if tmp_parent])


classes = {}
for __ in range(int(input())):
    s = input().split()
    classes.setdefault(s[0], set(s[2:]))


exceptions = []
for __ in range(int(input())):
    exceptions.append(input())
    if any([is_parent(classes, x, exceptions[-1]) for x in exceptions[:-1]]):
        print(exceptions[-1])
 -End,"
 s, a, b = input(), input(), input()
minimal = 0
while True:
    if a not in s:
        break
    if a in b:
        minimal = ""Impossible""
        break
    s = s.replace(a, b)
    minimal += 1
print(minimal) -End,"
 class multifilter:
    judge_any = lambda pos, neg: pos > 0
    judge_half = lambda pos, neg: pos >= neg
    judge_all = lambda pos, neg: neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        for elem in self.iterable:
            pos = sum([fun(elem) for fun in self.funcs])
            neg = len(self.funcs) - pos
            if not self.judge(pos, neg):
                continue
            yield elem -End,"
 import requests
import re


url1, url2 = input(), input()
result = ""No""
template = ""(https?://[^\""\s>]+)""
response = requests.get(url1)
for url1 in [url for url in re.findall(template, response.text)]:
    response = requests.get(url1)
    if url2 in [url for url in re.findall(template, response.text)]:
        result = ""Yes""
print(result)
 -End,"
 import json

def is_parent(classes, parent, child):
    return parent == child or any([is_parent(classes, parent, tmp_parent) for tmp_parent in classes[child] if tmp_parent])

data = json.loads(input())
classes = {d[""name""]: set(d[""parents""]) for d in data}
for key in sorted(classes):
    print(""{k} : {c}"".format(k=key, c=sum([is_parent(classes, key, ch) for ch in classes]))) -End,"
 a, b, x = map(int, [input() for _ in (1, 2, 3)])
print(abs(((a/b)**x)+((a**(x+1))/(b**x)))) -End,"
 t1, v1 = map(float, input().split())
t2, v2 = map(float, input().split())
print((t1*v1 + t2*v2) / (t1 + t2)) -End,"
 count = amount = 0
while True:
    d = int(input())
    if d == 0:
        break
    amount += 1
    if d % 2 == 1 and d % 3 == 0:
        count += 1
print(amount)
print(count) -End,"
 summ = 0
for _ in range(5):
    d = int(input())
    if d % 10 == 6 and d % 4 == 0:
        summ += d
print(summ) -End,"
 summ = count = 0
d = int(input())
while d:
    if not(d % 8):
        count += 1
        summ += d
    d = int(input())

print(""{:.1f}"".format(summ / count) if summ else ""NO"") -End,"
 bread = int(input())
birds = 0
time = 0
while bread > 0:
    time = time + 1
    birds = birds + time
    bread = bread - birds - time
print(birds) -End,"
 start, percent, years = map(int, (input() for _ in range(3)))
percent = (percent + 100) / 100
for i in range(years):
    print(""%0.2f"" % (start * percent ** (i + 1))) -End,"
 def nok(a, b):
    return int(a * b / nod(a, b))

def nod(a, b):
    if (a < b):
        return nod(b, a)
    if a % b == 0:
        return b
    return nod(b, a % b)

print(nok(int(input()), int(input())))
 -End,"
 def nod(a, b):
    if a % b == 0:
        return b
    return nod(b, a % b)

print(nod(int(input()), int(input())))
 -End,"
 print(*[int(input())**3 for _ in range(4)], sep=""\n"")
 -End,"
 print(all(x in ""-0123456789"" for x in input())) -End,"
 print(*sorted(input().split("", ""), reverse=True)) -End,"
 n = int(input())
d = list(map(int, input().split()))
m = 0
for i in range(n):
    if d[i] < 8:
        m = m + 1
print(m) -End,"
 n = int(input())
d = [int(x) for x in input().split()]
pos_max = 0
for i in range(len(d)):
    if d[i] >= d[pos_max]:
        pos_max = i
print(pos_max + 1) -End,"
 def counter(T):
    T = {t.lower(): len(set(t.lower())) for t in T}
    max_sym = max(T[key] for key in T)
    strings = [t for t in T if max_sym == T[t]]
    max_len = max(len(t) for t in strings)
    return max_len
 -End,"
 print(*(x for x in input().split() if not x.startswith('*')), sep=""\n"") -End,"
 def dfactorial(n):
    res = 1
    for i in range(2 - (n % 2), n + 1, 2):
        res = res * i
    return res -End,"
 def permutations(original_list):
    if len(original_list) <= 1:
        yield original_list
    else:
        for x in original_list:
            temp_list = original_list[:]
            temp_list.remove(x)
            for perm in permutations(temp_list):
                yield [x] + perm

perm = list(permutations(input().split()))
numbers = map(int, [''.join([str(x) for x in perm[i]]) for i in range(len(perm))])
numbers = sorted(list(set([x for x in numbers if x > 99])))
print(*numbers, sep=""\n"")
 -End,"
 print(input().translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'nopqrstuvwxyzabcdefghijklm'))) -End,"
 def numerics(n):
    return list(map(int, str(n)))

def is_kaprekar_number_correct(n):
    is_length_correct = len(str(n)) in [3, 4, 6]
    is_digits_different = len(set(str(n))) != 1
    is_value_correct = n not in [100, 1000, 100000]
    return is_length_correct and is_digits_different and is_value_correct

def is_kaprekar_looped_in(n):
    try:
        if n in is_kaprekar_looped_in.sequence:
            return True
    except AttributeError:
        is_kaprekar_looped_in.sequence = []
    is_kaprekar_looped_in.sequence.append(n)
    return False
    
def kaprekar_step(L):
    number = ''.join(map(str, sorted(L)))
    return abs(int(number) - int(number[::-1]))

def kaprekar_loop(n):
    if not is_kaprekar_number_correct(n):
        print(""Ошибка! На вход подано число {}, не удовлетворяющее условиям процесса Капрекара"".format(n))
        return
    if is_kaprekar_looped_in(n):
        print(""Следующее число - {}, кажется процесс зациклился..."".format(n))
        return
    print(n)
    if n in [495, 6174, 549945, 631764]:
        return n
    number = numerics(n)
    result = kaprekar_step(number)
    result = kaprekar_loop(result)
 -End,"
 from math import ceil, sqrt
def s6(a):
    return 3 ** 1.5 * a * a / 2

def s5(a):
    return a ** 2 * sqrt(25 + 10 * sqrt(5)) / 4

def S(x):
    return 20 * s6(a) + 12 * s5(a)

def S_ceil(x):
    return ceil(S(a))
 -End,"
 def oddity(a):
    odd = 1
    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            if a[i] > a[j]:
                odd = odd * (-1)
    return odd

bingo = ""1, 2, 3, 4, 8, 7, 6, 5, 9, 10, 11, 12, 15, 14, 13""
bingo_odd = oddity(list(map(int, bingo.split("", ""))))
data = ' '.join(input() for _ in range(4))
input_odd = oddity(list(map(int, data.split())))
print(""Бинго!"" if bingo_odd == input_odd else ""Не повезло..."")
 -End,"
 def oddity(a):
    odd = 1
    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            if a[i] > a[j]:
                odd = odd * (-1)
    return odd

n, m = map(int, input().split())
bingo = [(i * m + i % 2 * m - j) if i % 2 else (i*m + j + 1) for i in range(n) for j in range(m)]
bingo.remove(max(bingo))
data = ' '.join(input() for _ in range(n))
data = list(map(int, data.split()))
print(""Бинго!"" if oddity(bingo) == oddity(data) else ""Не повезло..."")
 -End,"
 def luka(L0, L1, n):
    if n == 0: return L0
    num = 1
    while num < n:
        L1, L0 = L0 + L1, L1
        num += 1
    return L1
 -End,"
 def fi(L0, L1, n):
    num = 1
    while num < n:
        L1, L0 = L0 + L1, L1
        num += 1
    return None if L0 == 0 or n == 0 else Decimal(L1) / Decimal(L0)
 -End,"
 def kaprekar(n):
    strn = str(n ** 2)
    for strlen in range(1, len(strn)):
        if int(strn[strlen:]) and int(strn[:strlen]) + int(strn[strlen:]) == n: return True
    return False
 -End,"
 def convert(num, to_base=10, from_base=10):
    alpha = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    decimal = int(str(num), from_base)
    target = """"
    while decimal > 0:
        target = alpha[decimal % to_base] + target
        decimal = decimal // to_base
    return target
 -End,"
 def super_L(n):
    if n <= 1: return 2 - n
    if n % 6 == 0: return L6n(n)
    if n % 5 == 0: return L5n(n)
    if n % 4 == 0: return L4n(n)
    if n % 3 == 0: return L3n(n)
    if n % 2 == 0: return L2n(n)
    L0, L1 = 2, 1
    for _ in range(1, n):
        L0, L1 = L1, L0 + L1
    return L1


def L6n(nn):
    n = nn // 6
    return super_L(n) ** 6 - (-1) ** n * 6 * super_L(n) ** 4 + 9 * super_L(n) ** 2 - (-1) ** n * 2


def L5n(nn):
    n = nn // 5
    return super_L(n) ** 5 - (-1) ** n * 5 * super_L(n) ** 3 + 5 * super_L(n)


def L4n(nn):
    n = nn // 4
    return super_L(n) ** 4 - (-1) ** n * 4 * super_L(n) ** 2 + 2


def L3n(nn):
    n = nn // 3
    return super_L(n) ** 3 - (-1) ** n * 3 * super_L(n)


def L2n(nn):
    n = nn // 2
    return super_L(n) ** 2 - (-1) ** n * 2
 -End,"
 def convert(num, to_base=10, from_base=10):
    alpha = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    decimal = int(str(num), from_base)
    target = """"
    while decimal > 0:
        target = alpha[decimal % to_base] + target
        decimal = decimal // to_base
    return target


def kaprekar(n, base=10):
    n10 = int(str(n), base=base)
    strn_sqr_10 = str(n10 ** 2)
    strn_sqr_base = convert(strn_sqr_10, from_base=10, to_base=base)
    for strlen in range(1, len(strn_sqr_base)):
        left = int(strn_sqr_base[:strlen], base=base)
        right = int(strn_sqr_base[strlen:], base=base)
        if right and convert(left + right, from_base=10, to_base=base) == str(n): return True
    return False -End,"
 import numpy
args = input().split()
dtype = numpy.float64
if not str.isdigit(args[-1]):
    dtype = eval(args[-1])
    args.remove(args[-1])
args = tuple(map(int, args))
Z = numpy.zeros(args, dtype)
 -End,"
 n, k = map(int, input().split())
rats = map(int, input().split())
eaten = 0
for rat in rats:
    eaten += rat
    if eaten >= k:
        break
print(k - 1 + (eaten == k))
 -End,"
 black, white = map(int, input().split())
side = int((black + white) ** 0.5)
while side >= 0:
    count = int(side ** 2 / 2)
    if count <= black and count <= white:
        break
    side = side - 1
print(side)
 -End,"
 data = input().split()

volume = int(2 * float(data[0]))  # нужный объём умножаем на 2 для удобства
price = list(map(int, data[1:]))  # список стоимостей

VESSEL = [1, 2, 3, 4]  # список доступных объёмов (уже умноженных на 2)
COUNT = 4
value = [p / v for (p, v) in zip(price, VESSEL)]  # ценность каждого товара, денег/литр

solution = [0, 0, 0, 0]  # это будет решение по товарам
index = value.index(min(value))  # находим товар с минимальной ценностью
solution[index] = volume // VESSEL[index]  # почти очевидно, что максимум нужного объёма получится из найденного товара
rest = volume % VESSEL[index]  # считаем остаток, который надо докупить

# остаток добирается ВСЕГДА только одним товаром, это можно доказать строго (для данной задачи)
# посчитаем, сколько единиц каждого товара надо, чтобы купить нужный объём, но считаем сразу в стоимости
rest_costs = [price[i] * int((rest + VESSEL[i] - 0.1) / VESSEL[i]) for i in range(COUNT)]
min_cost = min(rest_costs)  # находим минимальную стоимость
min_cost_index = rest_costs.index(min_cost)  # находим, на какой позиции находится минимальная стоимость
solution[min_cost_index] += int(rest_costs[min_cost_index] / price[min_cost_index])  # дополняем решение
# print(*solution)  # если надо посмотреть решение - достаточно раскомментировать
print(sum(solution[i] * price[i] for i in range(COUNT)))  # а вот и искомый результат
 -End,"
 import numpy
n, m = map(int, input().split())
Z = numpy.zeros((n, m))
Z[1::2,::2] = 1
Z[::2,1::2] = 1
 -End,"
 import numpy as np
n, m = map(int, input().split())
start = float(input())
Z = np.matrix([np.arange(start, start + m)] * n)
 -End,"
 def composition(f, *args):
    if (len(args) > 1):
        return lambda x: f(composition(*args)(x))
    if (len(args) > 0):
        return lambda x: f(args[0](x))
    return lambda x: f(x)
 -End,"
 print(df.head(3))
 -End,"
 print(float(df[""age""].count()), float(df[""age""].quantile([0.75])), sep=""\n"")
 -End,"
 print(df.iloc[[0,2,3]])


 -End,"
 
print(df[['name', 'age']])



 -End,"
 df.loc[index, ""age""] += 1
print(df)
 -End,"
 df[""age""] += 1
print(df) -End,"
 # put your python code here
s = input()
if s.find('1') != -1 and s.find('1') != len(s) - 1:
    print(s[s.find('1') + 1])
elif s.find('1') == len(s) - 1:  
    print(s[s.find('1') - 1])
    
else:
    print(0)



 -End,"
 import operator

def vector_sum(v1, v2):
    return tuple(map(operator.add, v1, v2))




 -End,"
 # put your python code here
s = input()
try:
    val = int(s)
    print(2 * val)
except ValueError:
    print(s * 2)


 -End,"
 from collections import OrderedDict


def func(l):
    return list(OrderedDict.fromkeys(l))




 -End,"
 # put your python code here
friends = int(input())
apples = int(input())
result = apples
while result % friends != 0:
    result += 1
    if result % friends == 0:
        break
print(result - apples)        



 -End,"
 def percent(share, round_digits = 0):
    if round_digits != 0:
        return str(round(share * 100, round_digits)) + '%'
    return str(int(round(share * 100, 0))) + '%'




 -End,"
 # put your python code here
s = input()
lst = list()
if s != '.':
    lst.append(int(s))
while s != '.':
    s = input()
    if s != '.':
        lst.append(int(s))
    else:
        break
a = sorted(lst)
n = len(a)
c1, c2, c3 = a[n - 1], a[n - 2], a[n - 3]
b = a[-1:-4:-1] + [elem for elem in lst if elem != c1 and elem != c2 and elem != c3]
print(b)



 -End,"
 def increase_g():
    if g() == 1:
        return 2
    return g() + 1




 -End,"
 from itertools import chain
def concat(*strings):
    z = list(chain(*strings))
    return ''.join(z)



 -End,"
 a = [elem for elem in range(1, 2001)]




 -End,"
 a = [elem for elem in range(1, 10001) if elem % 3 == 0]




 -End,"
 # put your code here
def tobin(x):
    return tobin(x // 2) + [x % 2] if x > 1 else [x]

n = int(input())
lst = tobin(n)
print(''.join([str(e) for e in lst]))



 -End,"
 # put your python code here
s = input()
pos1, pos2 = s.find('h'), s.rfind('h')
print(s[:pos1 + 1] + s[pos1 + 1:pos2][::-1] + s[pos2:])



 -End,"
 # put your python code here
def find_2nd(s, subs):
    return s.find(subs, s.find(subs) + 1)


t = input()
w = input()
if t.find(w) == -1 or find_2nd(t, w) == -1:
    print(-1)
else:
    print(find_2nd(t, w))
             



 -End,"
 # put your code here
lst = [int(i) for i in input().split()]
s = sum([lst[i] for i in range(len(lst)) if i % 2 == 0])
print(s * lst[-1])



 -End,"
 # put your python code here
N = int(input())
M = int(input())
print((N + M) // 2)
print(N - (N + M) // 2)



 -End,"
 # put your python code here
print(int(input()) % 2 != 0)



 -End,"
 # put your python code here
n = int(input())
i, count = 0, 5
while i < n:
    print('Привет, Малыш!')
    print(count)
    i += 1
    count += 2
    



 -End,"
 # put your python code here
n = int(input())
print(sum(list(range(1, n))))
print(sum([i for i in range(2, n) if i % 2 == 0]))



 -End,"
 # put your python code here
n = int(input())
lst = [i for i in range(1, n + 1) if i * i <= n]
print(max(lst))



 -End,"
 from math import sqrt

class Point:
    def __init__(self, x, y):
        self.x, self.y = x, y
        
    def move(self, dx, dy):
        self.x = self.x + dx
        self.y = self.y + dy    
        
    def getX(self):
        return self.x

    def getY(self):
        return self.y   
    
    def dist(self, other):
        dx = self.x - other.x
        dy = self.y - other.y
        return sqrt(dx**2 + dy**2)




 -End,"
 # put your python code here
s = input()
print('True' if any(char.isdigit() for char in s) and any(char.isalpha() for char in s) else 'False')



 -End,"
 # put your python code here
print(*[elem ** 2 for elem in range(1, 11)], sep='\n')



 -End,"
 # put your python code here
a = int(input())
b = int(input())
print(*[elem for elem in range(a, b + 1) if elem % 2 == 0], sep='\n')



 -End,"
 # put your python code here
print(input().lower().count('w'))



 -End,"
 # put your python code here
lst = list()
for _ in range(int(input())):
    s = input()
    lst.append(s)
print(*lst[::-1], sep='\n')    



 -End,"
 # put your python code here
n = int(input())
lst = list()
for i in range(n):
    m = int(input())
    lst.append(m)
k = int(input())    
print(*sorted([elem for elem in lst if elem % k == 0]), sep='\n')    



 -End,"
 # put your python code here
from collections import Counter

lst = list()
for i in range(int(input())):
    n = int(input())
    lst.append(n)
data = Counter(lst)    
print(data.most_common(1)[0][1])    



 -End,"
 # put your python code here
lst = list()
for i in range(int(input())):
    n = int(input())
    lst.append(n)
print(len(set(lst)))    



 -End,"
 # put your python code here
s = input()
t = list(s)
lst = [int(e) for e in t]
print(sum(lst))



 -End,"
 # put your python code here
print(len(input()))



 -End,"
 # put your python code here
n = int(input())
for i in range(n):
    print('-'*n)



 -End,"
 # put your python code here
x = int(input())
y = int(input())
for i in range(y):
    print('-'* x)



 -End,"
 # put your python code here
n = int(input())
for i in range(n):
    print('--+' + '-'*(n-3))



 -End,"
 # put your python code here
x = int(input())
y = int(input())
print('+'*x)
for i in range(y - 2):
    print('+' + '-'* (x - 2) + '+')
print('+'*x)    
    



 -End,"
 # put your python code here
n = int(input())
lst = [['-' for i in range(n)] for i in range(n)]
for i in range(n):
    for j in range(n):
        if i == j:
            lst[i][i] = '+'
            lst[n - i - 1][i] = '+'
for elem in lst:
    print(''.join(elem))




 -End,"
 # put your python code here
lst = [['0' for i in range(5)] for i in range(5)]
for i in range(5):
    for j in range(5):
        if i == j:
            lst[i][j] = '1'
for elem in lst:
    print(''.join(elem))



 -End,"
 # put your python code here
s = input()
lst = [int(elem) for elem in list(s)]
print(max(lst))



 -End,"
 def code_number(num):
    s = list(str(num))
    result = list()
    for elem in s:
        description = {0: ""zero"", 1: 'one', 2: ""two"", 3: 'three', 4: 'four', 5: 'five', 6: 'six',
                   7: 'seven', 8: 'eight', 9: 'nine'}.get(int(elem), ""Unknown"")
        result.append(description)
    return "" "".join([elem for elem in result])   




 -End,"
 def f_map(func, l):
    return [func(i) for i in l]






 -End,"
 def first(*args, **kwargs):
    if args:
        return args[0]
    elif kwargs:
        return kwargs[min(kwargs, key=len)]



 -End,"
 # put your python code here
lst = list(range(1, 11))
n = int(input())
for j in range(n):
    ind = int(input())
    add = int(input())
    lst[ind] += add
print(*lst)



 -End,"
 # put your python code here
lst = list(range(1, 11))
n = int(input())
for j in range(n):
    ind = int(input())
    operation = input()
    to_do = int(input())
    if operation == ""+"":
        lst[ind] += to_do
    elif operation == '-':
        lst[ind] -= to_do
    elif operation == '*':
        lst[ind] *= to_do
print(*lst)



 -End,"
 # put your python code here
s = [i for i in input().split()]
for elem in s:
    if elem.startswith('123'):
        print(elem + ' ' + 'True')
    else:
        print(elem + ' ' + 'False')



 -End,"
 # put your python code here
print(max(int(x) for x in input()))



 -End,"
 # put your python code here
s = input()
if len(s) == 5 and all(elem == s[0] for elem in s):
    print('да')
else:
    print('нет')



 -End,"
 # put your python code here
s = 0
for _ in range(5):
    n = int(input())
    if n % 2 == 0:
        s += n
print(s)        



 -End,"
 # put your python code here
print(0 if int(input()) % 2 == 0 else 1)



 -End,"
 # put your python code here
time = int(input())
hours = time // 3600
minutes = (time - hours * 3600) // 60
seconds = time - minutes * 60 - hours * 3600
print(str(hours) + ' часов')
print(str(minutes) + ' минут')
print(str(seconds) + ' секунд')



 -End,"
 # put your python code here
n = int(input())
print(bin(n)[2:].zfill(8))



 -End,"
 # put your python code here
a2, a1 = [int(i) for i in input().split()]
b2, b1 = [int(i) for i in input().split()]
s1, s2 = int(str(a2) + str(a1)), int(str(b2) + str(b1))
s = s1 + s2
print(str(s)[0] + ' ' + str(s)[1])


 -End,"
 # put your python code here
print('True' if int(input()) > 0 else 'False')



 -End,"
 # put your python code here
print('True' if input().endswith('3') else 'False')



 -End,"
 # put your python code here
a, b, c = [int(i) for i in input().split()]
print('True' if any(elem < 0 for elem in [a, b, c]) else 'False')




 -End,"
 i = input()
print(input().split().count(i)) -End,"
 boxes = [sorted(int(input()) for i in ""iii"") for j in ""jj""]
#print(boxes)
if boxes[0] == boxes[1]:
    print('Boxes are equal')
elif all(boxes[0][i]-boxes[1][i] >= 0 for i in range(3)):
    print('The first box is larger than the second one')
elif all(boxes[1][i]-boxes[0][i] >= 0 for i in range(3)):
    print('The first box is smaller than the second one')
else:
    print('Boxes are incomparable')
 -End,"
 lst = input().split()
x = input()
for i in range(len(lst)):
    if lst[i] == x:
        print(i, end=' ')
if not x in lst:
    print('Missing') -End,"
 cmds = int(input())
pos = [0, 0]

PR_CMD = {
    'North' : (1, 1),
    'South' : (1, -1),
    'East' : (0, 1),
    'West' : (0, -1)
    }
    
for i in range(cmds):
    cmd = input().split()
    cmd[1] = int(cmd[1])
    pos[PR_CMD[cmd[0]][0]] += cmd[1]*PR_CMD[cmd[0]][1]

print(*pos) -End,"
 try:
    print(*reversed(input().split()[1::2]))
except EOFError:
    pass -End,"
 i = int(input())
arr = list(map(int, input().split()))
checksum = 0
for n in arr:
    checksum = (checksum+n)*113 % 10000007
print(checksum) -End,"
 n = int(input())
m = int(input())
k = int(input())
print(('NO', 'YES')[(k%n == 0 or k%m == 0) and k < m*n]) -End,"
 n = int(input())
seq = list(map(int, input().split()))

# The maximum pairwise product can be obtained by multiplying:
  #  2 largest
  #  or 2 smallest numbers (if they are negative)
mx1 = seq.pop(seq.index(max(seq)))  # 1st largest num.
mn1 = seq.pop(seq.index(min(seq)))  # 1st smallest num.
if len(seq) == 0:  # initial length was 2
    print(mx1*mn1)
else:
    mx2 = max(seq)                  # 2nd largest num.
    mn2 = min(seq)                  # 2nd smallest num.
    # in case of initial length == 3 => len(seq) == 1 and
    # mx2 and mn2 will be identical. But it won't affect the solution.
    print(max(mx1*mx2, mn1*mn2)) -End,"
 n = int(input())
for i in range(n):
    print(*[abs(j-i) for j in range(n)]) -End,"
 n = int(input())
for i in range(n):
    print(*[('.', '*')[i == j or n - i - 1 == j or
                       i == n//2 or j == n//2] for j in range(n)]) -End,"
 rows, seats = map(int, input().split())
cinema = []

for row in range(rows):
    cinema.append(''.join(input().split()))
    
k = int(input())

for row in range(rows):
    if '0'*k in cinema[row]:
        print(row+1)
        break
else:
    print(0) -End,"
 n = input()
arr = input().split()
arr2 = [arr.pop(-1)]
arr2.extend(arr)
print(*arr2)
 -End,"
 print(min(int(input()) for _ in range(4))) -End,"
 a, b = (int(input()) for i in 'ii')
while a % 3:  a += 1
while b % 3:  b -= 1
print((a + b)/2) -End,"
 inp = input()
outp = ''
i = 0
while i < len(inp):
    k = 0
    outp += inp[i]
    while i < len(inp) and inp[i] == outp[-1]:
        k += 1
        i += 1
    outp += str(k)
print(outp) -End,"
 import copy


def count_neighbours(i, j):
    n = 0
    n_rows = [(rows+r)%rows for r in range(i-1, i+2, 1)]
    n_columns = [(columns+c)%columns for c in range(j-1, j+2, 1)]
    for p in n_rows:
        for q in n_columns:
            if ((p-i) != 0 or (q-j) != 0) and field0[p][q] == 'X':
                n += 1
    return n


rows, columns = map(int, input().split())
field0, field1 = [], []
for i in range(rows):
    row = list(input())
    field0.append(row)
field1 = copy.deepcopy(field0) 

for i in range(rows):
    for j in range(columns):
        n = count_neighbours(i, j)
        if (n < 2 or n > 3) and field0[i][j] == 'X':
            field1[i][j] = '.'
        elif n == 3 and field0[i][j] == '.':
            field1[i][j] = 'X'
        # in all other cases the cell remains unchanged

for i in range(rows):
    print(''.join(field1[i])) -End,"
 class ExtendedStack(list):
        
    def sum(self):                # операция сложения
        if len(self) >= 2:
            self.append(self.pop() + self.pop())

    def sub(self):                # операция вычитания
        if len(self) >= 2:
            self.append(self.pop() - self.pop())

    def mul(self):                # операция умножения
        if len(self) >= 2:
            self.append(self.pop() * self.pop())

    def div(self):                # операция целочисленного деления
        if len(self) >= 2:
            self.append(self.pop() // self.pop()) -End,"
 def mod_checker(x, mod=0):
    return lambda n : n % x == mod -End,"
 import requests
import re


A_HREF_DOMAIN_PATTERN = r""""""<a [\w="" .:;/']*href=[""'](https?://|ftp://)?([^/:""']+)""""""
# is used to extract domain name from URL inside <a> tag
# has 2 groups => extracts tuple of 2 groups. 2nd (index 1) is the group of interest
# drawback - accepts .. from <a href=""../skip_relative_links""> 
# .. need to be excluded later

url = input().strip()
res = requests.get(url)
if res.status_code == 200:  # requested web page exists
    text = re.sub('\n', '', res.text)  # for multilinear <a> tags
    domains_found = set(result[1] for result in
                        re.findall(A_HREF_DOMAIN_PATTERN, text)
                        if not result[1].startswith('.'))
    for domain in sorted(domains_found):
        print(domain) -End,"
 import json


def get_descendants_for(cls1, cls2):
    # it is guaranteed that cls2 is among descendants of cls1
    # the task is to collect the children of cls2
    # and add them to descendants of cls1
    global descendants
    for class_ in classes:                      # which class_ has cls2 among his parents?
        if cls2 in class_['parents']:
            descendants[cls1].add(class_['name'])      # if this one, than add it to desc. of cls1
            get_descendants_for(cls1, class_['name'])  # and collect its children - such as they
            # print(descendants) ###                     are desc. of cls1 too.


classes = json.loads(input())
# print(classes) ###

descendants = {class_['name']: {class_['name']} for class_ in classes}
# each class is the ancestor of itself
# print(descendants) ###

for ancestor in sorted(descendants.keys()):
    get_descendants_for(ancestor, ancestor)
    #                  (1.For whom, 2.Among whose children?)
    #                               a) among his own children first,
    #                               b) then among children of his children
    #                                  (recurrent call)
    print(ancestor, ':', len(descendants[ancestor])) -End,"
 from xml.etree import ElementTree

def evaluate(uppercube, current_price):
    global val
    if uppercube.tag == ""cube"" and ""color"" in uppercube.attrib:    # this is genuine, authentic colored cube
        val[uppercube.attrib[""color""]] += current_price
    for undercube in uppercube:                                    # actually under uppercube
        evaluate(undercube, current_price + 1)

val = {'red': 0, 'green': 0, 'blue': 0}
root = ElementTree.fromstring(input())
evaluate(root, 1)
print(val['red'], val['green'], val['blue']) -End,"
 print(int(float(input()) % 1 // 0.1)) -End,"
 a = int(input())
b = int(input())
m = 1
while a*m % b != 0:
    m += 1
print(a*m) -End,"
 print(sum((-0.5)**n for n in range(int(input())))) -End,"
 import re
print('Yes' if re.search(r'19\d{9}\b', input()) else 'No') -End,"
 import sys
import re


text = sys.stdin.readlines()  # generates list
                              # stop with ctrl - D
text = '\n'.join(text)
found = re.findall('[Yy]ou', text)
print(len(found))
 -End,"
 array = list(map(int, input().split()[:-1]))
swaps = 0
for i in range(len(array) - 1):
    j = i + 1
    # print(' ' if array[:i] else '', end='')
    # print(*array[:i], end='', sep='  ')
    # print(' (' if array[:i] else '(', end='')
    # print(*array[i:j+1], end='', sep='  ')
    # print(') ', end='')
    # print(*array[j+1:], end='\t - ', sep='  ')
    if array[i] > array[j]:
        array[i], array[j] = array[j], array[i]  # swap
        # print('swap')
        swaps += 1
#     else:
#         print('skip')
# print('\n ', end='')
# print(*array, sep='  ', end='\t - end')
# print()
print(swaps) -End,"
 from urllib.request import urlopen
import numpy as np

filename = input().strip()
f = urlopen(filename)

arr = np.loadtxt(f, skiprows=1, delimiter=',')
# print(arr)
print(arr.mean(axis=0))
 -End,"
 import numpy as np
from urllib.request import urlopen
from numpy.linalg import inv

fname = input().strip()  # read file name from stdin
f = urlopen(fname)  # open file from URL
data = np.loadtxt(f, delimiter=',', skiprows=1)  # load data to work with

X = data.copy()
for row in X:
    row[0] = 1
Y = np.array([[row[0]]for row in data])

beta_ = inv(X.T.dot(X)).dot(X.T).dot(Y) # beta^ = (X^T*X)^(-1)*XT*Y1

print(' '.join(str(line[0]) for line in beta_)) -End,"
 import numpy as np

def vectorized_forward_pass(self, input_matrix):        
    sum_outp = input_matrix.dot(self.w)
    sum_outp += self.b  # summation function result (n, 1)
    
    act_outp = sum_outp > 0
    return act_outp  # activation function result (n, 1) -End,"
 import numpy as np

def train_on_single_example(self, example, y):
    delta_y = y - self.vectorized_forward_pass(example.T)  # (y - y_hat)
    self.w += delta_y * example
    self.b += delta_y
    return abs(delta_y) -End,"
 import numpy as np

def summatory(self, input_matrix):
    return input_matrix.dot(self.w)

def activation(self, summatory_activation):
    return self.activation_function(summatory_activation)

def vectorized_forward_pass(self, input_matrix):
    return self.activation(self.summatory(input_matrix)) -End,"
 def closest_mod_5(x):
    while x % 5 != 0:
        x += 1
    return x -End,"
 import sys
import re


for line in sys.stdin.readlines():
    if re.match(r'\b(\w+)\1\b', line):
        print(line, end='')  # \n is already present at the end of each line -End,"
 mnd = 0
mxs = []
nls = []
num = int(input())
while num != 0:
    nls.append(num)
    num = int(input())
for i in range(1, len(nls) - 1):
    if nls[i - 1] < nls[i] > nls[i + 1]:
        mxs.append(i)
if len(mxs) >= 2:
    mnd = min(mxs[i + 1] - mxs[i] for i in range(len(mxs) - 1))
else:
    mnd = 0
print(mnd)
 -End,"
 import numpy as np

def update_mini_batch(self, X, y, learning_rate, eps):
    J0 = J_quadratic(self, X, y)
    self.w -= learning_rate * compute_grad_analytically(self, X, y)
    J1 = J_quadratic(self, X, y)
    return int(abs(J0 - J1) < eps) -End,"
 import numpy as np
def get_error(deltas, sums, weights):
    """"""
    compute error on the previous layer of network
    deltas - ndarray of shape (n, n_{l+1})
    sums - ndarray of shape (n, n_l)
    weights - ndarray of shape (n_{l+1}, n_l)
    """"""
    return (deltas.dot(weights)*sigmoid_prime(sums)).mean(axis=0) -End,"
 import sys
import re


data = sys.stdin.read()
results = re.findall('you', data)
print(len(results))
 -End,"
 class ExtendedStack(list):
        
    def sum(self):
        if len(self) >= 2:
            self.append(self.pop() + self.pop())

    def sub(self):
        if len(self) >= 2:
            self.append(self.pop() - self.pop())

    def mul(self):
        if len(self) >= 2:
            self.append(self.pop() * self.pop())

    def div(self):
        if len(self) >= 2:
            self.append(self.pop() // self.pop()) -End,"
     def backprop(self, x, y):
        """"""
        Возвращает кортеж ``(nabla_b, nabla_w)`` -- градиент целевой функции по всем параметрам сети.
        ``nabla_b`` и ``nabla_w`` -- послойные списки массивов ndarray,
        такие же, как self.biases и self.weights соответственно.
        """"""
        # Эту функцию необходимо реализовать - будет сделано.
        nabla_b = [np.zeros(b.shape) for b in self.biases]
        nabla_w = [np.zeros(w.shape) for w in self.weights]

        # прямое распространение (forward pass)

        z = [] # список векторов суммаций всех слоев
        a = [] # список векторов вых. активаций всех слоев
        z.append(None) # у нейронов 0-го слоя (""рецепторов"") 
                       # нету сумматорной функции
        a.append(x)    # x - активация нулевого слоя (""рецепторов"")
                       # a[0] = x - входная активация
        for b, w in zip(self.biases, self.weights):
            z.append(np.dot(w, a[-1]) + b)
            # подсчитать сумматорную ф-ю следующего слоя
            # на основании последнего подсчитанного a[-1]
            # и добавить ее в список векторов суммаций
            # (ее индекс будет соответствовать номеру слоя)
            a.append(sigmoid(z[-1]))
            # подсчитать активационную ф-ю следующего слоя
            # на основании последнего подсчитанного z[-1]
            # и добавить ее в список векторов активаций
            # (ее индекс будет соответствовать номеру слоя)
                     
        # обратное распространение (backward pass)
        
        delta = (a[-1] - y) * sigmoid_prime(z[-1]) # ошибка выходного слоя
        nabla_b[-1] = delta              # производная J по смещениям выходного слоя
        nabla_w[-1] = delta.dot(a[-2].T) # производная J по весам выходного слоя
                     # размерность nabla_w[-1] равна j x k,
                     # как и в соответствующей матрицы весов из списка self.weights
                     # (то есть self.weights[-1])
                     # где j - количество нейронов выходного слоя
                     #     k - количество нейронов предпоследнего слоя
                     # тогда каждый элемент nabla_w[-1] - это произведение 
                     # delta^L_j * a^l-1_k

        # Обратите внимание, что переменная l в цикле ниже используется
        # немного иначе, чем в лекциях.  Здесь l = 1 означает последний слой, 
        # l = 2 - предпоследний и так далее.  
        # Мы перенумеровали схему, чтобы с удобством для себя 
        # использовать тот факт, что в Python к переменной типа list 
        # можно обращаться по негативному индексу.
        for l in range(2, self.num_layers):
            # дополнительные вычисления, чтобы легче записывалось
            #
            delta = np.dot(self.weights[-l+1].T, delta) * sigmoid_prime(z[-l]) # ошибка на слое L-l
            nabla_b[-l] = delta # производная J по смещениям L-l-го слоя
            nabla_w[-l] = delta.dot(a[-l-1].T) # производная J по весам L-l-го слоя
        return nabla_b, nabla_w -End,"
 import sys
import re


for line in sys.stdin:
    print(re.sub('human', 'computer', line), end='') -End,"
 class MoneyBox:
    
    def __init__(self, capacity):
        self.capacity = capacity
        self.coins = 0

    def can_add(self, v):
        return self.coins + v <= self.capacity

    def add(self, v):
        if self.can_add:
            self.coins += v -End,"
 import sys
import re


for line in sys.stdin:
    if re.search(r'\bcat\b', line):
        print(line, end='') -End,"
 parents = {}

def anc(a, b):
    if b in parents.keys():  
        return (a == b or True in [anc(a, cl) for cl in parents[b]]) 
                    
for n in range(int(input())):
    d = input().split()  
    parents[d[0]] = set(d[2:])
for q in range(int(input())):
    print(('No','Yes')[bool(anc(*input().split()))]) -End,"
 from sys import stdin
import re


print(len(re.findall(r'[Yy]ou', ''.join([line for line in stdin]))))



 -End,"
 from sys import stdin
import re


for line in stdin:
    line = re.sub(r'(\w)\1+', r'\1', line)
    print(line, end='')
 -End,"
 from sys import stdin
import re


for line in stdin:
    if len(re.findall(r'cat', line)) >= 2:
        print(line, end="""") -End,"
 from sys import stdin
import re


for line in stdin:
    line = re.sub(r'\bA+\b', r'argh', line, flags=re.IGNORECASE, count=1)
    print(line, end="""") -End,"
 import sys
import re

lines = sys.stdin.readlines()
for i in range(len(lines)):
    line = lines[i].strip()
    try:
        line = re.match(r'([\w\. ,]*) ={1} ', line).group(1)  # check whether line contains assignment
    except AttributeError:
        continue
    if not (re.match(r'[\d\.]', line) or re.search(r'\.{2}', line)):
        print(i + 1, ' '.join(line.split(', ')))
 -End,"
 class LoggableList(list, Loggable):
    
    def append(self, elem):
        super(LoggableList, self).append(elem)
        self.log(elem)




 -End,"
 from sys import stdin
from re import search

i = 0
for line in stdin:
    i += 1
    try:
        var = search(r'([\w\d_]+) = ', line).group(1)  # check whether line contains assignment
    except AttributeError:
        continue
    print(i, var) -End,"
 from sys import stdin
from re import search

i = 0
for line in stdin:
    i += 1
    try:
        var = search(r'([\w\d_]+) = ', line).group(1)  # check whether line contains assignment
    except AttributeError:
        continue
    print(i, var)
 -End,"
 IN_METRES = {
    'mile': 1609,
    'yard': 0.9144,
    'foot': 0.3048,
    'inch': 0.0254,
    'km': 1000,
    'm': 1,
    'cm': 0.01,
    'mm': 0.001
}

number, unit_from, _, unit_to = input().split()
print('{:.2e}'.format(float(number) * IN_METRES[unit_from] / IN_METRES[unit_to]))
 -End,"
 # put your python code here
s, a, b = input(), input(), input()
n = 0
while a in s:
    s = s.replace(a, b)
    if a in b and a in s:
        n = 'Impossible'
        break
    n += 1
print(n) -End,"
 s = input()
t = input()
n = 0
for i in range(len(s) - len(t) + 1):
    if s.startswith(t, i):
        n += 1
print(n) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r'\b(.+)\1\b', line):
        print(line) -End,"
 def Hanoi(n, A, C, B):
    if n != 0:
        Hanoi(n - 1, A, B, C)
        print(A, '-', C)
        Hanoi(n - 1, B, C, A)

n = int(input())
Hanoi(n, 1, 3, 2) -End,"
 s = input()
res = s.title().replace('_', '')
print(res) -End,"
 one = sorted(input().lower())
two = sorted(input().lower())
print(one == two) -End,"
 dct = dict(
	            mile = 1609.,
	            yard = 0.9144,
	            foot = 0.3048,
	            inch = 0.0254,
	            km = 1000.,
	            m = 1.0,
	            cm = 0.01,
	            mm = 0.001
	          )
num, m_from, in_ , m_to = input().split()
res = float(num) * dct[m_from] / dct[m_to]
print(""{:.2e}"".format(res))
 -End,"
 string, substring = input(), input()
n = 0
if substring in string:
    while string.find(substring, n) != -1:
        print(string.find(substring, n), end=' ')
        n = string.find(substring, n) + 1
else:
    print(-1) -End,"
 def fun(card):
    return value[card[:-1]] * 10 if card[-1] == koz else value[card[:-1]]

value = {'6': 1, '7': 2, '8': 3, '9': 4, '10': 5, 'J': 6, 'Q': 7, 'K': 8,\
         'A': 9}
card_1, card_2 = input().split()
koz = input()
if card_1[-1] != koz and card_2[-1] != koz and card_1[-1] != card_2[-1]:
    print('Error')
elif fun(card_1) > fun(card_2):
    print('First')
else:
    print('Second')
 -End,"
 n, m = map(int, input().split())
a = []
for i in range(n):
    a.append(list(input()))
for i in range(n):
    for j in range(m):
        if a[i][j] == '.':
            a[i][j] = 0
            for di in range(-1, 2):
                for dj in range(-1, 2):
                    ai = i + di
                    aj = j + dj
                    if 0 <= ai < n and 0 <= aj < m and a[ai][aj] == '*':
                        a[i][j] += 1
for row in a:
        print(''.join([str(elem) for elem in row]))
 -End,"
 def gen():
    i = 0
    while True:
        i += 1
        for _ in range(i):
            yield i

a = gen()
for j in range(int(input())):
    print(next(a), end=' ')
 -End,"
 def split_encode_series(string):
    from itertools import groupby

    for key, group in groupby(string):
        yield (len(list(group)), key)


def encode_series(series):
    return ''.join((str(elem[0]) if elem[0] >= 2 else '') + \
                   elem[1] for elem in series)


def rle_encode(string):
    series = split_encode_series(string)
    return encode_series(series)

print(rle_encode(input()))
 -End,"
 n = int(input())
track = ' '
for i in range(n):
    track = track.replace(' ',' 60 -120 60 ')
for i in track.strip().split():
    print('turn', i) -End,"
 n = int(input())
s = input().strip()
alf = ' abcdefghijklmnopqrstuvwxyz'
res = ''
for i in s:
    ind = (n + alf.find(i))%len(alf)
    res += alf[ind]
print('Result: ""{}""'.format(res)) -End,"
 s = input()
lst = list(map(len, s.split()))
for i in sorted(set(lst)):
    print('{}: {}'.format(i, lst.count(i)))
 -End,"
 a = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
r = ""M CM D CD C XC L XL X IX V IV I"".split()
ch = int(input())
for i in range(len(a)):
    if ch // a[i] > 0:
        print(r[i] * (ch // a[i]), end='')
        ch -= a[i] * (ch // a[i])
 -End,"
 ch = {
    '0': ["" -- "", ""|  |"", ""|  |"", ""    "", ""|  |"", ""|  |"", "" -- ""],
    '1': [""    "", ""   |"", ""   |"", ""    "", ""   |"", ""   |"", ""    ""],
    '2': ["" -- "", ""   |"", ""   |"", "" -- "", ""|   "", ""|   "", "" -- ""],
    '3': ["" -- "", ""   |"", ""   |"", "" -- "", ""   |"", ""   |"", "" -- ""],
    '4': [""    "", ""|  |"", ""|  |"", "" -- "", ""   |"", ""   |"", ""    ""],
    '5': ["" -- "", ""|   "", ""|   "", "" -- "", ""   |"", ""   |"", "" -- ""],
    '6': ["" -- "", ""|   "", ""|   "", "" -- "", ""|  |"", ""|  |"", "" -- ""],
    '7': ["" -- "", ""   |"", ""   |"", ""    "", ""   |"", ""   |"", ""    ""],
    '8': ["" -- "", ""|  |"", ""|  |"", "" -- "", ""|  |"", ""|  |"", "" -- ""],
    '9': ["" -- "", ""|  |"", ""|  |"", "" -- "", ""   |"", ""   |"", "" -- ""]
    }
nums = str(input())
n = len(nums)
print('x' + '-' * (5 * n - 1) + 'x')
for i in range(7):
    row = '|'
    for number in nums[:-1]:
        row += ch[number][i] + ' '
    row += ch[nums[-1]][i] + '|'
    print(row)
print('x' + '-' * (5 * n - 1) + 'x')
 -End,"
 def three_n_plus_one(n):
    while n != 1:
        yield int(n)
        if n % 2 == 0:
            n = n / 2
        else:
            n = n * 3 + 1
    yield int(n)

n = int(input())
a = list(three_n_plus_one(n))
print(*a) -End,"
 l, h = map(int, input().split())
a = [list(input()) for i in range(l)]
for i in range(l):
    for j in range(h):
        s = 0
        for di in range(-1,2):
            for dj in range(-1,2):
                ai = (i + di) % l
                aj = (j + dj) % h
                if a[ai][aj] == 'X':
                    s += 1
        #print(s, end='')
        if a[i][j] == 'X' and s == 4 or s == 3:
            print('X', end='')
        else:
            print('.', end='')
    print()
 -End,"
 lst = list(map(int, input().split()))
res_etalon = list(int(i + 1) for i in range(len(lst) - 1))
res = []
for i in range(len(lst) - 1):
    res.append(abs(lst[i] - lst[i + 1]))
if res_etalon == sorted(res) or len(lst) == 1:
    print('Jolly')
else:
    print('Not jolly')
 -End,"
 def split_decode_series(string):
    import re

    patt = '\d*\D'
    for i in re.findall(patt, string):
        yield (1 if len(i) == 1 else int(i[:-1]), i[-1])


def decode_series(series):
    s = ''
    for i in series:
        s += i[0] * i[1]
    return s


def rle_decode(string):
    series = split_decode_series(string)
    return decode_series(series)


string = input()
print(rle_decode(string))
 -End,"
 lst = input().lower().split()
for i in set(lst):
    print(i, lst.count(i)) -End,"
 from collections import Counter

lst = input().lower().split()
for word, num in Counter(lst).items():
    print(word, num) -End,"
 n = int(input())
Ch1, Ch2 = int('0x1f600', 16), int('0x1f64F', 16)
res = ''
for i in input():
    ind = (n + ord(i) - Ch1) % (Ch2 - Ch1 + 1) + Ch1
    res += chr(ind)
print('Result: ""{}""'.format(res))
 -End,"
 import re

print(re.sub(r'\s+', '_', input().strip())) -End,"
 from collections import Counter

c = Counter(input().split())
print('{:.2f}'.format(c['A'] / sum(c.values())))
 -End,"
 def poker(lst):
    from collections import defaultdict

    def seq(r):
        a = sorted([i - r[0] for i in r]) == [0, 1, 2, 3, 4]
        return a or r == [0, 1, 2, 3, 12]

    ind = dict(zip(['2', '3', '4', '5', '6', '7', '8', '9', '10',\
                      'J', 'Q', 'K', 'A'], range(13)))
    lst1 = sorted([ind[card[:-1]] for card in lst])
    lst2 = set([i[-1] for i in lst])
    dct = defaultdict(list)
    for i in set(lst1):
        dct[lst1.count(i)].append(i)
    if len(lst2) == 1 and lst1 == [8, 9, 10, 11, 12]:
        return 'Royal Flush'
    elif len(lst2) == 1 and seq(lst1):
        return 'Straight Flush'
    elif len(dct[4]) == 1:
        return 'Four of a Kind'
    elif len(dct[3]) == 1 and len(dct[2]) == 1:
        return 'Full House'
    elif len(lst2) == 1:
        return 'Flush'
    elif seq(lst1):
        return 'Straight'
    elif len(dct[3]) == 1:
        return 'Three of a Kind'
    elif len(dct[2]) == 2:
        return 'Two Pairs'
    elif len(dct[2]) == 1:
        return 'Pair'
    else:
        return 'High Card'

lst = input().split()
print(poker(lst))
 -End,"
 def fib(n):
    a, b, i = 0, 1, 2
    while i <= n:
        a, b = b, a + b
        i += 1
    return b

def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main()
 -End,"
 def fib_digit(n):
    a, b, i = 0, 1, 2
    while i <= n:
        a, b = b, (a + b) % 10
        i += 1
    return b


def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main()
 -End,"
 def gcd(a, b):
    if not a or not b:
        return max(a, b)
    else:
        return gcd(min(a, b), max(a, b) % min(a, b))


def main():
    a, b = map(int, input().split())
    print(gcd(a, b))


if __name__ == ""__main__"":
    main() -End,"
 def code(x, y):
    for i in x:
        bit[i] = y + bit.get(i, '')

s = input()
tmp, bit, res = [], {}, ''
for i in set(s):
    tmp.append((s.count(i), i))
n = k = len(tmp)
if n == 1:
    bit[tmp[0][1]] = '0'
else:
    while k > 1:
        a = tmp.pop(tmp.index(min(tmp)))
        code(a[1], '0')
        b = tmp.pop(tmp.index(min(tmp)))
        code(b[1], '1')
        tmp.append((a[0] + b[0], a[1] + b[1]))
        k -= 1
for i in s:
    res += bit[i]
print(n, len(res))
for i in sorted(set(s)):
    print(i + ': ' + bit[i])
print(res) -End,"
 def up(i):
    while i > 0 and a[(i - 1)//2] < a[i]:
        a[(i - 1)//2], a[i] = a[i], a[(i - 1)//2]
        i = (i - 1) // 2

def down(i):
    while 2 * i + 1 <= len(a) - 1:
        j = i
        if a[2 * i + 1] > a[i]:
            j = 2 * i + 1
        if 2 * i + 2 <= len(a) - 1 and a[2 * i + 2] > a[j]:
            j = 2 * i + 2
        if i == j:
            break
        else:
            a[i], a[j] = a[j], a[i]
            i = j

a = []
for _ in range(int(input())):
    s = (input().split())
    if len(s) == 2:
        a.append(int(s[1]))
        up(len(a) - 1)
    else:
        print(a[0])
        a[0] = a[-1]
        a.pop()
        down(0) -End,"
 def binary_search(lst, x):
    l, r = 0, len(lst) - 1
    while l <= r:
        m = l + (r - l) // 2
        if lst[m] == x:
            return m + 1      # Порядок вывода от 1, а не от 0
        elif lst[m] > x:
            r = m - 1
        else:
            l = m + 1
    return -1


def main():
    a = [int(i) for i in input().split()][1:]
    b = [int(i) for i in input().split()][1:]
    for j in b:
        print(binary_search(a, j), end=' ')


if __name__ == '__main__':
    main()
 -End,"
 def merge(a, b):
    tmp = []
    global k
    while a and b:
        if a[0] <= b[0]:
            tmp.append(a.pop(0))
        else:
            tmp.append(b.pop(0))
            k += len(a)
    tmp.extend(a or b)
    return tmp


def mergesort(lst):
    if len(lst) == 1:
        return lst
    m = len(lst) // 2
    return merge(mergesort(lst[: m]), mergesort(lst[m:]))
    

def main():
    n = int(input())
    queue = [int(i) for i in input().split()]
    mergesort(queue)
    print(k)


if __name__ == '__main__':
    k = 0
    main()
 -End,"
 # 3-е разбиение


def partition(a):
    lss, eql, grt = [], [], []
    pvt = (a[0] + a[len(a)//2] + a[-1])//3
    for x in a:
        if x < pvt:
            lss.append(x)
        elif x == pvt:
            eql.append(x)
        else:
            grt.append(x)
    return lss, eql, grt


# Быстрая сортировка с элиминацией хвостовой рекурсии


def quicksort(a):
    while len(a) > 1:
        lss, eql, grt = partition(a)
        if len(lss) < len(grt):
            first = quicksort(lss)
            return first + eql + quicksort(grt)
        elif len(lss) > len(grt):
            first = quicksort(grt)
            return quicksort(lss) + eql + first
        else:
            return quicksort(lss) + eql + quicksort(grt)
    return a


# Кол-во элементов слева от x (n - нестрогое/строгое неравенство)


def binarycount(lst, x, n):
    l, r = 0, len(lst) - 1
    while l <= r:
        m = l + (r - l) // 2
        if lst[m] <= x - n:
            l = m + 1
        elif lst[m] > x - n:
            r = m - 1
    return l


def main():
    left, right = [], []
    n, m = map(int, input().split())
    for i in range(n):
        l, r = map(int, input().split())
        left.append(l)
        right.append(r)
    point = [int(i) for i in input().split()]
    left, right = quicksort(left), quicksort(right)
    for i in point:
        print(binarycount(left, i, 0) - binarycount(right, i, 1), end=' ')

if __name__ == '__main__':
    main()
 -End,"
 def countsort(a):
    b, c = [0] * 11, [0] * len(a)
    for i in a:
        b[i] += 1
    for i in range(1, 11):
        b[i] += b[i - 1]
    for j in a[::-1]:
        c[b[j] - 1] = j
        b[j] -= 1
    return c


def main():
    n = int(input())
    lst = [int(i) for i in input().split()]
    print(*countsort(lst))


if __name__ == '__main__':
    main()
 -End,"
 import sys


def lisbuttonup(a):
    d = [1] * len(a)
    for i in range (len(a)):
        for j in range(i):
            if d[j] + 1 > d[i] and not a[i] % a[j]:
                d[i] = d[j] + 1
    return max(d)


def main():
    reader = (tuple(map(int, line.split())) for line in sys.stdin)
    n = next(reader)
    lst = next(reader)
    print(lisbuttonup(lst))


if __name__ == '__main__':
    main()
 -End,"
 import sys


def diff(ai, bj):
    if ai == bj:
        return 0
    return 1 


def editdistbu(a, b):
    n, m = len(a) + 1, len(b) + 1
    d = [[0 for _ in range(m)] for _ in range(n)]
    for i in range(n):
        d[i][0] = i
    for j in range(m):
        d[0][j] = j
    for i in range(1, n):
        for j in range(1, m):
            c = diff(a[i - 1], b[j - 1])
            d[i][j] = min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + c)
    return d[n - 1][m - 1]
    


def main():
    reader = (tuple(line.strip()) for line in sys.stdin)
    a = next(reader)
    b = next(reader)
    print(editdistbu(a, b))


if __name__ == '__main__':
    main()
 -End,"
 import sys


def knapsackbu(c, w, n):
    d = [[0] * c for _ in range(n)]
    for i in range(1, n):
        for j in range(1, c):
            d[i][j] = d[i - 1][j]
            if w[i - 1] <= j:
                d[i][j] = max(d[i][j], d[i - 1][j - w[i - 1]] + w[i - 1])
    return d[-1][-1]


def main():
    reader = (map(int, line.split()) for line in sys.stdin)
    capacity, n = next(reader)
    weight_list = tuple(next(reader))
    print(knapsackbu(capacity + 1, weight_list, n + 1))


if __name__ == '__main__':
    main()
 -End,"
 import sys


def stairs(a, n):
    prev, curr, acc = 0, a[1], a[1]
    for i in range(2, n + 1):
        acc = max(prev, curr) + a[i]
        prev, curr = curr, acc
    return acc

#  итерация
#def stairs(a, n):
#    d = [0] + [a[1]] + [0] * (n - 1)
#    for i in range(2, n + 1):
#        d[i] = max(d[i - 1], d[i - 2]) + a[i]
#    return d[-1]

#  рекурсия - не прошла
#def stairs(a, n):
#    if n < 2:
#        return a[n]
#    return max(stairs(a, n - 1), stairs(a, n - 2)) + a[n]


def main():
    reader = (map(int, line.split()) for line in sys.stdin)
    n, = next(reader)
    step_price = [0] + list(next(reader))
    print(stairs(step_price, n))


if __name__ == '__main__':
    main()
 -End,"
 import sys


def prev(n):
    dev3 = n // 3 if n % 3 == 0 else 0
    dev2 = n // 2 if n % 2 == 0 else 0
    return (dev3, dev2, n - 1)


def calc_step(n):
    d = [1e6] + [0] * n
    for i in range(2, n + 1):
        d[i] = min(d[prev(i)[0]], d[prev(i)[1]], d[prev(i)[2]]) + 1
    return d


def restore_chain(a, n, k):
    b = [n]
    for i in range(k, 0, -1):
        n = [j for j in prev(n) if a[j] == i - 1][0]
        b.insert(0, n)
    return b


def main():
    n = next(int(line) for line in sys.stdin)
    lst = calc_step(n)
    print(lst[n])
    print(*restore_chain(lst, n, lst[n]))


if __name__ == '__main__':
    main()
 -End,"
 import sys


def binary_search(a, d, x):
    l, r = 0, len(d) - 1
    while l <= r:
        m = l + (r - l) // 2
        if a[d[m]] < x:
            r = m - 1
        elif a[d[m]] >= x:    
            l = m + 1
    return l


def restoreindex(r, k, n):
    res = [k + 1]
    for i in range(n - 1):
        res.insert(0, r[k] + 1)
        k = r[k]
    return res


def lds_nlogn(a, n):
    d = [0]
    r = [-1] * n
    for i in range (1, n):
        if a[i] <= a[d[-1]]:
            r[i] = d[-1]
            d += [i]
        elif a[i] > a[d[0]]:
            d[0] = i
        else:
            j = binary_search(a, d, a[i])
            d[j] = i
            r[i] = d[j - 1]
    return restoreindex(r, d[-1], len(d))


def main():
    reader = (tuple(map(int, line.split())) for line in sys.stdin)
    n, = next(reader)
    lst = next(reader)
    seq = lds_nlogn(lst, n)
    print(len(seq))
    print(*seq)


if __name__ == '__main__':
    main()
 -End,"
 import numpy as np


a = 2 * np.eye(3, 4, dtype='int') + np.eye(3, 4, 1, dtype='int')
print(a)
 -End,"
 import numpy as np, sys


def matrix(r):
    shape = tuple(next(r))
    return np.fromiter(next(r), np.int).reshape(shape)


def main():
    reader = (map(int, line.split()) for line in sys.stdin)
    try:
        print(np.dot(matrix(reader), matrix(reader).T))
    except:
        print('matrix shapes do not match')  


if __name__ == '__main__':
    main()
 -End,"
 from urllib.request import urlopen
import numpy as np, sys


def main():
    file = urlopen(sys.stdin.read())
    X = np.mat(np.loadtxt(file, skiprows=1, delimiter="",""))
    Y = np.bmat(X[:, 0:1])
    X[:, 0:1] = 1
    b = X.T.dot(X).I.dot(X.T).dot(Y)
    print(*b.flat)


if __name__ == '__main__':
    main() -End,"
 import numpy as np

def vectorized_forward_pass(self, input_matrix):        
    return input_matrix.dot(self.w) + self.b > 0 -End,"
 import numpy as np

def train_on_single_example(self, example, y):
    y_hat = self.w.T.dot(example) + self.b > 0
    self.b += (y - y_hat)
    self.w += (y - y_hat) * example
    return abs(y - y_hat) -End,"
 import numpy as np

def summatory(self, input_matrix):
    return input_matrix.dot(self.w)

def activation(self, summatory_activation):
    return self.activation_function(summatory_activation)

def vectorized_forward_pass(self, input_matrix):
    return self.activation(self.summatory(input_matrix)) -End,"
 import numpy as np

def SGD(self, X, y, batch_size, learning_rate=0.1, eps=1e-6, max_steps=200):
    for i in range(max_steps):
        idx = np.random.choice(np.arange(y.size), size=batch_size, replace=False)
        if self.update_mini_batch(X[idx], y[idx], learning_rate, eps):
            return 1
    return 0

def update_mini_batch(self, X, y, learning_rate, eps):
    grad = compute_grad_analytically(self, X, y, J_prime=J_quadratic_derivative)      
    J_prev = J_quadratic(self, X, y)
    self.w -= learning_rate * grad
    J_curr = J_quadratic(self, X, y)
    return abs(J_prev - J_curr) < eps -End,"
 import numpy as np

def compute_grad_numerically_2(neuron, X, y, J=J_quadratic, eps=10e-2):
    w_0 = neuron.w
    num_grad = np.zeros(w_0.shape)
    
    for i in range(len(w_0)):
        
        old_wi = neuron.w[i].copy()
        # Меняем вес в одну и другую сторону и считаем целевую функцию
        neuron.w[i] += eps
        J_plus_eps = J(neuron, X, y)
        neuron.w[i] -= 2 * eps
        J_minus_eps = J(neuron, X, y)
        # Вычисляем приближенное значение градиента
        num_grad[i] = (J_plus_eps - J_minus_eps)/(2 * eps)
        
        # Возвращаем вес обратно. Лучше так, чем -= eps, чтобы не накапливать ошибки округления
        neuron.w[i] = old_wi
            
    # проверим, что не испортили нейрону веса своими манипуляциями
    assert np.allclose(neuron.w, w_0), ""МЫ ИСПОРТИЛИ НЕЙРОНУ ВЕСА""
    return num_grad
 -End,"
 import numpy as np
def get_error(deltas, sums, weights):
    """"""
    compute error on the previous layer of network
    deltas - ndarray of shape (n, n_{l+1})
    sums - ndarray of shape (n, n_l)
    weights - ndarray of shape (n_{l+1}, n_l)
    """"""
    return (deltas.dot(weights)*sigmoid_prime(sums)).mean(axis=0).T -End,"
 def backprop(self, x, y):
    """"""
    Возвращает кортеж ``(nabla_b, nabla_w)`` -- градиент целевой функции по всем параметрам сети.
    ``nabla_b`` и ``nabla_w`` -- послойные списки массивов ndarray,
    такие же, как self.biases и self.weights соответственно.
    """"""

    nabla_b = [np.zeros(b.shape) for b in self.biases]
    nabla_w = [np.zeros(w.shape) for w in self.weights]

    # прямое распространение (forward pass)
    a = [x] # список векторов активаций
    for b, w in zip(self.biases, self.weights):
        # посчитать активации
        a.append(sigmoid(np.dot(w, a[-1]) + b))

    # обратное распространение (backward pass)
    delta = (a[-1] - y)*(a[-1] - a[-1]**2)  # ошибка выходного слоя
    nabla_b[-1] = delta  # производная J по смещениям выходного слоя
    nabla_w[-1] = delta.dot(a[-2].T)  # производная J по весам выходного слоя
        
    # Обратите внимание, что переменная l в цикле ниже используется
    # немного иначе, чем в лекциях.  Здесь l = 1 означает последний слой, 
    # l = 2 - предпоследний и так далее.  
    # Мы перенумеровали схему, чтобы с удобством для себя 
    # использовать тот факт, что в Python к переменной типа list 
    # можно обращаться по негативному индексу.
    for l in range(2, self.num_layers):
        # дополнительные вычисления, чтобы легче записывалось
        #
        delta = self.weights[-l + 1].T.dot(delta) * (a[-l] - a[-l]**2) # ошибка на слое L-l
        nabla_b[-l] = delta # производная J по смещениям L-l-го слоя
        nabla_w[-l] = delta.dot(a[-l - 1].T) # производная J по весам L-l-го слоя
    return nabla_b, nabla_w -End,"
 # put your python code here
from math import factorial as f


def main(m, n):
    bai = m
    faidx = 1
    dic = 1
    vcf = m * n
    comb = int(f(n)/f(n-2)/2) if n>2 else 0  # количество комбинаций
    vcfisec = comb * m
    return bai + faidx + dic + vcf + vcfisec


if __name__ == ""__main__"":
    bam, vc = map(int, input().split())
    res = main(bam, vc)
    print(res)
 -End,"
 print(-15< int(input()) not in[13,14,17,18])




 -End,"
 n = int(input())
num = [[0] * n for y in range(n)]
y, x, dy, dx = 0, 0, 0, 1

for k in range(n*n):
    num[y][x] = k+1
    if  (y+dy not in range(-1,n)or    #не столбец
         x+dx not in range(-1,n)or    #не строка
         num[y + dy][x + dx] > 0):    #следующая занята
        dx, dy = -dy, dx              #то - переприсваивание
        
    y, x = y + dy, x + dx

[print(*i) for i in num] -End,"
 dct={'global':['None']}                                             # словарь списков(родитель,переменные)
for ops, nms, v in [input().split() for i in range(int(input()))]:  # цикл операций(копипаст у Vladmir Ryabov)
    if   ops=='create':dct[nms]=[v]                                 # создать пространство-новый список в словаре
    elif ops=='add'   :dct[nms].append(v)                           # новая переменная-добавить в список
    elif ops=='get':                                                # поиск переменной (циклом)
        while nms!='None' and v not in dct[nms]:                    # если нет в пространстве-меняем на родителя(пока не None)
            nms=dct[nms][0]                     
        print(nms) -End,"
 import sys

def rep(s, a, b, k):
    while  a in s:
        if a in b:return 'Impossible'
        s, k = s.replace(a, b), k+1
    return k
 
print(rep(*sys.stdin.read().split(),0)) -End,"
 import sys
s, t = sys.stdin.read().split()
print(sum([s[i:].startswith(t) for i in range(len(s))])) -End,"
 import sys, re
[print(i) for i in sys.stdin.read().splitlines() if re.findall(""cat.*cat"", i)] -End,"
 import sys, re
[print(i) for i in sys.stdin.read().splitlines() if re.findall(r'\bcat\b', i)] -End,"
 import sys, re
[print(re.sub(r'a+\b','argh',i.strip(), 1, re.I))for i in sys.stdin] -End,"
 import re,sys
[print(re.sub(r'\b\w\w', lambda s:s.group()[::-1], i.strip()))for i in sys.stdin]


 -End,"
 import re,sys
[print(re.sub(r'(\w)\1+',lambda s:s.group(1), i.strip()))for i in sys.stdin] -End,"
 class multifilter:
    judge_any  = lambda p,n : p >= 1
    judge_half = lambda p,n : p >= n
    judge_all  = lambda p,n : n == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.it  = iterable
        self.fun = funcs
        self.juf = judge
        
    def __iter__(self):
        for i in self.it:
            res = [f(i) for f in self.fun ]
            if self.juf(res.count(1), res.count(0)):
                yield i   -End,"
 import re,sys

step1 = lambda s:re.sub(r'11'         ,'',s)                 # удаляем - парные 1
step2 = lambda s:re.sub(r'1(00)+1'    ,'',s)          # удаляем - 1(парные нули)1 
step3 = lambda s:re.sub(r'1(0+)1(0+)1','',s)    # удаляем - 1(нечет 0)1(нечет 0)1

def conv(x):
    x = step1(x)
    k = len(x)//4                    # число повторов = четверть длины
    for i in range(k): x = step2(x)  # (цифры сдвигаются и опять такая же кобинация)     
    x = step3(x)
    return '1'not in x               # наше число без единиц (пусто или нули)

for s in sys.stdin:
    s = s.rstrip()                   # обрезать перенос                 
    try:int(s, base=2)               # проверить бинарность
    except ValueError:continue
    if conv(s):print(s)              # если наше число - печать -End,"
 import re,sys
for x in sys.stdin:
    try:int(x,base=2)                                     # удаляем небинарные
    except ValueError:continue
    if '1'in(re.sub(r'(11|10(00|1)*01)+','',x)):continue  # удаляем комбинации (единицы остаются-неподходит)
    print(x.rstrip()) -End,"
 import requests, re, sys
pas1, pas2 = sys.stdin.read().splitlines()
ans ='No'
pat = r'ref=""(.+)""'
for link  in re.findall(pat, requests.get(pas1).text):           # вызываем ссылки первого запроса
    if pas2 in re.findall(pat, requests.get(link).text):ans='Yes'  # проверяем совпадение 
print(ans) -End,"
 import re,requests,sys
exp = re.compile(r'''a.*href=.*?//(.*?)[/:'""]''')
post = exp.findall(requests.get(sys.stdin.read()).text)
print(*sorted(set(post)),sep='\n') -End,"
 n0 = int(input())
r1, r2 = 0, n0-1                           # диапазон прохода
i, s = 0, 1                                # счетчик и шаг
tab = [[0]*n0 for k in range(n0)]          # лист-поле

while i < (n0*n0):                         # цикл пока не закончатся числа
    for k in range(r1, r2, s):             # горизонталь
        i+=1
        tab[r1][k] = i

    if r1==r2 : tab[r1][r2] = n0*n0; break # если последняя - ставим и выходим

    for k in range(r1,r2,s):               # вертикаль
        i+=1
        tab[k][r2]=i

    if s==1 : s=-1                         # обратный проход
    else:s = 1;  r1, r2 = r1-1, r2+1       # сдвиг диапазона и 
    r1, r2 = r2, r1                        # цикл заново(заполняем следующий квадрат)

[print(*n)for n in tab] -End,"
 def modify_list(l):
    [l.append(x2//2)for x2 in[l.pop(0) for x1 in range(len(l))]if not x2%2]




 -End,"
 zam=list(' abcdefghijklmnopqrstuvwxyz')             # алфавит
s=int(input())                                      # сдвиг
dcon={zam[i]:zam[(i+s)%27]for i in range(len(zam))} # словарь перевода
res=[dcon[x] for x in input().strip()]              # перевод
print('Result: ""{}""'.format(''.join(res)))          # печать -End,"
 import sys, collections
num = sys.stdin.read().split()
print(*[i for i, n in collections.Counter(num).items() if n!=1])

 -End,"
 from xml.etree import ElementTree as elt

def walker(rey, k=1):
    cost[rey.attrib['color']] += k
    [walker(x, k+1)for x in rey]

cost = {'red':0, 'green':0, 'blue':0}
walker(elt.fromstring(input()))
print(*cost.values()) -End,"
 nums=[int(x)for x in input().split()]
stat=list(range(1,len(nums)))
nget=sorted([abs(nums[i]-nums[i+1])for i in range(len(nums)-1)])
print(['Not jolly','Jolly'][stat==nget]) -End,"
 [print(*i)for i in [*zip(*[input().split()for x in range(int(input().split()[0]))])]] -End,"
 print (*[x for x in range(1,10) for _ in range(x)][:int(input())],sep=' ')




 -End,"
 rang=['6','7','8','9','10','J','Q','K','A']              # лист рангов
ans=['First','Second','Error']                           # лист ответов
hod=[[rang.index(i[:-1]),i[-1]]for i in input().split()] # карты[ранг][масть]
top=input()                                              # козырь
if  (hod[0][1]==hod[1][1] and 
     hod[0][0]!=hod[1][0]):
    res=hod[0][0]<hod[1][0]                        # масти равны,ранги неравны(первая=0,вторая=1)
elif hod[0][1]==top:res=0                          # козырь первый(0)
elif hod[1][1]==top:res=1                          # козырь второй(1) 
else:res=2                                         # другие варианты = ошибка(2)
print(ans[res]) -End,"
 from sys import stdin
[print('Processing ""%s"" command...'%com.strip())for com in stdin if com!='End']
print('Good bye!') -End,"
 n = input()+' '
d = {'M':1000,'D':500,'C':100,'L':50,'X':10,'V':5,'I':1,' ':0}# словарь значений с пустым местом=0
 #складываем значения по порядку(вычитаем если меньше следующего)
print(sum([-d[n[i]] if d[n[i]] < d[n[i+1]] else d[n[i]] for i in range(len(n)-1)])) -End,"
 n = int(input())
drom={'M':1000,'CM':900,'D':500,'CD':400,'C':100,'XC':90,'L':50,'XL':40,'X':10,'IX':9,'V':5,'IV':4,'I':1}
for k, x in drom.items():
    print(k * (n // x), sep='', end='')
    n %= x -End,"
 n, c1, c2 = int(input()), int(0x1f600), int(0x1f64f)                # сдвиг и крайние символы ряда
zam = [chr(c1+i) for i in range(c2-c1+1)]                           # ряд символов(включая последний)
con = {zam[i]:zam[(i+n)%len(zam)] for i in range(len(zam))}         # словарь перевода
print(f'''Result: ""{''.join([con[x] for x in input()])}""''')        # вывод по словарю -End,"
 d={'x':list('x|||||||x'),
   ' ':['-',' ',' ',' ',' ',' ',' ',' ','-'],
   '0':['----',' -- ','|  |','|  |','    ','|  |','|  |',' -- ','----'],
   '1':['----','    ','   |','   |','    ','   |','   |','    ','----'],
   '2':['----',' -- ','   |','   |',' -- ','|   ','|   ',' -- ','----'],
   '3':['----',' -- ','   |','   |',' -- ','   |','   |',' -- ','----'],
   '4':['----','    ','|  |','|  |',' -- ','   |','   |','    ','----'],
   '5':['----',' -- ','|   ','|   ',' -- ','   |','   |',' -- ','----'],
   '6':['----',' -- ','|   ','|   ',' -- ','|  |','|  |',' -- ','----'],
   '7':['----',' -- ','   |','   |','    ','   |','   |','    ','----'],
   '8':['----',' -- ','|  |','|  |',' -- ','|  |','|  |',' -- ','----'],
   '9':['----',' -- ','|  |','|  |',' -- ','   |','   |',' -- ','----']}
num = input()
tab = ['x']                         # лист значков(+рамка)
for n in num:tab+=[str(n)]+[' ']    # заполняем,вставляем пробелы
tab[-1]='x'                         # последний пробел меняем на рамку
for i in range(9):                  # проход по элементам
    for w in tab:                   # проход по значкам
        print(d[w][i],sep='',end='')# печатаем строку элементов
    print() -End,"
 from sys import stdin
print((lambda d:d[0]*d[3]//(d[1]+d[2]))([int(i) for i in stdin]))




 -End,"
 from sys import stdin
print(*[sum(map(int, x.split()))for x in stdin.readlines()], sep='#')
 -End,"
 import re,sys
print(*[i[1]*(int(i[0])if i[0]else 1)for i in re.findall(r'(\d*)(\w)', sys.stdin.read())],sep ='') -End,"
 from sys import stdin
dat = stdin.readlines()
n, m = map(int,dat[0].split())
p = [list('.'*(m+2)), *[list('.'+i+'.')for i in dat[1:]], list('.'*(m+2))]
[print(*['*'if p[i][j]=='*'
         else sum([p[i+y][j+x]=='*' 
                   for x in [-1,0,1]
                   for y in [-1,0,1]])
                   for j in range(1,m+1)],sep='')
                   for i in range(1,n+1)] -End,"
 def anset(s):
    if s:
        for a in [60,-120,60,'']:
            anset(s-1)
            if a:print (f'turn {a}')
    
anset(int(input()))  -End,"
 p=[]
for _ in range(int(input())):
    p = [*p,60,*p,-120,*p,60,*p]
[print(f'turn {a}')for a in p] -End,"
 import sys
s = ''
for _ in range(int(sys.stdin.read())):
    s = s + 'turn 60\n' + s + 'turn -120\n' + s + 'turn 60\n' + s
sys.stdout.write(s) -End,"
 from sys import stdin
(lambda t,s : print(*[i for i in range(len(t))if t[i:].startswith(s)])if(s in t)else print(-1))(*stdin.readlines())
 -End,"
 cost = {'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'10':10,'J':11,'Q':12,'K':13,'A':14}
p, c = 'High Card', input().split()
must = len(set([x[-1] for x in c]))                           # ОДНА МАСТЬ = 0
card = sorted([cost[x[:-1]]for x in c])                       # КАРТЫ ПО РАНГУ
lens = len(set(card))                                         # к-во разных карт                                               
s = sum([card.count(i)for i in set(card) if card.count(i)>1]) # к-во одинаковых   
if   lens == 4 : p = 'Pair'
elif lens == 3 : p = 'Three of a Kind'if s == 3 else 'Two Pairs'
elif lens == 2 : p = 'Four of a Kind' if s == 4 else 'Full House'    
elif must == 1 : p = 'Flush'
if card[4] - card[0] == 4 or card == [2,3,4,5,14] : p = 'Straight' if must > 1 else 'Straight Flush'
if card == [10,11,12,13,14] and must == 1 : p ='Royal Flush'
print(p)
 -End,"
 (lambda a:print(f""{a**2*20.64573:.2f}\n{a**3* 7.66312:.2f}""))(float(input()))
 -End,"
 num = [int(i) for i in input().split()] 
lns = len(num)
mes = 'Кучки можно уравнять'
if(lns<2):
    mes='Ошибка. Кучек слишком мало, чтобы можно было решить задачу.'
elif((num[0]!=num[1]==num[-1])or              # если две неравных или
     (sum(num)%2 and (lns+1)%2)):             # сумма-нечет а длина-чет
        mes='Кучки нельзя уравнять'
print(mes) -End,"
 num = [int(i)for i in input().split()]
sm, ln = sum(num), len(num)
if ln<2:
    print('Ошибка. Кучек слишком мало, чтобы можно было решить задачу.')
elif ((num[0]!=num[1]==num[-1])or          # две неравные или
      (sm%2 and not ln%2)):                # сумма нечет,длина чет
    print('Кучки нельзя уравнять')
else :
    mx = max(num)
    mx = mx+(mx-sm)%2
    print(f'{(mx*ln-sm)//2} {mx}') -End,"
 from sys import stdin
mag = sorted([float(i) for i in stdin.readlines()])
print(mag[1], mag[-1])
 -End,"
 num, n = '', int(input())
while n:
    num=f'{n%2}'+num
    n//=2
print(num) -End,"
 n = [int(i)for i in input().split()]
for j in range(len(n)):
    for i in range(j, 0,-1):
        if n[i] < n[i-1] : n[i], n[i-1] = n[i-1], n[i] 
print(*n)
 -End,"
 from sys import stdin
s = [int(i) for i in stdin.read().split()] # s[0] = рост пети
print(sum(i >= s[0] for i in s))           # считаем всех не ниже s[0] 
 -End,"
 import re, sys, collections
c = collections.Counter(re.findall('\w+', sys.stdin.read().lower())).most_common(1)
print(f'{c[0][0]} {c[0][1]}')
 -End,"
 import sys, collections
d = collections.defaultdict(list)
n = sorted(i.split() for i in sys.stdin.readlines()[1:])
[d[s[0]].append(float(s[1])) for s in n]
[print(f'{i} {sum(n)/len(n):.1f}') for i, n in d.items()]
 -End,"
 f1,f2=0,1
for i in range(int(input())-1):
    f1,f2=f2,f1+f2
print(f2) -End,"
 f1, f2 = 0, 1
for i in range(int(input())-1):
    f1, f2 = f2, (f1+f2)%10
print(f2) -End,"
 n, m = map(int, input().split())

f1,f2 = 0,1
p = [f1,f2]

for i in range(n-1):
    f1,f2 = f2,(f1+f2)%m                  # переприсваивание
    if f2 == 0 and (f1+f2)%m == 1:break   # повтор-выход
    p.append(f2)                          # заполнение
    
print(p[n%(len(p))]) -End,"
 s = '''\
x--------------------------------------------------x
| --        --   --        --   --   --   --   --  |
||  |    |    |    | |  | |    |       | |  | |  | |
||  |    |    |    | |  | |    |       | |  | |  | |
|           --   --   --   --   --        --   --  |
||  |    | |       |    |    | |  |    | |  |    | |
||  |    | |       |    |    | |  |    | |  |    | |
| --        --   --        --   --        --   --  |
x--------------------------------------------------x'''.split('\n')
n=input()
for i in range(9):
    print(f""{s[i][0]+''.join([s[i][int(x)*5+1:int(x)*5+6]for x in n])+s[i][-1]}"") -End,"
 while input('Please enter the magic word: ')!='please':1
print('Thank you!') -End,"
 num = int(input())
s = 0
s += sum(range(3, num, 3))
s += sum(range(5, num, 5))
s -= sum(range(15,num,15))
print(s) -End,"
 a=int(input())
b=int(input())
c=int(input())
d=int(input())
cd=''
ab=''
e=0
for i in range(c, d + 1):
    cd = cd + '\t' + str(i)
print(cd)
for j in range (a,b+1):
    if j==b+1:
        print('\n')

    for i in range(c, d + 1):
        if i==c:
            ab = ab + str(j) + '\t' + str(i * j) + '\t'
        else:
            ab = ab  + str(i * j) + '\t'
        if i==d:
            print(ab,end='\n')
            ab=''


print(ab)
 -End,"
 a,b=(int(input()),int(input()))
n=0
sum=0
for i in range(a,b+1):
    if i%3==0:
        n+=1
        sum=i+sum
print(sum/n)


 -End,"
 n=int(input())
j=1
a=0
for i in range(1,n+1):
    j=0
    while j!=i and a!=n:
        print(i,end=' ')
        j+=1
        a+=1
 -End,"
 def modify_list(l):
    i=0
    while i!=len(l):
        if l[i]%2==0:
            l[i]=l[i]//2
            i+=1
        else:
            del l[i] -End,"
 s=input()
d=1
j=1
m=''
for i in range(len(s)-1):
    d=1
    if s[i]==s[i+1]:
        j+=1
    elif s[i]!=s[i+1]:
        m=m+s[i]+str(j)
        j=1
if s[len(s)-1]==s[len(s)-2]:
    m=m+s[len(s)-1]+str(j)
elif s[len(s)-1]!=s[len(s)-2]:
    m=m+s[len(s)-1]+str(j)
else:
    m=m+s[len(s)-1]+str(j)

print(m)


 -End,"
 a=[int(i) for i in input().split()]
a.sort()
b=''
for i in range(len(a)-2):
    if a[i]==a[i+1] and i!=len(a)-1 and a[i]!=a[i+2]:
        b=b+str(a[i])+' '
if a[len(a)-1]==a[len(a)-2] and len(a)>1:
    b=b+str(a[len(a)-1])
print(b,end='') -End,"
 a = input()

dic1 = {'M':1000,'D':500,'C':100,'L':50,'X':10,'V':5,'I':1}
dic2 = {'CM':900,'CD':400,'XC':90,'XL':40,'IX':9,'IV':4}
b, i = 0, 0

while i <= len(a)-1:

    if i <= len(a)-2:
        d = a[i] + a[i+1]
         
    if (i <= len(a)-2) and(d in dic2):
        b = (dic2.get(d))+b
        i += 2
    elif (a[i] in dic1):
        b = dic1.get(a[i])+ b
        i += 1
print(b)
    
    
 -End,"
 ans, i = 0, 0
lis = []
while i <= int(len(objects))-1: # доступная переменная objects
    if objects[i] not in lis:
        lis.append(objects[i])
        ans += 1
    i += 1

print(ans)
 -End,"
 def closest_mod_5(x):
    y = x
    while y%5 != 0:
        y += 1
    return y

 -End,"
 def fib(n):
    # put your code here
    a = b = 1
    if n == 1 or 0: return 1
    else: 
        for i in range(2, n):
            a, b = a + b, a
        return a
def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main() -End,"
 import numpy as np
print(np.eye(3, 4, k=1) + 2 * np.eye(3, 4, k=0)) -End,"
 import numpy as np
print(mat.reshape(12,1))
 -End,"
 rash_sh = input()
sh = input()
m = str.maketrans(rash_sh,sh)
rash = input()
print(str(rash).translate(m))
n = str.maketrans(sh, rash_sh)
shif = input()
print(str(shif).translate(n))
 -End,"
 print(int(input())*60 + int(input()))




 -End,"
 X=int(input())
print(str(X//60 )+ '\n'+ str(X - X//60 *60) ) -End,"
 # put your python code here
N = int(input())
pust = {}
slov = {}
for i in range(N):
    slov[input().lower()] = i
M = int(input())
for i in range(M):
    ne_slov = input().lower().split()
    for j in range(len(ne_slov)):
        if (ne_slov[j] not in slov) and (ne_slov[j] not in pust):
            pust[ne_slov[j]] = j
            print(ne_slov[j])




 -End,"
 s, a, b = input(),input(), input()
k = 0; d = 0
while a in s:
    s = s.replace(a,b)
    k += 1
    if (a in b) and (a in s):
        print('Impossible')
        d = 1
        break
if d != 1:
    print(k)
 -End,"
 import sys
s, t = sys.stdin.read().split('\n')
d = 0                           
while s.find(t) != -1:
    if s.startswith(t) == True:
        d += 1
    s = s.replace(s[0], '',1)
print(d) -End,"
 import requests
import re
str1 = input()
str2 = input()
d = False
a = requests.get(str1).text
if requests.get(str1).status_code == 200:
    for i in re.findall(r'''<a href=['""](.*?)['""]''',a):
 
            
        j = requests.get(i).text
        if requests.get(i).status_code == 200:
            for k in re.findall(r'''<a href=['""](.*?)['""]''',j):
                if k == str2:
                    d = True
if d == True:
    print('Yes')
else:
    print('No')
            
      
                
            
        
        

 -End,"
 def dfs(graph, start):
    visited, stack = [], [start]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.append(vertex)
            stack.extend(set(graph[vertex]) - set(visited))
    return visited

from collections import defaultdict

graph = defaultdict(list)

for i in range(int(input())):
    a = input().split(':')
    if len(a) == 1:
        continue
    for k in a[1].split():
        graph[a[0].strip()].append(k) 
for x in range(int(input())):
    b = input().split()
    if b[0] in (dfs(graph,b[1])):
        print('Yes')
    else:
        print('No') -End,"
 import pandas as pd
my_data = pd.DataFrame({'type': ['A','A','B','B'],'value': [10,14,12,23]})



 -End,"
 import pandas as pd    
# переменная my_stat уже создана
subset_1 = my_stat.iloc[:10,[0,2]]
subset_2 = my_stat.drop([0,4],axis = 0).iloc[:,[1,3]]
 -End,"
 import pandas as pd    
# переменная my_stat уже создана
subset_1 = my_stat[(my_stat.V1 > 0) & (my_stat.V3 == 'A')]
subset_2 = my_stat[(my_stat.V2 != 10) | (my_stat.V4 >= 1)]




 -End,"
 import pandas as pd    
# переменная my_stat уже создана
my_stat['V5'] = my_stat['V1'] + my_stat['V4']
my_stat['V6'] = np.log(my_stat['V2'])


 -End,"
 import pandas as pd    
# переменная my_stat уже создана
my_stat = my_stat.rename(columns = {'V1':'session_value', 'V2':'group', 'V3':'time', 'V4':'n_users'})



 -End,"
 import pandas as pd    
# переменная my_stat уже создана
my_stat.session_value = my_stat.session_value.fillna(0)
my_stat.loc[my_stat['n_users'] < 0,'n_users'] = my_stat.loc[my_stat['n_users'] >= 0,'n_users'].median()

 -End,"
 import pandas as pd
# переменная my_stat уже создана
mean_session_value_data = my_stat.groupby('group',as_index=False).agg({'session_value': 'mean'}).rename(columns={'session_value' : 'mean_session_value'})




 -End,"
 import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris


iris = load_iris()
X = iris.data
y = iris.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
dt = DecisionTreeClassifier().fit(X_train, y_train)
predicted = dt.predict(X_test) -End,"
 import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import load_iris


iris = load_iris()
X = iris.data
y = iris.target

parametrs = {'max_depth': range(1,11), 'min_samples_split': range(2,11), 'min_samples_leaf': range(1,11)}
search = GridSearchCV(DecisionTreeClassifier(),parametrs)
best_tree  = search.estimator -End,"
 import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import RandomizedSearchCV
from sklearn.datasets import load_iris


iris = load_iris()
X = iris.data
y = iris.target

parametrs = {'max_depth': range(1,11), 'min_samples_split': range(2,11), 'min_samples_leaf': range(1,11)}
search = RandomizedSearchCV(DecisionTreeClassifier(),parametrs, cv = range(1,11))
best_tree  = search.estimator -End,"
 import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV

X_train = train.drop('y', axis=1)
y_train = train['y']
parametrs = {'max_depth': range(1,11), 'min_samples_split': range(2,11), 'min_samples_leaf': range(1,11)}
search = GridSearchCV(DecisionTreeClassifier(),parametrs, cv = 5).fit(X_train, y_train)
best_tree = search.best_estimator_
predictions = best_tree.predict(test)




 -End,"
 import pandas as pd
from sklearn.metrics import confusion_matrix

conf_matrix = confusion_matrix(y, predictions)


 -End,"
 import pandas as pd
from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=15,max_depth=5)
predictions = rf.fit(x_train, y_train).predict(x_test)

 -End,"
 sorted_items = sorted(items, key=lambda x: x[1][-1])




 -End,"
 import torch

X = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
limit = int(input())

larger_than_limit_sum = (X[X>limit]).sum()

print(larger_than_limit_sum) -End,"
 # put your python code here
a, b =[int(input()) for i in range(1,3)]
print(a//b)


 -End,"
 # put your python code here
a,b,c = [int(input()) for i in range(3)]
print(a // 2 + a % 2 + b // 2 + b % 2 + c // 2 + c % 2)



 -End,"
 import numpy as np

def no_numpy_mult(first, second):
    r=[]
    result=[]
    for i in range(len(first)):
        for j in range(len(second[0])):
            sums=0
            for k in range(len(second)):
                sums=sums+(first[i][k]*second[k][j])
            r.append(sums)
        result.append(r)
        r=[]
    return result
    
    for i in range(len(first)):
        for j in range(len(second[0])):
            for k in range(len(second)):
                result[i][j] += first[i][k] * second[k][j]
    return result

def numpy_mult(first, second):
    return np.dot(first,second)
 -End,"
 import numpy as np

def no_numpy_scalar(v1, v2):
    return sum([v1[i]*v2[i] for i in range(len(v1))])

def numpy_scalar (v1, v2):
    return np.dot(v1,v2) -End,"
 import numpy as np

def diag_2k(a):
    return a.diagonal()[a.diagonal() % 2 == 0].sum() -End,"
 import numpy as np

def cumsum(A):
    return np.cumsum(A, axis=1) -End,"
 import numpy as np

def encode(a):
    b = [a[i] for i in range(len(a)) if a[i] != a[i-1]]
    c = 1
    d = []
    for i in range(0,len(a)-1):
        if a[i]==a[i+1]:
            c += 1
        else: 
            d.append(c)
            c = 1
        if (i+1 == len(a)-1) and (a[i] == a[i+1]):
            d.append(c)
        
    return (b,d)
 -End,"
 import numpy as np

def transform(X, a=1):
    mas = [a if i%2 == 1 else X[i] for i in range(len(X))]
    mas1 = [mas[i]**3 if i%2 == 0 else a for i in range(len(mas)-1,-1,-1)]
    return np.concatenate((X,mas1),axis=0) -End,"
 # put your python code here
H,A,B = [int(input()) for i in range(3)]
i = 1
while H-A > 0:
    i += 1
    H = H + B - A
print(i)


 -End,"
 N = int(input())
print(*[i for i in range(N+1,N+3) if i%2==0]) -End,"
 count = 0; len1 = 0
          
for i in input().split():
    if i == 'A':
        count += 1
    len1 += 1
print(""%.2f""%(count/len1))



 -End,"
 A,B,N = [int(input()) for i in range(3)]
print(A*N+B*N//100,B*N%100)



 -End,"
 N,M,X,Y = [int(input()) for i in range(4)]
print(min(abs(min(M,N)-X),abs(max(M,N)-Y),X,Y))
 -End,"
 a = int(input())
if a%400==0 or ((a%100!=0) and a%4==0):
    print('Leap')
else: 
    print('Regular')



 -End,"
 print(int(input())%100//10)



 -End,"
 login = 100500
password = 424242
l,p = input().split()
print(*['Login success' for i in range(0,1) if (str(login)==l) and (str(password)==p)])
print(*['Wrong password' for i in range(0,1) if (str(login)==l) and (str(password)!=p)])
print(*['No user with login {} found'.format(l) for i in range(0,1) if str(login)!=l ])
 -End,"
 # put your python code here
a = [int(input()) for i in range(0,2)]
print(a[1]//a[0])

 -End,"
 print(sum([int(i) for i in input()])) -End,"
 n = int (input())
if n % 10 == 1 and n % 100 != 11:
  print (n, 'программист')
elif 2 <= n % 10 <= 4 and (n % 100 < 12 or n % 100 > 14):
  print (n, 'программиста')
else:
  print (n, 'программистов') -End,"
 n = int (input())
n_left = n // 100000 + n // 10000 % 10 + n // 1000 % 10
n_right = n // 100 % 10 + n // 10 % 10 + n % 10
if n_left == n_right:
  print ('Счастливый')
else:
  print ('Обычный') -End,"
 a = int (input())
b = int (input())
if a == b:
  d = a
elif a < b:
  d = b
  while d % a != 0:
    d += b
else:
  d = a
  while d % b != 0:
    d += a
print (d)   -End,"
 n = int (input())
while n <= 100:
  if n < 10:
    n = int (input())
    continue
  print (n) 
  n = int (input()) -End,"
 s = input()+' ' # к введенной строке сразу прибавляем пробел
s1 = '' #новая строка, куда записываем сжатый результат
counter = 1 #счётчик повторений букв
for i in range (len(s)-1):
  if s[i] == s[i + 1]:
    counter += 1
  else:
    s1 += s[i] + str(counter)
    counter = 1
print (s1)   -End,"
 a = [int(i) for i in input().split()]
if len(a) == 1:
  print (a[0])
else:
  for i in range(len(a)):
   if i != len(a) - 1:
     print (a[i - 1] + a[i + 1], end=' ')
   else:
     print (a[i - 1] + a[0]) -End,"
 a = [i for i in input().split()]
b = sorted(a) + [' '] # создание нового отсортированного списка и добавление в конец пробела
k = 1 # счётчик повторений
for i in range (len(b) - 1):
  if b[i] == b[i + 1]:
    k += 1
  elif k != 1:
    k = 1
    print (b[i], end=' ') -End,"
 a=[]
a.append(int(input()))
s = a[0]
while s != 0:
 a.append(int(input()))
 s += a[len(a) - 1]
s2 = 0
for i in a:
  s2 += i * i
print (s2) -End,"
 n = int(input())
s = []
i = 1
while len(s) <= n:
  a = [i] * (i)
  s += a
  i += 1
for i in range(n):
  print (s[i], end=' ') -End,"
 a = [int(i) for i in input().split()]
x = int(input())
k = True
for i in range (len(a)):
  if a[i] == x:
    print (i, end="" "")
    k = False
if k: print (""Отсутствует"") -End,"
 # Цикл с заполнением матрицы, пока не будет введена строка ""end"":
matrix = []
while True: 
  temp = input().split()
  if temp[0] != 'end':
    stroka = []
    for i in temp: #переносим из temp цифры в stroka, преобразуя их в вещественные числа
      stroka.append(int(i))
    matrix.append(stroka)
  else: break #выход из цикла заполнения матрицы

#Создание новой матрицы и заполнение ее нулями
mnew = [[0 for j in range (len(matrix[i]))] for i in range (len(matrix)) ]

# Выполнение расчётов и заполнение новой матрицы:
for i in range (len(matrix)): #цикл по всем строкам старой матрицы
  for j in range (len(matrix[i])): #цикл по всем столбцам старой матрицы

    # если строка последняя, то в формуле для вычисления вместо [i+1] --> [0]
    if i == (len(matrix) - 1) and j != (len(matrix[i]) - 1):
      temp = matrix[i-1][j] + matrix [0][j] + matrix[i][j-1] + matrix[i][j+1]
    
    # если столбец последний, то в формуле для вычисления вместо [j+1] --> [0]  
    elif i != (len(matrix) - 1) and j == (len(matrix[i]) - 1):
      temp = matrix[i-1][j] + matrix [i+1][j] + matrix[i][j-1] + matrix[i][0]

    # если и строка и столбец последние, то в формуле вместо [i+1] --> [0] и [j+1] --> [0]  
    elif i == (len(matrix) - 1) and j == (len(matrix[i]) - 1):
      temp = matrix[i-1][j] + matrix [0][j] + matrix[i][j-1] + matrix[i][0]

    # в остальных случаях формула обычная:  
    else:
      temp = matrix[i-1][j] + matrix [i+1][j] + matrix[i][j-1] + matrix[i][j+1]
    mnew[i][j] = temp

# Распечатка новой матрицы:
for i in range (len(mnew)):
  print()
  for j in range (len(mnew[i])):
    print (mnew[i][j],'', end='') -End,"
 #Создание матрицы n x n и заполнение ее нулями:
n = int(input())
a = [[0 for j in range(n)] for i in range(n)] 

#Заполнение матрицы числами по спирали:
i, j, count = [0, -1, 0]
while count < n * n:
  while j < n - 1 and a[i][j+1] == 0: #движение вправо
    j += 1
    count += 1
    a[i][j] = count
  while i < n - 1 and a[i+1][j] == 0: #движение вниз
    i += 1
    count += 1
    a[i][j] = count
  while j > 0 and a[i][j-1] == 0: #движение влево
    j -= 1
    count += 1
    a[i][j] = count
  while i > 0 and a[i-1][j] == 0: #движение вверх
    i -= 1
    count += 1
    a[i][j] = count

#Распечатка матрицы:
for i in range (n):
  print()
  for j in range (n):
    print (a[i][j],'', end='') -End,"
 stroka = input().lower().split()
slovar = {}
slovar = slovar.fromkeys(stroka, 0)
for i in stroka:
  if i in slovar.keys(): 
    slovar[i] += 1
for i in slovar: print (i,slovar[i])  -End,"
 n = int(input())
tab = {}
#                   0     1       2        3        4
# tab ={Команда : [Игр, Побед, Ничьих, Поражений, Очков]}
for i in range(n):
  result = input().split(';')
  #               0          1         2         3
  # result = [Команда 1 , голы(1), Команда 2, голы(2)]

  if result[1] > result[3]:
    if result[0] not in tab.keys(): tab[result[0]]=[0,0,0,0,0]
    tab[result[0]][0] += 1 # добавляем Команде 1 кол-во игр
    tab[result[0]][1] += 1 # добавляем Команде 1 кол-во побед
    tab[result[0]][4] += 3 # добавляем Команде 1 кол-во очков

    if result[2] not in tab.keys(): tab[result[2]]=[0,0,0,0,0]
    tab[result[2]][0] += 1 # добавляем Команде 2 кол-во игр
    tab[result[2]][3] += 1 # добавляем Команде 2 кол-во поражений
  
  elif result[1] < result[3]:
    if result[2] not in tab.keys(): tab[result[2]]=[0,0,0,0,0]
    tab[result[2]][0] += 1 # добавляем Команде 2 кол-во игр
    tab[result[2]][1] += 1 # добавляем Команде 2 кол-во побед
    tab[result[2]][4] += 3 # добавляем Команде 2 кол-во очков
    
    if result[0] not in tab.keys(): tab[result[0]]=[0,0,0,0,0]
    tab[result[0]][0] += 1 # добавляем Команде 1 кол-во игр
    tab[result[0]][3] += 1 # добавляем Команде 1 кол-во поражений
  
  else:
    if result[0] not in tab.keys(): tab[result[0]]=[0,0,0,0,0]
    tab[result[0]][0] += 1 # добавляем Команде 1 кол-во игр
    tab[result[0]][2] += 1 # добавляем Команде 1 кол-во ничьих
    tab[result[0]][4] += 1 # добавляем Команде 1 кол-во очков

    if result[2] not in tab.keys(): tab[result[2]]=[0,0,0,0,0]
    tab[result[2]][0] += 1 # добавляем Команде 2 кол-во игр
    tab[result[2]][2] += 1 # добавляем Команде 2 кол-во ничьих
    tab[result[2]][4] += 1 # добавляем Команде 2 кол-во очков
for i in tab.keys():
    print (i+"":"", end='')
    for j in tab[i]:
        print(j,'', end='')
    print() -End,"
 line1 = input()
line2 = input()
text1 = input()
text2 = input()

for i in text1:
  print (line2[line1.find(i)], end='')

print()

for i in text2:
  print (line1[line2.find(i)], end='') -End,"
 # Запись словаря в множество slovar:
slovar = set()
for i in range(int(input())):
  slovar.add(input().lower())

# Получение строк и сохранение слов из них в множество text:
text = set()
for i in range(int(input())):
  line = input().lower().split()
  for j in line:
      text.add(j)

# Вычитание slovar из text и вывод слов с ошибками:
text -= slovar
for i in text: print(i) -End,"
 x, y = 0, 0 
for i in range(int(input())):
  path = input().split()
  if path[0] == 'север' : y += int(path[1])
  if path[0] == 'юг'    : y -= int(path[1])
  if path[0] == 'запад' : x -= int(path[1])
  if path[0] == 'восток': x += int(path[1])
print (x,y) -End,"
 ids = set()
for i in objects:
    ids.add(id(i))
print (len(ids)) -End,"
 def closest_mod_5(x):
    y = x
    while y % 5 != 0:
        y += 1
    return y -End,"
 def cnk (n, k):
  if k == 0 or k == n : return 1
  if k > n : return 0
  return cnk (n - 1, k) + cnk (n - 1, k - 1)

n, k = map(int, input().split())
print (cnk(n, k)) -End,"
 # Функция добавления пространства имен в глобальный список nslist
def nslist_mod (now_list, new_ns, parent_ns):
  for i in now_list:
    if i == parent_ns: #если нашли список (пространство) в котором надо создать новый спискок (подпространство)
      now_list.append([new_ns]) # то создаем его
      return now_list
    elif type(i) == list: # если список не родительский, то заходим в него и ищем уже в нем с помощью рекурсии
        answer = nslist_mod(i, new_ns, parent_ns)
        if answer != None:    
          now_list.remove(i)
          now_list.append(answer)
          return now_list

# Функция добавления переменных в глобальный список nslist
def nslist_add (now_list, parent_ns, var):
  for i in now_list:
    if i == parent_ns: # если нашли список (пространство), в которое надо записать переменную
      now_list.append(var) # то добавляем ее в список (пространство)
      return now_list
    elif type(i) == list: # если список (пространство) не родительское, то заходим в него и ищем уже в нем с помощью рекурсии
        answer = nslist_add(i, parent_ns, var)
        if answer != None:    
          now_list.remove(i)
          now_list.append(answer)
          return now_list

# Функция поиска переменных в пространствах имен
def nslist_get (now_list, asked_ns, var):
  if now_list[0] == asked_ns and var in now_list: return now_list[0] # если искомая переменная находится в заданном списке (пространстве), то return 'название списка' и возвращаемся в родительское пространство
  elif now_list[0] == asked_ns and var not in now_list: return 0 # если найден заданный список, а переменной в нем нет, то return 0 и возвращаемся в родительский список (пространство)
  else: # если заданный список (пространство) еще не найден, то продолжаем перебирать списки и уходить вглубь каждого из них с помощью рекурсии, пока не найдем заданный список (пространство)
    for i in now_list:
      if type(i) == list:
        answer = nslist_get (i, asked_ns, var)
        if answer == 0:
          if var in now_list: return now_list[0]
          else: return 0
        elif answer != None: return answer

# ОСНОВНОЙ КОД ПРОГРАММЫ:
nslist = ['global'] # список вложенных списков имитирующий структуру пространств имен и переменных в нем
'''
Например, для команд из условия задачи список nslist будет выглядеть так:
nslist = ['global', 'a', ['foo', 'b', ['bar', 'a']]]
'''
for i in range(int(input())):
  command = input().split()

  if command[0] == ('create'): # если поступила команда создать пространство имен
    nslist = nslist_mod(nslist, command[1], command[2]) #то обращаемся к функции nslist_mod
  
  elif command[0] == ('add'): # если поступила команда создать переменную
    nslist = nslist_add(nslist, command[1], command[2]) #то обращаемся к функции nslist_add
   
  elif command[0] == ('get'): # если поступила команда найти принадлежность переменной
    answer = nslist_get (nslist, command[1], command[2]) #то обращаемся к функции nslist_get
    if answer == 0: print ('None')
    else: print (answer) -End,"
 class MoneyBox:
  
  def __init__(self, capacity, money = 0):
    self.capacity = capacity
    self.money = money
  
  def can_add (self, v):
    if self.capacity - self.money >= v: return True
    else: return False 
  
  def add (self, v):
    self.money += v
 -End,"
 class Buffer:
  
  def __init__(self):
    self.lst = []
  
  def add(self, *a):
    self.lst += a
    while len(self.lst) >= 5:
      print (sum(self.lst[i] for i in range(5)))
      for i in range (5): self.lst.pop(0)
  
  def get_current_part(self):
    return (self.lst) -End,"
 def is_parent (class1, class2):
  if class2 in parents.keys():
    if class1 in parents[class2]: 
      return True
    else: 
      for i in parents[class2]:
        if is_parent(class1,i) == True: return True


parents = {}
# Заполняем словарь {класс : прямые предки}
for i in range(int(input())):
  temp = input().split()
  parents[temp[0]] = temp[2:]
# Принимаем запросы:
for i in range(int(input())):
  class1, class2 = input().split()
  if class1 == class2: print ('Yes') # Тупой запрос, который есть в тестах!
  elif is_parent(class1, class2) == True: print ('Yes')
  else: print ('No') -End,"
 class ExtendedStack(list):
  def sum(self):
    top1 = self.pop()
    top2 = self.pop()
    self.append(top1 + top2)

  def sub(self):
    top1 = self.pop()
    top2 = self.pop()
    self.append(top1 - top2)

  def mul(self):
    top1 = self.pop()
    top2 = self.pop()
    self.append(top1 * top2)

  def div(self):
    top1 = self.pop()
    top2 = self.pop()
    self.append(top1 // top2) -End,"
 # Функция проверки на родительство:
def is_parent (class1, class2):
  if class2 in parents.keys():
    if class1 in parents[class2]: 
      return True
    else: 
      for i in parents[class2]:
        if is_parent(class1,i) == True: return True


# Создаем и заполняем словарь {класс исключений: его предки}
parents = {} 
for i in range(int(input())):
  temp = input().split()
  parents[temp[0]] = temp[2:]

# Заполняем список в порядке, в котором в программе записаны исключения:
Order = [] 
for i in range(int(input())):
  Order.append(input())

# Проверяем:
for i in range(len(Order)): # цикл по исключениям, записанным в программном коде 
  if Order.index(Order[i]) < i: #  Если ранее в списке стоит точно такое же исключение!!!
    print (Order[i])
    break
  for j in range(i): # цикл по исключениям, стоящим до i-го элемента
    if is_parent (Order[j], Order[i]) == True:
      print (Order[i])
      break -End,"
 from datetime import timedelta, datetime

Y, M, D = input().split()
date = datetime(int(Y), int(M), int(D))
days = timedelta (int(input()))
newdate = date + days
print (newdate.year, newdate.month, newdate.day) -End,"
 def primes():
    k = 1
    while True:
        k += 1
        res = True
        for i in range(2, k//2 + 1):
            if k % i == 0:
                res = False
        if res:
            yield k -End,"
 s, a, b = input(), input(), input()
i = 0
while i <= 1000:
  sprev = s
  s = s.replace(a, b)
  if sprev == s and a in s or a in b and a != b:
    print('Impossible')
    break
  elif sprev == s: 
    print(i)
    break
  i += 1
if i == 1000:
  print('Impossible') -End,"
 s, t = input(), input()
k = 0
i = s.find(t)
while i != -1:
  k += 1
  i = s.find(t,i+1)
print(k) -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    if len(re.findall(""cat"", line)) >= 2:
      print(line) -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    if bool(re.findall(r""\b\W*?cat\W*?\b"", line)):
      print(line) -End,"
 import re
import sys

for line in sys.stdin:
  line = line.rstrip()
  if re.search(r""z.{3}z"", line):
    print(line) -End,"
 import re
import sys


for line in sys.stdin:
  line = line.rstrip()
  if re.search(r""\b(\S+)\1\b"", line):
    print(line) -End,"
 import re
import sys


for line in sys.stdin:
  line = line.rstrip()
  print(re.sub(r'human','computer', line)) -End,"
 import re
import sys


for line in sys.stdin:
  line = line.rstrip()
  print(re.sub(r'(\b\W*)(\w)(\w)(\W*)',r'\1\3\2\4', line)) -End,"
 import re
import sys


for line in sys.stdin:
  line = line.rstrip()
  match = re.fullmatch(r'[01]+', line) # Если строка - число в двоичной форме, то match != None
  if match: # Если match != None, то:
    k = 0
    for i in match.group(): # match.group() это наше двоичное число, которое надо проверить
      # Ниже идет проверка на делимость на 3 по методу ""трёх колес"" (хз как этот метод на самом деле называется :)
      if k == 0:
        if i == '1': k += 1
      elif k == 1:
        if i == '0': k += 1
        if i == '1': k -= 1
      elif k == 2:
        if i == '0': k -= 1
    if k == 0:
      print (line) -End,"
 import requests
import re


A, B = input(), input()
triger = False
A_inf = requests.get(A)
pattern_adress = r'<a href=\"".+\"">.+</a>'
for i in re.finditer(pattern_adress, A_inf.text):
    adress_to_C = i.group()[i.group().find('""')+1: i.group().rfind('""')]  # Очищаем полученный из A адрес от <a href=""..."">text</a>
    C_inf = requests.get(adress_to_C)
    if B in C_inf.text:
        print('Yes')
        triger = True
        break
if not triger:
    print('No') -End,"
 import requests
import re


A = input()
A_inf = requests.get(A)
pattern_link = re.compile(r'<a[^>]*?href=[\""\']([^\.\.].*?)[\""\'][^>]*?>')
domens = set()
# Очищение левой части полученных ссылок от имен протоколов, потом очищение правой части и занесение в множество domens:
for link in pattern_link.findall(A_inf.text):
    link = (re.sub(r'(http://|https://|ftp://)', '', link))  # Очищаем левую часть
    domens.add(re.sub(r'([/:].*)?', '', link))  # Очищаем правую часть и заносим в domens
    domens.discard('')  # Удаление пустого элемента, который мог возникнуть после очищения ссылок
sorted_domens = list(domens)  # Записываем домены из множества в список, чтобы их отсортировать
sorted_domens.sort()  # Сортируем список в алфавитном порядке
print('\n'.join(sorted_domens)) -End,"
 import json


# Функция проверяет являетя ли класс 1 предком класса 2
def is_parent (class1, class2):
  if class2 in parents.keys():
    if class1 in parents[class2]: 
      return True
    else: 
      for i in parents[class2]:
        if is_parent(class1,i) == True: return True

# Получаем данные в формате json и переводим их в формат python
data_json = input().strip()
data = json.loads(data_json)

# Создаем и заполняем словарь {класс : прямые предки}, а также создаем список классов ['A', 'B', 'C', ...]:
parents = {}
classes = []
for i in data:
  parents[i['name']] = i['parents']
  classes.append(i['name'])

# Считаем и выводим для каждого класса количество потомков:
for i in sorted(classes):
  counter = 0
  for j in classes:
    if i == j: counter += 1
    elif is_parent(i, j): counter += 1
  print(i,':',counter) -End,"
 from xml.etree import ElementTree


def runner(level, color, parent_element):
    global r, g, b
    if color == 'red':
        r += level
    elif color == 'green':
        g += level
    elif color == 'blue':
        b += level
    for element in parent_element:
        runner(level+1, element.attrib['color'], element)


r, g, b = 0, 0, 0
root = ElementTree.fromstring(input())
runner(1, root.attrib['color'], root)

print(r, g, b)
 -End,"
 s = input().split()
print(int(s[0]) + int(s[1])) -End,"
 s = [0, 1, 1]
n = int(input())
if n <= 2:
  print(s[n])
else:
  for i in range(3,n):
    s.append(s[i-2] + s[i-1])
  print(s[n-2] + s[n-1]) -End,"
 s = [0, 1, 1]
n = int(input())
if n <= 2:
  print(s[n])
else:
  for i in range(3, n+1):
    s.append((s[i-2] + s[i-1]) % 10)
  print(s[n]) -End,"
 s = [0, 1, 1]
n, m = map(int, input().split())
ost = -1  # остаток, которого точно не может быть

for i in range(3, n+1):
  s.append((s[-1] + s[-2]) % m)  # массив из остатков от деления на m

  # Проверка на начало нового периода Пизано:
  if s[-2] == 0 and s[-1] == 1:
    ost = s[n % (len(s) - 2)]
    break

# Если ответ лежит в первом периоде Пизано:
if ost == -1: 
  ost = s[n] % m

print(ost) -End,"
 a, b = map(int, input().split())
if a < b:
  a, b = b, a
while b !=0:
  a, b = b, a % b
print (a) -End,"
 s = []
for i in range(int(input())):
  a, b = map(int, input().split())
  s.append([a, b])
s = sorted(s, key = lambda r: r[1])  # сортируем s по правым краям отрезков

dots = [s[0][1]]  # множество искомых точек (первый элемент самый маленький правый край отрезка)
i = 1

while i <= len(s) - 1:
  if s[i][0] > dots[-1]:  # левый край рассматриваемого отрезка > последнего элемента в dots
    dots.append(s[i][1])  # добавляем правый край рассматриваемого отрезка в dots
    i += 1
  else: i += 1

print(len(dots))
print(*dots)  -End,"
 n, W = map(int, input().split())

cw = []  # список вещей [[стоимость, вес], ...]
for i in range(n):
  c, w = map(int, input().split())
  cw.append([c, w])
cw.sort(key = lambda cw: - (cw[0] / cw[1]))  # сортировка по возрастанию ценности на ед. веса

W_now = 0  # изменяемый вес мешка, при его наполнении
C = 0  # общая ценность вещей в мешке
for c, w in cw:
  if W - W_now >= w:
    C += c
    W_now += w
  else:
    C += (W - W_now)*c/w
    break

print('%.3f' % C)
 -End,"
 n = int(input())

terms = []
i = 1
while n > 0:
  if n - i >= 0:
    terms.append(i)
  else:
    terms[-1] += n
  n -= terms[-1]
  i += 1
print(len(terms))
print(*terms) -End,"
 import heapq  # модуль для работы с мин. кучей из стандартной библиотеки Python
from collections import Counter  # словарь в котором для каждого объекта поддерживается счетчик
from collections import namedtuple

# добавим классы для хранения информации о структуре дерева
# воспользуемся функцией namedtuple из стандартной библиотеки
class Node(namedtuple(""Node"", [""left"", ""right""])):  # класс для ветвей дерева - внутренних узлов; у них есть потомки
    def walk(self, code, acc):
        # чтобы обойти дерево нам нужно:
        self.left.walk(code, acc + ""0"")  # пойти в левого потомка, добавив к префиксу ""0""
        self.right.walk(code, acc + ""1"")  # затем пойти в правого потомка, добавив к префиксу ""1""

class Leaf(namedtuple(""Leaf"", [""char""])):  # класс для листьев дерева, у него нет потомков, но есть значение символа
    def walk(self, code, acc):
        # потомков у листа нет, по этому для значения мы запишем построенный код для данного символа
        code[self.char] = acc or ""0""  # если строка длиной 1 то acc = """", для этого случая установим значение acc = ""0""

def huffman_encode(s):  # функция кодирования строки в коды Хаффмана
    h = []  # инициализируем очередь с приоритетами
    for ch, freq in Counter(s).items(): # постоим очередь с помощью цикла, добавив счетчик, уникальный для всех листьев
        h.append((freq, len(h), Leaf(ch)))  # очередь будет представлена частотой символа, счетчиком и самим символом
    heapq.heapify(h)  # построим очередь с приоритетами
    count = len(h) # инициализируем значение счетчика длиной очереди
    while len(h) > 1:  # пока в очереди есть хотя бы 2 элемента
        freq1, _count1, left = heapq.heappop(h)  # вытащим элемент с минимальной частотой - левый узел
        freq2, _count2, right = heapq.heappop(h)  # вытащим следующий элемент с минимальной частотой - правый узел
        # поместим в очередь новый элемент, у которого частота равна суме частот вытащенных элементов
        heapq.heappush(h, (freq1 + freq2, count, Node(left, right))) # добавим новый внутренний узел у которого
                                                                     # потомки left и right соответственно
        count += 1  # инкрементируем значение счетчика при добавлении нового элемента дерева
    code = {}  # инициализируем словарь кодов символов
    if h:  # если строка пустая, то очередь будет пустая и обходить нечего
        [(_freq, _count, root)] = h  # в очереди 1 элемент, приоритет которого не важен, а сам элемент - корень дерева
        root.walk(code, """")  # обойдем дерева от корня и заполним словарь для получения кодирования Хаффмана
    return code  # возвращаем словарь символов и соответствующих им кодов


s = input()  # читаем строку длиной  до 10**4
code = huffman_encode(s)  # кодируем строку
encoded = """".join(code[ch] for ch in s)  # отобразим закодированную версию, отобразив каждый символ
                                          # в соответствующий код и конкатенируем результат
print(len(code), len(encoded))  # выведем число символов и длину закодированной строки
for ch in sorted(code): # обойдем символы в словаре в алфавитном порядке с помощью функции sorted()
    print(""{}: {}"".format(ch, code[ch]))  # выведем символ и соответствующий ему код
print(encoded)  # выведем закодированную строку
 -End,"
 def insert(x):
    s.append(x)
    father = len(s) // 2 - 1
    son = len(s) - 1
    while s[father] < s[son] and father >= 0:
        s[father], s[son] = s[son], s[father]  # Меняем местами родителя и добавленный элемент
        son = father
        father = (father + 1) // 2 - 1


def extract_max():
    print(s[0])
    s[0] = s[-1]
    s.pop(-1)
    father, son1, son2 = 0, 1, 2
    while son1 < len(s) and son2 < len(s):  # Пока у узла есть два сына:
        son_max = max(son1, son2, key=lambda x: s[x])
        if s[father] < s[son_max]:
            s[father], s[son_max] = s[son_max], s[father]  # Меняем местами родителя с наибольшим сыном
            father = son_max
            son1 = 2 * father + 1
            son2 = 2 * father + 2
        else:
            break
    if son1 < len(s) <= son2:  # Если у узла только один лист:
        if s[father] < s[son1]:
            s[father], s[son1] = s[son1], s[father]  # Меняем местами родителя и единственный лист


s = []
for i in range(int(input())):
    command = input()
    if command[0] == 'I':
        insert(int(command[7:]))
    else:
        extract_max()
 -End,"
 import sys


A = [int(i) for i in sys.stdin.readline().strip().split()]
B = [int(i) for i in sys.stdin.readline().strip().split()]
B.pop(0)
answer = []

for b in B:
    left, right = 1, len(A)
    trigger = 0
    m = (left + right) // 2
    while left <= right and left < len(A):
        if b > A[m]:
            left = m + 1
        elif b < A[m]:
            right = m - 1
        elif b == A[m]:
            answer.append(m)
            trigger = 1
            break
        m = (left + right) // 2
    if trigger == 0:
        answer.append(-1)
        
print(*answer) -End,"
 import sys


def merge(left, right):
    global counter
    merged_list = []
    len_l, len_r = len(left), len(right)
    begin_l, begin_r = 0, 0
    while len_l > 0 and len_r > 0:
        if left[begin_l] > right[begin_r]:
            merged_list.append(right[begin_r])
            len_r -= 1
            counter += len_l
            begin_r += 1
        else:
            merged_list.append(left[begin_l])
            len_l -= 1
            begin_l += 1
    if len_l > 0:
        merged_list += left[begin_l:]
    elif len_r > 0:
        merged_list += right[begin_r:]
    return merged_list


counter = 0
n = int(input())
A = [[int(i)] for i in sys.stdin.readline().split()]
k = 0
begin = 0

while n > 1:
    if k == 0 and n > 2:
        if n % 2 != 0:
            A.append(merge(A.pop(-2), A.pop(-1)))
            n -= 1
        k = n // 2
    A.append(merge(A[begin], A[begin+1]))
    n -= 1
    k -= 1
    begin += 2
print(counter) -End,"
 # put your python code here
max1 = 0
max2 = 0
for i in range (1, 1001):
    n = int(input())
    if n == 0:
        break
    elif n >= max1 and max1 >= max2:
        max2 = max1
        max1 = n   
    elif n >= max2:
        max2 = n
print(max2)
 -End,"
 # put your python code here
n, num = int(input()), int(input())
min = num
cnt = 1
for i in range(1, n):
    num = int(input())
    if num < min:
        min = num
        cnt = 1
    elif num == min:    
        cnt += 1    
print(cnt)
 -End,"
 # put your python code here
n, sum = int(input()), 0
while n != 0:
    k = n % 10
    sum += k
    n = n//10      
    if n == 0 and sum >= 10:
        n = sum
        sum = 0
print(sum)
 -End,"
 # put your python code here
a, b = int(input()), int(input()) 
max = -(10**4)
otv = 'NO'
for i in range (a, b+1):
    if i > max and i % 7 == 0:
        max = i
        otv = i
    i += 1
print(otv)
 -End,"
 # put your python code here
s = input()
l = len(s)
cnt = 0
for i in range(0, l):
    if s[i] == ' ':
        cnt += 1
print(cnt+1)        
 -End,"
 # put your python code here
s = input()
k = int(input())
print(s[0:k-1] + s[k:len(s)])   
 -End,"
 # put your python code here
s = input()
for i in s:
    cnt = 0
    for j in s:
        if i == j:
            cnt += 1
    if cnt == 2:
        print(i)
        break
 -End,"
 # put your python code here
s = input()
print(' '.join(s.split()))
     -End,"
 # put your python code here
a, b = input(), input()
if ord(a) < ord(b):
    l1 = a
    l2 = b
else:
    l1 = b
    l2 = a
for i in range(ord(l1), ord(l2)+1):
    print(chr(i), end = ' ')
     -End,"
 # put your python code here
s = input()
vowels = ['a', 'e', 'i', 'o', 'u']
cnt = 0
for i in range(0, len(s)):
    if s[i] in vowels:
        cnt += 1
print(cnt)
 -End,"
 # put your python code here
s, s1 = input(), ''
for i in range(len(s)):
    if s[i] == 'e':
        s1 += 'i'
    else:
        s1 += s[i]      
print(s1)
 -End,"
 # put your python code here
s = input()
for i in range(len(s)):
    if s[i].isdigit():
        print(s[i], end = ' ')
 -End,"
 # put your python code here
n = int(input())
s = input().split()
for i in range(n):
    if int(s[i]) % 3 == 0:
        print(s[i], end = ' ')
 -End,"
 # put your python code here
n = int(input())
s = input().split()
a = [int(i) for i in s]
cnt = 0
for i in range(1,n):
    if a[i] > a[i-1]:
        cnt += 1    
print(cnt)
 -End,"
 # put your python code here
n = int(input())
a = [int(i) for i in input().split()]
cnt = 0
for i in range(1,n):
    if a[i] * a[i-1] > 0:    
        cnt = 1
        break
    else:
        cnt = 0
if cnt == 1:        
    print('YES')
else:
    print('NO')
 -End,"
 # put your python code here
n = int(input())
a = [int(i) for i in input().split()]
numMin = a[0]
indMin = 0
for i in range(n):
    if a[i] < numMin:
        numMin = a[i]
        indMin = i
print(indMin)
         -End,"
 # put your python code here
n = int(input())
a = [int(i) for i in input().split()]
x, y = min(a), max(a)
indX,indY = 0,0
for i in range(n):
    if a[i] == x:
        indX = i
        break
for i in range(n):
    if a[i] == y:
        indY = i  
a[indX], a[indY] = a[indY], a[indX]        
for i in a:
    print(i, end = ' ')
 -End,"
 # put your python code here
n = int(input())
a = [int(i) for i in input().split()]
otv = 'NO'
for i in a:
    cnt = 0    
    for j in range(n):
        if a[j] == i:
            cnt += 1
            if cnt > 1:
                otv = 'YES'
                break
print(otv)
 -End,"
 # put your python code here
n = int(input())
a = [int(i) for i in input().split()]
for i in a:
    cnt = 0    
    for j in range(n):
        if a[j] == i:
            cnt += 1
    if cnt == 1:
        print(i, end = ' ')
 -End,"
 # put your python code here
n = int(input())
for i in range(n):
    for j in range(n):    
        if j == n-1-i:
            print(1, end = ' ')
        elif j < n-1-i:
            print(0, end = ' ')
        elif j > n-1-i:
            print(2, end = ' ')    
    print()
 -End,"
 # put your python code here
n = int(input())
a = []
sim = 0
for i in range(n):
    row = input().split()
    for j in range(len(a)):
        row[i] = int(row[i])
    a.append(row)    
for i in range(n):
    for j in range(n): 
        if j != i and a[i][j] == a[j][i]:
            sim += 1    
if sim == n**2 - n:
    print('YES')
else:
    print('NO')
 -End,"
 # put your python code here
n,m = (int(i) for i in input().split())
a = [[1 for j in range(m)] for i in range(n)]
for i in range(n):
    for j in range(m):
        if i == 0 or j == 0:
            print(1, end = ' ')
        else:
            a[i][j] = a[i-1][j]+a[i][j-1]
            print(a[i-1][j]+a[i][j-1], end = ' ')
    print()
 -End,"
 # put your python code here
n,m = (int(i) for i in input().split())
a = []
MaxSum, MaxStr = 0, 0
for i in range(n):
    a.append(input().split())
for i in range(n):
    sum = 0
    for j in range(m):
        sum += int(a[i][j])
    if MaxSum < sum:
        MaxSum, MaxStr = sum, i
print(MaxSum) 
print(MaxStr) 
 -End,"
 # put your python code here
n, s = int(input()), input().split()
cnt = 0
for i in s:
    if int(i) % 2 == 0:
        print(i, end = ' ')
        cnt += 1
print()        
print(cnt)
 -End,"
 # put your python code here
n = int(input())
a = [int(i) for i in input().split()]
cnt = 0
for i in range(1,n):
    if a[i-1] < a[i]:
        cnt += 1    
print(cnt)
 -End,"
 # put your python code here
n = int(input())
a = [int(i) for i in input().split()]
cnt = 0
for i in range(n):
    if int(a[i]) % 3 == 0 and int(a[i]) % 10 == 7:
        cnt += 1
for i in range(n):
    if int(a[i]) % 3 == 0 and int(a[i]) % 10 == 7:
        a[i] = cnt
    print(a[i], end = ' ')
     -End,"
 # put your python code here
n = int(input())
a = [int(i) for i in input().split()]
cnt = 1
for i in range(1,n):
    if a[i-1] != a[i]:
        cnt += 1
print(cnt)
 -End,"
 # put your python code here
n = int(input())
a = [int(i) for i in input().split()]
b = int(input())
cnt = 1
for i in a:
    if b <= int(i):
        cnt += 1
print(cnt)

 -End,"
 # put your python code here
n = int(input())
n = n % 1000
a = n // 100
a1 = n % 100
b = a1 // 10
c = a1 % 10
print(a+b+c)
 -End,"
 # put your python code here
def tipeCh(a):
    cnt,i = 1, 2
    while i <= a:
        if a % i == 0:
            cnt += 1
            a = a // i
            i = 2
        else:
            i += 1   
    return cnt

n = int(input())
if tipeCh(n) == 2:
    print('prime')
else:
    print('composite')
 -End,"
 # put your python code here
def sign(x):
    if x < 0:
        return -1
    elif x == 0:
        return 0
    else:
        return 1

a,b = (int(i) for i in input().split())
print(sign(a) + sign(b))
 -End,"
 # put your python code here
def factorial(x):
    f = 1
    for i in range(1,x+1):
        f *= i
    return f    
    
n,k = int(input()),int(input())
print(factorial(n) // (factorial(k) * factorial(n-k)))
 -End,"
 # put your python code here
def midAr(a):
    sum = 0
    for i in range(1,a+1):
        sum += i
    return sum/a

n, m = int(input()), int(input())
print((midAr(n) + midAr(m)))
 -End,"
 # put your python code here
def SumRange(x,y):
    sum = 0
    if x > y:
        return sum
    else:
        for i in range(x, y+1):
            sum += i
        return sum
    
a,b,c = int(input()),int(input()),int(input())
sum = SumRange(a,b) + SumRange(b,c)
print(sum)
 -End,"
 # put your python code here
def rev(a):
    return int(a[::-1])
x,y = input(),input()
print(rev(x) + rev(y))
 -End,"
 # put your python code here
def fact(x): 
    f = 1
    if x % 2 == 0:
        n = 2
    else:
         n = 1
    for i in range(n,x+1,2):
        f *= i
    return f
  
a,b,c = int(input()),int(input()),int(input())
print(str(fact(a)) + ' ' +  str(fact(b)) + ' ' + str(fact(c)))
 -End,"
 # put your python code here
def sumN(x):
    sum = 0
    while x != 0:
        sum += x % 10
        x = x // 10
    return sum

a,b = int(input()),int(input())
if sumN(a) > sumN(b):
    print(1)
elif sumN(a) < sumN(b):
    print(2)
else:
    print(0)
 -End,"
 # put your python code here
def lenN(a,b):
    if len(a) > len(b):
        return 1
    elif len(a) < len(b):
        return 2
    else:
        return 0

print(lenN(input(),input()))
 -End,"
 # put your python code here
def sumB(x):
    cnt = 0
    for i in x:
        if i == 'b':
            cnt += 1    
    return cnt

print(sumB(input()) + sumB(input()))
 -End,"
 # put your python code here
s = input()
s1 = ''
cnt = 1
if len(s) == 1:
    print(s + str(1))
else:
    for i in range(len(s)-1):
        if s[i] == s[i+1]:
            cnt += 1
        else:
            s1 += s[i] + str(cnt)
            cnt = 1
    s1 = s1 + s[i+1] + str(cnt)    
    print(s1)
 -End,"
 # put your python code here
lst = [int(i) for i in input().split()]
n = int(input())
if lst.count(n) == 0:
    print('Отсутствует')
else:
    for i in range(len(lst)):
        if lst[i] == n:   
            print(i, end = ' ')
 -End,"
 # put your python code here
b,m = [],0
a = input().split()
if a != []:
    while a[0] != 'end':
        b.append([int(i) for i in a])     
        m += 1
        a = input().split()     
    n = len(b[0])
    if n == 1 and m == 1:
        print(sum(b[0] * 4))
    elif n == 1 and m > 1:
        for i in range(n): 
            for j in range(m): 
                print(sum(b[j]+b[j]+b[j-1]+b[j-m+1]))    
    elif n > 1 and m == 1: 
        b = b[0]
        for i in range(n): 
            print(b[i-1]+b[i-n+1]+b[i]+b[i], end = ' ')
    else:
        for i in range(m): 
            for j in range(n): 
                print(b[i-1][j]+b[i-m+1][j]+b[i][j-1]+b[i][j-n+1], end = ' ')
            print()
 -End,"
 # put your python code here
n = int(input())
a = [[0 for i in range(n)] for j in range(n)]
k = 1
oborot = 0

#количество оборотов
if n%2 == 0:
    chet = n//2
else:
    chet = n//2+1
    
for i in range(chet):
    #Верх
    for j in range(oborot,n-oborot):
        a[i][j] = k
        k += 1  
    #Право    
    for j in range(i+1,n-i):
        a[j][-i-1] = k
        k += 1
    #Низ
    for j in range(i+1,n-i):
        a[-i-1][-j-1] = k
        k += 1
    #Лево
    for j in range(i+1,n-(i+1)):
        a[-j-1][i] = k
        k += 1
    oborot += 1
    
for i in a:
    print(*i) -End,"
 def modify_list(l):
    for i in range(len(l)-1, -1, -1):
        if l[i] % 2 == 0:
            l[i] = l[i] // 2
        else:
            l.pop(i)
     -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key in d:
        d[key] += [value]
    else:    
        if 2 * key in d:
            d[key * 2] += [value]
        else:
            d[key * 2] = [value]
# не добавляйте кода вне функции -End,"
 # put your python code here
def func_dict(d, key):
    if key in d:
        d[key] += 1
    else:    
        d[key] = 1
d = {}
s = input().split()
for i in s:
    func_dict(d, i.lower())
for k, v in d.items():
    print(k, v)
     -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
n, d = int(input()), {}
for i in range(n):
    x = int(input())
    if x not in d:
        d[x] = f(x)
    print(d[x])
    -End,"
 # put your python code here
import math
r = float(input())
print(2 * math.pi *r) 
 -End,"
 import sys
list = sys.argv
print(*list[1:])
 -End,"
 # put your python code here
def fact(x):
    f = 1
    for i in range(1,x+1):
        f *= i
    return f

n, k = map(int, input().split())
C = fact(n) / (fact(k) * fact(n-k))
print(int(C))

 -End,"
 # put your python code here
n, lst, d = int(input()), [], {}
for i in range(n):
    s = input().splitlines()
    for i in s:
        lst.append(i.split(';')) 
for i in range(n):
    for k in range(0,4,2):
        key = lst[i][k]
        if key in d:
            d[key][0] += 1
        else:    
            d[key] = list()
            d[key].append(1)
            d[key].append(0)
            d[key].append(0)
            d[key].append(0)
            d[key].append(0)
    if lst[i][1] > lst[i][3]:
        d[lst[i][0]][1] += 1
        d[lst[i][2]][3] += 1
        d[lst[i][0]][4] += 3
        d[lst[i][2]][4] += 0
    elif lst[i][1] < lst[i][3]:
        d[lst[i][0]][3] += 1
        d[lst[i][2]][1] += 1
        d[lst[i][0]][4] += 0
        d[lst[i][2]][4] += 3
    else:    
        d[lst[i][0]][2] += 1
        d[lst[i][2]][2] += 1
        d[lst[i][0]][4] += 1
        d[lst[i][2]][4] += 1
for a,b in d.items():
    print((a + ':'), *b, end = '\n')
 -End,"
 # put your python code here
d = {'x':0,'y':0}
for i in range(int(input())):
    s = input().split()
    if s[0] == 'север':
        d['y'] += int(s[1])
    elif s[0] == 'юг':
        d['y'] -= int(s[1])
    elif s[0] == 'запад':
        d['x'] -= int(s[1])    
    elif s[0] == 'восток':
        d['x'] += int(s[1])
for k,v in d.items():
    print(d[k], end = "" "") -End,"
 a,b,c=int(input()),int(input()),int(input())
l=[a,b,c]
d=max(l)
d1=min(l)
l.remove(d)
l.remove(d1)
f=max(l)
print(str(d)+'\n'+str(d1)+'\n'+str(f))



 -End,"
 a=str(input())
if int(a)>=0: a=a[0:]
else: a=a[1:] # Избавляемся от знака [минус], тип str

b=(a) # Переменная b для постановки в print без знака [минус]

a=a[-2:]  # Правсимв(a;2), тип  str
if int(a)>20:
    a=a[-1:] # Правсимв (a;1), тип str
    if int(a)in [1]: print(b,'программист')
    elif int(a) in [2,3,4]: print(b,'программиста')
    else: print(b,'программистов')
else:  # Значение a = 2 символа справа строка 7, тип str
    if int(a)in [1]: print(b,'программист')
    elif int(a) in [2,3,4]: print(b,'программиста')
    else: print(b,'программистов')




 -End,"
 a=str(input())
b=int(a[0])+int(a[1])+int(a[2])
c=int(a[3])+int(a[4])+int(a[5])
if b==c: print('Счастливый')
else: print('Обычный')



 -End,"
 a=int(input())
b=int(input())
c=min([a,b])
f=max([a,b])
d = c
u = 1
while d%f != 0:
    u += 1
    d = c*u
print(d)




 -End,"
 a=int(input())
while int(a):
    b=a
    if b<10:
        a=int(input())
        continue
    if b>100:
        break
    print(b)
    a=int(input())



 -End,"
 a,b=int(input()),int(input())
while a%3 != 0: #Догоняем до ближайшего кратного 3
    a=a+1
x= [i for i in range(a,b+1,3)] #Преобразовать значения цикла i в список x
print(sum(x)/len(x)) #Сумма значений списка делить на число значений списка





 -End,"
 a = str(input())
b =len(a)
cnt_simb=1
numb_simb=1
d=''
for x in a:
    if numb_simb<=b-1:
        if x==a[numb_simb]:
            numb_simb+=1
            cnt_simb+=1
        else:
            d=(d+(''.join(a[numb_simb-1]+str(cnt_simb))))
            numb_simb+=1
            cnt_simb=1
    else:
        d=(d+(''.join(a[numb_simb-1]+str(cnt_simb))))
print(d) -End,"
 b= input().split()
x=0
a=len(b)
if a==1:
    print(''.join(b))
else:
    for i in b:
        if x<(a-1):
            print(str((int(b[x-1])+int(b[x+1]))),end=' ')
        else:
            print(str((int(b[x-1])+int(b[0]))),end=' ')
        x+=1 -End,"
 a = input().split()
b = list(set(a))
k=sorted(b)
for i in range(len(k)):
    c = a.count(k[int(i)])
    if c > 1:
        print(str(int(k[i])), end=' ')



 -End,"
 a,b=[],[]
s=''
while s!=0:
    a.append(int(input()))
    s=sum(a)
for i in a:
    b.append(i*i)
    s=sum(b)
print(s)




 -End,"
 n=int(input())
a=[]
i=1
while len(a)!=n:
    x=0
    while x!=i:
        if len(a)!=n:
            a.append(i)
            x+=1
        else: break
    i+=1
print(' '.join(map(str,a)),end='') -End,"
 lst=[int(i) for i in input().split()]
x=int(input())
a=[]
for i,j in enumerate(lst):
    if j==x:
        a+=[i]
if len(a)==0:
    print('Отсутствует')
else:
    print(*a) -End,"
 a=[]
b=[]
while b!=['end']:
    b=[i for i in input().split()]
    if b!=['end']:
        a.append(b)
    else:
        break

import copy
b=copy.deepcopy(a)
for i in range(len(a)):
    for j in range(len(a[i])):
        if (j+1!=len(a[i])) and (i+1!=len(a)):
            c=[int(a[i-1][j]), int(a[i+1][j]), int(a[i][j-1]), int(a[i][j+1])]
            c=sum(c)
            b[i][j]=c

        else:
            c=[int(a[i-1][j]), int(a[i+1-len(a)][j]), int(a[i][j-1]), int(a[i][j+1-len(a[i])])]
            c=sum(c)
            b[i][j]=c

for row in b:
   print(' '.join(map(str, row))) -End,"
 n=int(input())
a=[[j+1 for j in range(n)] for i in range(n)]
i=0;j=0;cnt=0;x=n;y=0
while n-cnt>=1:
    cnt+=1
    # вниз
    i+=1;j-=1
    for y in range(x+1,x+1+(n-cnt)):
        a[i][j]=y
        i+=1
    # влево
    i-=1;j-=1
    for x in range(y+1,y+1+(n-cnt)):
        a[i][j]=x
        j-=1
    cnt+=1
    # вверх
    i-=1;j+=1
    for y in range(x+1,x+1+(n-cnt)):
        a[i][j]=y
        i-=1
    # вправо
    i+=1;j+=1
    for x in range(y+1,y+1+(n-cnt)):
        a[i][j]=x
        j+=1
for row in a:
    print(*row) -End,"
 def modify_list(l):
    import copy
    b=copy.deepcopy(l)
    l.clear()
    for i in b:
        if i%2==0:
            l.append(i//2) -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
b={}
for i in range(int(input())):
    x=int(input())
    if x not in b:
        b[x]=f(x)
        print(b[x])
    else:
        print(b[x])



 -End,"
 import math
print(math.tau*float(input()))




 -End,"
 n=int(input())
match_vs=[input().split(';') for i in range(n)] #ввод преобразовать в двумерный список

#получить список команд
teams=[]
for j in [[i[z] for z in range(len(i)) if z==0 or z==2] for i in match_vs]:
    teams+=j
teams_list=list(set(teams))

#получить словарь числа игр каждой команды
cnt_games ={}
for i in teams_list:
    cnt_games[i]=teams.count(i)

list_victory = [] #лист побед
list_trahere = [] #лист ничьих
list_cladem = []  #лист поражений

for i in match_vs:
    if int(i[1]) > int(i[3]):
        list_victory.append(i[0])
        list_cladem.append(i[2])
    elif int(i[1]) == int(i[3]):
        list_trahere.append(i[0])
        list_trahere.append(i[2])
    else:
        list_victory.append(i[2])
        list_cladem.append(i[0])

cnt_victory ={} #словарь число побед
cnt_trahere ={} #словарь число ничьих
cnt_cladem ={}  #словарь число поражений

score_victory = 3 #очки за победу
score_trahere = 1 #очки за ничью
score_cladem = 0  #очки за поражение
sum_score = {}    #всего очков
for i in teams_list:
    cnt_victory[i]= list_victory.count(i)
    cnt_trahere[i] = list_trahere.count(i)
    cnt_cladem[i] = list_cladem.count(i)
    sum_score[i] = (list_victory.count(i)*score_victory)+(list_trahere.count(i)*score_trahere)+(list_cladem.count(i)*score_cladem)

output={}
for i in teams_list:
    output[i] = cnt_games[i],cnt_victory[i],cnt_trahere[i],cnt_cladem[i],sum_score[i]
for key in  output:
    print(key,' '.join([ str(i) for i in output[key]]),sep=':') -End,"
 initial_data,totals_data=str(input()),str(input()) #исходные\итоговые данные
encrypt,decipher=str(input()),str(input())         #зашифровать\расшифровать
a={}                                               #Шифр подстановки
for i in range(len(initial_data)):
    a[initial_data[i]]=totals_data[i]

for i in encrypt:
    print(''.join(a[i]), end='')

print()

for i in decipher:
    print(''.join([k for k,j in a.items() if j==i]), end='') -End,"
 d=int(input())                                                      #число записей известных слов
list_fam_word=[str(input().lower()) for i in range(d)]              #список известных слов
l=int(input())                                                      #число записей проверяемых слов
list_checked_text=[input().lower().split() for i in range(l)]       #список проверяемых слов

b=[]
for i in list_checked_text:
    for j in i:
        b.append(j)
b=list(set(b))                                                      #удаляем дубли из list_checked_text

for i in list_fam_word:
    while i in b:
        b.remove(i)                                                     #удаляем из b то что есть в list_fam_word

for j in b:
    print(j) -End,"
 n=int(input())
string_n=[input().split() for i in range(n)]

end_point=[0,0]
for i in string_n:
    for j in i:
        if j=='север':
            end_point[1]+= int(i[1])
        elif j=='юг':
            end_point[1] -= int(i[1])
        elif j=='запад':
            end_point[0] -= int(i[1])
        elif j=='восток':
            end_point[0] += int(i[1])


print(end_point[0],end_point[1]) -End,"
 def main():
    a, b = map(int, input().split())
    res = a+b
    print(res)


if 4 == main():
    main() -End,"
 def fib(n):
    if n<=1:
        return 1
    else:
        a = [0, 1]
        for i in range(2, n + 1):
            a.append(a[-1] + a[-2])
        return a[-1]

def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main() -End,"
 def fib_digit(n):
    if n<=1:
        return 1
    else:
        a = 0
        b = 1
        c = 1
        for i in range(2, n):
            a = b
            b = c
            c = (b + a)%10
        return c


def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 def fib_mod(n, m):
    if n<1:
        return 0
    else:
        a = 0
        b = 1
        for i in range(n):
            a, b = b, (a + b) % m
            if a == 0 and b == 1:
                a = 0
                b = 1
                k=n%(i+1)
                if k>1:
                    for i in range(k-1):
                        a, b = b, (a + b) % m
                    return b
                else:
                    return k
                break
    return a


def main():
    n, m = map(int, input().split())
    print(fib_mod(n, m))


if __name__ == ""__main__"":
    main() -End,"
 def gcd(a, b):
    if a==0:
        return b
    elif b==0:
        return a
    else:
        if a>=b:
            return gcd(a%b, b)
        else:
            return gcd(a, b%a)


def main():
    a, b = map(int, input().split())
    print(gcd(a, b))


if __name__ == ""__main__"":
    main() -End,"
 n=int(input())
a=0
for i in range(n):
    a+=int(input())
print(a)




 -End,"
 ans = 0
b=[]
for obj in objects:
    b.append(id(obj))

ans+=len(set(b))

print(ans)




 -End,"
 def C(n,k):
    numerator=1
    for i in range(n,k,-1):
        numerator*=i
    denominator=1
    for j in range(2,(n-k)+1):
        denominator*=j
    return print(int(numerator/denominator))

n, k = map(int, input().split())
C(n,k)




 -End,"
 a_dict = {'global': [None, set()]}
sample_input_lst = []

for i in range(int(input())):
    sample_input_lst.append(input().split())


def get(namespace, var):
    if a_dict.get(namespace) is None:
        print(None)
    else:
        if var in a_dict[namespace][1]:
            print(namespace)
        else:
            get(a_dict[namespace][0],var)


for i in sample_input_lst:
    if i[0] == 'create':
        a_dict[i[1]] = [i[2], set()]
    elif i[0] == 'add':
        a_dict[i[1]][1].add(i[2])
    elif i[0] == 'get':
        get(i[1], i[2]) -End,"
 class MoneyBox:
    def __init__(self, capacity):       # конструктор с аргументом – вместимость копилки
        self.cap=capacity
        self.a=0
        self.b=0

    def can_add(self, v):       # True, если можно добавить v монет, False иначе
        self.b = v
        if self.a+self.b <= self.cap:
            return True
        else:
            return False

    def add(self, v):       # положить v монет в копилку
        self.b = v
        if MoneyBox.can_add(self, v) is True:
            self.a+=self.b

 -End,"
 class Buffer:
    def __init__(self):         # конструктор без аргументов
        self.a = []
        self.b = int()

    def add(self, *a):          # добавить следующую часть последовательности
        self.a += a
        self.b = len(self.a)//5
        if self.b>0:
            for i in range(self.b):
                print(sum([self.a.pop(0), self.a.pop(0), self.a.pop(0), self.a.pop(0), self.a.pop(0)]))

    def get_current_part(self):         # вернуть сохраненные в текущий момент элементы последовательности в порядке, в котором они были добавлены
        return self.a -End,"
 class LoggableList(list,Loggable):
    def append(self,text):
        super(LoggableList,self).append(text)
        super(LoggableList,self).log(text)




 -End,"
 namespase_classes={}

def abc(val_1):
    for j in namespase_classes.get(val_1):
        c.append(j)
        if j not in namespase_classes:
            pass
        else:
            abc(j)
    return c

for i in range(int(input())):
    a=input().replace(' : ',' ').split()                #'D : B C' -> 'D B C' -> ['D','B','C']
    if len(a)==1:
        namespase_classes[a[0]] = []
    elif len(a)>1:
        namespase_classes[a[0]] = a[1:]


b=[]
for k in range(int(input())):
    cnt = 0
    c=[]
    x = input()
    if x in b:
        print(x)
    else:
        for m in abc(x):
            if m in b:
                cnt+=1
        if cnt>0:
            print(x)
        else:
            b.append(x)
 -End,"
 import datetime
x=str(input()).split()
days = int(input())
date = datetime.date(int(x[0]),int(x[1]),int(x[2]))
print(datetime.datetime.strftime((date+datetime.timedelta(days)),'%Y %-m %-d'))




 -End,"
 a=['Learn Python: action in progress...','Learn Python: action completed.']
b=[3,2]
for i in a:
    for j in range(b[a.index(i)]):
        print(i)



 -End,"
 def primes():
    a = 1
    while True:
        a += 1
        b = 0
        for i in range(1,a+1):
            if a%i == 0:
                b += 1
        if b == 2:
            yield a





 -End,"
 def mod_checker(x, mod=0):
    return lambda y: True if y%x == mod else False




 -End,"
 strings = 'sab'
value_string = {}
cnt = 0
for i in range(3):
    value_string[strings[i]] = str(input())

while cnt <= 1001:
    if cnt <= 1000:
        if value_string['s'].lower().count(value_string['a']) > 0:
            value_string['s'] = value_string['s'].replace(value_string['a'], value_string['b'])
            cnt += 1
        else:
            print(cnt)
            break
    else:
        print('Impossible')
        break




 -End,"
 s = input()
t = input()
i = 0
cnt = 0

try:
    while True:
        i = s.index(t,i) + 1
        cnt += 1
except ValueError:
    print(cnt)




 -End,"
 import sys
import re

pattern = r'cat'
for line in sys.stdin:
    line = line.rstrip()
    if line != '':
        if len(re.findall(pattern, line)) >= 2:
            print(line)
        else:
            pass
    else:
        break



 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r'\bcat\b', line):
        print(line)




 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r""z.{3}z"", line):
        print(line)




 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r""\\"", line):
        print(line)




 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r""\b(\w+)\1\b"", line):
        print(line)



 -End,"
 import sys
import re

for line in sys.stdin:
    print(re.sub(r""human"", ""computer"", line.rstrip()))




 -End,"
 import sys
import re

for line in sys.stdin:
    x=re.sub(r""\ba+\b"", ""argh"", line.rstrip(), count=1, flags=re.IGNORECASE)
    if x:
        print(x)



 -End,"
 import sys
import re

for line in sys.stdin:
    x=re.sub(r""\b(\w)(\w)(\w*)\b"", r""\2\1\3"", line.rstrip())
    if x:
        print(x)



 -End,"
 import sys
import re

for line in sys.stdin:
    print(re.sub(r""(\w)\1+"", r""\1"", line.rstrip()))




 -End,"
 import sys
import re


for line in sys.stdin:
    try:
        aaa = re.search(r""^(1(01*0)*1|0)*$"",  line.rstrip()).group()
        print(aaa)
    except AttributeError:
        pass




 -End,"
 import requests
import re


str_1 = re.sub(r""(.+)\n"", r""\1"", input())#input().split()
str_2 = re.sub(r""(.+)\n"", r""\1"", input())#input().split()

res = requests.get(str_1)
list_x = re.findall(r""<a href=\""(https?[^>]+)\"">.+?<\/a>"", str(res.content))

i_cnt_yes = 0
for i in list_x:
    if requests.get(i).status_code == 200:
        list_y = re.findall(r""<a href=\""(https?[^>]+)\"">.+?<\/a>"", str(requests.get(i).content))
        if str_2 in list_y:
            i_cnt_yes += 1
            break

if i_cnt_yes > 0:
    print(""Yes"")
else:
    print(""No"") -End,"
 import requests
import re


str_1 = input()

res = requests.get(str_1)
list_x = re.findall(r'(?:<a[^>]*href=[\'\""]?)(?:(?:.*?-*:\/\/)?)(\w[\w.-]*)[\/:\'\""]', str(res.text))
list_x = list(set(list_x))
list_x.sort()
for i in list_x:
    print(i) -End,"
 a,b,c,d=int(input()),int(input()),int(input()),int(input())
print('',end='\t')
for k in range (c,d+1):
    print(k,end='\t')
print()
for i in range (a,b+1): #строки
    print(i,end='\t') 
    for j in range(c,d+1): #столбцы
        print(i*j,end='\t')
    print()



 -End,"
 s=input().upper()
C=s.count('C')
G=s.count('G')
l=len(s)
p=(C+G)/l*100
print(p)



 -End,"
 s=input()
k=''
i=0
while i<(len(s)-1):
    j=1
    while s[i]==s[i+1]:
        j+=1
        i+=1
        if i==(len(s)-1):
            break
    k+=s[i]+str(j)
    i+=1
    if i==(len(s)-1) and s[i]!=s[i-1]:
        k+=s[i]+'1'
if len(s)==1:
    k+=s+'1'
print(k) -End,"
 a=[int(i) for i in input().split()]
s=0
for i in range(len(a)):
    s+=a[i]
print(s)

 -End,"
 a=[int(i) for i in input().split()]
p=''
if len(a)==1:
    p=a[0]
else:
    for j in range(len(a)):
        if j!=(len(a)-1):
            s=a[j-1]+a[j+1]
            p+=str(s)+' '
        else:
            s=a[j-1]+a[0]
            p+=str(s)
print(p)


 -End,"
 a=[int(i) for i in input().split()]
a.sort()
s=''
i=0
while i <(len(a)-1):
    j=1
    while a[i]==a[i+1]:
        j+=1
        i+=1
        if i==(len(a)-1):
            break
    i+=1
    if j>1:
        s+=str(a[i-1])+' '
    else:
        continue
print(s) -End,"
 s=0
a=[]
k=0
i=0
while True:
    a.append(int(input()))
    s+=a[i]
    k+=a[i]**2
    i+=1
    if s==0:
        break
print(k)
 -End,"
 n=int(input())
p=[]
k=0
for i in range(1,n+1):
    for j in range(1,i+1):
        p.append(i)
while k<=n-1:
    print(p[k], end=' ')
    k+=1
print()
 -End,"
 a=[]
lenX=0
lenY=0
while True:
    v=input()
    if v=='end':
        break
    else:
        a.append([int(i) for i in v.split()])
if a!=[]:
    lenY=len(a[0])
    lenX=len(a)
s=[[0 for j in range(lenY)] for i in range(lenX)]
for i in range(lenX):
    for j in range(lenY):
        s[i][j]=a[i-1][j]+a[i-lenX+1][j]+a[i][j-1]+a[i][j-lenY+1]
for i in range(lenX):
    for j in range(lenY):
        print(s[i][j], end=' ')
    print()

 -End,"
 n=int(input())
a=[[0 for j in range(n)] for i in range(n)]
i=0 #строки
j=0 #столбцы
k=1 #значения ячеек
d=0 #ограничение на движение по направлению
while k<=n**2: #цикл движения вправо
    while j<(n-d) and k<=n**2:
        a[i][j]=k
        k+=1
        if j==(n-d-1):
            break
        else:
            j+=1
    i+=1
    while i<(n-d-1) and k<=n**2: #цикл движения вниз
        a[i][j]=k
        k+=1
        if i==(n-d-1):
            break
        else:
            i+=1
    while j>=(0+d) and k<=n**2: #цикл движения влево
        a[i][j]=k
        k+=1
        if j==(0+d):
            break
        else:
            j-=1
    i-=1
    while i>=(0+d) and k<=n**2: #цикл движения вверх
        a[i][j]=k
        k+=1
        if i==(0+d+1):
            break
        else:
            i-=1
    j+=1
    d+=1
for f in range(n):
    for g in range(n):
        print(a[f][g], end=' ')
    print()
 -End,"
 def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    elif 2*key in d:
        d[2*key].append(value)
    else:
        d[2*key]=[value] -End,"
 v=[i for i in input().lower().split()]
s=dict()
for i in v:
    if i in s:
        s[i]+=1
    else:
        s[i]=1
for key in s.keys():
    print(key,s[key]) -End,"
 n=int(input())
X=[0 for i in range(n)]
r=dict()
for i in range(n):
    X[i]=int(input())
for i in range(n):
    if X[i] not in r:
        r[X[i]]=f(X[i])
        print(f(X[i]))
    else:
        print(r[X[i]])

 -End,"
 from math import pi
r=float(input())
P=2*pi*r
print(P)
 -End,"
 n=int(input())
com=[]
sl=dict()
for i in range(n):
    game=input().split(';')
    if game[0] not in com:
        com.append(game[0])
        sl[game[0]]=dict()
        sl[game[0]]['Игр']=0
        sl[game[0]]['Побед']=0
        sl[game[0]]['Ничьих'] = 0
        sl[game[0]]['Поражений'] = 0
        sl[game[0]]['Очков'] = 0
    if game[2] not in com:
        com.append(game[2])
        sl[game[2]] = dict()
        sl[game[2]] = dict()
        sl[game[2]]['Игр'] = 0
        sl[game[2]]['Побед'] = 0
        sl[game[2]]['Ничьих'] = 0
        sl[game[2]]['Поражений'] = 0
        sl[game[2]]['Очков'] = 0
    sl[game[0]]['Игр']+=1
    sl[game[2]]['Игр']+=1
    if game[1]>game[3]:
        sl[game[0]]['Побед']+=1
        sl[game[2]]['Поражений']+=1
        sl[game[0]]['Очков']+=3
    if game[1]<game[3]:
        sl[game[2]]['Побед']+=1
        sl[game[0]]['Поражений']+=1
        sl[game[2]]['Очков'] += 3
    if game[1]==game[3]:
        sl[game[0]]['Ничьих']+=1
        sl[game[2]]['Ничьих'] += 1
        sl[game[0]]['Очков'] += 1
        sl[game[2]]['Очков'] += 1
for key1 in sl.keys():
    print(key1,end=':')
    for value in sl[key1].values():
        print(value,end=' ')
    print() -End,"
 a=list(input())
b=list(input())
c=list(input())
d=list(input())
ksp=dict(zip(a,b))
kdsp=dict(zip(b,a))
sp=''
dsp=''
for i in c:
    sp+=ksp[i]
print(sp)
for i in d:
    dsp+=kdsp[i]
print(dsp) -End,"
 d=int(input())
s=[]
for i in range(d):
    sl=input().lower()
    s.append(sl)
l=int(input())
ot=[]
for i in range(l):
    st=input().lower().split()
    for j in st:
        if j not in s and j not in ot:
            ot.append(j)
for i in ot:
    print(i) -End,"
 n = int(input())
sum = 0
for i in range(n):
    a = int(input())
    sum += a
print(sum) -End,"
 ans = 0
var = set()
for obj in objects:
    if id(obj) not in var:
        var.add(id(obj))
        ans +=1
print(ans) -End,"
 def closest_mod_5(x):
    while True:
        if x%5 == 0:
            return x
        x += 1
 -End,"
 def C(n, k):
    if k > n:
        return 0
    elif n == 1 and k == 1 or k == 0:
        return 1

    else:
        return C(n-1, k) + C(n-1,k-1)

n, k = map(int, input().split())
print(C(n,k))
 -End,"
 n = int(input())
sl_v = {'None':['global']} # Родитель : NameSpace
sl = {'global':[]} # NameSpace : переменные


def get(ns, x):
    if x in sl[ns]:
        print(ns)

    elif x not in sl[ns] and ns == 'global':
        print('None')

    else:
        for key in sl_v.keys():
            if ns in sl_v[key]:
                
                if x in sl[key]:
                    print(key)
                else:
                    get(key,x)


for req in range(n):
    req = input().split()

    if req[0] == 'create': # NameSpace Родитель

        if req[2] in sl_v and req[1] not in sl_v[req[2]]:
            sl_v[req[2]].append(req[1])
            sl[req[1]] = []
        else:
            sl_v[req[2]] = [req[1]]
            sl[req[1]] = []

    elif req[0] == 'add': # NameSpace Переменная

        if req[1] in sl and req[2] not in sl[req[1]]:
            sl[req[1]].append(req[2])

    elif req[0] == 'get': # NameSpace Переменная

        get(req[1], req[2])
 -End,"
 a = input().lower()
lst_a = []
b = input().lower()
lst_b = []

for i in a:
    lst_a.append(i)
lst_a.sort()

for i in b:
    lst_b.append(i)
lst_b.sort()

if lst_a == lst_b:
    print('True')
else:
    print('False')
 -End,"
 class MoneyBox:

    def __init__(self, capacity): # конструктор с аргументом – вместимость копилки
        self.cap = 0
        self.capacity = capacity

    def can_add(self, v): # True, если можно добавить v монет, False иначе
        if self.cap + v <= self.capacity:
            return True
        else:
            return False

    def add(self, v): # положить v монет в копилку
        if MoneyBox.can_add(self, v):
            self.cap += v
 -End,"
 class Buffer:
    def __init__(self): # конструктор без аргументов
        self.lst = list()
        self.sum = 0

    def add(self, *a): # добавить следующую часть последовательности
        i = 0
        while i < len(a):
            self.lst += [a[i]]
            self.sum +=a[i]
            if len(self.lst) == 5:
                print(self.sum)
                self.lst = []
                self.sum = 0
            i +=1

    def get_current_part(self): # вернуть сохраненные в текущий момент элементы последовательности
                                # в порядке, в котором они были добавлены
        return self.lst -End,"
 tree = dict()


def find(par, cl, path=0):
    if par == cl and cl in tree:
        return 1

    elif not tree.get(cl) or not tree[cl]:
        return 0

    elif par in tree[cl]:
        return 1

    else:
        for value in tree[cl]:
            c = tree[cl]
            path += find(par, value)

    return path


n = int(input())

for cl in range(n):
    cl = input().split()

    if cl[0] not in tree:
        tree[cl[0]] = []

    if len(cl) > 1:
        for j in range(2, len(cl)):
            tree[cl[0]].append(cl[j])

            if cl[j] not in tree:
                tree[cl[j]] = []

#print(tree)

q = int(input())

for i in range(q):
    req = input().split()
    path = find(req[0], req[1])

    if path:
        print('Yes')
    else:
        print('No') -End,"
 class ExtendedStack(list):
    def sum(self): # операция сложения
        a = self.pop()
        b = self.pop()
        self.append(a+b)

    def sub(self): # операция вычитания
        a = self.pop()
        b = self.pop()
        self.append(a - b)

    def mul(self): # операция умножения
        a = self.pop()
        b = self.pop()
        self.append(a * b)

    def div(self): # операция целочисленного деления
        a = self.pop()
        b = self.pop()
        self.append(a // b)

 -End,"
 try:
    foo()
except ZeroDivisionError:
    print(""ZeroDivisionError"")
except ArithmeticError:
    print(""ArithmeticError"")
except AssertionError:
    print(""AssertionError"")
 -End,"
 tree = dict()


def find(par, cl, path=0):
    if par == cl and cl in tree:
        return 1

    elif not tree.get(cl) or not tree[cl]:
        return 0

    elif par in tree[cl]:
        return 1

    else:
        for value in tree[cl]:
            path += find(par, value)

    return path


n = int(input())

for cl in range(n):
    cl = input().split()

    if cl[0] not in tree:
        tree[cl[0]] = []

    if len(cl) > 1:
        for j in range(2, len(cl)):
            tree[cl[0]].append(cl[j])

            if cl[j] not in tree:
                tree[cl[j]] = []

#print(tree)

m = int(input())
step = []

for exc in range(m):
    exc = input()
    i = 1

    for s in step:
        if find(s, exc):
            i = 0
            break

    if i != 0:
        step.append(exc)
    else:
        print(exc)

 -End,"
 class NonPositiveError(Exception):
    pass

class PositiveList(list):
    def append(self, x):
        if x > 0:
            super(PositiveList, self).append(x)
        else:
            raise NonPositiveError()
 -End,"
 import datetime

y, m, d = (int(i) for i in input().split())
date = datetime.date(y, m, d)
#print(date)

days = int(input())
delta = datetime.timedelta(days)

now_date = date + delta

print(now_date.year, now_date.month, now_date.day) -End,"
 class multifilter:
    def judge_half(pos, neg): # допускает элемент, если его допускает хотя
                              # бы половина фукнций (pos >= neg)
        if pos >= neg:
            return True
        else:
            return False


    def judge_any(pos, neg): # допускает элемент, если его допускает
                             # хотя бы одна функция (pos >= 1)
        if pos >= 1:
            return True
        else:
            return False


    def judge_all(pos, neg): # допускает элемент, если его допускают все
                             # функции (neg == 0)
        if not neg:
            return True
        else:
            return False


    def __init__(self, iterable, *funcs, judge=judge_any):
        # iterable - исходная последовательность
        # funcs - допускающие функции
        # judge - решающая функция
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self): # возвращает итератор по результирующей последовательности
        for i in self.iterable:
            pos = 0
            neg = 0

            for f in self.funcs:
                if f(i):
                    pos += 1
                else:
                    neg +=1

            if self.judge(pos,neg):
                yield i
 -End,"
 a = []


def divs(num, den):
    a.append(num // den)
    return den, num % den


num, den = [int(i) for i in input().split('/')]
while den != 0:
    num, den = divs(num, den)
print(*a) -End,"
 num_rom = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
rom = input()
num_arab = 0
i = 0
# I = 1
# V = 5
# X = 10
# L = 50
# C = 100
# D = 500
# M = 1000
while i < len(rom):

    if i == len(rom)-1:
        num_arab += num_rom[rom[i]]
        break

    elif num_rom[rom[i]] < num_rom[rom[i+1]]:
        num_arab += num_rom[rom[i+1]] - num_rom[rom[i]]
        i += 2

    elif num_rom[rom[i]] > num_rom[rom[i+1]]:
        num_arab += num_rom[rom[i]]
        i += 1

    else:
        num_arab += num_rom[rom[i]]
        i += 1

print(num_arab)
 -End,"
 code = ' abcdefghijklmnopqrstuvwxyz'
delta = int(input())
str_main = input().strip()
str_code = ''

for i in str_main:
    num_code = code.find(i)
    str_code += code[(num_code + delta)%27]

print('Result: ""', end = '')
print(str_code, end = '')
print('""', end = '')
 -End,"
 code = ''.join([chr(i) for i in range(128512, 128592)])
delta = int(input())
str_main = input().strip()
str_code = ''

for i in str_main:
    str_code += code[(code.find(i) + delta) % 80]

print('Result: ""' + str_code + '""')
 -End,"
 def mod_checker(x, mod=0):
    return lambda y: y % x == mod
 -End,"
 s = input()
a = input() #old
b = input() #new

count = 0

while a in s and count < 1000:
    s = s.replace(a, b)
    count += 1


if count < 1000:
    print(count)
else:
    print('Impossible')
 -End,"
 s = input()
t = input()
i = 0
count = 0
while s.find(t, i) != -1:
    i = s.find(t, i) + 1
    count += 1
print(count)
 -End,"
 import sys

import re


pattern = r""cat""

for line in sys.stdin:
    line = line.rstrip()
    # process line

    all_inclusions = re.findall(pattern, line)
    if len(all_inclusions) >= 2:
        print(line)
 -End,"
 import sys

import re


pattern = r""\bcat\b""

for line in sys.stdin:
    line = line.rstrip()
    # process line

    match = re.search(pattern, line)
    if match:
        print(line) -End,"
 import sys

import re


pattern = r""(z.{3}z){1}""

for line in sys.stdin:
    line = line.rstrip()
    # process line

    match = re.search(pattern, line)
    if match:
        print(line)
 -End,"
 import sys

import re


pattern = r""\\""

for line in sys.stdin:
    line = line.rstrip()
    # process line

    match = re.search(pattern, line)
    if match:
        print(line)
 -End,"
 import sys

import re


pattern = r""\b(\w+)\1\b""

for line in sys.stdin:
    line = line.rstrip()
    # process line

    match = re.search(pattern, line)
    if match:
        print(line)
 -End,"
 import sys

import re


pattern = r""human""

for line in sys.stdin:
    line = line.rstrip()
    # process line

    print( re.sub(pattern, 'computer', line))
 -End,"
 import sys

import re


pattern = r""\ba+\b""

for line in sys.stdin:
    line = line.rstrip()
    # process line

    match = re.sub(pattern, 'argh', line, count=1, flags=re.IGNORECASE)
    print(match)
     -End,"
 import sys

import re


pattern = r""\b(\w)(\w)""

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(pattern, r'\2\1', line))
 -End,"
 import sys

import re


pattern = r""(\w)(\1)*""

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(pattern, r'\1', line))
     -End,"
 import requests

import re

def search_url(A, B):
    res_A = requests.get(A)
    content_tipe_A = res_A.headers['Content-Type']

    if res_A.status_code == 200 and content_tipe_A.find('text') != -1:
        pattern = r""<a.*href=\""(.*)\""""

        for i in re.findall(pattern, res_A.text):
            res_B = requests.get(i)
            content_tipe_B = res_B.headers['Content-Type']

            if res_B.status_code == 200 and content_tipe_B.find('text') != -1:

                for j in re.findall(pattern, res_B.text):
                    if j == B:
                        print('Yes')
                        return
                    
    print('No')



A = input().strip()
B = input().strip()
search_url(A, B)
 -End,"
 import requests

import re

file = input().strip()
resp = requests.get(file).text
pattern = r'<a.*href=[\'\""](?:.*?:\/\/)?([^\.][\w.-]*)\/?.*[\'\""].*>'
url = re.findall(pattern, resp)
m = set()
res = []

for i in url:
    m.add(i)
    
for i in m:
    res.append(i)
    
res.sort()

for i in res:
    print(i)
     -End,"
 import json

js = json.loads(input())


def search_chl(chl, w, path=1):

    for dict_js in js:

        if (chl in dict_js['parents']) and (dict_js['name'] not in w):
            path += 1
            w.append(dict_js['name'])
            path, w = search_chl(dict_js['name'], w, path)

    return path, w


par = dict()

for d in js:
    w = []
    par[d['name']], w = search_chl(d['name'], w)

for i in sorted(par):
    print(i, ':', par[i])
 -End,"
 from xml.etree import ElementTree

sum = {'red': 0, 'green': 0, 'blue': 0}

def sum_color(child, level=0):
    level += 1
    sum[child.attrib['color']] += level

    for ch in child:
        sum_color(ch, level)

root = ElementTree.fromstring(input())

sum_color(root)
print(sum['red'], sum['green'], sum['blue'])
 -End,"
 for i in range(len(L)-1):
    if (abs(L[i]-L[i+1]))==1:
        index=i



 -End,"
 # put your python code here

n=int(input())
i=0
while i<=n:
    print(i)
    i+=1


 -End,"
 # put your python code here

n=int(input())

for i in range(0,n,2):
    num=i**2
    print(num)


 -End,"
 # put your python code here
n=int(input())

i=0
while i<n:
    num=i**2
    print(num)
    i+=2



 -End,"
 # put your python code here

summ=0
while True:
    num=(input())
    if num==""The End"":
        break
    else:
        summ+=int(num)
print(summ)



 -End,"
 # put your python code here
s=input().split()

for element in s:
    if element[0]==""*"":
        continue
    else:
        print(element) -End,"
 n=int(input())

for i in range(2,n):
    if n%i==0:
        break
print(i)

 -End,"
 n=int(input())
#res=0
for i in range(1,abs(n)):
    if i<abs(n):
        res=i**3
        print(res)
    else:
        break





 -End,"
 def sum2(a,b):
    return (a+b)




 -End,"
 def Hello(name='%UserName%'):
    text = 'Hello, {}!'.format(name)
    print(text)


 -End,"
 def dfactorial(n):
    if n == 0 or n==1:
        return 1
    
    res1=1
    
    if n%2==0:
        i=2
        while i<=n:
            res1*=i
            i+=2
        return res1
    
    else:
        i=1
        while i<=n:
            res1*=i
            i+=2
        return res1
    


 -End,"
 def convert(L):
    for i in range(len(L)):
        if type(L[i])==str:
            L[i]=int(L[i])
    return L


 -End,"
 def convert(L):
    for i in range(len(L)):
        if type(L[i])==str:
            L[i]=int(L[i])
    return L
def maxId(L):
    max=0
    for i in range(len(L)):        
        if max<(L[i]):
            max=L[i]
            index=i
    return index
convert(L)
maxId(L)

 -End,"
 import math

def f(x):
    return (2*(math.atan(x)))

x0=0
dx_list=[1.0, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 100000.0, 10000000000.0]
for dx in dx_list:
    lim=[]
    lim.append(round(f(x0+dx),3))
print(lim[-1]) -End,"
 import math
def def_e(x):
    return (math.exp(x))

x0= 3
dx_list =[0.00001]
for dx in dx_list:
    round((def_e(x0+dx)-def_e(x0))/dx,3) -End,"
 def even_indeces(l):
    res=[]
    for i in range(0,len(l),2):
        res.append(l[i])
    return res -End,"
 def even_elements(l):
    res=[]
    for element in l:
        if element%2==0:
            res.append(element)
    return res -End,"
 def last_to_first(l):
    res=[]
    res=l[::-1]
    return res -End,"
 n = int(input()) # Input and convert to int

res=0
for num in range(n+1):
    if num %5 ==0 and num %3 !=0:
        res+=num

print(res) -End,"
 def common(list_a, list_b):
    a=set(list_a)
    b=set(list_b)
    a&=b
    return a -End,"
 def front_x(words):
    x_first=[]
    not_x_first=[]
    counter=0
    
    for word in words:
        if len(word)==0:
            continue
        elif word[0]==""x"":
            x_first.append(word)
        else :
            not_x_first.append(word)
            
    counter=words.count("""")
    buf=sorted(x_first)+sorted(not_x_first)
    for _ in range(counter):
        buf.insert(len(x_first),"""")
    return buf

#words = ['x-files', 'xapple', 'xyz', '', 'apple', 'extra', 'mix', """"]
#front_x(words) -End,"
 def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2) -End,"
 def memoize(f):
    memo = {}
    def helper(x):
        if x not in memo:            
            memo[x] = f(x)
        return memo[x]
    return helper
    

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

fib = memoize(fib)

#print(fib(int(input())))

 -End,"
 from scipy.constants import h
from scipy.constants import c
from scipy.constants import e

def lam(U):
    lambd=(h*c)/(e*U)
    return lambd



 -End,"
 import math

def f(x):
    return ((2*x**2)-3*x-5)/((3*x**2)+x+1)

x0=0
dx_list=[10000000000.0]
for dx in dx_list:
    lim=[]
    lim.append(round(f(x0+dx),3))
print(lim[-1])

dx_list=[-10000000000.0]
for dx in dx_list:
    lim=[]
    lim.append(round(f(x0+dx),3))
print(lim[-1])



 -End,"
 L=input().lower()
print(L)



 -End,"
 import re

L = input()
L2 = re.split('[^a-z]', L)
print(L2)




 -End,"
 import re

L1 = input().lower()
L2 = re.split('[^a-z]', L1)
print(L2) -End,"
 L2 = [i for i in L1 if i] -End,"
 import numpy
#input variables
a11, a12, b1 = [int(x) for x in input().split()]
a21, a22, b2 = [int (x) for x in input().split()]

#calculating arrays
M1 = numpy.array([[a11, a12], [a21,a22]]) # Матрица (левая часть системы)
v1 = numpy.array([b1,b2]) # Вектор (правая часть системы)
r = numpy.linalg.solve(M1,v1) #Находим решение системы
print (r[0], r[1])

print(a11,a12,a21,a22,b1,b2) -End,"
 import numpy as np

#input variables
a11,a12,b1 = [int (x) for x in input().split()]
a21,a22,b2 = [int (x) for x in input().split()]

#calculating determinant
determinant = np.array([[a11, a12], [a21,a22]])
det_result=np.linalg.det(determinant)
#print(det_result)
#cheking the solution
if det_result==0:
    print(""Система не имеет решений"")
else:
    # calculating arrays
    M1 = np.array([[a11, a12], [a21, a22]])  # Матрица (левая часть системы)
    v1 = np.array([b1, b2])  # Вектор (правая часть системы)
    r = np.linalg.solve(M1, v1)  # Находим решение системы
    print(r[0], r[1]) -End,"
 import numpy as np

#input variables
a11,a12,a13,b1 = [int(x) for x in input().split()]
a21,a22,a23,b2 = [int(x) for x in input().split()]
a31,a32,a33,b3 = [int(x) for x in input().split()]

#calculating determinant
determinant = np.array([[a11, a12, a13], [a21,a22,a23],[a31,a32,a33]])
det_result=np.linalg.det(determinant)

#cheking the solution
if det_result == 0:
    print(""Система не имеет решений"")
else:
    # calculating arrays
    M1 = np.array([[a11, a12, a13], [a21,a22,a23],[a31,a32,a33]])  # Матрица (левая часть системы)
    v1 = np.array([b1, b2, b3])  # Вектор (правая часть системы)
    r = np.linalg.solve(M1, v1)  # Находим решение системы
    print(r[0], r[1],r[2]) -End,"
 import numpy as np

#input variables
a11,a12,a13,a14,b1 = [ int(x) for x in input().split()]
a21,a22,a23,a24,b2 = [ int(x) for x in input().split()]
a31,a32,a33,a34,b3 = [ int(x) for x in input().split()]
a41,a42,a43,a44,b4 = [ int(x) for x in input().split()]

#calculating determinant
determinant = np.array([[a11, a12, a13, a14], [a21, a22, a23, a24], [a31, a32, a33, a34], [ a41, a42, a43, a44]])
det_result=np.linalg.det(determinant)
#print(det_result)

#cheking the solution
if det_result==0:
    print(""Система не имеет решений"")
else:
    # calculating arrays
    M1 = np.array([[a11, a12, a13, a14], [a21, a22, a23, a24], [a31, a32, a33, a34], [ a41, a42, a43, a44]])  # Матрица (левая часть системы)
    v1 = np.array([b1, b2, b3, b4])  # Вектор (правая часть системы)
    r = np.linalg.solve(M1, v1)  # Находим решение системы
    print(r[0],r[1],r[2],r[3])
#print(a11,a12,a21,a22,b1,b2) -End,"
 import numpy as np

a,b = map(int,input().split())

Array1= np.array([[1,1],[1,-1]])
Vector1= np.array([a,b])
res= np.linalg.solve(Array1,Vector1)

if res[0]<0 or res[1]<0 or (int(res[0])+int(res[1])!=a):
    print(""Такой класс не существует"")
else:
    print(int(res[0]),int(res[1]))


 -End,"
 def f(x):
    return (x**2) + 2*x + 1 -End,"
 import math

def S(x):
    return (20*(((3**0.5)*3)*0.5*x**2) + 12*((((5**0.5)*((5+2*(5**0.5))**0.5))*0.25)*x**2))

def S_ceil(x):
    n=(20*(((3**0.5)*3)*0.5*x**2) + 12*((((5**0.5)*((5+2*(5**0.5))**0.5))*0.25)*x**2))
    return (math.ceil(n)) -End,"
 def f(x):
    return (((x+a)**2)-b)

def g(x):
    return (abs(f(x))) -End,"
 from scipy.optimize import golden

def f(x):
    return ((x+a)**2)-b

def g(x):
    return (abs(f(x)))

min_f = golden(f)
min_g = golden(g)

print(min_f, min_g) -End,"
 import sys

def numerics(n):
    L = []
    n = str(n)
    for i in range(4):
        L.append(n[i])

    for j in range(4):
        L[j] = int(L[j])

    kaprekar_step(L)

def kaprekar_step(L):
    max = sorted(L)
    min = sorted(L, reverse=True)

    maxS = str(max[0])+str(max[1])+str(max[2])+str(max[3])
    minI=int(maxS)
    #print(maxS)
    minS = str(min[0])+str(min[1])+str(min[2])+str(min[3])
    maxI=int(minS)
    #print(minS)
    n = maxI - minI

    kaprekar_loop(n)

def kaprekar_loop(n):
    while True:
        print (n)
        #return(n)
        if n==6174:
            #return n
            sys.exit()
        else:
            numerics(n)

#n = 6174
#numerics(n) -End,"
 def numerics(n):
    L=[]
    nums = str(n)
    for i in range(len(nums)):
        L.append(nums[i])
    for i in range(len(nums)):
        L[i]=int(L[i])
    return L -End,"
 def kaprekar_check(n):
    nn = str(n)
    num_str=[]
    
    for i in range(len(nn)):
        num_str.append(nn[i])
    for i in range(len(nn)):
        num_str[i]=int(num_str[i])    
    my_set = set(num_str)

    if len(nn) == 3 or len(nn) == 4 or len(nn) == 6:
        if n != 100 and n != 1000 and n != 100000:
            if len(my_set) != 1:
                return True
                
    return False -End,"
 def kaprekar_step(L):
    
    nums = L
    a = (sorted(nums, reverse=True))
    aa = int(''.join([str(i) for i in a]))
    b = ((sorted(nums)))
    bb = int("""".join([str(i) for i in b]))
    x = aa - bb
    
    return x
    
#L=[2, 7, 1, 8]
#kaprekar_step(L) -End,"
 import sys

buffL_for_print=[]

# запуск функции проверки на число Капрекара(через рекурсию?)
# дополнительная проверка в множестве для 6-ти значных чисел
def kaprekar_check(n):
    nn = str(n)
    num_str=[]

    for i in range(len(nn)):
        num_str.append(int(nn[i]))

    my_set = set(num_str)

    if (len(nn) != 3 and len(nn) != 4 and len(nn) != 6) or (n == 100 or n == 1000 or n == 100000 or len(my_set) == 1):
        print(""Ошибка! На вход подано число "" +str(n)+"", не удовлетворяющее условиям процесса Капрекара"")
        sys.exit()    
    else:
        return (n)


#  Напишите функцию numerics(n), принимающую на вход 1 натуральное число, 
#  а возвращающую список цифр из которых состоит число
def numerics(n):
    L=[]
    nums = str(n)
    for i in range(len(nums)):
        L.append(int(nums[i]))
    return L


#  Функция должна сформировать внутри 2 числа:
def kaprekar_step(L):    
    nums = L
    # проверка нахождения ответа списке, выход при нахождении элемента в списке
    if str(L) not in buffL_for_print: # формируем список всех пробегающих чисел
        buffL_for_print.append(str(L))# формируем множество уникальных чисел
    else:
        for i in range(len(buffL_for_print)):# вывод уникальных чисел из множества и завершение п-мы
            
            buff_num = buffL_for_print[i]
            buff_num = buff_num[1:-1]
            buff_num = buff_num.replace("","","""")
            buff_num = buff_num.replace("" "","""")
            print(int(buff_num))
            buff_num = int(buff_num)
            
            L_for_print = int(''.join([str(i) for i in nums]))
            
            if (buff_num == 495 or buff_num == 6174 or buff_num == 549945 or buff_num == 631764):
                sys.exit()
            
        print(""Следующее число - ""+str(L_for_print)+"", кажется процесс зациклился..."")
        sys.exit()
        
    a = int(''.join([str(i) for i in (sorted(nums, reverse=True))]))
    b = int("""".join([str(i) for i in (sorted(nums))]))
    x = a - b
    return x

# конечная функция
def kaprekar_loop(n):
    n = kaprekar_check(n) # зачем возвращать True or False, если я их не буду использовать?
    L = numerics(n)# принимает число n, возвращает список цифр n
    x = kaprekar_step(L) # принимает L- список чисел, возвращает разницу между макс и мин
    kaprekar_loop(x)

#n = 103303
#kaprekar_loop(n) -End,"
 def luka(L0, L1, n):
    buff = []
    buff.append(L0)
    buff.append(L1)
    
    i = 2
    while i < n+2:
        Ln = buff[0]+ buff[1]
        buff.append(Ln)
        del(buff[0])
        i += 1
        if i+1 == n+2:
            return Ln

    return buff[n] -End,"
 from decimal import *
getcontext().prec = 50  


def  fi(L0, L1, n):
    for _ in range(n-1):
        Ln = L0 + L1
        L0 = L1
        L1 = Ln 
        
    L1 = Decimal(L0)
    Ln = Decimal(Ln)
    res = Ln/L1
    
    return Decimal(res) -End,"
 def factorial(n):
    res = 1
    if n == 0 or n == 1:
        #print(1)
        return 1
    else:
        for i in range(1, n+1):
            res *= i
    #print(res)
    return res

def sf(n):
    res = 1
    for i in range(1, n+1):
        fac = factorial(i)
        res*= fac

    #print (res)
    return res
    
     -End,"
 def translate(num,n=2):
    cel = 1
    buff = []
    while cel != 0:
        cel = num // n 
        ost = num % n
        num = cel
        buff.append(ost)
        
    buff0 = int(''.join(str(e) for e in buff[::-1]))
    return buff0 -End,"
 def Kfactorial(n, k = 1):
    res = 1
    while n > 0:
        res *= n
        n -= k
    return res
    

 -End,"
 import numpy as np


 -End,"
 import numpy
print(numpy.version.version)

 -End,"
 import numpy as np
n=int(input())
Z=np.zeros(n)



 -End,"
 a, b = int(input()), int(input())
if a < b:
    a, b = b, a
n = a
while n % b:
    n += a
print(n)# put your python code here




 -End,"
 a, b = int(input()), int(input()) # put your python code here
if a % 3 == 2:
    a += 1
elif a % 3 == 1:
    a += 2
k = 0
s = 0
for i in range (a, b+1, 3):
    k += 1
    s += i 
print (s/k)


 -End,"
 s = input() + ' '
i = 0
while i < len(s) - 1:
    if s[i] != s[i+1]: #Если после символа идет не такая же буква
        s = s[:i+1] + '1' + s[i+1:] #Ставим после буквы цифру 1 
        i += 2 #Перешагиваем через два символа
    else: #Иначе (то есть у нас повторяющиеся буквы)
        k = 2
        while s[i] == s[i+k]:
            k +=1 #Проверяем сколько у нас всего повторений
        s = (s[:i+1] + str(k) + s[i+k:]) #Заменяем повторяющиеся буквы на их количество
        i += len(str(k)) + 1
print(s[:-1])


 -End,"
 a = [i for i in input().lower().split()]#Считываем строку как список
i = 0#Счетчик равен 0
b = []
while i < len(a):#Пока счетчик меньше длины списка
    if a[i] not in b:#Если элемента нет в новом списке
        print(a[i], a.count(a[i]))#Выводим элемент и количество
        b.append(a[i])#Добавляем элемент в новый список
    i += 1#Добавляем счетчику 1 -End,"
 d = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
ch = input()
sum = 0
for i in range(len(ch)-1):
    if d[ch[i]] < d[ch[i+1]]:
        sum -= d[ch[i]]
    else:
        sum += d[ch[i]]
sum += d[ch[len(ch)-1]]
print(str(sum))

 -End,"
 
mn = []
for obj in objects:
    if obj not in mn:
        mn.append(obj)
ans = len(mn)
print(ans) -End,"
 s = input().split()
for i in set(s):
    if s.count(i) > 1: 
      print(i, end=' ')
 -End,"
 n, m = [int(x) for x in input().split()]
a = [""."" * (m+2)]
for i in range(n):
  a.append(""."" + input() + ""."")
a.append(""."" * (m+2))
for i in range(1,n+1):
  for j in range(1,m+1):
    if a[i][j] == ""."":
      print(sum(1 for x in (i-1, i, i+1) for y in (j-1, j, j+1) if a[x][y] == ""*""), end='')
    else:
      print(a[i][j], end='')
  print()
 -End,"
 d = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}
n = int(input())
for i in d:
    if n // i != 0:
        print(d[i]*(n // i), end='')
        n %= i
 -End,"
 d = {}
for i in input().split():
    key = len(i)
    if key not in d.keys():
        d[key] = 1
    else:
        d[key] += 1
for i in sorted(d.keys()):
    print(str(i)+': '+str(d[i]))
 -End,"
 d = {'mile': 1609, 'yard': 0.9144, 'foot': 0.3048, 'inch': 0.0254, 'km': 1000, 'cm': 0.01, 'mm': 0.001, 'm': 1}
s = input().split()
x = float(s[0]) * d[s[1]] / d[s[3]]
print('{:.2e}'.format(x))
 -End,"
 n, m = [int(x) for x in input().split()]
a = []
for i in range(n):
    s = input()
    a.append(s[len(s)-1]+s+s[0])
a.append(a[0])
a.insert(0, a[len(a)-2])
for i in range(1,n+1):
    for j in range(1,m+1):
        ch = sum(1 for x in (i-1, i, i+1) for y in (j-1, j, j+1) if a[x][y] == ""X"")
        if a[i][j] == ""."":
            print('X' if ch == 3 else '.', end='')
        else:
            print('X' if ch == 3 or ch == 4 else '.', end='')
    print()

 -End,"
 class multifilter:
    def judge_half(pos, neg):
        if pos>=neg:
            return True# допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)

    def judge_any(pos, neg):
        if pos >= 1:
            return True# допускает элемент, если его допускает хотя бы одна функция (pos >= 1)

    def judge_all(pos, neg):
        if neg == 0:
            return True# допускает элемент, если его допускают все функции (neg == 0)

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable# iterable - исходная последовательность
        self.funcs = funcs# funcs - допускающие функции
        self.judge = judge# judge - решающая функция

    def __iter__(self):
        for item in self.iterable:
            self.pos = 0
            self.neg = 0
            for f in self.funcs:
                if f(item):
                    self.pos += 1
                else:
                    self.neg += 1
            if self.judge(self.pos,self.neg):
                yield item# возвращает итератор по результирующей последовательности

 -End,"
 def prime(a):
    k = 0
    for i in range(1, a//2 + 1):
        if a % i == 0:
            k += 1
    if k == 1:
        return True

def primes():
    a = 1
    while True:
        a += 1
        if prime(a):
            yield a
 -End,"
 def fractd(n,m):
    if n != 1:
      if m!=0:
        print(n//m, end=' ')
        fractd(m, n % m)

n,m = [int(i) for i in input().split('/')]
fractd(n,m)
 -End,"
 n,m = [int(i) for i in input().split()]
s = []
for i in range(n):
    s.append(input().split())
for  j in range(m):
    for i in range(n):
        print(s[i][j], end=' ')
    print()
 -End,"
 s = input()
L = [ i[1:-1] for i in s[1:-1].split(', ')]




 -End,"
 a1 = ' -- '
a2 = '|  |'
a3 = '    '
a4 = '   |'
a5 = '|   '

d = {'0': [a1, a2, a2, a3, a2, a2, a1],
     '1': [a3, a4, a4, a3, a4, a4, a3],
     '2': [a1, a4, a4, a1, a5, a5, a1],
     '3': [a1, a4, a4, a1, a4, a4, a1],
     '4': [a3, a2, a2, a1, a4, a4, a3],
     '5': [a1, a5, a5, a1, a4, a4, a1],
     '6': [a1, a5, a5, a1, a2, a2, a1],
     '7': [a1, a4, a4, a3, a4, a4, a3],
     '8': [a1, a2, a2, a1, a2, a2, a1],
     '9': [a1, a2, a2, a1, a4, a4, a1]}

s = input()
print('x' + '-'*(5*len(s)-1) + 'x')
for i in range(7):
  print('|', end='')
  for j in range(len(s)):
    print(d[s[j]][i], end='')
    if j < len(s)-1:
      print(' ', end='')
  print('|')
print('x' + '-'*(5*len(s)-1) + 'x')
 -End,"
 def convert(L):
    return [int(i) for i in L]
 -End,"
 def factorial(n):
    if n == 1 or n == 0:
        return 1
    else:
        return n*factorial(n-1)

def sf(n):
    if n == 1 or n == 0:
        return 1
    else:
        return factorial(n)*sf(n-1)
 -End,"
 from math import atan# import libraries
def f(x):
    return 2*atan(x)# You code of function

lim = round(f(100000),3)#Your code of lim
print (lim) -End,"
 n = int(input()) # Input and convert to int
res = sum(i for i in range(5,n+1,5) if i%3)
print(res)




 -End,"
 def common(list_a, list_b):
    return [i for i in list_a if i in list_b]




 -End,"
 s = input()
def fix_start(s):
    print(s[0],end='')
    for i in range(1,len(s)):
        print(s[i] if s[i] != s[0] else '*', end='')
fix_start(s) -End,"
 def numerics(n):
    s = [int(i) for i in str(n)]
    return s -End,"
 def numerics(n):
    s = [int(i) for i in str(n)]
    return s

def kaprekar_step(L):
    L = sorted(map(str,L))
    return int(''.join(L[::-1]))-int(''.join(L))

def kaprekar_loop(n):
    while True:
        if n == 6174:
            print(n)
            break
        print(n)
        L = numerics(n)
        n = kaprekar_step(L) -End,"
 def numerics(n):
    return [int(i) for i in str(n)]

def kaprekar_step(L):
    L = sorted(map(str,L))
    return int(''.join(L[::-1]))-int(''.join(L))

def kaprekar_check(n):
    L=numerics(n)
    if len(L) in (3,4,6) and len(set(L)) != 1 and n not in (100,1000,100000):
        return True
    else:
        return False

def kaprekar_loop(n):
    setk={0}
    if not kaprekar_check(n):
        print(""Ошибка! На вход подано число {}, не удовлетворяющее условиям процесса Капрекара"".format(n))
        return
    while True:
        if n in (495, 6174, 549945, 631764) and n not in setk:
            print(n)
            break
        if n in setk:
            print(""Следующее число - {}, кажется процесс зациклился..."".format(n))
            break
        else:
            if len(numerics(n)) == 6:
                setk.add(n)
        print(n)
        L = numerics(n)
        n = kaprekar_step(L)
 -End,"
 def kaprekar(n):
    k = n**2
    for i in range(1,len(str(k))):
        a,b = (k//10**i), (k%10**i)
        if n == a + b and  b != 0:
            return True
    return False
 -End,"
 d=""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""

def a_to_dec(n, sys):
    k = 0
    for i in range(len(n)):
        k += d.find(n[len(n)-i-1])*sys**i
    return k

def dec_to_a(n, sys):
    a = int(n)
    s = ''
    while a // sys > 0:
        s = d[a % sys] + s
        a //= sys
    if a:
        s = d[a] + s
    return s

def convert(num, to_base=10, from_base=10): 
    if to_base == 10 and from_base == 10:
        return num
    elif to_base == 10:
        return str(a_to_dec(num, from_base))
    elif from_base == 10:
        return dec_to_a(num, to_base)
    else:
        return dec_to_a(str(a_to_dec(num, from_base)), to_base)
 -End,"
 def convert(num, to_base=10, from_base=10):
    d = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    dec = int(str(num), from_base)
    target = """"
    while dec > 0:
        target = d[dec % to_base] + target
        dec //= to_base
    return target

def kaprekar(num, base=10):
    n = int(str(num), base)
    k = convert(n**2,base)
    for i in range(1,len(k)):
        a,b = int(k[:i],base), int(k[i:],base)
        if n == a + b and  b != 0:
            return True
    return False
 -End,"
 newL = []
def list_pull(L):
    for i in L:
        if type(i) is list:
            list_pull(i)
        else:
            newL.append(i)
    return newL
 -End,"
 L2 = [i[::] for i in L1]
 -End,"
 def verbing(s):
    if len(s) > 2:
        return s+'ing' if s[-3:] != 'ing' else s+'ly'
    else:
        return s
 -End,"
 def front_back(a,b):
    return a[:(len(a)+1)//2] + b[:(len(b)+1)//2] + a[(len(a)+1)//2:] + b[(len(b)+1)//2:]
 -End,"
 def mimic_dict(string):
    L = string.split()
    d = {'':[L[0]]}
    for i in range(len(L)-1):
        if L[i] not in d:
            d[L[i]] = L[i+1]
        else:
            d[L[i]] += L[i+1]
    return d
 -End,"
 import random

def print_mimic(mimic_dict, word):
    s = word
    i = 1
    while i<200:
        if word not in mimic_dict:
            word = ''
        else:
            word = random.choice(mimic_dict[word])
            i += 1
            s += ' ' + word
    return s -End,"
 s = input()
l,k = [], []
d = {'(':')', '[':']', '{':'}'}
for i in range(len(s)):
    if s[i] in ('(', '[', '{'):
        l.append(s[i]); k.append(i+1)
    elif len(l) and d[l[len(l)-1]] == s[i]:
        l.pop(); k.pop()
    elif s[i] in (')', ']', '}'):
        k.append(i+1); break
print('Success' if not len(k) and not len(l) else k.pop()) -End,"
 s = input()
l,k = [], []
d = {'(':')', '[':']', '{':'}'}
for i in range(len(s)):
    if s[i] in d:
        l.append(s[i]); k.append(i+1)
    elif l and d[l[len(l)-1]] == s[i]:
        l.pop(); k.pop()
    elif s[i] in d.values():
        k.append(i+1); break
print('Success' if not k and not l else k.pop()) -End,"
 import numpy as np

shape = input().split()
dtype = np.float64
if not shape[-1].isdigit():
    dtype = shape.pop()

Z = np.zeros(tuple(map(int,shape)), dtype)
 -End,"
 import numpy as np

Z = Z.flatten()
print(Z.itemsize * int(Z.shape[0]))
 -End,"
 import numpy as np

l = int(input())
n,m = input().split()

Z = np.array(range(l)).reshape((int(n), int(m)))

 -End,"
 import numpy as np

print(list(Z[np.nonzero(Z > 3)]))

 -End,"
 b = []
while True:
    row = input().split()
    if row[0] == 'end':
        break
    for i in range(len(row)):
        row[i] = int(row[i])
    b += [row]
for r in range(len(b)):
    for e in range(len(b[r])):
        summ = b[r][e-1] + b[r][e+1-len(b[r])] + b[r-1][e] + b[r+1-len(b)][e]
        print(summ, end=' ')
    print() -End,"
 import numpy as np

k = tuple(map(int, input().split()))
np.random.seed(42)
Z = np.random.random(k)
 -End,"
 import numpy as np

n,m = input().split()

np.random.seed(42)
Z = np.random.random(int(n)*int(m))

print(Z.min())
print(Z.max()) -End,"
 d = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']

def sort_s(s):
    for i in range(4):
        for j in range(4):
            if d.index(s[j][:-1]) > d.index(s[j+1][:-1]):
                s[j], s[j+1] = s[j+1], s[j]
    return s
                
def same(s):
    if s[0][-1] == s[1][-1] and s[0][-1] == s[2][-1] and s[0][-1] == s[3][-1] and s[0][-1] == s[4][-1]:
        return True
    return False

s = input().split()
s = sort_s(s)

if s[0][:-1] == '10' and s[1][:-1] == 'J' and s[2][:-1] == 'Q' and s[3][:-1] == 'K' and s[4][:-1] == 'A' and same(s):
    print('Royal Flush')
elif same(s) and (d.index(s[4][:-1]) - d.index(s[3][:-1]) == 1 and d.index(s[3][:-1]) - d.index(s[2][:-1]) == 1 and d.index(s[2][:-1]) - d.index(s[1][:-1]) == 1 and d.index(s[1][:-1]) - d.index(s[0][:-1]) == 1 or s[0][:-1] == '2' and s[1][:-1] == '3' and s[2][:-1] == '4' and s[3][:-1] == '5' and s[4][:-1] == 'A'):
    print('Straight Flush')
elif d.index(s[3][:-1]) == d.index(s[2][:-1]) and d.index(s[2][:-1]) == d.index(s[1][:-1]) and (d.index(s[4][:-1]) == d.index(s[3][:-1]) or d.index(s[1][:-1]) == d.index(s[0][:-1])):
    print('Four of a Kind')
elif ( d.index(s[4][:-1]) == d.index(s[3][:-1]) and d.index(s[3][:-1]) == d.index(s[2][:-1]) and d.index(s[1][:-1]) == d.index(s[0][:-1]) ) or ( d.index(s[4][:-1]) == d.index(s[3][:-1]) and d.index(s[2][:-1]) == d.index(s[1][:-1]) and d.index(s[1][:-1]) == d.index(s[0][:-1]) ):
    print('Full House')
elif same(s):
    print('Flush')
elif d.index(s[4][:-1]) - d.index(s[3][:-1]) == 1 and d.index(s[3][:-1]) - d.index(s[2][:-1]) == 1 and d.index(s[2][:-1]) - d.index(s[1][:-1]) == 1 and d.index(s[1][:-1]) - d.index(s[0][:-1]) == 1 or (s[0][:-1] == '2' and s[1][:-1] == '3' and s[2][:-1] == '4' and s[3][:-1] == '5' and s[4][:-1] == 'A'):
    print('Straight')
elif d.index(s[4][:-1]) == d.index(s[3][:-1]) and d.index(s[3][:-1]) == d.index(s[2][:-1]) or d.index(s[3][:-1]) == d.index(s[2][:-1]) and d.index(s[2][:-1]) == d.index(s[1][:-1]) or d.index(s[2][:-1]) == d.index(s[1][:-1]) and d.index(s[1][:-1]) == d.index(s[0][:-1]):
    print('Three of a Kind')
elif (d.index(s[4][:-1]) == d.index(s[3][:-1]) and d.index(s[2][:-1]) == d.index(s[1][:-1])) or (d.index(s[3][:-1]) == d.index(s[2][:-1]) and d.index(s[1][:-1]) == d.index(s[0][:-1])) or (d.index(s[4][:-1]) == d.index(s[3][:-1]) and d.index(s[1][:-1]) == d.index(s[0][:-1])):
    print('Two Pairs')
elif d.index(s[4][:-1]) == d.index(s[3][:-1]) or d.index(s[3][:-1]) == d.index(s[2][:-1]) or d.index(s[2][:-1]) == d.index(s[1][:-1]) or d.index(s[1][:-1]) == d.index(s[0][:-1]):
    print('Pair')
else:
    print('High Card') -End,"
 import numpy as np

np.random.seed(42)
m = tuple(map(int, input().split()))
Z = np.random.random(m)

K = Z.mean(axis=0)
print(K.min())
print(K.max())
 -End,"
 import numpy as np

n = int(input())
Z = np.zeros((n,n), int)
for i in range(n):
    Z[i,i] = i+1
 -End,"
 import numpy as np

a,b = map(int, input().split())

M = np.array([[1, -1], [1, 1]])
v = np.array([b,a])

r = np.linalg.solve(M, v)
if b > a or int(r[0]) + int(r[1]) != a:
    print('Такой класс не существует')
else:
    print(int(r[0]), int(r[1])) -End,"
 import sys
sys.setrecursionlimit(20000)

n = int(input())
ch = [int(i) for i in input().split()]
h = [-1]*n
def height(t, ch):
    if h[t] == -1:
        if ch[t] == -1:
            return 1
        return 1 + height(ch[t], ch)
    else:
        return h[t]

for i in range(n):
    h[i] = height(i, ch)
print(max(h))

 -End,"
 def simple_multiplication(x, y):
    a = 100 - x
    b = 100 - y
    c = 100 - (a + b)
    d = a * b
    return c, d

def wisdom_multiplication(x, y, length_check = True):
    c, d = simple_multiplication(x, y)
    if length_check:
        return str(c) + '{:0>2}'.format(str(d))
    return str(c) + str(d)

 -End,"
 a = int(input())
a1 = int(a/100000)
a2 = int (a/10000%10)
a3 = int (a/1000%10)
a4 = int (a/100%10)
a5 = int (a/10%10)
a6 = int (a%10)
if (a1+a2+a3 == a4+a5+a6):
    print ('Счастливый')
else:
    print('Обычный')




 -End,"
 # put your python code here

n = int(input())
sum = n;
while (n!=0):
    n = int(input())
    sum+=n
print (sum)


 -End,"
 # put your python code here
a = int(input())
b = int(input())
x = a*b
s = 1
while (s <= x):    
    if(s % a == 0 and s % b == 0):
        print (s)
        break
    s+=1



 -End,"
 # put your python code here
a = 0
while(a <= 100):
    a = int(input())
    if(a >= 10 and a <= 100):
        print (a)






 -End,"
 # put your python code here
a = int(input())
b = int(input())
s, c = 0, 0;
for i in range(a, b+1):
    if (i % 3 == 0):
        s += i;
        c +=1;
        
print (s/c)




 -End,"
 a = int(input())
sum = a
sqrsum = a*a
while (sum!=0):
    a = int(input())
    sum +=a
    sqrsum +=a*a
print (sqrsum)





 -End,"
 a = int(input())
b = int(input())
print(a+b, a-b, a*b, a/b, sep = '@')



 -End,"
 a = int (input())
b = int (input())
a,b = b,a
print(a, b, sep = ',')




 -End,"
 a,b,x=int(input()), int(input()), int(input())
y = (a/b)**x+a**(x+1)/b**x
print(abs(y))




 -End,"
 h = int(input())
m = int(input())
print(h*60+m)




 -End,"
 a = int(input());
print(a//60, a%60, sep='\n')




 -End,"
 a = int(input())
h = int(input())
m = int(input())
m = a%60+m
h = a//60+h
if m>=60:
    m = m-60
    h = h+1;
print(h, m, sep='\n')




 -End,"
 
trees = int(input())
print(trees+trees*0.8+trees*0.8+5) -End,"
 #дано:
s = input() #площадь
a = input() #длина одной стороны
#преобразовать данные в числа с плавающей точкой
s = float(s)
a = float(a)
#решение: написать алгебраическое выражение для вычисления периметра
p = (s/a+a)*2
#ответ: вывести значение периметра, хранящейся в переменной p
print(p) -End,"
 #дано:
n = int(input()) #сумма вклада банк
x = int(input())
x = x/100
#решение и ответ: написать алгебраическое выражение для решения этой задачи
print(n+x*n) -End,"
 sleep = int(input())
sleep = 24/sleep
foodh, foodmin = input().split()
studies = int(input())
foodh = int(foodh)
foodmin = int(foodmin)
food = foodh*60+foodmin
freetime = 24*60 - food - sleep*60 -studies*60
print(freetime)
 -End,"
 p = float(input())
a = p/4
s = 2*a**2
print(s) -End,"
 a, b = input().split()
c, d = input().split()
a, b, c, d = float(a), float(b), float(c), float(d)
print(a*b + c*d)




 -End,"
 a,b=input().split()
v2 = float(input())
a,b = float(a), float(b)
v1 = b*v2/a
print(v1)




 -End,"
 a = int(input())
print(a*100/90/1000)




 -End,"
 a, b = input().split()
a, b = int(a), int(b)
c = int(input())
m = (a*100+b)*c
print(m//100, m%100)





 -End,"
 print(int(input())%10)




 -End,"
 print(int(input())//10)




 -End,"
 x = int(input())
print(x//100000+x//10000%10+x//1000%10+x//100%10+x//10%10+x%10)




 -End,"
 a,b,c,d = input()
a,b,c,d = int(a),int(b),int(c),int(d)
print(a+b,c+d, sep='')




 -End,"
 a = input()
print(int(a[0]) + int(a[3]), int(a[2]) + int(a[1]), sep='') -End,"
 a = input()
print(int(a[0]) + int(a[2]) + int(a[4]), int(a[1]) + int(a[3]), sep='')



 -End,"
 print(int(input())//3600)




 -End,"
 print(int(input()) % 60)




 -End,"
 print(int(input())%3600)




 -End,"
 a = int(input())
if a%100!=0 and a%4 == 0 or a%400 ==0:
    print('Високосный')
else:
    print('Обычный')




 -End,"
 a,b,c,d,e,f = input()
a,b,c,d,e,f = int(a), int(b), int(c), int(d), int(e), int(f)
if a+b+c == d+e+f:
    print('Счастливый')
else:
    print('Обычный')
    




 -End,"
 x1 = input()
y1 = input()
x2 = input()
y2 = input()
x = input()
y = input()
if(x1<=x<=x2 or y2<=y<=y1):
    print('Точка принадлежит прямоугольнику')
else: 
    print('Точка не принадлежит прямоугольнику')




 -End,"
 x1 = int(input())
y1 = int(input())
x2 = int(input())
y2 = int(input())
if (abs(x1-x2)== 1 and abs(y1-y2)== 1):
    print('YES')
else: 
    print('NO')




 -End,"
 a,b,c = int(input()), int(input()), int(input())
if(a<=c<=b):
    print('Это нормально')
elif(c>=b):
    print('Пересып')
else:
    print('Недосып')





 -End,"
 a = abs(int(input()))
if(a % 2 == 0 or a % 3 ==0):
    print('Введённое число не является простым')
else:
    print('Введённое число является простым')




 -End,"
 a , b = int(input()), int(input())
i = min(a, b)
while True:
    if i%a==0 and i%b==0:
        break
    i += 1
print(i)




 -End,"
 a,b = int(input()), int(input())
while True:
    if a>b:
        a = a%b
    elif b>a:
        b = b%a
    if (a == 0 or b == 0):
        print(a+b)
        break




 -End,"
 a = int(input())
l = 0
while True:
    l+=1
    a = a // 10
    if a == 0:
        break
print(l)

 -End,"
 print(len(input()))




 -End,"
 print(len(input()))




 -End,"
 s = 1
for i in range(1, 11, 3):
    s = s*i
print(s)    
    



 -End,"
 for i in range(4):
    print(int(input())**3)




 -End,"
 all_num = int(input())
minnum = 30000+1
for i in range(all_num):
    now_num = int(input())
    if now_num < minnum:
        minnum = now_num
print(minnum)




 -End,"
 # the sum of input numbers
a = int (input())
max_value = -30000
for i in range (a):
    # enter your input number
    b = int(input())
    if b % 4 == 0 and b > max_value:
        max_value = b
print(max_value)



 -End,"
 a = int(input())
c = 1
max_value = 1
min_value = 300
while c <= a:
    c+=1
    b = round(float(input()))
    if b > max_value:
        max_value = b
    if b < min_value:
        min_value = b    
print(max_value)
if min_value < 30:
    print(""YES"")
else:
    print(""NO"")




 -End,"
 a = int(input())
b = c = 0
while a!= 0:
    if (a%2 == 1 and a % 3 == 0):
        b+=1
    c += 1
    a = int(input())
print( c, b, sep = '\n')



 -End,"
 a = int(input())
sum = plus = minus =0
while a!= 0:
    sum+=a
    if a > 0:
        plus += 1
    else:
        minus += 1
    a = int(input())
print(sum, plus - minus, sep = '\n')    




 -End,"
 a = int(input())
max_value = 0
min_value = 20
for i in range(a):
    b = int(input())
    if b > max_value:
        max_value = b
    if b < min_value:
        min_value = b
print(max_value)
if min_value == 0:
    print(""YES"")
else:
    print(""NO"")




 -End,"
 days = int(input())
a_min = 1000
for i in range (days):
    a = int(input())
    if a < a_min:
        a_min = a
print(a_min)
if a_min + 15 < 0:
    print(""YES"")
else: 
    print(""NO"")
    




 -End,"
 
a = float (input ())
b = float (input ())
c = float (input ())
d = float (input ())
#First triangle

s1 = a*b/2

from math import sqrt

t = sqrt(a**2 + b ** 2)
p = (c+d+t)/2
s2 = sqrt(p*(p-d)*(p-c)*(p-t))

s = s1+s2
print (int(s))





 -End,"
 def closest_mod_5(x):
    if x % 5 == 0:
        return x
    return closest_mod_5(x + 1) -End,"
 s = input()
print(""%.2f"" % (s.count(""A"") / (s.count("" "") + 1))) -End,"
 print(input().title().replace('_', '')) -End,"
 def f(x):
    if x <= -2:
        return 1 - (x + 2) ** 2
    elif -2 < x <= 2:
        return -x/2
    elif 2 < x:
        return (x - 2) ** 2 + 1 -End,"
 def modify_list(l):
    i = 0
    while i < len(l):
        if l[i] % 2 == 0:
            l[i] = l[i] // 2
            i += 1
        else:
            l.remove(l[i])
 -End,"
 d = {}
for w in input().lower().split():
    if w in d:
        d[w] += 1
    else:
        d[w] = 1

for k, v in d.items():
    print(k, v)
 -End,"
 n = int(input())
d = {}

for i in range(n):
    x = int(input())
    if x not in d:
        d[x] = f(x)
    print(d[x])
 -End,"
 g = (n for n in range(1, 1000) for m in range(n))
for i in range(int(input())):
    print(next(g))
 -End,"
 lst = [int(x) for x in input().split(' ')]
n = int(input())
r = [str(i) for i in range(len(lst)) if lst[i] == n]
if len(r) > 0:
    print(' '.join(r))
else:
    print(""None"")

 -End,"
 h = int(input())
a = int(input())
b = int(input())
print((h - b - 1) // (a - b) + 1) -End,"
 n = int(input())
env = {'global': [None, []]}

def get(namespace, var):
    if var in env[namespace][1]:
        return namespace
    elif env[namespace][0] != None:
        return get(env[namespace][0], var)
    else:
        return None

for i in range(n):
    a, n, v = input().split(' ')
    if a == 'create':
        env[n] = [v, []]
    elif a == 'add':
        env[n][1].append(v)
    elif a == 'get':
        print(get(n, v))
 -End,"
 s, t = input(), input()
count, start = 0, s.find(t)

while start != -1:
    count += 1
    start = s.find(t, start + 1)
print(count) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r'z.{3}z', line):
        print(line) -End,"
 import sys, re
for line in sys.stdin:
    print(re.sub('human', 'computer', line.rstrip())) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'\b[aA]+\b', 'argh', line, 1)) -End,"
 n, m = map(int, input().split())
arr = []

for _ in range(n):
    arr.append(input().split())

for j in range(m):
    for i in range(n):
        print(arr[i][j], end=' ')
    print() -End,"
 a, op, b = input().split()
a = int(a)
b = int(b)
r = 0

if op == 'plus':
    r = a + b
elif op =='minus':
    r = a - b
elif op =='multiply':
    r = a * b
elif op =='divide':
    r = a // b
print(r)
 -End,"
 import numpy as np
print(np.eye(3,4) * 2 + np.eye(3,4,1)) -End,"
 import numpy as np
print(mat.reshape(mat.size,1)) -End,"
 a = input()
b = input()

s = '''{0} and {1} sat in the tree.
{0} had fallen, {1} was stolen.
What's remaining in the tree?'''.format(a, b)

print(s)
 -End,"
 h1, m1, s1, h2, m2, s2 = [int(input()) for v in range(6)]

t1 = h1 * 60 * 60 + m1 * 60 + s1
t2 = h2 * 60 * 60 + m2 * 60 + s2
print(t2 - t1)
 -End,"
 t = int(input())

print(""{}:{:02}:{:02}"".format(t // 3600 % 24, t % 3600 // 60, t % 60)) -End,"
 import math
print(sum([math.ceil(int(input()) / 2) for i in range(3)])) -End,"
 n = int(input())
print(n + 2 if n % 2 == 0 else n + 1) -End,"
 print(int(input()) // 10 % 10) -End,"
 print(int(input()) // 10) -End,"
 print(int(input()) % 10) -End,"
 print(input()[::-1]) -End,"
 a = int(input())
b = int(input())
print(a**b) -End,"
 m = int(input())
n = int(input())
k = int(input())

if (k % m == 0 or k % n == 0) and k <= m * n:
    print(""YES"")
else:
    print(""NO"") -End,"
 y = int(input())
if y % 4 == 0 and y % 100 != 0 or y % 400 == 0:
    print(""Leap"")
else:
    print(""Regular"") -End,"
 OPS = {
    '+': lambda x, y: x + y,
    '-': lambda x, y: x - y,
    '/': lambda x, y: x / y,
    '*': lambda x, y: x * y,
    'mod': lambda x, y: x % y,
    'pow': lambda x, y: x ** y,
    'div': lambda x, y: x // y
}
a = float(input())
b = float(input())
cmd = input()

try:
    print(OPS[cmd](a, b))
except ZeroDivisionError:
    print('Division by 0!')
 -End,"
 n, m, x, y = [int(input()) for i in range(4)]

p = min(n, m) - x
q = max(n, m) - y

print(min(p, q, x, y)) -End,"
 a, b, c = [int(input()) for i in range(3)]

if a + b > c and a + c > b and b + c > a:
    print('YES')
else:
    print('NO') -End,"
 n = int(input())
print(-15 < n <= 12 or 14 < n < 17 or 19 <= n) -End,"
 a, b, h = [int(input()) for i in range(3)]

if a > h:
    print('Deficiency')
elif a <= h <= b:
    print('Normal')
else:
    print('Excess') -End,"
 import math

shape = input()

if shape == 'triangle':
    a, b, c = [int(input()) for i in range(3)]
    p = (a + b + c) / 2
    s = math.sqrt(p * (p - a) * (p - b) * (p - c))
elif shape == 'rectangle':
    a, b = [int(input()) for i in range(2)]
    s = a * b
elif shape == 'circle':
    pi = 3.14
    r = int(input())
    s = pi * r ** 2

print(s) -End,"
 n = int(input())
print(n, 'programmer' if n == 1 else 'programmers') -End,"
 n = int(input())

shapes = ['square', 'circle', 'triangle', 'rhombus']
if n > len(shapes):
    print('There is no such shape!')
else:
    print('You have chosen a ' + shapes[n - 1]) -End,"
 n = input().zfill(4)
print(int(n == n[::-1])) -End,"
 print(""YES"" if int(input()) > 0 else ""NO"") -End,"
 a, b, c = [int(input()) for i in range(3)]
p = (a + b + c) / 2
s = (p * (p - a) * (p - b) * (p - c)) ** 0.5
print(s) -End,"
 f = float(input())
print(f - int(f)) -End,"
 print(int(float(input()) * 10 % 10)) -End,"
 print(sum(range(int(input()), int(input())+1 ))) -End,"
 n = int(input())
max = 0
for i in range(n):
    n = int(input())
    if n % 4 == 0 and n > max:
        max = n
print(max) -End,"
 n = int(input())
sum = 0
for i in range(n):
    n = int(input())
    if n % 10 == 4:
        sum += n
print(sum) -End,"
 from skimage.io import imread
img = imread('img.png')
print(img.shape[1]) -End,"
 from skimage.io import imread, imsave

img = imread('img.png')
h, w, _ = img.shape
img[h // 2, w // 2] = [102, 204, 102]

imsave('out_img.png', img) -End,"
 from skimage.io import imread, imsave
import numpy as np
img = imread('img.png')

k = round(img.size * 0.05)
vmin, vmax = np.sort(img.ravel())[[k + 1, -k]]
img = (img.astype('float') - vmin) * 255 / (vmax - vmin)
img = np.clip(img, 0, 255).astype('uint8')
imsave('out_img.png', img) -End,"
 n=input()
if n=='1':
    print('1 programmer')
else:
    print(n+' programmers') -End,"
 n=int(input())
d={'север':0,'запад':0,'юг':0,'восток':0}
for i in range(n):
    x=input().split()
    d[x[0]]+=int(x[1])
print(d['восток']-d['запад'], d['север']-d['юг']) -End,"
 x=int(input())
print(chr(ord('\\')+x)) -End,"
 from itertools import combinations
a = input().split()
for i in combinations(range(int(a[1])), int(a[0])):
    x = ' '.join(str(a) for a in i)
    print(x) -End,"
 def fib_digit(n):
    i = 1
    a = 0
    b = 1
    while i < n:
        i += 1
        a, b = b, (a + b) % 10
    return b

def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 l = []
a = input()
while a != 'end':
    l.append(list(map(int,a.split())))
    a = input()
a, b = len(l), len(l[0])
res = [0]*a
for i in range(a):
    res[i] = []
    for j in range(b):
        res[i].append(l[i - 1][j] + l[(i + 1) % a][j] + l[i][j - 1] + l[i][(j + 1) % b])
for i in res: print(*i) -End,"
 l = []
a, b, *c = map(int, input().split())
for i in range(a):
    l.append(c[:b])
    c = c[b:]
for i in range(b):
    for j in range(a):
        print(l[j][i], end=' ') -End,"
 x, y = map(float, input().split())

if ((x+3)**2 + (y+3)**2 <= 9 and y >= (x+4)**2-4) or ((x-3)**2 + (y+3)**2 <= 25 and y >= x):
    print('YES')
else:
    print('NO') -End,"
 x, y = map(int, input().split())
m = []
for i in range(x):
    m.append(list(input().strip()))
def neib(r, c, z):  #number of neighbours
    rl = r-1
    cl = c-1
    rr = (r+1) % len(z)
    cr = (c+1) % len(z[0])
    res = 0
    for i in [rl, r, rr]:
        for j in [cl, c, cr]:
            if z[i][j] == 'X':
                res += 1
    if z[r][c] == 'X':
        res -= 1
    return res

def life(tt, neibs): #next gen based on current and number of neibs
    if tt == ""X"":
        if neibs in [2, 3]:
            return ""X""
        else:
            return '.'
    else:
        if neibs == 3:
            return 'X'
    return '.'

for i in range(x):
    row = []
    for j in range(y):
        n = neib(i, j, m)
        print(life(m[i][j], n), end='')
    print() -End,"
 import math
for i in range(int(input())):
    print(int(math.log(int(input()), 2))) -End,"
 n = int(input())
for i in range(n):
    for j in range(n):
        if i == j or i == n//2 or j == n //2 or n-i-1 == j:
            print('* ', end='')
        else:
            print('. ', end='')

    print() -End,"
 import re
a = input()
x = re.findall(r'^[ABEKMHOPCTYX]\d{3}[ABEKMHOPCTYX]{2}$', a)
if len(x) > 0:
    print('Yes')
else:
    print('No') -End,"
 n, k = map(int, input().split())
res = ['I'] * n
for i in range(k):
    l, r = map(int, input().split())
    res[l-1: r] = ['.'] * (r-l+1)
    
print(*res, sep='') -End,"
 l, n = map(int, input().split())
b = input().split()
n = n % l
res = b[n:] + b[:n]
print(*res) -End,"
 d = {}
for i in range(int(input())):
    x = list(map(int, input().split()))
    if x[1] not in d:
        d[x[1]] = [x[0]]
    else:
        d[x[1]].append(x[0])
for i in sorted(d.keys(), reverse=True):
    for j in sorted(d[i]):
        print(j, i) -End,"
 def primes():
    i = 2
    while True:
        for j in range(2, int(i**0.5)+1):
            if i % j == 0:
                break
        else: yield i
        i += 1 -End,"
 L, v1, v2, vm = [int(input()) for i in range(4)]
print(int(vm * (L/(v1+v2)))) -End,"
 print(sum(map(int, input().split()))) -End,"
 print(*set(input().split('&'))) -End,"
 with open('text.txt') as f:
    print(f.read()) -End,"
 print(*map(lambda x: x[0], input().split())) -End,"
 print('{}${}'.format(input(), input())) -End,"
 # your code
L = input()[2:-2].split(""', '"")
 -End,"
 d = {'int': (2, lambda a, b: int(a) + int(b) if int(a) or int(b) else 'Empty Ints'),
     'str': (1, lambda s: s if s else 'Empty String'),
     'list': (1, lambda l: l.split()[-1] if l else ""Empty List"")}
t = input()
print(d[t][1](*[input() for _ in range(d[t][0])]) if t in d else ""Unknown type"") -End,"
 print(*[n for n in range(int(input())+1)], sep='\n') -End,"
 print(*[n**2 for n in range(0, int(input()), 2)], sep='\n') -End,"
 print('#'.join([str(sum(map(int, input().split()))) for _ in range(2)])) -End,"
 a = input().split()
print(' '.join([a[i] for i in [1, 2, -2]])) -End,"
 print(*input().split()[::-1], sep=""-$-"") -End,"
 def even_indeces(l):
    return l[::2] -End,"
 print(sum([n for n in range(int(input())+1) if n % 5 ==0 and n % 3 != 0]))
 -End,"
 def front_x(words):
    return sorted([i for i in words if i.startswith('x')]) + sorted([i for i in words if not i.startswith('x')]) -End,"
 n = int(input())
def donuts(n):
    return 'Всего пончиков: {}'.format(n if n<=9 else 'много')

print(donuts(n)) -End,"
 a,b,c = [int(input()) for _ in range(3)]
print(a+b+c)
p = (a+b+c)/2
print((p*(p-a)*(p-b)*(p-c))**0.5) -End,"
 print(sum([a != b for a, b in zip(input(), input())])) -End,"
 def isPalindrome(txt):
    return txt == txt[::-1] -End,"
 def findTheTriple():
    for i in range(1, 998):
        for j in range(1, 998-i):
            k = 1000 - i - j
            if i ** 2 + j ** 2 == k ** 2:
                return {i, j, k} -End,"
 def quickPower(a, n):
    if n == 0 or a == 0:
        return 1
    return quickPower(a, n // 2) ** 2 if n % 2 == 0 else quickPower(a, n-1) * a -End,"
 def deepReverse(nestedList):
    if type(nestedList) == type([]):
        return list(reversed([deepReverse(el) for el in nestedList]))
    return nestedList -End,"
 class ImDict(dict):
    def _immutable(self, *args, **kws):
        raise TypeError('objects of type ImDict are immutable')

    __setitem__ = _immutable
    __delitem__ = _immutable
    clear       = _immutable
    update      = _immutable
    setdefault  = _immutable
    pop         = _immutable
    popitem     = _immutable

class SwitchDict(dict):
    def petrify(self):
        return ImDict(self) -End,"
 from scipy.optimize import golden as gg
def f(x):
    return (x+a)**2 - b
def g(x):
    return abs(f(x))
print(gg(f), gg(g)) -End,"
 def find(arr, n):
    return n in arr




 -End,"
 def is_prime(n):
    return not [i for i in range(2, int(n**0.5)+1) if n%i == 0]




 -End,"
 n = int(input())
p = [int(input()) for _ in range(4)]
print(sum(p[i]*(5-i) for i in range(4))/n)




 -End,"
 print(1/int(input())  * sum(int(input())*(5-i) for i in range(4)))




 -End,"
 for index in range(len(L)-1):
    if abs(L[index] - L[index+1]) == 1:
        break


 -End,"
 import json
outData = json.loads(inData)




 -End,"
 def aBeforeB(s, a, b):
    return a not in s.split(b, 1)[1]




 -End,"
 def sum20(a, b, c):
    return 20 in {a+b, a+c, b+c}




 -End,"
 def PositionLast (x,s):
    for i in range(len(s)-1,-1,-1):
        if s[i] == x:
            return int(i)
    return -1

size = int(input())
l = [int(a) for a in input().split()]
listMin, listMax = min(l), max(l)
toMax = l.index(listMin, 0, size)
toMin = PositionLast(listMax, l)
l[toMax] = listMax
l[toMin] = listMin
[print(i, end=' ') for i in l] -End,"
 s, d, m= input(), {}, set()
for i in s:
    m.add(i)
    if i in d.keys(): d[i] += 1
    else: d[i] = 1
[print(i, d[i]) for i in sorted(m)] -End,"
 def doubleAdd(a, b, c): a.add(b); a.add(c); return a   
n, l, r = int(input()), [int(i) for i in input().split()], set()
[[doubleAdd(r, i, j)for j in range(i+1, len(l))  if l[i]+l[j]==0] for i in range(len(l))]
[print(str(i) + "" "", end="""") for i in sorted(r)] -End,"
 x, y = int(input()), int(input())
lg, sm = x if x>y else y, y if x>y else x
print(""Большее число: "" + str(lg) + "", меньшее число: "" + str(sm)) -End,"
 bx, by, ex, ey = int(input()), int(input()), int(input()), int(input())
print(""YES"" if abs(bx-ex)<2 and abs(by-ey)<2 and 0<ex<9 and 0<ey<9 and not(bx==ex and by==ey) else ""NO"") -End,"
 a, b = int(input()), int(input())
[print(x) for x in range(min(a, b)+min(a,b)%2, max(a, b), 2) if x % 7 == 1] -End,"
 while True:
    p = input()
    if '1234' in p or 'qwerty' in p: print(""Слабый пароль"")
    elif len(p) < 8: print(""Короткий пароль"")
    elif not ('0' in p or '1' in p or '2' in p or '3' in p or '4' in p or '5' in p or '6' in p or '7' in p or '8' in p or '9' in p): print(""Пароль должен содержать цифры"")
    else: break -End,"
 l = []
while True:
    tmp = input()
    if tmp == '.': break
    l.append(int(tmp))
[print(i, end='' + "" "")for i in reversed(l) if i % 2 == 0] -End,"
 while True:
    tmp = input().upper()
    if tmp == '.': break
    print(' '.join(list(tmp))) -End,"
 [print(i, end='') for i in input().lower() if not i in '.,!?:;–'] -End,"
 m, n, k = input().split(), int(input()), int(input())
[print(i, end=' ') for i in m[k-1::n]] -End,"
 [print(int(i)**2, end=' ') for i in reversed(list(iter(input,'.')))] -End,"
 def description(m):
    if m.find('!!') == 0: return 'предупреждение'
    if m.find('@@') == 0: return 'ошибка'
    if m.find('//') == 0: return 'информация'
    if m.find('**') == 0: return 'подробное сообщение'
[print(description(i)) for i in iter(input, '.') if description(i)] -End,"
 l = [int(i) for i in input().split()]
if (l[0] + l[1] == l[2]): print(str(l[0]) + "" + "" + str(l[1]) + "" = "" + str(l[2]))
elif (l[0] - l[1] == l[2]): print(str(l[0]) + "" - "" + str(l[1]) + "" = "" + str(l[2]))
elif (l[0] * l[1] == l[2]): print(str(l[0]) + "" * "" + str(l[1]) + "" = "" + str(l[2]))
elif (l[0] / l[1] == l[2]): print(str(l[0]) + "" / "" + str(l[1]) + "" = "" + str(l[2]))
else: print('Error') -End,"
 s, l = input(), []
for i in s:
     if not i in l:
        print(i, end='')
        l += i -End,"
 s = input()
for i in range(len(s)):
    if i == s.find(s[i]):
        print(s[i], end='') -End,"
 s = input(); print(s.strip() + ""\n"" + str(len(s)-len(s.strip()))) -End,"
 while True:
    tmp = input()
    if tmp == tmp.upper() or tmp == tmp.lower(): break
    print(tmp.swapcase()) -End,"
 s, m = input(), 0
for i in s:
    if i.isdigit(): 
        print(str((int(i) + 1) % 10), end='')
        m += (int(i) + 1) % 10
    else: print(i, end='')
print(""\n""+ str(m)) -End,"
 l = [int(i) for i in input().split("", "")]
print(l.count(max(l))) -End,"
 print(""123456789\n   456  \n  34567 \n 2345678\n123456789\n 2345678\n  34567\n   456\n    5"")




 -End,"
 print((""  * * *  ""*int(input())+""\n"")*3) -End,"
 email = input(); print(""OK"" if ""."" in email and ""@"" in email and "" "" not in email else email + "" - некорректный"") -End,"
 print(""Беги"" if input()+input()+input() == ""На стартВниманиеМарш"" else ""Стоп"") -End,"
 m, l = int(input()) % 12, ['Зима', 'Весна', 'Лето', 'Осень']; print(l[m//3]) -End,"
 m, l = (int(input()) + 1) % 12, ['Зима', 'Весна', 'Лето', 'Осень']; print(l[m//3]) -End,"
 n = int(input()); print(""Интересное"" if n//100 == n//10%10 else ""НЕТ"") -End,"
 def get_weight(l, m):
    if m >= sum(l): return ""Повезло""
    else: return ""Не повезло""

l = list(map(float, input().split())); m = float(input())
print(get_weight(l, m)) -End,"
 def check_date(d):
    if d[1] in [1, 3, 5, 7, 8, 10, 12] and 1 <= d[0] <= 31: return ""Корректная""
    if d[1] in [4, 6, 9, 11] and 1 <= d[0] <= 30: return ""Корректная""
    if d[1] == 2 and 1 <= d[0] <= 28 or d[0] == 29 and (d[2] % 4 == 0 and (d[2] % 100 != 0 or d[2] % 400 == 0)): return ""Корректная""
    return ""Некорректная""
c = 0
while True:
    tmp = input()
    if tmp == '.': break
    print(check_date(list(map(int, tmp.split('.')))))
    if check_date(list(map(int, tmp.split('.')))) == ""Корректная"": c += 1
print(c) -End,"
 def check_variable(v):
    if (v[0].isalpha() or v[0] == '_') and v.replace('_', '').isalnum() and no_cirillic(v):
        return 'Можно использовать'
    else: return 'Нельзя использовать'
def no_cirillic(v):
    for i in v:
        if ord('А') <= ord(i) <= ord('Я') or ord('я') >= ord(i) >= ord('а'): return False
    return True
while True:
    tmp = input()
    if tmp == 'Поработали, и хватит': break
    print(check_variable(tmp)) -End,"
 print(' - '.join(list(str(int(input().replace(' - ', ''))+103)))) -End,"
 [print(i, i.find('123')==0) for i in input().split()] -End,"
 [print('A' * 8) for _ in range(5)] -End,"
 a = int(input()); print(int(input()) ** 2 - 4 * a * int(input())) -End,"
 n = int(input())
print('    Ж    '*n + '\n' + '   ЖЖЖ   '*n + '\n' + '  ЖЖЖЖЖ  '*n + '\n' + ' ЖЖЖЖЖЖЖ '*n + '\n' + '...ППП...'*n) -End,"
 a, b, c = map(int, input().split()); p = (a + b + c) / 2; s = (p * (p - a) * (p - b) * (p - c)) ** .5
print('Площадь прямоугольника со сторонами a='+ str(a) +', b='+ str(b) +', c='+ str(c) +' равна '+ str(s) +'.') -End,"
 L=list(map(int, input().split())); l=list(map(int, input().split())); n=['cтульев', 'кресел', 'cтолов']
for i in range(3): print(L[i], n[i], 'по', l[i], 'руб., стоимость', L[i] * l[i], 'рублей.')
print('Стоимость гарнитура', L[0] * l[0] + L[1] * l[1] + L[2] * l[2],'рублей.') -End,"
 n = input(); print(n[1], n[0], int(n[0]) + int(n[1]), int(n[0]) * int(n[1]), sep='\n') -End,"
 print(input()[::-1]) -End,"
 n = int(input()); l = ['100', '50', '10', '1']; c = [n // 100, n % 100 // 50, n % 50 // 10, n % 10]
for i in range(4): print(c[i], 'купюры по', l[i], 'рублей') -End,"
 n = str(int(input().replace(' ', '')) + int(input().replace(' ', ''))); print(n[0], n[1]) -End,"
 n = str(int(input().replace(' ', '')) + int(input().replace(' ', ''))); print(n[0], n[1], n[2]) -End,"
 print(not int(input()) % 2) -End,"
 print(not int(input()) % 5) -End,"
 print(input().count('-') == 0) -End,"
 print(input().count('-') > 0) -End,"
 x = int(input()); print(x * 2 if x > 0 else x) -End,"
 y=['январь','февраль','март','апрель','май','июнь','июль','август','сентябрь','октябрь','ноябрь','декабрь']
print(y[int(input())-1]) -End,"
 n = 0
while True:
    tmp = int(input())
    if tmp == 0: break
    if not tmp % 14: n += 1
print(n) -End,"
 print((4*5+10*4+11*3+2*2)/27)




 -End,"
 a=10
b=2
print(a+b)
print(a-b)
print(a*b)
print(a/b)
print(a**b)




 -End,"
 N = int(input())
p = int(input())
ch = int(input())
t = int(input())
d = int(input())
print ((5*p+4*ch+3*t+2*d)/N)




 -End,"
 # запиши в скобках численное выражение
a = 77+18-5
print(a)



 -End,"
 # запиши в скобках численное выражение
print(15*2/3)



 -End,"
 print ((4-9)*(4**2+4*9+9**2))




 -End,"
 #напишите ниже команду для вычисления значения численного выражения на языке питон
print((3*5**2-15)/(4+2**2))



 -End,"
 #напишите ниже команду для вычисления значения численного выражения на языке питон
print (((7*3-3**3)+3)/(-3))



 -End,"
 a = int (input ())
b = int (input ())
print (a + b)





 -End,"
 a = str (input ())
print (""Hello, ""+a)





 -End,"
 a = int (input ())
b = int (input ())
print (a+b,a-b,a*b,a/b, sep = '@')





 -End,"
 a = int (input ())
b = int (input ())
print ('{:9.5f}'.format (a/b),'{:9.5f}'.format (b/a), sep='***')




 -End,"
 a = int (input ())
print (a // 60)
print (a % 60)




 -End,"
 XX = int (input ())
HH = int (input ())
MM = int (input ())
a = HH * 60 + XX + MM
print (a // 60, a % 60, sep='\n')




 -End,"
 a = int (input ())
b = a // 100
c = a % 100
d = c // 10 + c % 10
print (b + d)


 -End,"
 a = int (input ())
b = int (input ())
c = int (input ())
import math
p = (a+b+c)/2
print (float(math.sqrt (p*(p-a)*(p-b)*(p-c))))



 -End,"
 
b, c = float (input ()), float (input ())

ugol = float (input ())

from math import sin, cos, sqrt, pi

ugol = ugol / 180 * pi

a = sqrt (b ** 2 + c ** 2 - 2 * b * c * cos (ugol))

p = (a + b + c) / 2

s1 = sqrt (p * (p - a) * (p - b) * (p - c))

print ('{:5.2f}'.format (s1))

s2 = b * c * sin (ugol) / 2

print ('{:5.2f}'.format (s2))




 -End,"
 #дано:
p = input() #периметр
a = input() #длина одной стороны
#преобразовать данные в числа с плавающей точкой
p = float(p)
a = float(a)
#решение: написать алгебраическое выражение для вычисления площади
s = (p/2 - a) * a
#ответ: вывести значение площади, хранящееся в переменной s
print(s) -End,"
 #дано:
v = input() #скорость v
t = input() #время t
#преобразовать данные в целые числа
v = int(v)
t = int(t)
#решение: написать алгебраическое выражение для вычисления расстояния s
s = v * t
#ответ: вывести значение расстояния, хранящееся в переменной s
print(s) -End,"
 # дано:
a = input() #длина земельного участка
b = input() #ширина земельного участка
#преобразовать введённые данные в целые числа
a = int(a)
b = int(b)
#решение: написать алгебраическое выражение для вычисления периметра
p = (a + b) * 2
#ответ: вывести значение периметра участка, хранящееся в переменной p
print(p) -End,"
 #дано:
s = int(input()) #количество километров, пройденных пешком
t = int(input()) #количество времени, проведённых в автобусе
v = int(input()) #скорость движения автобуса
#решение и ответ: написать алгебраическое выражение для решения задачи
print(s + t * v) -End,"
 #дано:
x, y = input().split() #тормозные пути легкового и грузового автомобилей
#преобразовать данные в числа c плавающей точкой
x, y = float(x), float(y)
#решение и ответ: написать алгебраическое выражение для решения задачи
print(x*4, y*4) -End,"
 #дано:
n = int(input())  #количество мороженого
x = float(input())  #процент воды
#решение и ответ: написать алгебраическое выражение для решения задачи
print(n/100*x) -End,"
 x = input() #доля суток для сна
h, m = input().split() #количество часов и минут, расходуемых на еду
n = input() #количество часов, затрачиваемых на учёбу
#преобразовать данные в целые числа
x = int(x)
h, m = int(h),int(m)
n = int(n)
#решение и ответ: написать алгебраическое выражение для решения задачи
print(24*60 - 24/x*60 - h*60 - m - n*60) -End,"
 N = float(input()) 
N = N/4
print(2*N*N)


 -End,"
 a, b = input().split()
c, d = input().split()
a, b , c, d = float(a), float(b), float(c), float(d)
print(a * b + c * d)



 -End,"
 a, b = input().split()
c, d = input().split()
a, b , c, d = float(a), float(b), float(c), float(d)
print((a + c) / (b + d))




 -End,"
 a, b = input().split()
c, d = input().split()
a, b , c, d = float(a), float(b), float(c), float(d)
print(((a * b) + (c * d)) / (a + c))




 -End,"
 T = int(input())
V = int(input())
S = int(input())
print(T * V + S)




 -End,"
 S = int(input())
V = int(input())
T = int(input())
print(S / V + T)




 -End,"
 M = float(input()) * 1000
print((M * 0.4) - (M * 0.4) * 0.3)




 -End,"
 N = float(input())
print(N * 0.87)




 -End,"
 M = float(input())
print(M / 87 * 100)




 -End,"
 c = int(input())
print(c // 1000)




 -End,"
 a, b = input().split()
a, b = int(a), int(b)
print(a // b, a % b)




 -End,"
 a = input()
b = input()
a, b = int(a), int(b)
print(b // a, b % a)




 -End,"
 a, b = input().split()
c = input()
a, b, c = int(a), int(b), int(c)
d = (a * 100 + b) * c
print (d // 100, d % 100)



 -End,"
 a = int(input())
print(a % 10)




 -End,"
 a = int(input())
print(a // 10)




 -End,"
 print(input()[-2])




 -End,"
 a = int(input())
b = a // 100000
c = a % 100000
b += c // 10000
d = c % 10000
b += d // 1000
e = d % 1000
b += e // 100
f = e % 100
b += f // 10
g = f % 10
print(b + g)




 -End,"
 a = int(input())
b = a // 100
c = a % 10
d = a // 10
e = d % 10

print(b + e, c + e, sep='') 


 -End,"
 a = input()
a1 = int(a[-3])
a2 = int(a[-4])
a3 = int(a[-1])
a4 = int(a[-2])
print(a1 + a2, a3 + a4, sep='')




 -End,"
 a = input()
a1 = int(a[-1])
a2 = int(a[-2])
a3 = int(a[-3])
a4 = int(a[-4])
print(a1 + a4, a3 + a2, sep='')





 -End,"
 a = input()
a1 = int(a[-1])
a2 = int(a[-2])
a3 = int(a[-3])
a4 = int(a[-4])
a5 = int(a[-5])
print(a1 + a3 + a5, a2 + a4, sep='')




 -End,"
 a = int(input())
print(a // 3600)




 -End,"
 a = int(input())
print(a % 3600)




 -End,"
 a = int(input())
b = a // 60
c = b % 60
print(c)




 -End,"
 A = (input() == ""False"")
B = (input() == ""True"")
C = (input() == ""False"")
print(A or ((not C) and B))
 -End,"
 import sys


def fib(n):
        if n in [1, 2]:
                return 1
        return fib(n-1) + fib(n-2)

while True:
        try:
                n = int(sys.stdin.readline())
                break
        except ValueError as ex:
                print(""Invalid data type, try again:"")
                pass
print(fib(n)) -End,"
 import itertools

def isPrime(n):
        if n in [0, 1]:
                return False
        elif n==2:
                return True
        elif not n & 1:
                return False
        for i in range(3, int(n**0.5)+1, 2):
                if n%i==0:
                        return False
        return True

def primes():
        i = 2
        while True:
                if isPrime(i):
                        yield i
                i += 1
 -End,"
 import sys

def getIntInput():
        #print(""Please insert (an) integer value(s):"")
        while True:
                try:
                        n = list(map(int, sys.stdin.readline().split()))
                        break
                except ValueError as ex:
                        print(""Error with data type. Please insert an integer value:"")
                        pass
        #print(""Thank you!"")
        if len(n) == 1:
                return n[0]
        else:
                return n
                
def getMaxPairProduct(seq):
    n1 = max(seq)
    seq.remove(n1)    
    return n1*max(seq)

n = getIntInput()
seq = getIntInput()
print(getMaxPairProduct(seq)) -End,"
 import sys

n = int(sys.stdin.readline())
k = int(sys.stdin.readline())
print(int(k/n)) -End,"
 import sys

def getIntInput():
        #print(""Please insert (an) integer value(s):"")
        while True:
                try:
                        n = list(map(int, sys.stdin.readline().split()))
                        break
                except ValueError as ex:
                        print(""Error with data type. Please insert an integer value:"")
                        pass
        #print(""Thank you!"")
        if len(n) == 1:
                return n[0]
        else:
                return n

h1 = getIntInput()*60*60
m1 = getIntInput()*60
s1 = getIntInput()
h2 = getIntInput()*60*60
m2 = getIntInput()*60
s2 = getIntInput()
print(h2-h1+m2-m1+s2-s1) -End,"
 import sys

def getIntInput():
        #print(""Please insert (an) integer value(s):"")
        while True:
                try:
                        n = list(map(int, sys.stdin.readline().split()))
                        break
                except ValueError as ex:
                        print(""Error with data type. Please insert an integer value:"")
                        pass
        #print(""Thank you!"")
        if len(n) == 1:
                return n[0]
        else:
                return n

A = getIntInput()
B = getIntInput()
N = getIntInput()
print(' '.join([str(((A*100+B)*N)//100), str(((A*100+B)*N)%100)])) -End,"
 import sys

def getIntInput():
        #print(""Please insert (an) integer value(s):"")
        while True:
                try:
                        n = list(map(int, sys.stdin.readline().split()))
                        break
                except ValueError as ex:
                        print(""Error with data type. Please insert an integer value:"")
                        pass
        #print(""Thank you!"")
        if len(n) == 1:
                return n[0]
        else:
                return n

g1 = getIntInput()
g2 = getIntInput()
g3 = getIntInput()
print(((g1//2)+(g1%2))+((g2//2)+(g2%2))+((g3//2)+(g3%2))) -End,"
 import sys

def getIntInput():
        #print(""Please insert (an) integer value(s):"")
        while True:
                try:
                        n = list(map(int, sys.stdin.readline().split()))
                        break
                except ValueError as ex:
                        print(""Error with data type. Please insert an integer value:"")
                        pass
        #print(""Thank you!"")
        if len(n) == 1:
                return n[0]
        else:
                return n

n = getIntInput()
if n%2==0:
    print(n+2)
else:
    print(n+1) -End,"
 print(input()[::-1]) -End,"
 print(int(input())**int(input())) -End,"
 year = int(input())
print(""Leap"") if (not year%4 and year%100) or (not year%400) else print(""Regular"") -End,"
 n1 = float(input())
n2 = float(input())
opr = input()
if opr in ['/', 'div', 'mod'] and n2==0.0:
    print(""Division by 0!"")
elif opr=='+':
    print(n1+n2)
elif opr=='-':
    print(n1-n2)
elif opr=='/':
    print(n1/n2)
elif opr=='*':
    print(n1*n2)
elif opr=='mod':
    print(n1%n2)
elif opr=='pow':
    print(n1**n2)
elif opr=='div':
    print(n1//n2) -End,"
 n = int(input())
m = int(input())
x = int(input())
y = int(input())
print(min([min([n,m])-x,x, max([n,m])-y,y])) -End,"
 a = int(input())
b = int(input())
c = int(input())
print(""YES"") if (a+b>c and a+c > b and b+c>a) else print(""NO"") -End,"
 A = int(input())
B = int(input())
H = int(input())
if A <= H <= B:
    print(""Normal"")
elif H < A:
    print(""Deficiency"")
elif H > B:
    print(""Excess"")
else:
    print("""") -End,"
 geoform = input()
if geoform==""rectangle"":
    print(str(float(input())*float(input())))
elif geoform==""circle"":
    print(str(3.14*(float(input())**2)))
elif geoform==""triangle"":
    a = float(input())
    b = float(input())
    c = float(input())
    p = (a+b+c)/2
    print(str((p*(p-a)*(p-b)*(p-c))**0.5))
else:
    print(""Incorrect entry or not supported!"") -End,"
 n = int(input())
print(str(n) + "" programmers"") if 0 == n or n >= 2 else print(str(n) + "" programmer"") -End,"
 formDict = {'1': ""square"", '2': ""circle"", '3': ""triangle"", '4': ""rhombus""}
shape=input()
print(""You have chosen a %s"" % formDict[shape]) if shape in [keys for keys in formDict] else print(""There is no such shape!"") -End,"
 dirDict = {'0': ""do not move"", '1': ""move up"", '2': ""move down"", '3': ""move left"", '4': ""move right""}
direction=input()
print(dirDict[direction]) if direction in dirDict else print(""error!"") -End,"
 def isPalin(n):
        return str(n)[0:int(len(str(n))/2):]==str(n)[-1:(int(len(str(n))/2)+1)*-1:-1]

print(int(isPalin(input().zfill(4)))) -End,"
 print(""YES"") if int(input())>0 else print(""NO"") -End,"
 def hitQueens(coords):
    if abs(coords[0]-coords[2])==abs(coords[1]-coords[3]) or coords[0]==coords[2] or coords[1]==coords[3]:
        return ""YES""
    else:
        return ""NO""
        
     # 1  2  3  4  5  6  7  8
     # _  _  _  _  _  _  _  _ 
# 1   |_||_||_||X||_||_||_||_|
# 2   |_||_||X||_||_||_||_||_|
# 3   |_||_||_||_||_||_||_||_|
# 4   |_||_||_||_||_||_||_||_|
# 5   |_||_||_||_||_||_||_||_|
# 6   |_||_||_||_||_||_||_||_|
# 7   |_||_||_||_||_||_||_||_|
# 8   |_||_||_||_||_||_||_||_|

print(hitQueens([int(x) for x in input().strip().split("" "")])) -End,"
 a = float(input())
b = float(input())
c = float(input())
p = (a+b+c)/2
print(str((p*(p-a)*(p-b)*(p-c))**0.5)) -End,"
 n = float(input())
print(str(n-int(n))) -End,"
 n = float(input())
print(str(n-int(n))[2]) -End,"
 def checkInt(n):    
    if float(n).is_integer():
        return int(n)
    else: 
        return n

eq = [float(input()) for i in range(3)]
eq.append((eq[1]**2)-4*eq[0]*eq[2])
if eq[3]==0:
    print(-eq[1]/(2*eq[0]))
elif eq[3]>0:    
    print(' '.join(str(checkInt(x)) for x in sorted([(-eq[1] + eq[3]**0.5) / (2*eq[0]), (-eq[1] - eq[3]**0.5) / (2*eq[0])]))) -End,"
 print(str(float(input())/float(input()))) -End,"
 nums = [float(i) for i in range(int(input()), int(input())+1) if not i%3]
print(str(sum(nums)/len(nums))) -End,"
 def readDictEntry():
    text = input().strip()
    temp = text.split(' - ')
    temp[1] = temp[1].split(', ')
    return temp
    
def digList(lst):
    temp = []
    for item in lst:
        if type(item) is list:
            temp.append(digList(item))
        else:
            temp.append(item)
    return set(temp)
    
n = int(input())
row = []
latin = []
latinDict = {}
engDict = {}
for i in range(n):    
    row = readDictEntry()
    latinDict[row[0]] = row[1]
    latin.extend(row[1])
    del row
latin = sorted(set(latin))
for k, v in latinDict.items():
    if type(v) is list:
        items = digList(v)
        for item in items:
            engDict[item] = engDict.get(item, [])
            engDict[item].append(k)
    else:
        engDict[v] = engDict.get(v, [])
        engDict[v].append(k)
print(len(latin))
for voc in latin:
    print(voc + "" - "" + ', '.join(val for val in sorted(engDict[voc]))) -End,"
 y = [x for x in range(int(input()), int(input())+1)]
x = [x for x in range(int(input()), int(input())+1)]
multMatrix = [[x[i]*y[j] for i in range(len(x))] for j in range(len(y))]
multMatrix = [x] + multMatrix
y = [' '] + y
for i in range(len(y)):
    multMatrix[i] = [y[i]] + multMatrix[i]
    multMatrix[i] = list(map(str, multMatrix[i]))
print('\n'.join(['\t'.join([item for item in row]) for row in multMatrix])) -End,"
 import sys

def isPrime(n):
        if n in [0, 1]:
                return False
        elif n==2:
                return True
        elif not n & 1:
                return False
        for i in range(3, int(n**0.5)+1, 2):
                if n%i==0:
                        return False
        return True

def primes():
        i = 2
        while True:
                if isPrime(i):
                        yield i
                i += 1

def getIntInput():
        #print(""Please insert (an) integer value(s):"")
        while True:
                try:
                        n = list(map(int, sys.stdin.readline().split()))
                        break
                except ValueError as ex:
                        print(""Error with data type. Please insert an integer value:"")
                        pass
        #print(""Thank you!"")
        if len(n) == 1:
                return n #[0]
        else:
                return n

n = getIntInput()[0]
indices = getIntInput()
primeList = []
primeGenerator = primes()
while len(primeList) <= max(indices):
	primeList.append(next(primeGenerator))

result = []
for i in range(n):
    result.append(primeList[int(indices[i]-1)])
for i in range(n):
    sys.stdout.write(str(result[i]) + ' ') -End,"
 # put your python code here
intSeries=list(map(int,input().split()))
print(' '.join(str(i) for i in intSeries[:intSeries.index(0)][::-1])) -End,"
 # put your python code here
print(eval(input().replace(' ','+'))) -End,"
 def closest_mod_5(x):
    while True:
        if x % 5 == 0:
            return x
        x += 1 -End,"
 # put your python code here
seq = []
while True:
    seq.append(int(input()))
    if sum(seq)==0:
        break
print(sum([x*x for x in seq])) -End,"
 # put your python code here
seq = []
while True:
    n = int(input())
    if n==0:
        break
    seq.append(n)
avg = sum(seq)/len(seq)
step1 = [(x-avg)**2 for x in seq]
stddev = (sum(step1)/(len(seq)-1))**0.5
print(stddev) -End,"
 # put your python code here
n = list(map(int,list(input().strip())))

while len(n) > 1:
    n = list(map(int,list(str(sum(n)))))
if n[0] in (3, 6, 9):
    print(""YES"")
else:
    print(""NO"") -End,"
 # put your python code here
phrase = input().split()
lenPhrase = [len(x) for x in phrase]
print(phrase[lenPhrase.index(max(lenPhrase))]) -End,"
 import sys
print(len((sys.stdin.readlines())[0].split())) -End,"
 n= int(input())
print(str(n)+"" contig"" if n==1 else str(n)+"" contigs"") -End,"
 msgMap = {
    'A': '00',
    'C': '01',
    'G': '10',
    'T': '11'
}
print(''.join(msgMap[s] for s in input().strip())) -End,"
 import re
import sys

txt_input = sys.stdin.readlines()
p = re.compile(r'\bcat\b')
for line in txt_input:
    if p.search(line):
        print(line.strip()) -End,"
 x = int(input())
y = int(input())
i = 1

while True:
    if (min(x,y)*i) % max(x,y) == 0:
        print(min(x,y)*i)
        break
    i += 1 -End,"
 a = input().strip().lower()
b = input().strip().lower()

aDict = {}
bDict = {}

for s in a:
    if s not in aDict:
        aDict[s] = 1
    aDict[s] += 1
for s in b:
    if s not in bDict:
        bDict[s] = 1
    bDict[s] += 1
print(aDict==bDict) -End,"
 def get_dict_from(inpt):
    resDict = {}
    for s in inpt:
        resDict[s] = 1 if s not in resDict else resDict[s]+1
    return resDict

print(get_dict_from(input().lower())==get_dict_from(input().lower())) -End,"
 def sum_seq(inpt):
    if inpt==0:
        return 0 
    return inpt + sum_seq(int(input()))

print(sum_seq(int(input()))) -End,"
 import sys

if __name__ == '__main__':
    ip = input().split('.')
    if len(ip) != 4:
        print(""NO"")
        sys.exit()
    try:
        ip = list(map(int, ip))
    except ValueError:
        print(""NO"")
        sys.exit()
    for num in ip:
        if num < 0 or num > 255:
            print(""NO"")
            sys.exit()
    print(""YES"")
 -End,"
 if __name__ == '__main__':
    x1, y1, x2, y2 = list(map(int, input().split()))
    if x1 == x2 or y1 == y2 or abs(x1-x2) == abs(y1-y2):
        print(""YES"")
    else:
        print(""NO"")
         -End,"
 # put your python code here
a = str(input())
if (int(a[0])+int(a[1])+int(a[2])) == (int(a[3])+int(a[4])+int(a[5])):
    print(""Счастливый"")
else:
    print(""Обычный"")


 -End,"
 # put your python code here
n = int(input())
print(n//100+n%10+(n//10)%10)



 -End,"
 # put your python code here
n = int(input())
a = 0
b = 0
c = 0
d = 0
for i in range(1,n+1):
    x = int(input())
    if x == 2:
        d += 1
    elif x == 3:
        c += 1
    elif x == 4:
        b += 1
    elif x == 5:
        a += 1
print(d, c, b, a)    



 -End,"
 # put your python code here
n = int(input())
s = 0
for i in range(1,n+1):
    x = int(input())
    if (x%6 == 0):
        s += x
print(s)        



 -End,"
 # put your python code here
n = int(input())
max = 0
for i in range(1,n+1):
    x = int(input())
    if (x%4 == 0):
        if (x > max):
            max = x
print(max) -End,"
 print(int(input())/int(input())) -End,"
 # put your python code here
n = int(input())
s = 0
for i in range(1,n+1):
    x = int(input())
    if (x%10 == 4):
        s += x
print(s) -End,"
 a, b = (int(i) for i in input().split())
for i in range (a, b+1):
    if i % 15 == 0:
        print('FizzBuzz')
    elif i %  5 == 0:
        print('Buzz')
    elif i % 3 == 0:
        print('Fizz')
    else:
        print(i)


 -End,"
 s = 0
i = int(input())
while i !=0:
    s = s + i
    i = int(input())
print(s)     -End,"
 n = int(input())
if n == 1:
    print('YES')
elif n%2 == 1:
    print('NO')
else:
    i = 1
    x = 1
    while x < n:
        x = 2**i
        i += 1
    if x == n:
        print('YES')
    else:
        print('NO')




 -End,"
 max = 0
n = int(input())
while n:
    if n > max:
        max = n
    n = int(input())    
print(max)



 -End,"
 n = int(input())
z = 0
for i in range(1, n+1):
    if z == n:
        break
    for j in range(1, i+1):
        print(i, end = ' ')
        z += 1
        if z == n:
            break




 -End,"
 n = int(input())
x = n
for i in range(n-1,1,-1):
    if n % i == 0:
        x = i
print(x)        


 -End,"
 s = input() # принимаем строку
c = s[0]    # инициализируем символ, с которым будем сравнивать символы строки
a = 0       # инициализируем счетчик символов, задавая ему значение первого символа строки

for i in range(0, len(s)):
    if s[i] == c:             # если символ строки равен тому, с которым сравниваем,
        a += 1                # увеличиваем счетчик
    else:
        print(c, end = '')    # если символ не равен предыдущему, выводим предыдущий символ в консоль без перевода строки
        print(a, end = '')    # и выводим значение счетчика, тоже без перевода строки
        a = 1                 # присваиваем счетчику значение 1 (а не 0, потому что текущий символ уже не будет проверяться)
        c = s[i]              # записываем текущий символ в переменную, с которой будем сравнивать следующий символ
print(c, end = '')            # в конце цикла отдельно выводим сравниваемый символ и его счетчик
print(a, end = '')            # это нужно, потому что для последнего символа условие неравенства не выполняется (строка кончилась)
                              # поэтому в цикле он не выводится   -End,"
 # put your python code here
m = int(input())
n = 0
x = 1
while x <= m:
    n = n + 1
    x = x * n
print(n)


 -End,"
 print(0-int(input())*3600-int(input())*60-int(input())+int(input())*3600+int(input())*60+int(input()))


 -End,"
 import sys
for i in range(1, len(sys.argv)):
    print(sys.argv[i])



 -End,"
 print(*(input().split()), sep = '_') -End,"
 s = input()
print(s[:s.find('h')+1]+ (s[s.find('h')+1:s.rfind('h')])[::-1] + s[s.rfind('h'):]) -End,"
 n = int(input())
t = [int(i) for i in input().split()]
t1 = t3 = t5 = 0
q1 = q3 = q5 = 0

x = 0
for i in range(0,n):
    x += t[i]
    if x > 300:
        break
    q5 += 1
    t5 += x
#print('Пятикурсник: ',q5,t5)
 
x = 0
for i in range(n-1,-1,-1):
    x += t[i]
    if x > 300:
        break
    q3 += 1
    t3 += x
#print('Третьекурсник: ',q3,t3)

t.sort()
x = 0
for i in range(0,n):
    x += t[i]
    if x > 300:
        break
    q1 += 1
    t1 += x
#print('Первокурсник: ',q1,t1)

st1 = (q1, t1, 1)
st3 = (q3, t3, 3)
st5 = (q5, t5, 5)

st = sorted([st1, st3, st5], reverse=True)

if st[0][0] > st[1][0]:
    print(st[0][2])
else:
    if st[1][0] > st[2][0]:
        st.pop() 
        st.append(st[1])
    st = sorted(st, key=lambda tup: tup[1])
    if st[0][1] < st[1][1]:
        print(st[0][2])
    else:
        if st[1][1] < st[2][1]:
            print(st[1][2])
        else:
            print(st[2][2]) -End,"
 print((bin(int(input()))[2:])[::-1])




 -End,"
 # put your python code here
a = int(input())
print(""The next number for the number "", a, "" is "", a+1, ""."", sep='')
print(""The previous number for the number "", a, "" is "", a-1, ""."", sep='') -End,"
 print(input()[0])



 -End,"
 print(input()[-1]) -End,"
 print(input()[1:-1])




 -End,"
 print(input()[::-1])



 -End,"
 a = input()
print('YES') if a == a[::-1] else print('NO')




 -End,"
 print(list(input()))




 -End,"
 k = int(input())
a = ['#']
for i in range(k):
    print(a*k)




 -End,"
 a = input()
if a[0] == '-':
    print(a[1:].isnumeric())
else:
    print(a.isnumeric())


 -End,"
 # put your python code here
n = int(input())
print(n + 1 + (n+1)%2)



 -End,"
 # put your python code here
n = int(input())%(60*24)
print(n//60, n%60)


 -End,"
 a = int(input())
b = int(input())
if a > b:
    print(a)
else:
    print(b)




 -End,"
 def cell(a):
    b = []
    if a[0] == '#' and a[1] == '.':
        b.append('.')
    elif a[0] == '.' and a[1] == '#':    
            b.append('#')
    else:
        b.append(a[0])
    
    for i in range(1, len(a)-1):
        if a[i] == '#' and (a[i-1] == a[i+1] == '#'):
            b.append('.')
        elif a[i] == '#' and (a[i-1] == a[i+1] == '.'):    
            b.append('.')
        elif a[i] == '.' and (a[i-1] == '#' or a[i+1] == '#'):
            b.append('#')
        else:
            b.append(a[i])
        
    if len(a) > 1:
        if a[-1] == '#' and a[-2] == '.':
            b.append('.')
        elif a[-1] == '.' and a[-2] == '#':
            b.append('#')
        else:
            b.append(a[-1])
    return b       

a = ['#', '.', '.', '.', '.', '#']

k = int(input())
for i in range(k):
    a = cell(a)
        
print(a)    



 -End,"
 # put your python code here
n = int(input())%(60*60*24)

print(n//3600,end = ':')
print((n%3600//60)//10, (n%3600//60)%10, sep = '', end = ':')
print(n%60//10, n%60%10, sep = '') -End,"
 # put your python code here
n, m = int(input()), int(input())
print(-(m//-n))


 -End,"
 # put your python code here
n = int(input())
k = int(input())
print(-(k%-n))


 -End,"
 # put your python code here
h, a, b = [int(input()) for i in 'abc']
print(-((h - a) // -(a - b)) + 1)



 -End,"
 # put your python code here
a = int(input())
print(int(a//100 == (a%10*10+a%100//10)))




 -End,"
 # put your python code here
h1, m1, s1, h2, m2, s2 = [int(input()) for i in '123456']
print(h2*60*60+m2*60+s2 - (h1*60*60+m1*60+s1))


 -End,"
 # put your python code here
a = int(input())
b = a*45 + a//2*5 + (a - 1)// 2 * 15

print(9 + b // 60, b % 60)



 -End,"
 # put your python code here
m, n = map(int, input().split())
x, y = map(int, input().split())

if (x-1) >= 1:
    print(x-1, y)
if (y+1 <= n):
    print(x, y+1)
if (y-1 >= 1):
    print(x, y-1)
if (x+1 <= m):
    print(x+1, y)


 -End,"
 # put your python code here
n = int(input())
if n in [1,2,4,7]:
    print('NO')
else:
    print('YES')



 -End,"
 # put your python code here
print('''*  *  *  *  *
*           *
*           *
*           *
*  *  *  *  *''')



 -End,"
 print('''123456789
   456  
  34567 
 2345678
123456789
 2345678
  34567
   456
    5''')



 -End,"
 # put your python code here
print('''*  *  *  *  * *  *  *  *  * *  *  *  *  * *  *  *  *  * *  *  *  *  * *  *  *  *  * *  *  *  *  * 
*           * *           * *           * *           * *           * *           * *           * 
*           * *           * *           * *           * *           * *           * *           * 
*           * *           * *           * *           * *           * *           * *           * 
*  *  *  *  * *  *  *  *  * *  *  *  *  * *  *  *  *  * *  *  *  *  * *  *  *  *  * *  *  *  *  *''')



 -End,"
 # put your python code here
test = int(input())
student = int(input())

if test == 1:
    if student == 1:
        print('YES')
    else:
        print('NO')
else:
    if student == 1:
        print('NO')
    else:
        print('YES')


 -End,"
 #python
#какой-то весьма запутанный путь получился, добавлю комменты, а то сам ничего не пойму

# (а - b) и (b - a) равны по модулю.
# Но функцией получения модуля пользоваться нельзя, поэтому используем математику

a, b = int(input()), int(input())

k = (a // b)*(b // a)     # если числа одинаковые = 1, если разные = 0
s1 = (((a - b) + 1 )// (a - b + k)) # если числа разные, k = 0 и не влияет
s2 = (((b - a) + 1 )// (b - a + k)) # если числа одинаковые,то без k = 1 спасает от деления на 0
                                    

amb = ((a-b)*s1 + (b-a)*s2)     #a минус b
apb = a + b                     #a плюс b

print(apb-((apb - amb) // 2)) -End,"
 x = int(input())
if ((-15 < x and x <= 12) or (14 < x and x < 17) or (19 <= x )):
    print(True)
else:
    print(False)

 -End,"
 import operator
x = float(input())
y = float(input())
z = str(input())

ops = { ""+"": operator.add, 
        ""-"": operator.sub,
        ""*"": operator.mul,
        ""/"": operator.truediv,
        ""div"": operator.floordiv,
        ""mod"": operator.mod,
        ""pow"": operator.pow }
if y == 0.0:
    if ((z == ""/"") or (z == ""div"") or (z == ""mod"")):
        print(""Деление на 0!"")
    else:
        result = ops[z](x, y)
        print(result)
else:
    result = ops[z](x, y)
    print(result) -End,"
 x = input()

a = int(x[0]) + int(x[1]) + int(x[2])
b = int(x[3]) + int(x[4]) + int(x[5])
if a == b:
    print('Счастливый')
else:
    print('Обычный') -End,"
 X, H, M = [int(input()) for i in range(3)]
total_hour = H * 60 + M + X
print(total_hour//60)
print(total_hour%60) -End,"
 a, b, c = [int(input()) for i in range(3)]
p = (a+b+c)/2
S = (p*(p-a)*(p-b)*(p-c))**.5
print(S)




 -End,"
 type = input()
if type == ""треугольник"":
  a, b, c = [int(input()) for i in range(3)]
  p = (a+b+c)/2
  S = (p*(p-a)*(p-b)*(p-c))**.5
elif type == ""прямоугольник"":
  a, b = [int(input()) for i in range(2)]
  S = a * b
elif type == ""круг"":
  r = int(input())
  S = 3.14 * (r**2)
print(S) -End,"
 a = 1
sum = 0
while a != 0:
    a = int(input())
    sum +=  a
print(sum) -End,"
 a, b = [int(input()) for i in range(2)]
d = 1
while True:
    if (d%a == 0 and d%b == 0):
        break
    else: d += 1
print(d) -End,"
 while True:
    a = int(input())
    if a <= 9:
        continue
    elif a > 100: break

    print(a)




 -End,"
 a, b, c = [int(input()) for i in range(3)]
if a < c:
    a, c = c, a
if b < c:
    b, c = c, b
if a < b:
    a, b = b, a
print(a, c, b, sep='\n') -End,"
 import math
r = float(input())
rez = 2*math.pi * r
print(rez) -End,"
 n = int (input())
answer1 ="" программистов""
answer2 ="" программист""
answer3 ="" программиста""
if n==0 or (n%100>=10 and n%100<=20):
    print(str(n) + answer1)
elif n%10==1:
    print(str(n) + answer2)
elif n%10>=2 and n%10<=4:
    print(str(n) + answer3)
else: print(str(n) + answer1) -End,"
 a, b, c, d = [int(input()) for i in range(4)]
for g in range (c,d+1):
    print('\t'+str(g),end='')
print()
for i in range (a,b+1):
    print(str(i)+'\t',end='')
    for j in range (c,d+1):
        print(str(i*j),end='\t')
    print() -End,"
 a, b = [int(input()) for i in range(2)]
s, c = 0, 0

for i in range(a, b+1):
  if i%3==0:
    s = s+i
    c = c+1
  i+=1
print(s/c) -End,"
 a = input().upper()
C = a.count('c'.upper())
G = a.count('g'.upper())
Sum=C+G
print(Sum/len(a)*100) -End,"
 s = [int(i) for i in input().split()]
sum = 0 
for i in range(0,len(s)):
    sum = sum + s[i]
print(sum) -End,"
 sum, d = 0, 0
while True:
    a = int(input())
    d = d + a
    sum = sum+a**2
    if d==0:
        break
print(sum) -End,"
 lst = [ int(i) for i in input().split()]
x = int(input())
rez = []
if x in lst:
    for i in range(0,len(lst)):
        if lst[i]==x:
            rez.append(i)
    for j in range(0,len(rez)):
        print(rez[j])
else:
     print(""Отсутствует"") -End,"
 def f(x):
    if x <= -2:
        return(1-(x+2)**2)
    elif x > -2 and x <= 2:
        return(-x/2)
    elif x > 2:
        return((x-2)**2+1) -End,"
 def modify_list(l):
    i = 0
    while i < len(l):
        if not(l[i]%2):
            l[i] =int(l[i]/ 2)
            i += 1
        else:
            del l[i]





 -End,"
 import sys
s = ''
for i in range(1,len(sys.argv)):
    s = s + sys.argv[i]+' '
print(s)




 -End,"
 lst = input().split()
if len(lst) == 1:
    print(lst[0])
elif len(lst) > 1:
    x = [int(lst[i-1])+int(lst[i+1]) for i in range (-1, len(lst)-1)]
    for i in range (1, len(x)):
        print(x[i], end = ' ')
    print(x[0]) -End,"
 s = input()
l=len(s)
cnt=1
for i in range(l):
    if i==(l-1):
        print(s[i]+str(cnt),end='')
    else:
        if s[i]==s[i+1]:
            cnt=cnt+1
        else:
            print(s[i]+str(cnt),end='')
            cnt=1 -End,"
 n = int(input())
m = []
for i in range(n):
    j=0
    while j<i+1:
        m.append(i+1)
        j+=1
    if len(m)>n: break
m = m[0:n]
for i in m:
    print(i, end="" "") -End,"
 n = [int(i) for i in input().split()]
m = []
for i in n:
    if n.count(i)>1 and i not in m:
        m.append(i)
print(*(m)) -End,"
 key, value, str1, str2 = [list(input()) for i in range(4)]
for i in str1:
    print(value[key.index(i)], end = '')
print()
for j in str2:
    print(key[value.index(j)], end = '')
print() -End,"
 n = ''
m = []
while True:
    n = str(input())
    if n == 'end':
        break
    m.append([int(s) for s in n.split()]) 
li, lj = len(m), len(m[0])
new = [[sum([m[i-1][j], m[(i+1)%li][j], m[i][j-1], m[i][(j+1)%lj]]) for j in range(lj)] for i in range(li)]

for i in range (li):
    for j in range (lj):
        print(new[i][j], end =' ')
    print() -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    elif 2*key in d:
        d[2*key].append(value)
    else:
        d[2*key] = []
        d[2*key].append(value)

# не добавляйте кода вне функции -End,"
 coordinat = {'север': (0, 1), 'запад': (-1, 0), 'юг': (0, -1), 'восток': (1, 0)}
n = int(input())
x_list = [(input()).split(' ') for x in range(n)]
k = [(coordinat[x][0]*int(y), coordinat[x][1]*int(y)) for x, y  in x_list]
res = (sum([x for x, y in k]), sum([y for x, y in k]))
print(' '.join(map(str, res))) -End,"
 dd = int(input())
dic = [input().lower() for i in range(dd)]
dd = int(input())
words = []
for i in range(dd):
  s = input().split(' ')
  for word in s:
    words.append(word)

rez = {*[elem for elem in words if dic.count(elem.lower()) == 0]}

print(*rez, sep = ""\n"") -End,"
 dic={}


for n in range(int(input())):
    team_1,goal_1,team_2,goal_2 = input().split("";"")
    for a in(team_1, team_2):
        if a not in dic: 
             dic[a] = [0,0,0]
    if goal_1<goal_2:
        dic[team_1][2] += 1
        dic[team_2][0] += 1
    elif goal_1>goal_2:
        dic[team_1][0] += 1
        dic[team_2][2] += 1
    else:
        dic[team_1][1] += 1
        dic[team_2][1] += 1
for rez in dic:
    print('%s:%i %i %i %i %i'%(rez, sum(dic[rez]),*dic[rez],dic[rez][0]*3+dic[rez][1])) -End,"
 dic = {}
lst = [(str(m).lower()) for m in input().split()]
while len(lst) > 0:
	if lst[0] not in dic:
		dic[lst[0]] = 1
		lst.remove(lst[0])
	else:
		dic[lst[0]] += 1
		lst.remove(lst[0])
for key, value in dic.items():
	print (key, value) -End,"
 def closest_mod_5(x):
    while x % 5 != 0:
        x = x + 1
    return x -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.coins = 0
 
    def can_add(self, v):
        self.add_coins = v
        if (self.add_coins + self.coins) <= self.capacity:
            return True
        else:
            return False
 
    def add(self, v):
        self.coins += v -End,"
 def Stepik(n, k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    else:
        return Stepik(n - 1, k) + Stepik(n - 1, k - 1)

n, k = map(int, input().split())
print(Stepik(n, k)) -End,"
 class Buffer:
    def __init__(self):
        self.newDataList = []
  
    def add(self, *a):
        for i in a:
            self.newDataList.append(i)
            if len(self.newDataList)==5:
                print(sum(self.newDataList))
                del self.newDataList[:5]

    def get_current_part(self):
        return self.newDataList -End,"
 class ExtendedStack(list):
    def sum(self):
        self.append(self.pop() + self.pop())
    def sub(self):
        self.append(self.pop() - self.pop())
    def mul(self):
        self.append(self.pop() * self.pop())
    def div(self):
        self.append(self.pop() // self.pop())


 -End,"
 class LoggableList(list, Loggable):
    def append(self, new):
        self.log(new)
        super().append(new) -End,"
 try:
    foo()
except ZeroDivisionError:
    print(ZeroDivisionError.__name__)
except ArithmeticError:
    print(ArithmeticError.__name__)
except AssertionError:
    print(AssertionError.__name__)




 -End,"
 import datetime

data = datetime.datetime.strptime(input(), ""%Y %m %d"")
days = int(input())

rez = data + datetime.timedelta(days)
print(rez.year, rez.month, rez.day) -End,"
 class nmspc(list):
    names = {""global"": [""None""],""None"":[]}

    def create(self, space, parent):
        self.names[parent].append(space)
        self.names[space] = [parent]

    def add(self, space, var):
        self.names[space].append(var)

    def get(self, space, var):
        if space == ""None"":
            return
        if var in self.names[space]:
            print(space)
            return
        elif self.names[space][0] != ""None"":
            self.get(self.names[space][0], var)
            return
        else:
            print(""None"")
        return

a = nmspc()
n = int(input())
for i in range(n):
    s = input().split()
    if s[0] == ""add"":
        a.add(s[1], s[2])
    elif s[0] == ""create"":
        a.create(s[1], s[2])
    else:
        a.get(s[1], s[2]) -End,"
 def mod_checker(x, mod=0):
    return lambda y: y%x==mod




 -End,"
 def str_count_two(str, substr):
    count, i = 0, -1
    while True:
        i = str.find(substr, i+1)
        if i == -1:
            return count
        count += 1

s,t = input(), input()
print(str_count_two(s, t)) -End,"
 s, a, b = [input().strip() for i in range(3)]
copy_s, answer = s, 0

while a in copy_s:
    copy_s = copy_s.replace(a, b)
    if copy_s == s or a in b:
        answer = 'Impossible'
        break
    else:
        answer += 1
print(answer) -End,"
 import xml.etree.ElementTree as ET
 
cubik_colour = {'red': 0, 'green': 0, 'blue': 0}
 
def cube(element, level=1):
    if element.findall('cube'):
        for i in element.findall('cube'):
            cube(i, level+1)
    cubik_colour[element.attrib['color']] += level
    
tree = ET.ElementTree(ET.fromstring(input()))
root = tree.getroot()
cube(root)
print(cubik_colour['red'], cubik_colour['green'], cubik_colour['blue']) -End,"
 import re
import sys

pattern = ""cat""
for line in sys.stdin:
    line = line.rstrip()

    rez = re.findall(pattern, line)

    if rez.count(""cat"") >= 2:
        print(line) -End,"
 x=int(input())
y=int(input())
list=(x+y, x-y, y-x, x*y, x/y, y%x, x**y)
for i in list: print(i)


 -End,"
 a, b, c = [int(input()) for i in range(3)]
print(a+b+c, 0.25*((a+b+c)*(b+c-a)*(a+c-b)*(a+b-c))**0.5)



 -End,"
 L,v1,v2,vm = (int(input()) for i in range(4))
lm=L*vm/(v1+v2)
print(round(lm))


 -End,"
 str=input()
list=str.split()
numbers=[int(x) for x in list]
print(sum(numbers))



 -End,"
 x=int(input())
if (-15<x<=12) or (14<x<17) or (x>=19):
    print('True')
else:
    print('False')


 -End,"
 x,y = (float(input()) for x in range(2))
oper_input=input()
oper=['+', '-', '/', '*','mod', 'pow', 'div']
index=oper.index(oper_input)
if index in [2,4,6] and y==0:
    print('Деление на 0!')
else:    
    if y==0:
        functions=[x+y,x-y,None,x*y,None,x**y,None]
        print(functions[index])
    else:     
        functions=[x+y,x-y,x/y,x*y,x%y,x**y,x//y]
        print(functions[index])
 -End,"
 vec = sorted([int(input()) for x in range(3)])
t=(vec[2],vec[0],vec[1])
print('\n'.join(map(str, t)))


 -End,"
 x = input()
p=int(x[-2:]) #последние 2 цифры числа
if (p % 10==1) & (p!=11): print(x,'программист')
else: 
    if (p % 10 in [2,3,4]) & (10<p<20): print(x,'программистов')
    else:     
        if (p % 10 in [2,3,4]) & (len(str(p)) in [1,2]): print(x,'программиста')  
        else:
          print(x,'программистов') 

 -End,"
 x = input()
l=list(map(int, x))
if sum(l[:3])==sum(l[-3:]): print('Счастливый')
else:print('Обычный')    



 -End,"
 i=int(input())
sum=0
while i!=0:
    sum+=i
    i=int(input())
print(sum)



 -End,"
 i=0
while i<=100:
  i=int(input())
  if (i<10):
      continue
  if (i>100):
      break
  print(i) -End,"
 v=[int(i) for i in input().split()]   #разделяем цифры и вносим в список [1, 3, 5, 6, 10]
v.insert(0,v[len(v)-1])               #добавляем первый элемент списка-последний элемент  [10, 1, 3, 5, 6, 10]
v.append(v[1])                        #добавляем последним элементом первый элемент исходного  [10, 1, 3, 5, 6, 10, 1]
for j in range(len(v)-2):             #цикл пробегает по элементам от первого до предпредпоследнего
    if len(v)==3:                     #если искомый ввод-еденичный вектор, не запускам цикл, выводим число
        print(v[1])
        break
    s=v[j]+v[j+2]                     #каждый элемент суммируем с элементом через одного, выводим на печать   
    print(s, end=' ')




 -End,"
 res=[]                               # заводим пустой список res
index=0                              # счетчик на нуль  
v=[int(i) for i in input().split()]  # считвываем сроку, разделяем цифры, укладываем в список v
for i in v:                          # цикл, перебираем все элементы в списке v
    if v.count(i)!=1:                # все неуникальные элементы отправляет в новыми значениями в список другой res
        res+=[i]
        index+=1
print(*set(res))                     #превращаем список res в множестов, тем самым оставляя только уникальные элементы, сортировка                                         происъходит автоматически 




 -End,"
 rim=['I', 'V', 'X', 'L', 'C', 'D', 'M']
arab=[1, 5, 10, 50, 100, 500, 1000]
var=int(input())
index=arab.index(var)
print(rim[index])


 -End,"
 s=input()
types=['int', 'str', 'list']
if s in types:
    if s==types[0]:
        a,b = (int(input()) for i in range(2))
        if a or b: 
            print(a+b)
        else: 
            print(""Empty Ints"")
    if s==types[1]:
        a=input()
        if a: 
            print(a)
        else: 
            print('Empty String')
    if s==types[2]:
        a=input().split()
        if a: 
            print(a[-1])
        else: 
            print('Empty List')
else:
    print('Unknown type')




 -End,"
 n=int(input())
for i in range(0,n,2):
    print(i**2)

 -End,"
 for i in input().split():
    if i[0]!='*':
        print(i, end='\n')




 -End,"
 n=int(input())
for i in range(1,abs(n)):
    print(i**3)



 -End,"
 def numerics(n):
    n=list(map(int, str(n)))
    return(n)


 -End,"
 def numerics(n):
    n=list(map(int, str(n)))
    return(n)
def kaprekar_step(L):
    LSI=int(''.join(str(x) for x in sorted(L)))
    LSRI=int(''.join(str(x) for x in sorted(L, reverse=True)))
    return(LSRI-LSI)
def kaprekar_loop(n):
    print(n)
    while n!=6174:        
        n=kaprekar_step(numerics(n))
        print(n) -End,"
 def numerics(n):
    n=list(map(int, str(n)))
    return(n)

def kaprekar_check(n):
    if len(numerics(n)) in [3,4,6] and n%1111 and n not in [100, 1000, 100000]:
        return(True)
    return(False)
 -End,"
 def kaprekar_loop(n):   
    def kaprekar_check(n):
        if len(numerics(n)) in [3,4,6] and len(set(numerics(n)))!=1 and n not in [100, 1000, 100000]:
            return(True)
        return(False) 

    def numerics(n):
        n=list(map(int, str(n)))
        return(n)
    
    def kaprekar_step(L):
        LSI=int(''.join(str(x) for x in sorted(L)))
        LSRI=int(''.join(str(x) for x in sorted(L, reverse=True)))
        return(LSRI-LSI)    
         
    if kaprekar_check(n)==False:
        print('Ошибка! На вход подано число ' + str(n) + ', не удовлетворяющее условиям процесса Капрекара')    
    else:
        se=[]
        print(n)
        while n not in [495, 6174, 549945, 631764]:
            n=kaprekar_step(numerics(n))
            if (len(numerics(n))==6) and (n in se):
                print('Следующее число - ' + str(n) + ', кажется процесс зациклился...')
                break
            print(n)
            se.append(n) -End,"
 from math import atan
def f(x):
    return 2*atan(x)

lim = f(float('inf'))
print (round(lim,3)) -End,"
 def even_indeces(l):
    return(l[0::2])


 -End,"
 n = int(input()) # Input and convert to int
sum=0
for i in range(0,n+1):
    if i%5==0 and i%3!=0:
        sum+=i
print(sum)




 -End,"
 def common(list_a, list_b):
    return([x for x in list_a if x in list_b])



 -End,"
 def front_x(words):
    a=sorted([x for x in words if (x!='') and (x[0]=='x')]) 
    b=sorted([y for y in words if y not in a])
    return(a+b)





 -End,"
 def fib(n):
    f=[0,1]
    for i in range(0,n-1):
        f.append( sum(f[-2:]) )
    return(f[-1])  

 -End,"
 def is_prime(n):
    d=2
    while d**2<=n and n%d!=0:
        d+=1
    return d**2>n
     -End,"
 n = int(input())
def donuts(n):
    return 'Всего пончиков: {}'.format(n if n<=9 else 'много')
print(donuts(n))     -End,"
 s = input()
def fix_start(s):
    return s[0]+s[1:].replace(s[0], '*')
print(fix_start(s)) -End,"
 s=input()
def both_ends(s):
    return '{}'.format(s[:2]+s[-2:] if len(s)>=2 else '')

print(both_ends(s)) -End,"
 def f(x):
    return (2*x**2-3*x-5)/(3*x**2+x+1)
print(f(1e6))
print(f(-1e6))


 -End,"
 def verbing(s):
    if len(s)>=3:
        return (s+'ing' if s.find('ing')<0 else s+'ly' )
    else:
        return s
    




 -End,"
 def front_back(a,b):
    sep = lambda x: (len(x) + 1)//2
    return a[:sep(a)] + b[:sep(b)] + a[sep(a):len(a)] + b[sep(b):len(b)]


 -End,"
 lst, x = list(map(int, input().split())), int(input())
if x not in lst:
    print('Отсутствует')
else:
    for i in range(len(lst)):  
        if lst[i]==x:
            print(i, end=' ')



 -End,"
 def mimic_dict(s):
    s=s.split()                           # разбиваем строку
    d = dict.fromkeys([""""], [s[0]])     # создаем заготовку словаря, вводим первый ключ-значение 
    for i in range(len(s)-1):           # пробегаемся по всем элементам введенной строки
        if s[i] not in list(d.keys()): 
            d.update( {s[i]:[s[i+1]]} )  #нет в ключах, добавлям iый элем строки в качестве ключа, значение- след элем строки     
        else:
            d.get(s[i]).append(s[i+1])  #есть в ключах, в значение совпадающего ключа добавляем iый элеме
    return(d)


 -End,"
 # формируем список входных строк
v=[]
enter=0
while enter!='end':  
    enter=input()
    v.append(enter)

# модифицируем одномерный список в матрицу
m=[x.split() for x in v] 
# отбрасываем строку end
mx=m[:-1]

#основная часть
row=[]                         # заготовка i-ой строки результирующей матрицы
mtx=[]                         # заготовка результирующей матрицы
for i in range(len(mx)):
    for j in range(len(mx[i])):
        s=int(mx[i-1][j]) + int(mx[i-len(mx)+1][j]) + int(mx[i][j-1]) + int(mx[i][j-len(mx[i])+1])
                               # формируем список i-ой строки
        row.append(s)
                               # порционно добавляем копии стррок в заготовку матрицы
    mtx.append(row.copy())
    row.clear() 

# выводим результат
for i in mtx: print(*i)    


 -End,"
 def modify_list(l):
    l[:]=[int(i/2) for i in l if i%2==0]

 -End,"
 d={}
string=input()
string=string.lower().split()
d.fromkeys(set(string))
for i in set(string):
    d[i]=string.count(i)
for i in d: print(i,d.get(i)) 




 -End,"
 import numpy
a11, a12, b1 = input().split()
a21, a22, b2 = input().split()
M1 = numpy.array([[a11,a12],[a21,a22]], dtype = 'float') # Матрица (левая часть системы)
v1 = numpy.array([b1,b2], dtype = 'float') # Вектор (правая часть системы)
r = numpy.linalg.solve(M1,v1) #Находим решение системы
print (r[0], r[1])
 -End,"
 import numpy
a11, a12, b1 = input().split()
a21, a22, b2 = input().split()
M1 = numpy.array([[a11,a12],[a21,a22]], dtype = 'float')
v1 = numpy.array([b1,b2], dtype = 'float')
if numpy.linalg.det(M1):
    r = numpy.linalg.solve(M1,v1)             
    print (r[0], r[1])
else:
    print ('Система не имеет решений')


 -End,"
 import numpy as np
m=np.array([input().split() for i in range(3)], dtype=float)
if np.linalg.det(m[:,:-1]):
    print(*np.linalg.solve(m[:,:-1], m[:,-1])) 
else: 
    print('Система не имеет решений')


 -End,"
 import numpy as np
import scipy.linalg
A,row_A,b,=[],[],[]

M=int(input())
for i in range(M):
    coords=[float(x) for x in input().split()]
    row_A=[1]
    b.append(coords[-1])
    for j in range(1,M):
        row_A.append(coords[0]**j)
    A.append(row_A)

coefs=scipy.linalg.solve(A,b)
print(*coefs)


 -End,"
 def f(x):
    return (x+a)**2-b


def g(x):
    return abs(f(x)) -End,"
 from scipy.optimize import golden
def f(x):
    return (x+a)**2-b
def g(x):
    return abs(f(x))

min_f = golden(f, brack=(-10, -4), full_output=True)[1]
min_g = golden(g, brack=(-10, -4), full_output=True)[1]

print(min_f, min_g) -End,"
 import numpy as np

def vectorized_forward_pass(self, input_matrix):        
 #       Метод рассчитывает ответ перцептрона при предъявлении набора примеров
 #       input_matrix - матрица примеров размера (n, m), каждая строка - отдельный пример,
 #       n - количество примеров, m - количество переменных
 #       Возвращает вертикальный вектор размера (n, 1) с ответами перцептрона
 #       (элементы вектора - boolean или целые числа (0 или 1))
    predictions = np.apply_along_axis(self.forward_pass, 1, input_matrix)
    predictions = predictions.reshape(predictions.shape[0],1)
    return predictions -End,"
 import numpy as np

def train_on_single_example(self, example, y):
    prediction = self.forward_pass(example)
    error = y - prediction
    delta_w = error*example
    self.w += delta_w
    self.b += error
    return self.w

    




 -End,"
 chislo_1=int(input())
total=chislo_1*365*24*60**2
print(total)



 -End,"
 chislo_1=int(input())
total=chislo_1%10
print(total)


 -End,"
 chislo_1=int(input())
hour=chislo_1//60
minute=chislo_1%60
print(hour,minute )


 -End,"
 chislo_1=int(input())
chislo_n=int(input())
total=chislo_1%10**chislo_n
print(total)




 -End,"
 n=int(input())
chislo_1=n%1000//100
chislo_2=n%100//10
chislo_3=n%10
total=(chislo_1**3)+(chislo_2**3)+(chislo_3**3)
print(total)




 -End,"
 line_1=input()
line_2=input()
total=line_1 != line_2
print(total) -End,"
 num_1=float(input())
num_2=float(input())
num_3=float(input())
p=(1/2)*(num_1+num_2+num_3)
k=p*(p-num_1)*(p-num_2)*(p-num_3)
s=k**(1/2)
print(s)




 -End,"
 num_1=int(input())
num_2=int(input())
dif=max(num_1,num_2)-min(num_1,num_2)
deg=len(str(dif))
hour=dif//60
minute=dif%60
print (hour,minute)




 -End,"
 num_1=int(input())
num_2=int(input())
num_3=int(input())
total=num_1+num_2+num_3
print(total)




 -End,"
 num_1=int(input())
num_2=int(input())
num_3=int(input())
rub=(num_1*num_3)+(num_2*num_3//100)
kop=num_2*num_3%100
print(rub,kop)




 -End,"
 a=int(input())
if a%2 == 0:
    print(""Чет"")
else:
    print(""Нечет"") -End,"
 num_1=int(input())
num_2=int(input())
if num_1 > num_2:
    print (""Большее число:"",str(num_1)+"","",""меньшее число:"",num_2)
else:
    print(""Большее число:"",str(num_2)+"","",""меньшее число:"",num_1)
 -End,"
 num_1=int(input())
if abs(num_1) > 1000000000:
    print(""Да, это большое число"")
else:
    print(""Нет, это не такое уж и большое число"")





 -End,"
 num_1=float(input())
num_2=float(input())
asing=input()

if asing == str(""+""):
    sum_plus=num_1+num_2
    print(sum_plus)
else:
    sum_min=num_1-num_2
    print(sum_min)
 -End,"
 num_1=int(input())
len_num_1=len(str(num_1))
if len_num_1 == 1:
    print(""Число однозначное"")
elif len_num_1 == 2:
    print(""Число двузначное"")
else:
    print (""Число трехзначное"") -End,"
 num_1=int(input())
num_2=int(input())
num_3=int(input())
if num_1 <= num_2 and num_2 <= num_3:
    print(""Все в порядке"")
elif num_1 >= num_2 and num_2 <= num_3:
    print(""2 <= 1"")
elif  num_1 <= num_2 and num_2 >= num_3:
    print(""3 <= 2"")
elif num_1 >= num_2 and num_2 >= num_3:
    print(""2 <= 1\n3 <= 2 "")




 -End,"
 name_1=input()
if name_1 == ""Энрико Ферми"" or name_1 == ""Нильс Бор"" or name_1 == ""Джон фон Нейман"" or name_1 == ""Ричард Фейнман"" or name_1 == ""Роберт Оппенгеймер"" or name_1 == ""Ганс Бизе"" or name_1 == ""Ханс Бете"":
    print(""Доступ разрешен"")
else:
    print(""Доступ запрещен"")




 -End,"
 num_1=int(input())
num_2=int(input())
if num_1 >0 and num_2 >0:
    print (""1"")
elif num_1 <0 and num_2 >0:
    print(""2"")
elif num_1 <0 and num_2 <0:
    print(""3"")
else:
    print(""4"") -End,"
 num_1=float(input())
if num_1%4 == 0 and num_1%100 != 0 or num_1%400 == 0:
    print(""Високосный"")
else:
    print(""Невисокосный"") -End,"
 userpass=input()
if (""qwerty"" in userpass or ""1234"" in userpass):
    print(""Bad password"")
elif len(userpass) <8:
    print(""Bad password"")
elif not (""1"" in userpass or ""2"" in userpass or ""3"" in userpass or ""4"" in userpass or ""5"" in userpass or ""6"" in userpass or ""7"" in userpass or ""8"" in userpass or ""9"" in userpass or ""10"" in userpass):
    print(""Bad password"")
else:
    print(""Good password"")



 -End,"
 feedback=int(input())
city=input()
language=input()
if feedback >=7 and city == ""Рим"" and (""английский"" in language or ""русский"" in language):
    print(""Подходит"")
else:
    print(""Не подходит"")




 -End,"
 g_1=input()
g_2=input()
g_3=input()
katalog=input()
if g_1 in katalog and g_2 in katalog and g_3 in katalog:
    print(""YES"")
else:
    print(""NO"")



 -End,"
 hero=input()

if ""Арагорн"" in hero or ""Леголас"" in hero or ""Мериадок Брендибак"" in hero or ""Боромир"" in hero or ""Фродо Бэггинс"" in hero:
    print(""Проходи!"")
else:
    print(""Ты не пройдешь!"")




 -End,"
 king_1 = int(input())
king_2 = int(input())
go_1 = int(input())
go_2 = int(input())
incorrectly_entered = ""correct"" if 1 <= king_1 <= 8 and 1 <= king_2 <= 8 and 1 <= go_1 <= 8 and 1 <= go_2 <= 8 else ""incorrectly""
if incorrectly_entered == ""incorrectly"":
    print(""NO"")
elif (abs(king_1-go_1) == 1 and abs(king_2-go_2) == 1) or (king_1-go_1 == 0 and abs(king_2-go_2) == 1) or (abs(king_1-go_1) == 1 and king_2-go_2 == 0):
    print(""YES"")
else:
    print(""NO"")

 -End,"
 num_1, num_2 = int(input()), int(input())
if num_1 < num_2:
    print(tuple(range(num_1, num_2)))
elif num_2 < num_1:
    print(tuple(range(num_2, num_1)))






 -End,"
 a = int(input())
if a % 2 == 0:
    print(tuple(range(a, a*10+2, 2)))
else:
    print(tuple(range(a+1, a*10+2, 2)))



 -End,"
 a, b = int(input()), int(input())
for i in range(a,b, -1):
    print(i)




 -End,"
 a, b = int(input()), int(input())
i = min(a, b)
g = max(a, b)
for i in range(min(a, b),max(a, b), 1):
    if i%2 == 0 and i%7 == 1:
        print(i)




 -End,"
 a, b = int(input()), int(input())
am = min(a, b)
bm = max(a, b)
z = range (am, bm, 1)
y = sum(z)
print(y)




 -End,"
 
a = int(input())
x = 1
for i in range(1, a+1):
    x = i*x
print(x)



 -End,"
 a = int(input())
colors = (""Красный"", ""Оранжевый"", ""Желтый"", ""Зеленый"", ""Голубой"", ""Синий"", ""Фиолетовый"")

if a > 7:
    print(""Радуга состоит только из семи цветов"")
else:
    for a in range(0, a):
        print(colors[a])




 -End,"
 total = int(input())
qty = int(input())

for i in range(qty):
    prices = int(input())
    total = total - prices
if total >= 0:
    print(""Покупает"")
else:
    print(""Не покупает"")






 -End,"
 a, b = int(input()), int(input())
c = 0
for i in range(min(a, b), max(a, b)):
    c = (i**2)+c
print(c)




 -End,"
 # -*- coding: utf8 -*-
num_1 = int(input())
months = (""Первый месяц - январь"", ""Второй месяц - февраль"", ""Третий месяц - март"", ""Четвертый месяц - апрель"", ""Пятый месяц - май"", ""Шестой месяц - июнь"", ""Седьмой месяц - июль"", ""Восьмой месяц - август"", ""Девятый месяц - сентябрь"", ""Десятый месяц - октябрь"", ""Одиннадцатый месяц - ноябрь"", ""Двенадцатый месяц - декабрь"")
if num_1 > 12:
    print(""Error"")
else:
    for i in range(0, num_1):
        print(months[i])



 -End,"
 num_1 = int(input())
meadow = ""На лугу""
cow_1 = ""корова""
cow_2 = ""коров""
cow_3 = ""коровы""
for i in range(1, num_1+1):
    if i < 20:
        if i == 1:
            print(meadow, i, cow_1)
        elif i == 2 or i == 3 or i == 4:
            print(meadow, i, cow_3)
        else:
            print(meadow, i, cow_2)
    else:
        if i%10 == 1:
            print(meadow, i, cow_1)
        elif i%10 == 2 or i%10 == 3 or i%10 == 4:
            print(meadow, i, cow_3)
        else:
            print(meadow, i, cow_2)




 -End,"
 fib1 = fib2 = 1

n = int(input())
if n == 1:
        print(""1"")
else:
    print(fib1, end=' ')
    print(fib2, end=' ')
for i in range(2, n):
    fib1, fib2 = fib2, fib1 + fib2
    print(fib2, end=' ')









 -End,"
 num_1 = int(input())
b = ""Составное""
c = ""Простое""
e=1
for i in range(2, num_1):
    d = num_1%i
    e = d*e
if e == 0:
    print(b)
else:
    print(c) -End,"
 num_1 = int(input())
for i in range(1, num_1+1):
    for j in range(1, num_1+1):
        if j == num_1:
            print(i*j, end='\n')
        else:
            print(i*j, end='\t')




 -End,"
 num_1 = int(input())
range_1 = range(1, num_1+1)
c = 0

for i in range_1:
    stroka = input()
    if ""rat"" in stroka:
        b = print(range_1[i-1])
        c = c + 1
if c == 0:
    print(""-1"")




 -End,"
 a =1
c=0
while a != 0:
    a = int(input())
    c =c+a
print(c)




 -End,"
 a = input()
b = ""text""
if len(a) == 0:
    print(""Нет вдохновения? Ну ничего, попробуйте завтра"")
else:
    while len(b) != 0:
        print(""Великолепно, пишите еще!"")
        b = input()
if len(b) == 0:
    print(""Эти строки запомнятся надолго"")





 -End,"
 total = int(input())
sum = 0
while total > 0:
    price = int(input())
    total = total - price
    sum += price
print(""Стоп, Джон!"")
if total == 0:
    print(sum)
else:
    print(sum - price) -End,"
 num_1 = int(input())
range_1 = range(1, num_1+1)
c = 0

for i in range_1:
    stroka = input()
    if ""rat"" in stroka:
        b = print(range_1[i-1])
        c = c + 1
        break
if c == 0:
    print(""-1"")





 -End,"
 
while True:
    userpass = input()
    if len(userpass) < 8:
        print(""Короткий пароль"")
        continue
    elif (""qwerty"" in userpass or ""1234"" in userpass):
        print(""Слабый пароль"")
        continue
    elif not (""1"" in userpass or ""2"" in userpass or ""3"" in userpass or ""4"" in userpass or ""5"" in userpass or ""6"" in userpass or ""7"" in userpass or ""8"" in userpass or ""9"" in userpass or ""10"" in userpass):
        print('Пароль должен содержать цифры')
        continue
    break -End,"
 num_1 =int(input())
b = range(2, num_1+1)
for i in b:
    c = num_1%i
    if c == 0:
        print(b[i-2])
        break




 -End,"
 n = int(input())
c = 0
if n == 2:
    print(""1"")
else:
    for i in range(4, n+1):
        d = 2
        while d * d <= i and i % d != 0:
            d += 1
        e = d * d > i
        if e == True:
            c = c + 1

    print(c+2)






 -End,"
 num_1 = int(input())

while num_1%2 == 0:
    num_1 = num_1/2
    if num_1 == 0:
        break

if num_1 in (0, 1):
    print(""YES"")
elif num_1%2 != 0:
    print(""NO"")






 -End,"
 n = int(input())
ending = 's'
if n == 1:
    ending = ''
sentence = '{} programmer{}'.format(n, ending)
print(sentence)
     -End,"
 N, M, K = [int(input()) for _ in range(3)]
if K <= N * M and (K % N == 0 or K % M == 0):
    print('YES')
else:
    print('NO') -End,"
 base = ord('\\')
dist = int(input())
print(chr(base+dist)) -End,"
 Y = int(input())
if (Y%4==0 and Y%100) or Y%400==0:
    print('Leap')
else:
    print('Regular') -End,"
 try:
    even_numbers = [n for i, n in enumerate(input().strip().split()) if i % 2]
    even_numbers.reverse()
    print(' '.join(even_numbers))
except:
    pass
 -End,"
 login = 100500
password = 424242
#put your python code here
l, p = map(int, input().split())
if l == login and p == password:
    print('Login success')
elif p != password:
    print('Wrong password')
elif l != login:
    print('No user with login {} found'.format(l)) -End,"
 def filter_positive(ar):
    return [v for v in ar if v>0] -End,"
 import numpy as np
m1 = np.diag([2]*4)
m2 = np.diag([1]*3,1)
print((m1+m2)[:3]) -End,"
 numbers = [int(input()) for _ in range(int(input()))]
divisible =  [x for x in numbers if x%6==0]
print(sum(divisible)) -End,"
 n, m = map(int, input().split())
matrix = [list(map(int,input().split())) for _ in range(n)]
col_1, col_2 = map(int, input().split())

for row in matrix:
    new_row = [None]*m
    for i in range(m):
        if i==col_1:
            new_row[i] = row[col_2]
        elif i==col_2:
            new_row[i] = row[col_1]
        else:
            new_row[i] = row[i]
    print(*new_row) -End,"
 class ExtendedStack(list):
    def getTwoTop(self):
        return self.pop(), self.pop()
    
    def sum(self):
        a, b = self.getTwoTop()
        self.append(a+b)

    def sub(self):
        a, b = self.getTwoTop()
        self.append(a-b)

    def mul(self):
        a, b = self.getTwoTop()
        self.append(a*b)

    def div(self):
        a, b = self.getTwoTop()
        self.append(a//b) -End,"
 def vSum(a,b):
    return (a[0]+b[0], a[1]+b[1])

def canWalk(matrix, direction):
    n = len(matrix)
    return 0<=direction[0]<n and 0<=direction[1]<n and matrix[direction[0]][direction[1]] is None

def rotateClockwise(d):
    if d[1]:
        return d[1],0
    else:
        return 0, -d[0]
    
n = int(input())
matrix = [[None]*n for _ in range(n)]

position = (0,0)
cur_value = 1
rotations = 0
matrix[position[0]][position[1]] = cur_value
direction = (0,1)
while rotations<2:
    new_pos = vSum(position,direction)
    if canWalk(matrix, new_pos):
        rotations = 0
        cur_value+=1
        position = new_pos
        matrix[new_pos[0]][new_pos[1]] = cur_value
    else:
        rotations+=1
        direction = rotateClockwise(direction)
        
for row in matrix:
    print(*row) -End,"
 def findCoeff(num, denom):
    if denom==1:
        return [num]
    
    if denom>1:
        integer, reminder = divmod(num, denom)
        return [integer] + findCoeff(denom,reminder)
    
    return []

n, d = map(int,input().split('/'))

print(*findCoeff(n,d)) -End,"
 print(sum(map(int,list(input())))) -End,"
 N = int(input())
if -15 < N <= 12 or 14 < N < 17 or 19 <= N:
    print(True)
else:
    print(False) -End,"
 import re

pattern = re.compile('\d+')
st = input()
ints = pattern.findall(st)
print(sum(map(int, ints))) -End,"
 import sys, re
exp = re.compile(""z...z"")
print(*filter(lambda line: exp.search(line), sys.stdin), sep='') -End,"
 import sys
print(*filter(lambda line: ""\\"" in line, sys.stdin), sep='') -End,"
 import sys, re
exp = re.compile(r'\b(\w+)\1\b')
print(*filter(lambda line: exp.search(line), sys.stdin), sep='') -End,"
 import sys, re
exp = re.compile(""human"")
print(*map(lambda line: exp.sub('computer', line), sys.stdin), sep='') -End,"
 import re, sys
exp = re.compile(r""\b[aA]+\b"")
print(*map(lambda line: exp.sub('argh', line, 1), sys.stdin), sep='') -End,"
 import re, sys
exp = re.compile(r""\b(\w)(\w)(\w*)\b"")
print(*map(lambda line: exp.sub(r'\2\1\3', line), sys.stdin), sep='')
 -End,"
 import re, sys
exp = re.compile(r""(\w)(\1+)"")
print(*map(lambda line: exp.sub(r'\1', line), sys.stdin), sep='')
 -End,"
 def fib_digit(n):
    pre, cur = 0, 1
    for _ in range(n):
        pre, cur = cur, (pre + cur) % 10
    return pre

def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 from operator import itemgetter

segments = [tuple(map(int, input().split())) for _ in range(int(input()))]
segments.sort(key=itemgetter(1))

points = []
i = 0
while i < len(segments):
    cur = segments[i]
    points.append(cur[1])
    j = i + 1
    while j < len(segments) and cur[1] >= segments[j][0]:
        i = j
        j += 1
    i = j

print(len(points))
print(' '.join(map(str, points)))
 -End,"
 N, space = map(int, input().split())
items = [tuple(map(int, input().split())) for _ in range(N)]
items.sort(key=lambda x: x[0] / x[1], reverse=True)

total = 0
for item in items:
    if space >= item[1]:
        total += item[0]
        space -= item[1]
    else:
        total += space * (item[0] / item[1])
        break
        
print(""{:.3f}"".format(total))
 -End,"
 n = int(input())
i = 1
numbers = []
while n > 0:
    if n - i >= 0:
        n -= i
        numbers.append(i)
        i += 1
    else:
        numbers[-1] += n
        break

print(len(numbers))
print(*numbers, sep=' ')
 -End,"
 n = int(input())
i = 1
numbers = []
while n > 2*i:
    n -= i
    numbers.append(i)
    i += 1

numbers.append(n)
print(i)
print(*numbers, sep=' ')
 -End,"
 import heapq
import sys

input()
h = []
for line in sys.stdin.readlines():
    if 'Insert' in line:
        val = -int(line.split()[1])
        heapq.heappush(h, val)
    elif 'ExtractMax' in line:
        print(-heapq.heappop(h)) -End,"
 from collections import Counter
import heapq
from operator import itemgetter

st = input()
heap = []
c = Counter(st)
frequencies = c.most_common()
for f in frequencies:
    v = (f[1], f[0])
    heapq.heappush(heap, v)

tree = {}
while len(heap) > 1:
    v1 = heapq.heappop(heap)
    v2 = heapq.heappop(heap)
    priority = v1[0] + v2[0]
    value = v1[1] + v2[1]
    heapq.heappush(heap, (priority, value))
    tree[value] = (v1[1], v2[1])


root = heapq.heappop(heap)[1]
q = [(root, '')]
if len(tree) == 0:
    tree[root] = None
    q = [(root, '0')]

code_table = {}
while len(q):
    next_key, prefix_code = q.pop()
    next = tree.get(next_key, None)
    if next:
        q.append((next[0], prefix_code + '0'))
        q.append((next[1], prefix_code + '1'))
    else:
        code_table[next_key] = prefix_code

encoded = ''
for ch in st:
    encoded += code_table[ch]

print(len(code_table), len(encoded))
for ch, code in sorted(list(code_table.items()),key=itemgetter(0)):
    print(ch + ':', code)

print(encoded)
 -End,"
 import sys
lines = [line.rstrip() for line in sys.stdin.readlines()]
table = {}
for line in lines[1:-1]:
    letter, code = line.split(': ')
    table[code] = letter

word = ''
buff = ''
for ch in lines[-1]:
    buff += ch
    letter = table.get(buff, None)
    if letter:
        buff = ''
        word += letter

print(word) -End,"
 import sys 

lines = sys.stdin.readlines()
v_num, e_num = map(int, lines[0].split())
a_list = [[] for _ in range(v_num)]
for line in lines[1:]:
    v1, v2 = map(int, line.split())
    a_list[v1 - 1].append(v2 - 1)
    a_list[v2 - 1].append(v1 - 1)

visited = [False] * v_num


def dfp(v):
    visited[v] = True
    for n in a_list[v]:
        if not visited[n]:
            dfp(n)

components = 0

for v in range(v_num):
    if not visited[v]:
        components += 1
        dfp(v)

print(components)
 -End,"
 import sys

lines = sys.stdin.readlines()
v_num, e_num = map(int, lines[0].split())

aj_list = [[] for _ in range(v_num)]
for line in lines[1:]:
    v1, v2 = map(int, line.split())
    aj_list[v1].append(v2)
    aj_list[v2].append(v1)

distances = v_num * [None]

added_in_q = v_num * [False]
added_in_q[0] = True
queue = [(0, 0)]
while len(queue):
    v, length = queue.pop()
    distances[v] = length
    for child in aj_list[v]:
        if not added_in_q[child]:
            added_in_q[child] = True
            queue.insert(0, (child, length + 1))

print(*distances) -End,"
 def binary_search(sorted_ar, value):
    l = 0
    r = len(sorted_ar) - 1

    while l <= r:
        m = (l + r) // 2
        if sorted_ar[m] == value:
            # return m
            return m + 1
        elif sorted_ar[m] > value:
            r = m - 1
        else:
            l = m + 1

    return -1

ar = list(map(int, input().split()))[1:]
values = list(map(int, input().split()))[1:]

res = []
for value in values:
    res.append(binary_search(ar, value))

print(*res) -End,"
 count = 0


def merge_sort(ar):
    if len(ar) < 2:
        return ar
    m = len(ar) // 2
    return merge(merge_sort(ar[:m]), merge_sort(ar[m:]))


def merge(l, r):
    global count
    result = []
    i = j = 0
    while i < len(l) and j < len(r):
        if l[i] <= r[j]:
            result.append(l[i])
            i += 1
        else:
            result.append(r[j])
            count += len(l) - i
            j += 1
    result.extend(l[i:])
    result.extend(r[j:])
    return result

input()
ar = tuple(map(int, input().split()))
merge_sort(ar)
print(count) -End,"
 def counting_sort(ar):
    res = [None] * len(ar)
    m = [0] * 11
    for el in ar:
        m[el] += 1
    for i in range(1, len(m)):
        m[i] += m[i - 1]
    for i in range(len(ar) - 1, -1, -1):
        res[m[ar[i]] - 1] = ar[i]
        m[ar[i]] -= 1
    return res

N = int(input())
ar = tuple(map(int, input().split()))
print(*counting_sort(ar)) -End,"
 def lims(ar):  # longest increasing multiple subsequence
    max_length = 1
    lengths = [1] * len(ar)
    for i in range(1, len(ar)):
        for j in range(0, i):
            if ar[i] % ar[j] == 0 and lengths[i] <= lengths[j]:
                lengths[i] = lengths[j] + 1
        if lengths[i] > max_length:
            max_length = lengths[i]
    return max_length

N = input()
ar = tuple(map(int,input().split()))
print(lims(ar)) -End,"
 def editingDistance(a, b):
    n = len(a) + 1
    m = len(b) + 1
    table = [[None] * m for _ in range(n)]
    for i in range(n):
        table[i][0] = i
    for j in range(m):
        table[0][j] = j
    for i in range(1, n):
        for j in range(1, m):
            del_ = table[i - 1][j] + 1
            ins_ = table[i][j - 1] + 1
            rep_ = table[i - 1][j - 1] + (a[i - 1] != b[j - 1])
            table[i][j] = min(del_, ins_, rep_)

    return table[i][j]

print(editingDistance(input(),input())) -End,"
 def backPack(weight, items):
    n = len(items) + 1
    m = weight + 1
    t = [[0] * m for _ in range(n)]
    for w in range(1, m):
        for i in range(1, n):
            t[i][w] = t[i - 1][w]
            wi = items[i - 1]
            if wi <= w:
                t[i][w] = max(t[i][w], t[i - 1][w - wi] + wi)
    return t[i][w]

W, n = map(int, input().split())
ar = tuple(map(int, input().split()))
print(backPack(W, ar)) -End,"
 def maxLadderSum(ar, i=None, t=None):
    if i is None:
        i = len(ar) - 1
    if t is None:
        t = [None] * len(ar)

    if i < 0:
        return 0
    if t[i] is None:
        t[i] = ar[i] + max(maxLadderSum(ar, i - 1, t), maxLadderSum(ar, i - 2, t))
    return t[i]

n = input()
ar = tuple(map(int, input().split()))
print(maxLadderSum(ar)) -End,"
 def calculator(num):
    t = [None, [0, 0]]
    for i in range(2, num + 1):
        ops = [[t[i - 1][0] + 1, i - 1]]
        if i % 2 == 0:
            ops.append([t[i // 2][0] + 1, i // 2])
        if i % 3 == 0:
            ops.append([t[i // 3][0] + 1, i // 3])
        t.append(min(ops))
    return t

num = int(input())
res = calculator(num)
print(res[num][0])
i = num
steps = []
while i > 0:
    steps.append(i)
    i = res[i][1]
steps.reverse()
print(*steps) -End,"
 print(int(input())*int(input())%109) -End,"
 import heapq, sys
ans = []
h = []
def heap_put(x):
    heapq.heappush(h, -x)
def heap_pop():
    return -heapq.heappop(h)

lines = sys.stdin.readlines()
for line in lines[1:]:
    args = line.split()
    if args[0] == 'Insert':
        heap_put(int(args[1]))
    else:
        print(heap_pop())
 -End,"
 import heapq, math

h = []
def heap_pop():
    return -heapq.heappop(h)
def heap_push(x):
    heapq.heappush(h, -x)
def heap_top():
    return -h[0]

n = input()
h = [-int(x) for x in input().split()]
capacity = int(input())
heapq.heapify(h)
moves = 0
while len(h) > 0:
    loaded = [heap_pop()]
    while len(h) > 0 and (sum(loaded) + heap_top()) <= capacity:
        loaded.append(heap_pop())
    for fruit in loaded:
        if fruit > 1:
            heap_push(fruit - math.ceil(fruit / 2))
    moves += 1

print(moves) -End,"
 def is_correct(line):
    stack = []
    map = {')': '(', ']': '[', '}': '{'}
    for i, ch in enumerate(line, 1):
        if ch in '([{':
            stack.append((i, ch))
        elif ch in ')]}':
            if not stack:
                return i
            n,top = stack.pop()
            if map.get(ch) != top:
                return i
    if stack:
        return stack.pop()[0]
    return 'Success'

print(is_correct(input())) -End,"
 def process_text(pattern, text):
    def get_hash(st):
        hash = 0
        for ch in st:
            hash += ord(ch)
        return hash

    p_len = len(pattern)
    p_hash = get_hash(pattern)
    t_hash = get_hash(text[:p_len-1])
    res = []
    for i, ch in enumerate(text[p_len-1:]):
        t_hash += ord(ch)
        if text[i] == pattern[0] and p_hash == t_hash and pattern == text[i:i + p_len]:
            res.append(i)
        t_hash -= ord(text[i])
    return res

print(*process_text(input(), input())) -End,"
 import sys

sys.setrecursionlimit(10 ** 5)


class SearchTree:
    def __init__(self, tree):
        self.tree = tree
        self.search_cache = {}

    def value(self, node):
        return self.tree[node][0]

    def left(self, node):
        return self.tree[node][1]

    def right(self, node):
        return self.tree[node][2]

    def check(self, node=0, min=-2 ** 32, max=2 ** 32):
        if node == -1:
            return True
        v = self.value(node)
        if v < min or v > max:
            return False
        return self.check(self.left(node), min, v - 1) and self.check(self.right(node), v + 1, max)


def process_lines(ar):
    tree = SearchTree([tuple(map(int, line.split())) for line in ar])

    return 'CORRECT' if len(tree.tree) == 0 or tree.check() else 'INCORRECT'

input()
print(process_lines(sys.stdin.readlines())) -End,"
 # put your python code here
a, b, c = int(input()), int(input()), int(input())
max = a
if b > max :
    max = b
    if c > max :
        max = c
else:
    if c > max :
        max = c
print(max)        

da, db, dc = max-a, max-b, max-c
min = da
if db > min :
    min = db
    if dc > min :
        min = dc
else:
    if dc > min :
        min = dc
        
print(max-min)
print(a+b+c-max-(max-min)) -End,"
 a, b, c, d = int(input()), int(input()), int(input()), int(input())    
for i in range(a - 1, b + 1) :
    for j in range(c, d + 1) :
        if i == a - 1 : # Вывод заголовков на первой строке
            print(end='\t' + str(j))
        elif j == c : # Вывод номера строки и первое произведение
            print(end=str(i)+'\t'+str(i * j)+'\t') 
        elif j == d : # Вывод последнего произведения
            print(end=str(i * j)) 
        else: # Вывод остальных произведений
            print(end=str(i * j)+'\t') 
    print() # Перевод в конце строки -End,"
 a, b, s, j = int(input()), int(input()), 0, 0
for i in range(a, b + 1) :
    if not i % 3 : s, j = s + i, j + 1
print(s / j) -End,"
 s = input().lower()
print((s.count('c')+s.count('g'))/len(s)*100) -End,"
 s = input()+' '    
c = ''
p = s[0]
j = 0
for i in s :
    if i == p :
        j += 1
    else:
        c += p + str(j)
        j = 1
        p = i
print(c)  -End,"
 s, sum = [int(i) for i in input().split()], 0
for i in s : sum += i
print(sum) -End,"
 s, c = [int(i) for i in input().split()], ''
s.sort()
for i in range(len(s)) :
    if i and s[i-1] == s[i] and ' '+str(s[i])+' ' not in ' ' + c : 
        c += str(s[i]) + ' '
print (c) -End,"
 s = [0] * 2
while 1 :
    i = int(input())
    s = [s[0] + i, s[1] + i ** 2]
    if not s[0] :
        break
print(s[1]) -End,"
 n = int(input())
m = [[0 for i in range(n)] for j in range(n)]
for k in range(n, 0, -1): 
    for j in range(n-k, k):
        m[n-k][j] = m[n-k][j-1] + 1
    for i in range(n-k, k-1): 
        m[i+1][k-1] = m[i][k-1] + 1    
    for j in range(k-2, n-k-1, -1):
        m[k-1][j] = m[k-1][j+1] + 1     
    for i in range(k-2, n-k, -1): 
        m[i][n-k] = m[i+1][n-k] + 1
for i in m:
    print(*i) -End,"
 def update_dictionary(d, key, value):
    def add_list(d, k, v):
        if type(d[k]) != list:
            d[k] = [d[k]] + [v]
        else:
            d[k].append(v)
    if key in d:
        add_list(d, key, value)
    elif 2*key in d:
        add_list(d, 2*key, value)
    else:
        d[2*key] = [value] -End,"
 from math import tau as pi2
print(pi2*float(input())) -End,"
 from sys import argv as a
print(*a[1:]) -End,"
 t = {}
for i in range(int(input())):
    l = input().split(';')
    if l[0] not in t:
        t[l[0]] = [0]*5   
    if l[2] not in t:
        t[l[2]] = [0]*5
    t[l[0]][0] += 1
    t[l[2]][0] += 1         #+Всего 0 0 0 0  
    if int(l[1]) > int(l[3]):
        t[l[0]][1] += 1      #Всего +Побед 0 0 0     
        t[l[2]][3] += 1      #Всего Побед Ничьих +Поражений 0     
        t[l[0]][4] += 3      #Всего Побед Ничьих Поражений +Очков
    elif int(l[1]) == int(l[3]):
        t[l[0]][2] += 1      #Всего Побед +Ничьих 0 0
        t[l[2]][2] += 1
        t[l[0]][4] += 1      #Всего Побед Ничьих Поражений +Очков
        t[l[2]][4] += 1
    else:
        t[l[2]][1] += 1      #Всего +Побед 0 0 0
        t[l[2]][4] += 3      #Всего Побед Ничьих Поражений +Очков
        t[l[0]][3] += 1      #Всего Побед Ничьих +Поражений 0     
for k in [[i] + [j for j in t[i]] for i in t]:          
    print(k[0]+':',*k[1:]) -End,"
 def CodEn(i):
    if i >= 0:
        for c in s[2+i]:
            o[0+i] += s[1-i][s[0+i].find(c)]    
s, o = ['']*4, ['']*2
for i in range(4):
    s[i] = input()
    CodEn(i-2)
print(*o, sep='\n') -End,"
 t = set()
w = set([input().lower() for i in range(int(input()))])
for j in range(int(input())): t |= set(input().lower().split())
print(*(t-w), sep='\n') -End,"
 d, c = {'север':[1, 1], 'юг':[-1, 1], 'восток':[1, 0], 'запад':[-1, 0]}, [0, 0]
for _ in range(int(input())):
    s = input().split()
    c[d[s[0]][1]] += d[s[0]][0]*int(s[1])
print(*c) -End,"
 print(sum([int(input()) for _ in range(int(input()))])) -End,"
 def closest_mod_5(x):
    return x + (5 - x % 5) * int(bool(x % 5)) -End,"
 ns = {'global':{'v':set()}}
for c, n, v in [input().split() for _ in range(int(input()))]:
    if c == 'create': ns[n] = {'v':set(), 'p':v}
    elif c == 'add': ns[n]['v'] |= {v}
    else: gt = lambda n, v: v in ns[n]['v'] and n or n != 'global' and gt(ns[n]['p'], v) or None; print(gt(n, v)) -End,"
 class MoneyBox:
    def __init__(self, c):
        self.c = c
    def can_add(self, v):
        return self.c >= v
    def add(self, v):
        self.c -= v -End,"
 class Buffer:
    def __init__(self):
        self.s = []
    def add(self, *a):
        self.s += list(a)
        for i in range(len(self.s) // 5):
            print(sum(self.s[:5]))
            del self.s[:5]        
    def get_current_part(self):
        return self.s -End,"
 def isP(pr, ch):
    return ch == pr or any(map(lambda pl: isP(pr, pl), p[ch]))
p = {}
for j in range(2):
    for c in [input().split() for i in range(int(input()))]:
        if j: print(['No', 'Yes'][isP(*c)])
        else: p[c[0]] = c[2:] -End,"
 class ExtendedStack(list):
    def sum(s): s += [s.pop() + s.pop()]
    def sub(s): s += [s.pop() - s.pop()]
    def mul(s): s += [s.pop() * s.pop()]
    def div(s): s += [s.pop()// s.pop()] -End,"
 class ExtendedStack(list):
    def sum(s): s += [s[-1] + s[-2]]; del s[-3:-1]
    def sub(s): s += [s[-1] - s[-2]]; del s[-3:-1]
    def mul(s): s += [s[-1] * s[-2]]; del s[-3:-1]
    def div(s): s += [s[-1]// s[-2]]; del s[-3:-1] -End,"
 class LoggableList(list, Loggable):
    def append(s, e): s += [e]; s.log(e) -End,"
 def isP(pr, ch):
    return ch == pr or any(map(lambda pl: isP(pr, pl), p[0][ch]))
p = {0:{}, 1:[]}
for j in p:
    for c in [input().split() for j in range(int(input()))]:
        if j: 
            p[1] += [c[0]]
            for pr in p[1][:p[1].index(c[0])]:
                if isP(pr, c[0]): print(c[0]); break
        else: p[0][c[0]] = c[2:] -End,"
 class multifilter:
    def judge_half(pos, neg):
        return pos >= neg
    def judge_any(pos, neg):
        return pos
    def judge_all(pos, neg):
        return not neg
    def __init__(self, l, *fs, judge=judge_any):
        c = [[f(i) for f in fs] for i in l]
        self.res =[l[i] for i in range(len(c)) if judge(c[i].count(True), c[i].count(False))]
    def __iter__(self):
        return iter(self.res) -End,"
 def primes():
    c = 1
    while 1:
        c += 1
        if not [1 for i in range(2, c) if not c % i ]: yield c -End,"
 def primes():
    c, f = 2, 1
    while 1:
        if not (f + 1) % c: yield c
        f, c = f * c, c + 1 -End,"
 s, t = input(), input()
print(len([1 for i in range(len(s)) if s[i:i+len(t)] == t])) -End,"
 import re
s, t = input(), '(?=' + input() + ')'
print(len(re.findall(t, s))) -End,"
 s, a, b, i = [input() for i in range(3)] + [0]  
while a in s:
    if a in b: i = 'Impossible'; break
    s, i = s.replace(a, b), i + 1
print(i) -End,"
 import sys, re
print(*[line for line in sys.stdin if re.search(r""cat.*cat"", line)], sep='') -End,"
 import sys, re
print(*[line for line in sys.stdin if re.search(r""\bcat\b"", line)], sep='') -End,"
 import sys, re
print(*[line for line in sys.stdin if re.search(r""z...z"", line)], sep='') -End,"
 import sys, re
print(*[line for line in sys.stdin if re.search(r""\\"", line)], sep='') -End,"
 import sys, re
print(*[line for line in sys.stdin if re.search(r'\b(\w+)\1\b', line)], sep='') -End,"
 import sys, re
print(*[re.sub(r'human', 'computer', line) for line in sys.stdin], sep='') -End,"
 import sys, re
print(*[re.sub(r'\b[aA]+\b', 'argh', line, 1) for line in sys.stdin], sep='') -End,"
 import sys, re
print(*[re.sub(r'\b(\w)(\w)', r'\2\1', line) for line in sys.stdin], sep='') -End,"
 import sys, re
print(*[re.sub(r'(\w)(\1)+', r'\1', line) for line in sys.stdin], sep='') -End,"
 import sys, re
[print(line, end='') for line in sys.stdin if re.fullmatch(r'(0+|1(01*0)*1)+\s', line)] -End,"
 from re import findall as f; from requests import get as g
a, b, c = input(), input(), lambda u: f(r'f=""(.*)""', g(u).text)
print('Yes' if [1 for i in c(a) if b in c(i)] else 'No') -End,"
 from xml.etree import ElementTree
def CountValue(elem, value=1):
    c[elem.attrib['color']] += value
    [CountValue(child, value + 1) for child in elem]        
c = {'red': 0, 'green': 0, 'blue': 0}
CountValue(ElementTree.fromstring(input()))
print(*[c[i] for i in c]) -End,"
 from re import findall as f; from requests import get as g
print(*sorted({i[2] for i in f(r'<a.*f=(""|\')(.+?//)?(\w[\w\-.]+)(/|:)?.*?\1', g(input()).text)}), sep='\n') -End,"
 from re import findall as f; from requests import get as g; p,s,i = print,sorted,input
p(*s({j[2] for j in f(r'<a.*f=(""|\')(.+?//)?(\w[\w\-.]+)(/|:)?.*?\1', g(i()).text)}), sep='\n') -End,"
 from re import findall as f; from requests import get as g; p,s,i = print,sorted,input 
p(*s({j for j in f(r'a.*f=.*?//([\w.-]+).*?', g(i()).text)}), sep='\n')  -End,"
 X = int(input())
Y = int(input())
print(X*60 + Y) -End,"
 # put your python code here
a, b, h = int(input()), int(input()), int(input())
if h > b:
    print(""Пересып"")
elif h < a:
    print(""Недосып"")
else:
    print(""Это нормально"")
 -End,"
 # put your python code here
year = int(input())
print(""Високосный"" if year % 4 == 0 and year % 100 != 0 or year % 400 == 0 else ""Обычный"")





 -End,"
 # put your python code here
a, b, c = int(input()), int(input()), int(input())
p = (a + b + c) / 2
print((p * (p - a) * (p - b) * (p - c)) ** 0.5)



 -End,"
 # put your python code here
s = int(input())
print((-15 < s <= 12) or (14 < s < 17) or (s >= 19))



 -End,"
 # put your python code here
o1, o2, z = float(input()), float(input()), input()
if z == ""+"":
    print(o1 + o2)
elif z == ""-"":
    print(o1 - o2)
elif z == ""*"":
    print(o1 * o2)
elif z == ""pow"":
    print(o1 ** o2)
else:
    if o2 == 0:
        print(""Деление на 0!"")
    else:
        if z == ""/"":
            print(o1 / o2)
        if z == ""mod"":
            print(o1 % o2)
        if z == ""div"":
            print(o1 // o2)




 -End,"
 # put your python code here
g_figure = input()
if g_figure == ""треугольник"":
    a, b, c = int(input()), int(input()), int(input())
    p = (a + b + c) / 2
    print((p * (p - a) * (p - b) * (p - c)) ** 0.5)
elif g_figure == ""прямоугольник"":
    print(int(input()) * int(input()))
elif g_figure == ""круг"":
    print(3.14 * int(input()) ** 2)



 -End,"
 # put your python code here
n = int(input())
if 10 < n % 100 < 20 or n % 10 == 0:
    z = ""ов""
elif n % 10 in (2, 3, 4):
    z = ""а""
elif n % 10 in (5, 6, 7, 8, 9):
    z = ""ов""
else: 
    z = """"
print(n, "" программист"", z, sep="""")
 -End,"
 # put your python code here
n = input()
if int(n[0]) + int(n[1]) + int(n[2])\
        == int(n[3]) + int(n[4]) + int(n[5]):
    print(""Счастливый"")
else:
    print(""Обычный"")
 -End,"
 # put your python code here
a = int(input())
s = 0
while a != 0:
    s += a
    a = int(input())
print(s)



 -End,"
 # put your python code here
a, b = int(input()), int(input())
a, b = (b, a) if a < b else (a, b)
r = b
z = abs(a * b)
while a % b != 0:
    r = a % b
    a, b = b, r
z = z // r
print(z)
 -End,"
 # -*- coding: utf-8 -*-
a, b, c, d = int(input()), int(input()), int(input()), int(input())
print(""\t"", end="""")
for j in range(c, d + 1):
    print(j, ""\t"", end="""")
print()
for i in range(a, b + 1):
    print(i, ""\t"", end="""")
    for j in range(c, d + 1):
        print(i * j,""\t"", end="""")
    print()



 -End,"
 # -*- coding: utf-8 -*-
s, k = 0, 0
for i in range(int(input()), int(input()) + 1):
    k, s = (k + 1, s + i) if i % 3 == 0 else (k + 0, s + 0)
print(s / k)
 -End,"
 # -*- coding: utf-8 -*-
s = input().lower()
print((s.count(""g"") + s.count(""c"")) / len(s) * 100)
 -End,"
 # -*- coding: utf-8 -*-

s = input()
s1, cur_s, sch = """", s[0], 1
for i in range(1, len(s)):
    if s[i] == cur_s:
        sch += 1
        cur_s = s[i]
    else:
        s1, sch, cur_s = s1 + cur_s +str(sch), 1, s[i]
s1 = s1 + cur_s +str(sch)
print(s1)
 -End,"
 # -*- coding: utf-8 -*-
print(sum(list(map(int, input().split()))))
 -End,"
 # -*- coding: utf-8 -*-
s =list(map(int, input().split()))
print(s[0] if len(s) == 1 else ' '.join([str(s[i - 1] + s[i + 1 - len(s)]) for i in range(len(s))]))





 -End,"
 # -*- coding: utf-8 -*-

l1 = sorted(list(map(int, input().split())))
l2 = []
k = l1[0]
if l1.count(k) > 1:
    l2.append(k)
for i in range(1, len(l1)):
    if l1[i] != k:
        k = l1[i]
        if l1.count(k) > 1:
            l2.append(k)
print("" "".join(map(str, l2)))
 -End,"
 # -*- coding: utf-8 -*-
s1, s2 = 0, 0
while True:
    z = int(input())
    s2 += z**2
    s1 += z
    if s1 == 0:
        break
print(s2)
 -End,"
 # -*- coding: utf-8 -*-

all_min = int(input())
print(all_min // 60, all_min % 60, sep=""\n"")
 -End,"
 # -*- coding: utf-8 -*-

x = int(input()) + int(input()) * 60 + int(input())
print(x // 60, x % 60, sep='\n')
 -End,"
 # -*- coding: utf-8 -*-

min, max, last = int(input()), int(input()), int(input())
min, max = (min, max) if min < max else (max, min)
min, last = (min, last) if min < last else (last, min)
max, last = (max, last) if max > last else (last, max)
print(max, min, last, sep=""\n"")
 -End,"
 # -*- coding: utf-8 -*-
while True:
    n = int(input())
    if n < 10: 
        continue
    elif n > 100: 
        break
    else: print(n)
 -End,"
 # -*- coding: utf-8 -*-
s = list(map(int, input().split()))
print(s[0] if len(s) == 1 else 
      ' '.join([str(s[i - 1] + s[i + 1 - len(s)]) 
                for i in range(len(s))]))
 -End,"
 # -*- coding: utf-8 -*-

n = int(input())
cur_length = 0
for i in range(1, n + 1):
    cur_length += i
    delta = n - (n - i)
    if cur_length >= n:
        delta = delta - (cur_length - n)
        print((str(i) + "" "") * delta, end="""")
        break
    else:
        print((str(i) + "" "") * delta, end="""")
 -End,"
 # -*- coding: utf-8 -*-

l, n  = list(map(int, input().split())), int(input())
if n not in l:
    print(""Отсутствует"")
for i in range(len(l)):
    if l[i] == n:
        print(i, end="" "")
 -End,"
 l, n = list(map(int, input().split())), int(input())
if n not in l:
    print(""Отсутствует"")
else:
    hrum = l.index(n)
    print(hrum, end="" "")
    while n in l[hrum + 1:]:
        hrum += l[hrum + 1:].index(n) + 1
        print(hrum, end="" "")
 -End,"
 # -*- coding: utf-8 -*-

mas = []
while True:
    i_s = input()
    if i_s == ""end"":
        break
    mas.append(list(map(int, i_s.split())))
l_row = len(mas)
l_col = len(mas[0])
for i in range(l_row):
    for j in range(l_col):
        print(mas[i - 1][j] + 
              mas[i + 1 - l_row][j] + 
              mas[i][j - 1] + 
              mas[i][j + 1 - l_col], end="" "")
    print()
 -End,"
 # -*- coding: utf-8 -*-

n = int(input())
# Захреначили пустую матрицу
mas = [[0] * n for i in range(n)]
# Захреначили список поворотов
l_povorot = [n]
for i in range(n-1,0,-1):
    l_povorot.append(i)
    l_povorot.append(i)
# Стартовое положение заполнения матрицы по спирали
cx, cy = 0, -1
# Прирост в зависимости от направления
pr1 = [[0, 1], [1, 0], [0, -1], [-1, 0]]
pr2 = 0
z = 1
# Цикл с учетом общего количества поворотов спирали
for i in range(0, 2 * n -1):
    for j in range(l_povorot[i]):
        cx = cx + pr1[pr2][0]
        cy = cy + pr1[pr2][1]
        mas[cx][cy] = z
        z += 1
    pr2 += 1
    if pr2 == 4:
        pr2 = 0
for i in mas:
    print(*i)
 -End,"
 def f(x):
    if x <= -2:
        return 1 - (x + 2)**2
    if -2 < x <= 2:
        return -(x / 2)
    if x > 2:
        return (x - 2)**2 + 1
 -End,"
 mass = []
i_l = input()
while i_l != 'end':
    mass.append(list(map(int, i_l.split())))
    i_l = input()
len_row, len_col = len(mass), len(mass[0])
for i in range(len_row):
    for j in range(len_col):
        print(mass[i][j - 1] +
              mass[i][j - len_col + 1] +
              mass[i - 1][j] +
              mass[i - len_row + 1][j],end = ' ')
    print()
 -End,"
 def modify_list(l):
    for i in range(len(l) - 1, -1, -1):
        if l[i] % 2 == 0:
            l[i] = l[i] //2
        else:
            l.pop(i)





 -End,"
 def modify_list(l):
    z = [x // 2 for x in [x for x in l if x % 2 == 0]]
    l.clear()
    l += z
 -End,"
 def update_dictionary(d, key, value):
    # put your python code here
    if key in d:
        d[key].append(value)
    elif key * 2 in d:
        d[key*2].append(value)
    else:
        d[key*2] = [value] -End,"
 # -*- coding: utf-8 -*-
sl = {}
s = [x.lower() for x in input().split()]
for i in s:
    sl[i] = (sl[i] + 1) if i in sl else 1
for k, v in sl.items():
    print(k, v)
 -End,"
 s = {}
for i in range(int(input())):
    z = int(input())
    if z not in s:
        s[z] = f(z)
        print(s[z])
    else:
        print(s[z]) -End,"
 # -*- coding: utf-8 -*-

from math import pi

print(2 * pi * float(input()))
 -End,"
 # -*- coding: utf-8 -*-

from sys import argv

print("" "".join(argv[1:]))
 -End,"
 # -*- coding: utf-8 -*-

# Будем использовать для копии списка
import copy

molodes = 3  # очки за победу
tak_sebe = 1  # очки за нечью
komand = {}  # тут будеи хранить команды с результатами
result = [0, 0, 0, 0]  # результаты
# съели количество игр и по нему делаем цикл
for i in range(int(input())):
    # заталкали все в переменные
    k1, r1, k2, r2 = input().split("";"")
    # результаты перевели в Int
    r1, r2 = int(r1), int(r2)
    # проверим что 1 команда есть в словаре
    if k1 not in komand:
        komand[k1] = copy.deepcopy(result)
    # проверим что 2 команда есть в словаре
    if k2 not in komand:
        komand[k2] = copy.deepcopy(result)
    # если первая победила
    if r1 > r2:
        komand[k1][0] += 1  # увиличим количество игр для 1
        komand[k2][0] += 1  # увиличим количество игр для 2
        komand[k1][1] += 1  # увиличим количество побед для 1
        komand[k2][3] += 1  # увиличим количество поражений для 2
    # если вторая победила
    elif r2 > r1:
        komand[k1][0] += 1  # увиличим количество игр для 1
        komand[k2][0] += 1  # увиличим количество игр для 2
        komand[k2][1] += 1  # увиличим количество побед для 2
        komand[k1][3] += 1  # увиличим количество поражений для 1
    # Остались только нечьи
    else:
        komand[k1][0] += 1  # увиличим количество игр для 1
        komand[k2][0] += 1  # увиличим количество игр для 2
        komand[k1][2] += 1  # увиличим количество нечьих для 1
        komand[k2][2] += 1  # увиличим количество нечьих для 2
# Пройдемся по словарю
for i in komand:
    # Выводим с помощью format    
    print(""{}:{} {} {} {} {}"".format(i,
                                     komand[i][0],
                                     komand[i][1],
                                     komand[i][2],
                                     komand[i][3],
                                     komand[i][1] * molodes + komand[i][2] * tak_sebe))
 -End,"
 # -*- coding: utf-8 -*-

# символы исходного алфавита,
a1 = input()
# символы конечного алфавита
a2 = input()
# Делаем словарь для шифроыки
normal = dict(zip(a1, a2))
# Делаем словарь для дешивроыки
zhopa = dict(zip(a2, a1))
# Считываем для шифрования
a1 = input()
# Считываем для дешифрования
a2 = input()
# Шифруем
for i in a1:
    print(normal[i], end="""")
print()
# Дешифруем
for i in a2:
    print(zhopa[i], end="""")
 -End,"
 # -*- coding: utf-8 -*-
k = [0, 0]
for _ in range(0, int(input())):
    s = input().split()
    if s[0] == 'восток':
        k[0] = k[0] + int(s[1])
    elif s[0] == 'север':
        k[1] = k[1] + int(s[1])
    elif s[0] == 'запад':
        k[0] = k[0] - int(s[1])
    elif s[0] == 'юг':
        k[1] = k[1] - int(s[1])
print(*k)
 -End,"
 # -*- coding: utf-8 -*-
sl = {}
res = set()
for _ in range(1, int(input()) + 1):
    s = input().lower()
    sl.setdefault(s, s)
for _ in range(1, int(input()) + 1):
    s = input().split()
    for i in s:
        if sl.get(i.lower()) == None:
            res.add(i)
print(*res, sep='\n')
 -End,"
 # -*- coding: utf-8 -*-
s = 0
for _ in range(0, int(input())):
    s += int(input())
print(s)
 -End,"
 # -*- coding: utf-8 -*-
ans = set()
for obj in objects: 
    ans.add(id(obj))
print(len(ans))
 -End,"
 # put your python code here
n = int(input())
z = n % 100
y = n % 10
if y == 1 and z != 11:
    print(n, ' программист')
elif 2 <= y <= 4 and not 12 <= z <= 14:
    print(n, ' программиста')
else:
    print(n, ' программистов')



 -End,"
 a = [int(i) for i in input().split()]
b = 0
c = (len(a) - 2)
for i in a:
    if len(a) == 1:
        print(a[0])
        break
    print(a[1] + a[-1], end=' ')
    while c != 0:
        print(a[b] + a[b+2], end=' ')
        b += 1
        c -= 1
    print(a[-2] + a[0], end=' ')
    break


        
        


 -End,"
 a = int(input())
b = 1
list1 = []
for i in range(b, a + 1):
    list1 += i * [i]
b = 0
while b != a:
    print(list1[b], end=' ')
    b += 1


 -End,"
 a = int(input())
cv = a
b = [[0] * a for i in range(a)]
c = []
p, z, r, d, x, y = 0, 0, 0, 0, 0, 0
for i in range((a * a)+1):
    if i != 0:
        c.append(i)
while r != cv * cv:
    for i in range(a):
        b[p][z] = c[r]
        r += 1
        z += 1
    p += 1
    a -= 1
    z -= 2
    for j in range(a):
        b[p][z+1] = c[r]
        r += 1
        p += 1
    p -= 1
    for k in range(a):
        b[p][z] = c[r]
        r += 1
        z -= 1
    p -= 1
    a -= 1
    for l in range(a):
        b[p][d] = c[r]
        r += 1
        p -= 1
    d += 1
    z = d
    p += 1
for n in range(cv):
    print(*b[n])




 -End,"
 c = []
while True:
    a = [i for i in input().split()]
    if a == ['end']:
        break
    c += [a]
st = len(c)
col = len(c[0])
b = []
for i in range(st):
    for j in range(col):
        b += [int(c[i-1][j]) + int(c[i-st+1][j]) + int(c[i][j-1]) + int(c[i][j-col+1])]
z = 0
w = [[0] * col for i in range(st)]
for i in range(st):
    for j in range(col):
        if w[i][j] == 0:
            w[i][j] = b[z]
            z += 1

for j in range(st):
    for i in range(col):
        print(w[j][i], end=' ')
    print()




 -End,"
 def modify_list(l):
    count = 0
    for i in range(len(l)):
        if l[i] % 2 == 0:
            l[i] = l[i] // 2
        else:
            del l[i]
            l.insert(0, '*')
            count += 1
    del l[:count]



 -End,"
 ouf = {}
gms = int(input())
for i in range(gms):
    gms_lst = [i for i in input().split(';')]
    if gms_lst[0] not in ouf:
        ouf[gms_lst[0]] = [0, 0, 0, 0, 0]
    if gms_lst[2] not in ouf:
        ouf[gms_lst[2]] = [0, 0, 0, 0, 0]
    if gms_lst[0] in ouf:
        ouf[gms_lst[0]][0] += 1
        if gms_lst[1] > gms_lst[3]:
            ouf[gms_lst[0]][1] += 1
            ouf[gms_lst[2]][3] += 1
        elif gms_lst[1] == gms_lst[3]:
            ouf[gms_lst[0]][2] += 1
            ouf[gms_lst[2]][2] += 1
        else:
            ouf[gms_lst[2]][1] += 1
            ouf[gms_lst[0]][3] += 1
    if gms_lst[2] in ouf:
        ouf[gms_lst[2]][0] += 1
for key in ouf.keys():
    ouf[key][4] = ouf[key][1] * 3 + ouf[key][2]
    print(key, end=':')
    for value in ouf[key]:
        print(value, end=' ')
    print() -End,"
 def return_key(dict1, value):
    for jb in dict1.keys():
        if dict1[jb] == value:
            return jb


alphabet = input()
cipher = input()
cipher_key = {}
z = 0
for i in alphabet:
    cipher_key[i] = cipher[z]
    z += 1
for i in range(2):
    text1 = input()
    for j in range(len(text1)):
        if i == 0:
            print(cipher_key[text1[j]], end='')
            if j == len(text1) - 1:
                print()
        else:
            print(return_key(cipher_key, text1[j]), end='')
 -End,"
 a = int(input())
collection, wrong_words = set(), set()
for i in range(a):
    collection.add(input().lower())
for i in range(int(input())):
    row = (s for s in input().lower().split())
    for word in row:
        if word not in collection:
            wrong_words.add(word)
print('\n'.join(f for f in wrong_words))




 -End,"
 ok_status = ''


def search(vocab, list1, namespace, var):
    global ok_status
    for i in list1:
        step = i.split(':')
        if step[1] == namespace:
            if var in vocab[step[0]]:
                ok_status = step[0]
                return
            else:
                search(vocab, list1, namespace=step[0], var=var)


count = int(input())
scopes = {'name': {}, 'vars': set()}
lst = []
while count != 0:
    row = input().split()
    if 'global' in row:
        if row[0] == 'create':
            scopes['name'][row[1]] = set()
        elif row[0] == 'add':
            scopes['vars'].add(row[2])
        else:
            print('global' if row[2] in scopes['vars'] else 'None')
    else:
        if 'get' not in row:
            if row[1] in scopes['name']:
                scopes['name'][row[1]].add(row[2])
            else:
                scopes['name'][row[1]] = set()
                lst.append(row[2] + ':' + row[1])
        else:
            if row[2] in scopes['name'][row[1]]:
                print(row[1])
            else:
                search(scopes['name'], lst, row[1], row[2])
                if ok_status == '' and row[2] not in scopes['vars']:
                    print('None')
                elif ok_status == '' and row[2] in scopes['vars']:
                    print('global')
                else:
                    print(ok_status)
                ok_status = ''
    count -= 1


 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.count = 0

    def can_add(self, v):
        if self.capacity >= v:
            return True
        else:
            return False

    def add(self, v):
        if self.can_add(v) is True:
            self.capacity -= v
            self.count += v

    def balance(self):
        print(self.count)
 -End,"
 def foo(dict1):
    for key in dict1.keys():
        for key2 in dict1.keys():
            if key in dict1[key2]:
                dict1[key2].extend(dict1[key])


classes = {}
for i in range(int(input())):
    a = input().split()
    classes[a[0]] = []
    for j in a:
        if j != a[0] and j != ':':
            classes[a[0]].append(j)
foo(classes)
for i in range(int(input())):
    b = input().split()
    if len(b) == 2:
        if b[0] in classes[b[1]] or b[0] == b[1]:
            print('Yes')
        else:
            print('No')
    else:
        print('Yes' if b[0] in classes else 'No')


 -End,"
 def foo(dict1):
    for key in dict1.keys():
        for key2 in dict1.keys():
            if key in dict1[key2]:
                dict1[key2].extend(dict1[key])


ouf = set()
variation = set()
classes = {}
for i in range(int(input())):
    a = input().split()
    classes[a[0]] = []
    classes[a[0]].extend(a[2:])

foo(classes)

for i in range(int(input())):
    b = input()
    variation.add(b)
    for j in classes[b]:
        if j in variation and b not in ouf:
            print(b)
            ouf.add(b)
                              -End,"
 from datetime import date
from datetime import timedelta

date1 = [int(i) for i in input().split()]
days = int(input())
b = date(*date1) + timedelta(days)
print(b.year, b.month, b.day)

 -End,"
 class multifilter:
    def judge_half(self, pos, neg):
        return pos >= neg

    def judge_any(self, pos, neg):
        return pos >= 1

    def judge_all(self, pos, neg):
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        pos, neg = 0, 0
        for i in self.iterable:
            for j in self.funcs:
                if j(i) is True:
                    pos += 1
                else:
                    neg += 1
            if self.judge(self, pos, neg) is True:
                yield i
            pos, neg = 0, 0




 -End,"
 z = 2


def primes():
    global z
    while True:
        b = [int(h) for h in range(2, 100) if h != z and z % h == 0]
        z += 1
        if len(b) == 0:
            yield z - 1




 -End,"
 z = 0
s, a, b = input(), input(), input()
while True:
    if a in s:
        c = s.replace(a, b)
        s = c
        z += 1
        if a not in s:
            print(z)
            break
        if a == b or z > 1000:
            print('Impossible')
            break
    else:
        print(0)
        break






 -End,"
 s, t = input(), input()
count = 0
if t in s:
    f = 1
    while s != '':
        if s.startswith(t):
            count += 1
            s = s[f:]
        else:
            s = s[f:]
    print(count)
else:
    print(0)



 -End,"
 import sys

for l in sys.stdin:
    line = l.rstrip()
    if line.count('cat') >= 2:
        print(line)



 -End,"
 import sys

for lines in sys.stdin:
    line = lines.strip()
    try:
        if int(line, 2) % 3 == 0:
            print(line)
    except ValueError:
        continue
 -End,"
 import re
import requests

b, d = [], []
a, c = input(), input()
link = requests.get(a)
b.extend(re.findall(r'https://.*html', link.text))
for i in b:
    link = requests.get(i)
    d.extend(re.findall(r'https://.*html', link.text))
print('Yes' if c in d else 'No')




 -End,"
 import requests       
import re

links_list = []
link = input().strip()
r = requests.get(str(link))
links_list.extend(re.findall(r'<a.*>', r.text))
b = []
for i in links_list:
    b += re.findall(r'<a.*?//([\w.-]+)[/>]?', i)
for i in links_list:
    t = re.findall(r'<a\s?href\s?=\s?[\'\""]([\w.-]*)[\'\""]>', i)
    if t not in b:
        b += t

b = set(b)
b = list(b)
print(*sorted(b), sep='\n')





 -End,"
 import json


def aloha(voc1, voc2):
    for k0 in voc1.keys():
        for k1 in voc1.keys():
            if k0 in voc1[k1]:
                voc2[k0].append(k1)


voc, ouf = {}, {}
p_file = json.loads(input())
for i in p_file:
    voc[i['name']] = i['parents']
for i in sorted(voc):
    ouf[i] = []

aloha(voc, ouf)


def find(vocab):
    for key in vocab.keys():
        for e in vocab[key]:
            if e in vocab.keys():
                vocab[key].extend(vocab[e])


find(ouf)

for i in ouf.keys():
    ouf[i] = len(set(ouf[i])) + 1

for k, v in ouf.items():
    print(k + ' : ' + str(v), end='\n')
 -End,"
 from xml.etree import ElementTree

cube = {'red': 0, 'green': 0, 'blue': 0}

tree = ElementTree.fromstring(input())
cube[tree.attrib['color']] += 1


def ok(root, lvl=1):
    global cube
    for element in root:
        cube[element.attrib['color']] += lvl + 1
        ok(element, lvl=lvl + 1)


ok(tree)
print(*cube.values())



 -End,"
 def fib_digit(n):    
    prev, cur = 0, 1

    for i in range(1, n):
        prev, cur = int(str(cur)[-1]), int(str(prev)[-1]) + int(str(cur)[-1])
    return str(cur)[-1]


def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 import operator

a = input().split()
b = {len(i): 0 for i in a}
for i in a:
    b[len(i)] += 1
sorted_b = sorted(b.items(), key=operator.itemgetter(0))
for i in sorted_b:
    print(str(i[0]) + ': ' + str(i[1]))




 -End,"
 a, b = input(), input()
if b in a:
    for i in range(len(a)):
        if a[i:i + len(b)] == b:
            print(i, end=' ')
else:
    print(-1)




 -End,"
 d = {
    1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L',
    90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M',
    2: 'II', 3: 'III', 6: 'VI', 7: 'VII', 8: 'VIII', 20: 'XX', 30: 'XXX',
    60: 'LX', 70: 'LXX', 80: 'LXXX', 200: 'CC', 300: 'CCC', 600: 'DC', 700: 'DCC',
    800: 'DCCC', 2000: 'MM', 3000: 'MMM', 4000: 'MMMM'
}

a = input()
b = []
if len(a) == 1:
    b.append(int(a))
for i in range(1, len(a)):
    b.append(int(a[i-1:]) - int(a[i:])) if int(a[i-1:]) - int(a[i:]) != 0 else None
    if i == len(a) - 1:
        b.append(int(a[i])) if int(a[i]) != 0 else None

ouf = [''.join(d[i] for i in b)]

print(*ouf) -End,"
 a, b = map(int, input().split())
for i in range(a, b+1):
    print('FizzBuzz' if i % 3 == 0 and i % 5 == 0 else 'Fizz' if i % 3 == 0 else 'Buzz' if i % 5 == 0 else i) -End,"
 def get_int(start_message, error_message, end_message):
    print(start_message)
    while True:
        try:
            a = int(input())
        except ValueError:
            print(error_message)
        else:
            print(end_message)
            return int(a) -End,"
 a, b = map(int, input().split())
c = [input().split() for i in range(a)]
for i in range(b):
    d = [j[i] for j in c]
    print(*d) -End,"
 line = input()

a1 = ' -- '
a2 = '|  |'
a3 = '    '
a4 = '   |'
a5 = '|   '

d = {'0': [a1, a2, a2, a3, a2, a2, a1],
     '1': [a3, a4, a4, a3, a4, a4, a3],
     '2': [a1, a4, a4, a1, a5, a5, a1],
     '3': [a1, a4, a4, a1, a4, a4, a1],
     '4': [a3, a2, a2, a1, a4, a4, a3],
     '5': [a1, a5, a5, a1, a4, a4, a1],
     '6': [a1, a5, a5, a1, a2, a2, a1],
     '7': [a1, a4, a4, a3, a4, a4, a3],
     '8': [a1, a2, a2, a1, a2, a2, a1],
     '9': [a1, a2, a2, a1, a4, a4, a1]}

print('x' + '-' * (len(line) * 4 + len(line)-1 if len(line) > 1 else 4) + 'x')

for i in range(7):
    s = [d[j][i] for j in line]
    ss = ' '.join(s)
    print('|' + ss + '|')

print('x' + '-' * (len(line) * 4 + len(line)-1 if len(line) > 1 else 4) + 'x')



 -End,"
 a = list(input())

d = {
    'I': 1, 'IV': 4, 'V': 5, 'IX': 9, 'X': 10, 'XL': 40, 'L': 50, 'XC': 90,
    'C': 100, 'CD': 400, 'D': 500, 'CM': 900, 'M': 1000
}

try:
    for i in range(1, len(a)):
        if d[a[i-1]] < d[a[i]]:
            s = a[i-1] + a[i]
            del a[i-1:i+1]
            a.insert(i-1, s)
except IndexError:
    pass
print(sum([d[j] for j in a])) -End,"
 c = []
b = 0
a = int(input())

for i in range(1, a+1):
    if b > a:
        break
    b += i
    c.append(i)

if b > a:
    c.remove(b - a)
print(len(c))
print(*c)
 -End,"
 n, line = int(input()), input().strip()
base = ' abcdefghijklmnopqrstuvwxyz'
ouf = ''

for i in line:
    ind = base.index(i) + n
    if ind > len(base) - 1:
        ind = ind % len(base)
    elif ind < -len(base):
        ind = ind % -len(base)
    ouf += base[ind]
print('Result: ' + '""' + ouf + '""')
 -End,"
 n, line = int(input()), input().strip()
alphabet = ''.join([chr(i) for i in range(int(0x1f600), int(0x1f64f)+1)])
ouf = ''

for i in line:
    ind = alphabet.index(i) + n
    if ind > len(alphabet) - 1 or ind < -len(alphabet):
        ind = ind % len(alphabet)
    ouf +=alphabet[ind]
print('Result: ""' + ouf + '""')
 -End,"
 rows, columns = map(int, input().split())
lst = [input() for i in range(rows)]

for i in range(rows):
    if i == rows - 1:
        i = - 1
    for j in range(columns):
        if j == columns - 1:
            j = - 1
        if columns > 1:
            s = lst[i][j] + lst[i][j-1] + lst[i][j+1] + lst[i-1][j] + lst[i-1][j-1] + lst[i-1][j+1] +\
                lst[i+1][j] + lst[i+1][j-1] + lst[i+1][j+1] if len(lst) > 1\
                else lst[i][j] * 3 + lst[i][j-1] * 3 + lst[i][j+1] * 3
            count = s.count('X')
            if lst[i][j] == '.':
                print('X' if count == 3 else '.', end='')
            elif lst[i][j] == 'X':
                print('X' if 2 <= count - 1 <= 3 else '.', end='')
        else:
            s = lst[i] * 3 + lst[i+1] * 3 + lst[i-1] * 3
            count = s.count('X')
            if lst[i][j] == '.':
                print('X' if count == 3 else '.', end='')
            elif lst[i][j] == 'X':
                print('X' if 2 <= count-1 <= 3 else '.', end='')
    print()
 -End,"
 n, m = map(int, input().split())
field = [input() for i in range(n)]

for i in range(n):
    for j in range(m):
        if field[i][j] == '*':
            print('*', end='')
        else:
            s = ''.join(field[k][t] for k in range(i-1 if i > 0 else i, i+2 if i < n-1 else i+1)
                        for t in range(j-1 if j > 0 else j, j+2 if j < m-1 else j+1))
            print(s.count('*'), end='')
    print()
 -End,"
 card_1, card_2 = input().split()
club = input()
d = {'6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}

if card_1[-1] == card_2[-1]:
    print('First' if d[card_1[:-1]] > d[card_2[:-1]] else 'Second')
else:
    if club in card_1 or club in card_2:
        print('First' if card_1[-1] == club else 'Second')
    else:
        print('Error')
 -End,"
 a = input() + '*'
start = a[0]
count = 0

for i in range(len(a)):
    if a[i] == start:
        count += 1
    else:
        print(str(count) + a[i-1] if count > 1 else a[i-1], end='')
        start = a[i]
        count = 1
 -End,"
 check = [str(i) for i in range(10)]
n = ''

for i in input().strip():
    if i in check:
        n += i
    else:
        if len(n) > 0:
            print(i * int(n), end='')
        else:
            print(i, end='')
        n = ''
 -End,"
 a = input().split('_')
b = [i[0].upper()+i[1:] for i in a]
print(''.join(b))
 -End,"
 s, p = input().split(), input()
if p in s:
    for i in range(s.count(p)):
        ind = s.index(p)
        print(ind, end=' ')
        del s[ind]
        s.insert(ind, '*')
else:
    print('None')
 -End,"
 a = input().split()
print(*set([i for i  in a if a.count(i) > 1]))
 -End,"
 len_letter, len_code = map(int, input().split())
code_dic = {}

for i in range(len_letter):
    inp = input().split()
    code_dic[inp[-1]] = inp[0].replace(':', '')
decoded = input()

fragment, res = '', ''
for i in decoded:
    fragment += i
    if fragment in code_dic:
        res += code_dic[fragment]
        fragment = ''

print(res)
 -End,"
 import heapq

it = int(input())
x = [10]
heapq.heapify(x)

for i in range(it):
    command = input().split()
    if len(command) > 1:
        heapq.heappush(x, -int(command[1]))
    else:
        print(str(heapq.heappop(x))[1:])
 -End,"
 src = [int(i) for i in input().split()]
# src = [10]
# src = [1, 3, 5, 6, 10]
rslt = []
for i in range(len(src)):
    if len(src) == 1:
        rslt += [src[i]]
    elif i == len(src)-1:
        rslt += [src[i-1] + src[0]]
    else:
        rslt += [src[i-1] + src[i+1]]
# print(rslt)
l2s = ''
for c in rslt:
    l2s += str(c) + ' '
print(l2s) -End,"
 src = [int(i) for i in input().split()]
if len(src) == 1:
    print(src[0])
else:
    [print( src[i-1] + src[(i+1) % len(src)] ,end=' ') for i in range(len(src))]
    # выражение src[(i+1) % len(src)] на выходе для src = [1, 3, 5, 6, 10] даст [3, 5, 6, 10, 1]
    # потому, что (i+1) % len(src) даёт 1 2 3 4 0
    # т.е. таким образом 0й элемент оказывается в конце списка (как будто повернули циферблат)
    # таким образом если при обращении к i+1 случится выход за границу диапазона для последнего элемента
    # то при обращении к (i+1) % len(src) элементу выхода не произойдет
    # поэтому складывая -1й элемент с [(i+1) % len(src)]-тым элементом
    # мы выполним условие найти сумму предыдущего и следующего элементов
    # [print( src[(i+1) % len(src)]) for i in range(len(src))] -End,"
 src = [int(i) for i in input().split()]
NoDubl = []
if len(src) > 1:
    src.sort()
    # [print( src.index(src[i]), end=' ' ) for i in range(len(src)) if (src[i-1] == src[i]) ]
    [NoDubl.append(src[i]) for i in range(len(src)) if src[i-1] == src[i] and src[i] not in NoDubl ]
[print( с, end=' ' ) for с in NoDubl ]
 -End,"
 lst = [int(input())]
while sum(lst) != 0:
    lst.append(int(input()))
print(sum( el * el for el in lst))
 -End,"
 # n = 7 # для отладки
n = int(input())
lst=[] # инициализация списка

# генерируем 2D-список выражением [ [i] * i for i in range(1,n+1) ]
# [1]
# [2, 2]
# [3, 3, 3]
# ...
# итератор el_2D проходит по сгенерированному 2D-списку
# итератор el_1D проходит элементам одномерного списка el_2D
# пока len(lst) < n в него добавляются элементы el_1D

[  [ lst.append(el_1D) for el_1D in el_2D if len(lst) < n] for el_2D in [ [i] * i for i in range(1,n+1) ]  ] # генерация одномерного массива

# вывод элементов списка lst
[print(el, end=' ') for el in lst]
 -End,"
 lst = [int(i) for i in input().split()]
x = int(input())

if x in lst:
    [print(i, end=' ') for i in range(len(lst)) if lst[i] == x]
else:
    print('Отсутствует') -End,"
 # release user input
lst, string = [], input()
while string != 'end':
    lst.append([int(i) for i in string.split()])
    string = input()

# # debug, imitate user input
# lst = [ [ 9, 5, 3],
#         [ 0, 7,-1],
#         [-5, 2, 9],]

rows = len(lst)
for i in range(rows):
    cols = len(lst[i])
    for j in range(cols):
        sumHorizontal = lst[i-1][ j ] + lst[(i + 1) % rows ][ j ]
        sumVertical   = lst[ i ][j-1] + lst[ i ][(j + 1) % cols]
        print(sumHorizontal + sumVertical, end=' ')
    print()
 -End,"
 n = int(input())
lst = [[ i for i in range(1,n+1)] for j in range(n)]
a, sokr, x, y, i, j = (n + 1), 1, -1, 1, 0, (n-1)
while a <= n * n:
    for d in range(sokr,n): lst[i+y][j], a, i = a, (a + 1), (i + y) # заполняем по y
    for d in range(sokr,n): lst[i][j+x], a, j = a, (a + 1), (j + x) # Заполняем по x
    x, y, sokr = (x * -1), (y * -1), (sokr + 1)
for stroka in lst:
    [print(el, end = ' ') for el in stroka]
    print()
 -End,"
 n = int(input())
lst = [[ n-j for i in range(1,n+1)] for j in range(n)] # генерация повёрнутой матрицы
pvrt, a = 1, n + 1 # повороты, спираль начнём с n+1
while a <= n * n: # 1й 5й ... поворот - сдвиг вправо # 3й 7й ... поворот - заполняем на одну клетку меньше
    for col in range( (1 + (pvrt - 1) // 4), n - 1 - (pvrt - 3) // 4 ):lst[(pvrt // 4)][col], a = a, (a + 1) # 0й 3й ... поворот опускаемся на одну строку
    lst, pvrt = [[i[j] for i in lst] for j in range(n - 1, -1, -1)], (pvrt + 1) # поворот против ч.с. на 90*
while pvrt % 4 != 0: lst, pvrt = [[i[j] for i in lst] for j in range(n - 1, -1, -1)], (pvrt + 1) # поворот для сдачи задания
for stroka in lst:   [print(el, end = ' ') for el in stroka], print() # печать для сдачи задания -End,"
 def modify_list(change_list):
    # https://docs.python.org/3/tutorial/datastructures.html
    # list.clear() # Remove all items from the list. Equivalent to del a[:]
    lst = [el for el in change_list if el % 2 == 0]
    del change_list[:]
    [change_list.append(el // 2) for el in lst] -End,"
 # variant 2
# lst = [el for el in 'a aa abC aa ac abc bcd a'.lower().split()]
lst = [el for el in input().lower().split()]
[print(key,value) for key,value in {el:lst.count(el) for el in lst}.items()] -End,"
 def f_crypt_decrypt(dct, string):
    result = ''
    for c in string:
        result += dct.get(c)
    return result

key1, key2, str1, str2 = input(), input(), input(), input()

# # для отладки алгоритма
# key1 = 'abcd'         # что нужно заменить
# key2 = '*d%#'         # чем заменить
# str1 = 'abacabadaba'  # *d*%*d*#*d*
# str2 = '#*%*d*%'      # dacabac

print(f_crypt_decrypt(dict(zip(key1,key2)), str1))  # шифровка строки
print(f_crypt_decrypt(dict(zip(key2,key1)), str2)) # дешифровка строки -End,"
 def f_crypt_decrypt(dct, string):return ''.join([dct.get(c) for c in string])
key1, key2, str1, str2 = input(), input(), input(), input()
print(f_crypt_decrypt(dict(zip(key1,key2)), str1))  # шифровка строки
print(f_crypt_decrypt(dict(zip(key2,key1)), str2)) # дешифровка строки -End,"
 # раскомментировать для отладки
# known_words = {'a', 'bb', 'ccc'}
# text2check = {'a', 'bb', 'aab', 'aba', 'ccc', 'c', 'bb', 'aaa'}

# множество словарных слов
known_words = set([input().lower() for i in range(int(input()))])

# текст для проверки преобразован в множество слов
text2check = set([ word for string in [input().lower().split() for i in range(int(input()))] for word in string])

# вывод только ""несловарных"" слов
[print(word) for word in text2check if word not in known_words] -End,"
 # один список ключей, одна функция с указанием направления шифрования
def f_crypt_decrypt(lst, string, crypt=True):
    ret = ''
    if crypt:
        for c in string: ret += ''.join([el[1] for el in lst if c == el[0] ])
    else:
        for c in string: ret += ''.join([el[0] for el in lst if c == el[1] ])
    return ret

key1, key2, str1, str2 = input(), input(), input(), input()

# # для отладки алгоритма
# key1 = 'abcd'         # что нужно заменить
# key2 = '*d%#'         # чем заменить
# str1 = 'abacabadaba'  # *d*%*d*#*d*
# str2 = '#*%*d*%'      # dacabac

lst = list(zip(key1,key2))

print(f_crypt_decrypt(lst, str1))  # шифровка строки
print(f_crypt_decrypt(lst, str2, False)) # дешифровка строки

# этот код лучше версии 4, т.к. используется одна функция и один словарь
#     добавил в функцию 3й параметр, True/False, для указания направления кодирования
#     если функция получила True - кодируем, т.е. меняем lst[el][0] на lst[el][1]
#     а если False - наоборот -End,"
 print(sum([int(input()) for i in range(int(input()))])) -End,"
 set_ids = set([id(el) for el in objects])
print(len(set_ids)) -End,"
 def foo(namespace, var):
    '''
    рекурсивная функция, возвращает
    либо 'None' если в итоге namespace не найдено в словарях
    либо namespace если var найдено в dct_ns = {namespace:[..., var, ...], ...:[..., ...]}
    либо вызывает саму себя
        или с аргументами foo(<parent namespace>, var) для поиска в родительском пространстве имён
        или foo(None, var) если <parent namespace> не найдено в словаре dct_ns
    '''
    if namespace is None:
        return 'None'
    if var in dct_vr.get(namespace, []):
        return namespace
    else:
        return foo(dct_ns.get(namespace, None), var)

lst = [input() for i in range(int(input()))]

# # для отладки раскомментировать
# lst = [
#     'add global a',
#     'add global X',
#     'create foo global',
#     'add foo b',
#     'get foo a',  # global
#     'get foo c',  # None
#     'create bar foo',
#     'add bar a',
#     'get bar a',  # bar
#     'get bar b',  # foo
# ]

otv = []  # список ответов
dct_ns = {}  # {'bar': 'foo', 'foo': 'global'}
dct_vr = {}  # {'bar': ['a'], 'global': ['a', 'X'], 'foo': ['b']}
for el in lst:
    cmd = el.split()
    if cmd[0] == 'add':
        dct_vr[cmd[1]] = dct_vr.get(cmd[1], []) + [cmd[2]]

    if cmd[0] == 'create':
        dct_ns[cmd[1]] = cmd[2]  # ПИ: РОДИТЕЛЬ_ПИ

    if cmd[0] == 'get':
        otv.append(foo(cmd[1], cmd[2]))  # добавляем ответ в список ответов

[print(el) for el in otv]  # вывод ответов по-строчно
 -End,"
 def f_no_recurse(namespace, var):
    '''
    нерекурсивная функция, если переменная var не нашлась в текущем namespace
    ф-я заменяет namespace на родительский namespace из словаря dct_ns до тех пор,
    пока не найдёт var или не достигнет предела пространств имён (None)
    '''
    while var not in dct_vr.get(namespace, []):  # будем повышать namespace пока не встретим в нём переменную var
        namespace = dct_ns.get(namespace, None)
        if namespace is None:  # если повышать уже некуда, прервём цикл
            break
    return namespace

# # для отладки раскомментировать
# lst = [
#     'add global a',
#     'add global X',
#     'create foo global',
#     'add foo b',
#     'get foo a',  # global
#     'get foo c',  # None
#     'create bar foo',
#     'add bar a',
#     'get bar a',  # bar
#     'get bar b',  # foo
# ]

lst = [input() for i in range(int(input()))]

otv = []  # список ответов
dct_ns = {}  # {'bar': 'foo', 'foo': 'global'}
dct_vr = {}  # {'bar': ['a'], 'global': ['a', 'X'], 'foo': ['b']}
for el in lst:
    cmd = el.split()
    if cmd[0] == 'add':
        dct_vr[cmd[1]] = dct_vr.get(cmd[1], []) + [cmd[2]]

    if cmd[0] == 'create':
        dct_ns[cmd[1]] = cmd[2]  # ПИ: РОДИТЕЛЬ_ПИ

    if cmd[0] == 'get':
        otv.append(f_no_recurse(cmd[1], cmd[2]))  # добавляем ответ в список ответов

[print(el) for el in otv]  # вывод ответов по-строчно
 -End,"
 class LoggableList(list, Loggable):
    def append(self, variable):
        super(LoggableList, self).append(variable)
        self.log(variable) -End,"
 class LoggableList(list, Loggable):
    def append(self, variable):
        super(LoggableList, self).append(variable)
        Loggable.log(self, variable) -End,"
 # # тестовый граф наследования
#     A   X
#    /|\ / \
#   B C Y   Z
#    \|  \ /
#     D   V
#    / \   \
#   E   F   W
#        \
#         G

lst_mro = [  # тестовый граф наследования в ввиде списка ""введённых пользователем"" строк
    'G : F',  # сначала отнаследуем от F, потом его объявим: корректный алгоритм все равно правильно обойдёт граф, независимо что было раньше: наследование или объявление
    'A',
    'B : A',
    'C : A',
    'D : B C',
    'E : D',
    'F : D',
    # а теперь другая ветка наследования
    'X',
    'Y : X A',  # свяжем две ветки наследования для проверки, обошла ли рекурсия предков Z и предков Y в поисках A
    'Z : X',
    'V : Z Y',
    'W : V',
]

lst_q = [  # тестовый список ""введённых пользователем"" запросов
    'X QWE',    # No    # нет такого класса QWE
    'X X',      # Yes   # родитель он же потомок
    '1 1',      # No    # несуществующий класс
    'A G',      # Yes   # A предок G через B/C, D, F
    'A Z',      # No    # Y потомок A, но не Y
    'A W',      # Yes   # A предок W через Y, V
    'A X',      # No    # классы есть, но они нет родства :)
    'X W',      # Yes   # X предок W через Y, V
]

lst_mro = [input() for i in range(int(input()))]  # раскомментировать для сдачи задания
lst_q = [input() for i in range(int(input()))]    # раскомментировать для сдачи задания

lst_mro = [el.replace(':', ' ').split() for el in lst_mro]  # список наследования  # [[потомок, родитель1, родитель2, ..., родительN], []]
lst_q = [el.split() for el in lst_q]  # список запросов

lst_otv = []  # список ответов по порядку списка запросов
dct_mro = {}  # словарь наследования  # {'A': [], 'W': ['V'], 'E': ['D'], 'Z': ['X'], 'F': ['D'], 'G': ['F'], 'V': ['Z', 'Y'], 'X': [], 'B': ['A'], 'Y': ['X', 'A'], 'D': ['B', 'C'], 'C': ['A']}

for i in range(len(lst_mro)):  # составим словарь {потомок: [список предков]} по входным данным
    dct_mro[lst_mro[i][0]] = dct_mro.get(lst_mro[i][0], []) + lst_mro[i][1:]


def check_parent_for_child(parent, child):
    if parent not in dct_mro:  # если класс не был объявлен в списке наследования
        return False           # значит это самозванец :)

    if parent == child:  # если поступил запрос вида 'родитель родитель'
        return True      # то нужно ответить 'Yes', т.е. вернуть True

    lst_parents = dct_mro.get(child, [])  # получаем список предков класса child
    if len(lst_parents) > 0:              # если список не пуст - работаем по нему
        for p in lst_parents:             # иначе child не был объявлен в списке наследования (самозванец :) )
            if check_parent_for_child(parent, p):
                return True
    # else:
    #     return False

for prnt, chld in lst_q:
    if check_parent_for_child(prnt, chld):
        print('Yes')
    else:
        print('No')
 -End,"
 import datetime

date_end = datetime.date(*map(int, input().split())) + datetime.timedelta(days=int(input()))
print(date_end.year, date_end.month, date_end.day)
 -End,"
 import datetime as dtm
print((dtm.datetime.strptime(input(), '%Y %m %d') + dtm.timedelta(days=int(input()))).strftime('%Y %m %d').replace(' 0', ' '))
 -End,"
 def cont_frac(a, b):
    if b > 0:
        a0 = a // b
        return ""{} {}"".format(a0, cont_frac(b, a - a0 * b))
    else:
        return """"

a, b = map(int, input().split('/'))

print(cont_frac(a, b)) -End,"
 # собственное решение через yield (вместо __next__)
#
# логика работы прописана в итераторе объекта __iter__
# где пробегаемся по элементам исходной последовательности
# просеиваем элемент через функции-фильтры
# и если выбранная функция judge дала добро
# то yield`им этот элемент
#
#
#


class multifilter:
    def judge_half(pos, neg):
        return pos >= neg  # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)

    def judge_any(pos, neg):
        return pos >= 1  # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)

    def judge_all(pos, neg):
        return neg == 0  # допускает элемент, если его допускают все функции (neg == 0)

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.lst = iterable  # iterable - исходная последовательность
        self.funcs = funcs   # funcs - допускающие функции
        self.judge = judge   # judge - решающая функция

    def __iter__(self):
        for el in self.lst:
            pos, neg = 0, 0
            for f in self.funcs:
                pass
                if f(el):
                    pos += 1
                else:
                    neg += 1
            if self.judge(pos, neg):
                yield el -End,"
 # на основе решения
# https://stepik.org/lesson/Итераторы-и-генераторы-24464/step/4?course=Python-основы-и-применение&discussion=334958&thread=solutions
# от Anonymous 19317501
#
# логика фильтрации находится в __next__
# где в цикле пробегаемся по исходной последовательности
# каждый элемент которой просеивается через функции-фильтры
# и возвращается допущенный элемент
# а после окончания цикла поднимается исключение
# окончания итерации


class multifilter:
    def judge_half(pos, neg):
        return pos >= neg  # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)

    def judge_any(pos, neg):
        return pos >= 1  # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)

    def judge_all(pos, neg):
        return neg == 0  # допускает элемент, если его допускают все функции (neg == 0)

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.lst = iterable  # iterable - исходная последовательность
        self.funcs = funcs   # funcs - допускающие функции
        self.judge = judge   # judge - решающая функция
        self.index = 0       # индекс элемента последовательности self.lst

    def __iter__(self):
        return self

    def __next__(self):
        while self.index < len(self.lst):
            pos, neg = 0, 0
            for func in self.funcs:
                if func(self.lst[self.index]):
                    pos += 1
                else:
                    neg += 1
            self.index += 1
            if self.judge(pos, neg):
                return self.lst[self.index - 1]
        raise StopIteration -End,"
 # на основе решения
# https://stepik.org/lesson/Итераторы-и-генераторы-24464/step/4?course=Python-основы-и-применение&discussion=337007&thread=solutions
# от Кирилл Скляров
#
# логика фильтрации находится в __init__
# где используется доп. результирующий список self.rslt
# в который добавляются допущенные элементы исходной последовательности
#
# а __next__ просто увеличивает self.index
# и возвращает очередной элемент self.rslt


class multifilter:
    def judge_half(pos, neg):
        return pos >= neg  # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)

    def judge_any(pos, neg):
        return pos >= 1  # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)

    def judge_all(pos, neg):
        return neg == 0  # допускает элемент, если его допускают все функции (neg == 0)

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.lst = iterable  # iterable - исходная последовательность
        self.funcs = funcs   # funcs - допускающие функции
        self.judge = judge   # judge - решающая функция
        self.rslt = []       # результирующий список
        self.index = 0       # индекс элемента результирующего списка

        # фильтруем исходную последовательность переданными функциями и получаем результирующий список
        for el in self.lst:
            pos, neg = 0, 0
            for func in self.funcs:
                if func(el):
                    pos += 1
                else:
                    neg += 1
            if self.judge(pos, neg):
                self.rslt.append(el)

    def __iter__(self):
        return self

    def __next__(self):                       # реализация выдачи следующего элемента:
        if self.index < len(self.rslt):       # пока не достигнем конца результирующего списка
            self.index += 1                   # индек + 1
            return self.rslt[self.index - 1]  # вернём очередной элемент
        else:
            raise StopIteration               # если достигли - кинем исключение -End,"
 def primes():
    i, f = 2, 1  # число и факториал предыдущего числа
    while True:
        if (f + 1) % i == 0:  # проверяем на простоту по теореме Вильсона через факториал
            yield i
        f, i = f * i, i + 1  # сначала пересчитываем факториал для текущего числа, затем увеличиваем число
 -End,"
 def check(s, a, b):
    if a not in s:  # нечего заменять
        print(0)
    else:           # есть что заменять, возможны два случая
        if a in b:  # бесконечный случай (в s всегда останется подстрока a которую можно заменить на b)
            print(""Impossible"")
        else:       # конечный случай
            i = 0
            while a in s:            # пока есть что заменять
                s = s.replace(a, b)  # будем заменять
                i += 1               # и считать каждую итерацию цикла
            print(i)
check(input(), input(), input())
 -End,"
 def findall(a, b, i=0, c=0):
    while a.find(b, i) != -1:
        i = a.find(b, i) + 1
        c += 1
    return c
print(findall(input(), input())) -End,"
 def findall(a, b, count=0):
    for i in range(len(a)): count += 1 if a.startswith(b, i) else 0
    return count
print(findall(input(), input())) -End,"
 import sys
import re
[print(line.rstrip()) for line in sys.stdin if len(re.findall(r""cat"", line)) > 1] -End,"
 import sys
import re
[print(line.rstrip()) for line in sys.stdin if len(re.findall(r""\bcat\b"", line)) > 0] -End,"
 import sys
import re
[print(re.sub(r'human', 'computer', line.rstrip())) for line in sys.stdin] -End,"
 import sys
import re
[print(re.sub(r'\b[aA]+\b', 'argh', line.rstrip(), 1)) for line in sys.stdin] -End,"
 import sys
import re
[print(line.rstrip()) for line in sys.stdin if re.search(r'\b(\w+)\1\b', line)] -End,"
 import sys
import re
[print(re.sub(r'\b(\w)(\w)(\w*)\b', r'\2\1\3', line.rstrip())) for line in sys.stdin] -End,"
 import sys
import re
[print(re.sub(r'(\w)\1{1,}', r'\1', line.rstrip())) for line in sys.stdin] -End,"
 import re
import requests

pat = r'href\s*=\s*[\'""](.+?)[\'""]'  # на основе регулярки и таблицы, разясняющей её работу в https://msdn.microsoft.com/ru-ru/library/t9e807fx(v=vs.110).aspx?cs-save-lang=1&cs-lang=vb#code-snippet-1

lst = [input(), input()]  # раскомментировать для сдачи задания

try:
    resA = requests.get(lst[0])
except:
    print('No')

dct = {}  # словарь ссылок: 0й уровень содержит прямые ссылки из документа А,
#                           1й уровень содержит ссылки из документов 0го уровня
#           после заполнения проверим 1й уровень и если обнаружим там ссылку на документ Б
#           печатаем ДА иначе НЕТ

if resA.status_code == 200:
    match = re.findall(pat, resA.text, re.IGNORECASE)
    dct[0] = match if match else []

for ref in dct.get(0, []):
    try:
        resC = requests.get(ref)
        if resC.status_code == 200:
            dct[1] = dct.get(1, []) + re.findall(pat, resC.text, re.IGNORECASE)
    except:
        continue

print('Yes' if lst[1] in dct.get(1, []) else 'No') -End,"
 import json


def reverse(inp):  # вернём граф в виде словаря {родитель: [список наследников]}
    dct = {}
    for el in inp:
        dct[el['name']] = dct.get(el['name'], [])  # чтобы не забыть при выводе про класс без наследников, для каждого класса добавим пустой список наследников
        for p in el.get('parents', []):
            dct[p] = dct.get(p, []) + [el.get('name', '')]
    return dct


def get_all_childs(p, dct, lst):
    childs = dct.get(p, [])
    for c in childs:
        if c not in lst:
            get_all_childs(c, dct, lst)
            lst.append(c)
    return lst

level1 = reverse(json.loads(input()))
[print(""{} : {}"".format(k, len(get_all_childs(k, level1, [])) + 1)) for k, v in sorted(level1.items(), key=lambda x: x[0], reverse=False)]
 -End,"
 # любой узел, в т.ч. корневой:
#     может отличаться от cube
#     может иметь любой цвет
#     может вообще не иметь цвета
import xml.etree.ElementTree

colors = ('red', 'green', 'blue')  # допустимые цвета
weight = {}  # словарь {цвет: вес}
total = []  # список всех узлов уровня 2+ (вложенных в root)

root = xml.etree.ElementTree.fromstring(input())

if root.tag == 'cube' and 'color' in root.attrib:  # если корневой тэг == cube и у него есть цвет
    weight[root.attrib['color']] = weight.get(root.attrib['color'], 0) + 1  # добавим вес цвета в словарь

for color in colors:  # добавляем в список все узлы каждого цвета
    total.extend(root.findall("".//cube[@color='{color}']"".format(color=color)))

level = 2  # уровень, на котором считаем веса цветов
while len(total) > 0:  # будем вести подсчёт повышая уровень, пока не пройдем все элементы
    for color in colors:  # для каждого из цветов
        lst = root.findall(""./{level}[@color='{color}']"".format(color=color, level='cube/' * (level - 1)))  # добавим во временный список узлы c уровня level и цвета color
        weight[color] = weight.get(color, 0) + len(lst) * level  # добавим в словарь вес цвета color
        for el in lst:  # удалим из общего списка узлов посчитанные цвета
            total.remove(el)
    level += 1  # следующий уровень

[print(weight[c], end=' ') for c in colors] -End,"
 n = int(input())
des = n % 100
dct = {
    0: 'программистов',
    1: 'программист',
    2: 'программиста',
    3: 'программиста',
    4: 'программиста',
    5: 'программистов',
    6: 'программистов',
    7: 'программистов',
    8: 'программистов',
    9: 'программистов',
    10: 'программистов',
    11: 'программистов',
    12: 'программистов',
    13: 'программистов',
    14: 'программистов',
    15: 'программистов',
    16: 'программистов',
    17: 'программистов',
    18: 'программистов',
    19: 'программистов',
    20: 'программистов',
    21: 'программист',
    22: 'программиста',
    23: 'программиста',
    24: 'программиста',
    25: 'программистов',
    26: 'программистов',
    27: 'программистов',
    28: 'программистов',
    29: 'программистов',
    30: 'программистов',
    31: 'программист',
    32: 'программиста',
    33: 'программиста',
    34: 'программиста',
    35: 'программистов',
    36: 'программистов',
    37: 'программистов',
    38: 'программистов',
    39: 'программистов',
    40: 'программистов',
    41: 'программист',
    42: 'программиста',
    43: 'программиста',
    44: 'программиста',
    45: 'программистов',
    46: 'программистов',
    47: 'программистов',
    48: 'программистов',
    49: 'программистов',
    50: 'программистов',
    51: 'программист',
    52: 'программиста',
    53: 'программиста',
    54: 'программиста',
    55: 'программистов',
    56: 'программистов',
    57: 'программистов',
    58: 'программистов',
    59: 'программистов',
    60: 'программистов',
    61: 'программист',
    62: 'программиста',
    63: 'программиста',
    64: 'программиста',
    65: 'программистов',
    66: 'программистов',
    67: 'программистов',
    68: 'программистов',
    69: 'программистов',
    70: 'программистов',
    71: 'программист',
    72: 'программиста',
    73: 'программиста',
    74: 'программиста',
    75: 'программистов',
    76: 'программистов',
    77: 'программистов',
    78: 'программистов',
    79: 'программистов',
    80: 'программистов',
    81: 'программист',
    82: 'программиста',
    83: 'программиста',
    84: 'программиста',
    85: 'программистов',
    86: 'программистов',
    87: 'программистов',
    88: 'программистов',
    89: 'программистов',
    90: 'программистов',
    91: 'программист',
    92: 'программиста',
    93: 'программиста',
    94: 'программиста',
    95: 'программистов',
    96: 'программистов',
    97: 'программистов',
    98: 'программистов',
    99: 'программистов',
}
print(n, dct[des]) -End,"
 n = int(input())
s = 'программистов' if (10 < n % 100 < 15) else (
    'программиста' if 1 < n % 10 < 5 else (
        'программист' if n % 10 == 1 else 'программистов'
    )
)
print(n, s) -End,"
 dct = {
    0: '0 программистов', 1: '1 программист', 2: '2 программиста', 3: '3 программиста', 4: '4 программиста',
    5: '5 программистов', 6: '6 программистов', 7: '7 программистов', 8: '8 программистов', 9: '9 программистов',
    10: '10 программистов', 11: '11 программистов', 12: '12 программистов', 13: '13 программистов',
    14: '14 программистов', 15: '15 программистов', 16: '16 программистов', 17: '17 программистов',
    18: '18 программистов', 19: '19 программистов', 20: '20 программистов', 21: '21 программист',
    22: '22 программиста', 23: '23 программиста', 24: '24 программиста', 25: '25 программистов',
    26: '26 программистов', 27: '27 программистов', 28: '28 программистов', 29: '29 программистов',
    30: '30 программистов', 31: '31 программист', 32: '32 программиста', 33: '33 программиста',
    34: '34 программиста', 35: '35 программистов', 36: '36 программистов', 37: '37 программистов',
    38: '38 программистов', 39: '39 программистов', 40: '40 программистов', 41: '41 программист',
    42: '42 программиста', 43: '43 программиста', 44: '44 программиста', 45: '45 программистов',
    46: '46 программистов', 47: '47 программистов', 48: '48 программистов', 49: '49 программистов',
    50: '50 программистов', 51: '51 программист', 52: '52 программиста', 53: '53 программиста',
    54: '54 программиста', 55: '55 программистов', 56: '56 программистов', 57: '57 программистов',
    58: '58 программистов', 59: '59 программистов', 60: '60 программистов', 61: '61 программист',
    62: '62 программиста', 63: '63 программиста', 64: '64 программиста', 65: '65 программистов',
    66: '66 программистов', 67: '67 программистов', 68: '68 программистов', 69: '69 программистов',
    70: '70 программистов', 71: '71 программист', 72: '72 программиста', 73: '73 программиста',
    74: '74 программиста', 75: '75 программистов', 76: '76 программистов', 77: '77 программистов',
    78: '78 программистов', 79: '79 программистов', 80: '80 программистов', 81: '81 программист',
    82: '82 программиста', 83: '83 программиста', 84: '84 программиста', 85: '85 программистов',
    86: '86 программистов', 87: '87 программистов', 88: '88 программистов', 89: '89 программистов',
    90: '90 программистов', 91: '91 программист', 92: '92 программиста', 93: '93 программиста',
    94: '94 программиста', 95: '95 программистов', 96: '96 программистов', 97: '97 программистов',
    98: '98 программистов', 99: '99 программистов', 100: '100 программистов', 101: '101 программист',
    102: '102 программиста', 103: '103 программиста', 104: '104 программиста', 105: '105 программистов',
    106: '106 программистов', 107: '107 программистов', 108: '108 программистов', 109: '109 программистов',
    110: '110 программистов', 111: '111 программистов', 112: '112 программистов', 113: '113 программистов',
    114: '114 программистов', 115: '115 программистов', 116: '116 программистов', 117: '117 программистов',
    118: '118 программистов', 119: '119 программистов', 120: '120 программистов', 121: '121 программист',
    122: '122 программиста', 123: '123 программиста', 124: '124 программиста', 125: '125 программистов',
    126: '126 программистов', 127: '127 программистов', 128: '128 программистов', 129: '129 программистов',
    130: '130 программистов', 131: '131 программист', 132: '132 программиста', 133: '133 программиста',
    134: '134 программиста', 135: '135 программистов', 136: '136 программистов', 137: '137 программистов',
    138: '138 программистов', 139: '139 программистов', 140: '140 программистов', 141: '141 программист',
    142: '142 программиста', 143: '143 программиста', 144: '144 программиста', 145: '145 программистов',
    146: '146 программистов', 147: '147 программистов', 148: '148 программистов', 149: '149 программистов',
    150: '150 программистов', 151: '151 программист', 152: '152 программиста', 153: '153 программиста',
    154: '154 программиста', 155: '155 программистов', 156: '156 программистов', 157: '157 программистов',
    158: '158 программистов', 159: '159 программистов', 160: '160 программистов', 161: '161 программист',
    162: '162 программиста', 163: '163 программиста', 164: '164 программиста', 165: '165 программистов',
    166: '166 программистов', 167: '167 программистов', 168: '168 программистов', 169: '169 программистов',
    170: '170 программистов', 171: '171 программист', 172: '172 программиста', 173: '173 программиста',
    174: '174 программиста', 175: '175 программистов', 176: '176 программистов', 177: '177 программистов',
    178: '178 программистов', 179: '179 программистов', 180: '180 программистов', 181: '181 программист',
    182: '182 программиста', 183: '183 программиста', 184: '184 программиста', 185: '185 программистов',
    186: '186 программистов', 187: '187 программистов', 188: '188 программистов', 189: '189 программистов',
    190: '190 программистов', 191: '191 программист', 192: '192 программиста', 193: '193 программиста',
    194: '194 программиста', 195: '195 программистов', 196: '196 программистов', 197: '197 программистов',
    198: '198 программистов', 199: '199 программистов', 200: '200 программистов', 201: '201 программист',
    202: '202 программиста', 203: '203 программиста', 204: '204 программиста', 205: '205 программистов',
    206: '206 программистов', 207: '207 программистов', 208: '208 программистов', 209: '209 программистов',
    210: '210 программистов', 211: '211 программистов', 212: '212 программистов', 213: '213 программистов',
    214: '214 программистов', 215: '215 программистов', 216: '216 программистов', 217: '217 программистов',
    218: '218 программистов', 219: '219 программистов', 220: '220 программистов', 221: '221 программист',
    222: '222 программиста', 223: '223 программиста', 224: '224 программиста', 225: '225 программистов',
    226: '226 программистов', 227: '227 программистов', 228: '228 программистов', 229: '229 программистов',
    230: '230 программистов', 231: '231 программист', 232: '232 программиста', 233: '233 программиста',
    234: '234 программиста', 235: '235 программистов', 236: '236 программистов', 237: '237 программистов',
    238: '238 программистов', 239: '239 программистов', 240: '240 программистов', 241: '241 программист',
    242: '242 программиста', 243: '243 программиста', 244: '244 программиста', 245: '245 программистов',
    246: '246 программистов', 247: '247 программистов', 248: '248 программистов', 249: '249 программистов',
    250: '250 программистов', 251: '251 программист', 252: '252 программиста', 253: '253 программиста',
    254: '254 программиста', 255: '255 программистов', 256: '256 программистов', 257: '257 программистов',
    258: '258 программистов', 259: '259 программистов', 260: '260 программистов', 261: '261 программист',
    262: '262 программиста', 263: '263 программиста', 264: '264 программиста', 265: '265 программистов',
    266: '266 программистов', 267: '267 программистов', 268: '268 программистов', 269: '269 программистов',
    270: '270 программистов', 271: '271 программист', 272: '272 программиста', 273: '273 программиста',
    274: '274 программиста', 275: '275 программистов', 276: '276 программистов', 277: '277 программистов',
    278: '278 программистов', 279: '279 программистов', 280: '280 программистов', 281: '281 программист',
    282: '282 программиста', 283: '283 программиста', 284: '284 программиста', 285: '285 программистов',
    286: '286 программистов', 287: '287 программистов', 288: '288 программистов', 289: '289 программистов',
    290: '290 программистов', 291: '291 программист', 292: '292 программиста', 293: '293 программиста',
    294: '294 программиста', 295: '295 программистов', 296: '296 программистов', 297: '297 программистов',
    298: '298 программистов', 299: '299 программистов', 300: '300 программистов', 301: '301 программист',
    302: '302 программиста', 303: '303 программиста', 304: '304 программиста', 305: '305 программистов',
    306: '306 программистов', 307: '307 программистов', 308: '308 программистов', 309: '309 программистов',
    310: '310 программистов', 311: '311 программистов', 312: '312 программистов', 313: '313 программистов',
    314: '314 программистов', 315: '315 программистов', 316: '316 программистов', 317: '317 программистов',
    318: '318 программистов', 319: '319 программистов', 320: '320 программистов', 321: '321 программист',
    322: '322 программиста', 323: '323 программиста', 324: '324 программиста', 325: '325 программистов',
    326: '326 программистов', 327: '327 программистов', 328: '328 программистов', 329: '329 программистов',
    330: '330 программистов', 331: '331 программист', 332: '332 программиста', 333: '333 программиста',
    334: '334 программиста', 335: '335 программистов', 336: '336 программистов', 337: '337 программистов',
    338: '338 программистов', 339: '339 программистов', 340: '340 программистов', 341: '341 программист',
    342: '342 программиста', 343: '343 программиста', 344: '344 программиста', 345: '345 программистов',
    346: '346 программистов', 347: '347 программистов', 348: '348 программистов', 349: '349 программистов',
    350: '350 программистов', 351: '351 программист', 352: '352 программиста', 353: '353 программиста',
    354: '354 программиста', 355: '355 программистов', 356: '356 программистов', 357: '357 программистов',
    358: '358 программистов', 359: '359 программистов', 360: '360 программистов', 361: '361 программист',
    362: '362 программиста', 363: '363 программиста', 364: '364 программиста', 365: '365 программистов',
    366: '366 программистов', 367: '367 программистов', 368: '368 программистов', 369: '369 программистов',
    370: '370 программистов', 371: '371 программист', 372: '372 программиста', 373: '373 программиста',
    374: '374 программиста', 375: '375 программистов', 376: '376 программистов', 377: '377 программистов',
    378: '378 программистов', 379: '379 программистов', 380: '380 программистов', 381: '381 программист',
    382: '382 программиста', 383: '383 программиста', 384: '384 программиста', 385: '385 программистов',
    386: '386 программистов', 387: '387 программистов', 388: '388 программистов', 389: '389 программистов',
    390: '390 программистов', 391: '391 программист', 392: '392 программиста', 393: '393 программиста',
    394: '394 программиста', 395: '395 программистов', 396: '396 программистов', 397: '397 программистов',
    398: '398 программистов', 399: '399 программистов', 400: '400 программистов', 401: '401 программист',
    402: '402 программиста', 403: '403 программиста', 404: '404 программиста', 405: '405 программистов',
    406: '406 программистов', 407: '407 программистов', 408: '408 программистов', 409: '409 программистов',
    410: '410 программистов', 411: '411 программистов', 412: '412 программистов', 413: '413 программистов',
    414: '414 программистов', 415: '415 программистов', 416: '416 программистов', 417: '417 программистов',
    418: '418 программистов', 419: '419 программистов', 420: '420 программистов', 421: '421 программист',
    422: '422 программиста', 423: '423 программиста', 424: '424 программиста', 425: '425 программистов',
    426: '426 программистов', 427: '427 программистов', 428: '428 программистов', 429: '429 программистов',
    430: '430 программистов', 431: '431 программист', 432: '432 программиста', 433: '433 программиста',
    434: '434 программиста', 435: '435 программистов', 436: '436 программистов', 437: '437 программистов',
    438: '438 программистов', 439: '439 программистов', 440: '440 программистов', 441: '441 программист',
    442: '442 программиста', 443: '443 программиста', 444: '444 программиста', 445: '445 программистов',
    446: '446 программистов', 447: '447 программистов', 448: '448 программистов', 449: '449 программистов',
    450: '450 программистов', 451: '451 программист', 452: '452 программиста', 453: '453 программиста',
    454: '454 программиста', 455: '455 программистов', 456: '456 программистов', 457: '457 программистов',
    458: '458 программистов', 459: '459 программистов', 460: '460 программистов', 461: '461 программист',
    462: '462 программиста', 463: '463 программиста', 464: '464 программиста', 465: '465 программистов',
    466: '466 программистов', 467: '467 программистов', 468: '468 программистов', 469: '469 программистов',
    470: '470 программистов', 471: '471 программист', 472: '472 программиста', 473: '473 программиста',
    474: '474 программиста', 475: '475 программистов', 476: '476 программистов', 477: '477 программистов',
    478: '478 программистов', 479: '479 программистов', 480: '480 программистов', 481: '481 программист',
    482: '482 программиста', 483: '483 программиста', 484: '484 программиста', 485: '485 программистов',
    486: '486 программистов', 487: '487 программистов', 488: '488 программистов', 489: '489 программистов',
    490: '490 программистов', 491: '491 программист', 492: '492 программиста', 493: '493 программиста',
    494: '494 программиста', 495: '495 программистов', 496: '496 программистов', 497: '497 программистов',
    498: '498 программистов', 499: '499 программистов', 500: '500 программистов', 501: '501 программист',
    502: '502 программиста', 503: '503 программиста', 504: '504 программиста', 505: '505 программистов',
    506: '506 программистов', 507: '507 программистов', 508: '508 программистов', 509: '509 программистов',
    510: '510 программистов', 511: '511 программистов', 512: '512 программистов', 513: '513 программистов',
    514: '514 программистов', 515: '515 программистов', 516: '516 программистов', 517: '517 программистов',
    518: '518 программистов', 519: '519 программистов', 520: '520 программистов', 521: '521 программист',
    522: '522 программиста', 523: '523 программиста', 524: '524 программиста', 525: '525 программистов',
    526: '526 программистов', 527: '527 программистов', 528: '528 программистов', 529: '529 программистов',
    530: '530 программистов', 531: '531 программист', 532: '532 программиста', 533: '533 программиста',
    534: '534 программиста', 535: '535 программистов', 536: '536 программистов', 537: '537 программистов',
    538: '538 программистов', 539: '539 программистов', 540: '540 программистов', 541: '541 программист',
    542: '542 программиста', 543: '543 программиста', 544: '544 программиста', 545: '545 программистов',
    546: '546 программистов', 547: '547 программистов', 548: '548 программистов', 549: '549 программистов',
    550: '550 программистов', 551: '551 программист', 552: '552 программиста', 553: '553 программиста',
    554: '554 программиста', 555: '555 программистов', 556: '556 программистов', 557: '557 программистов',
    558: '558 программистов', 559: '559 программистов', 560: '560 программистов', 561: '561 программист',
    562: '562 программиста', 563: '563 программиста', 564: '564 программиста', 565: '565 программистов',
    566: '566 программистов', 567: '567 программистов', 568: '568 программистов', 569: '569 программистов',
    570: '570 программистов', 571: '571 программист', 572: '572 программиста', 573: '573 программиста',
    574: '574 программиста', 575: '575 программистов', 576: '576 программистов', 577: '577 программистов',
    578: '578 программистов', 579: '579 программистов', 580: '580 программистов', 581: '581 программист',
    582: '582 программиста', 583: '583 программиста', 584: '584 программиста', 585: '585 программистов',
    586: '586 программистов', 587: '587 программистов', 588: '588 программистов', 589: '589 программистов',
    590: '590 программистов', 591: '591 программист', 592: '592 программиста', 593: '593 программиста',
    594: '594 программиста', 595: '595 программистов', 596: '596 программистов', 597: '597 программистов',
    598: '598 программистов', 599: '599 программистов', 600: '600 программистов', 601: '601 программист',
    602: '602 программиста', 603: '603 программиста', 604: '604 программиста', 605: '605 программистов',
    606: '606 программистов', 607: '607 программистов', 608: '608 программистов', 609: '609 программистов',
    610: '610 программистов', 611: '611 программистов', 612: '612 программистов', 613: '613 программистов',
    614: '614 программистов', 615: '615 программистов', 616: '616 программистов', 617: '617 программистов',
    618: '618 программистов', 619: '619 программистов', 620: '620 программистов', 621: '621 программист',
    622: '622 программиста', 623: '623 программиста', 624: '624 программиста', 625: '625 программистов',
    626: '626 программистов', 627: '627 программистов', 628: '628 программистов', 629: '629 программистов',
    630: '630 программистов', 631: '631 программист', 632: '632 программиста', 633: '633 программиста',
    634: '634 программиста', 635: '635 программистов', 636: '636 программистов', 637: '637 программистов',
    638: '638 программистов', 639: '639 программистов', 640: '640 программистов', 641: '641 программист',
    642: '642 программиста', 643: '643 программиста', 644: '644 программиста', 645: '645 программистов',
    646: '646 программистов', 647: '647 программистов', 648: '648 программистов', 649: '649 программистов',
    650: '650 программистов', 651: '651 программист', 652: '652 программиста', 653: '653 программиста',
    654: '654 программиста', 655: '655 программистов', 656: '656 программистов', 657: '657 программистов',
    658: '658 программистов', 659: '659 программистов', 660: '660 программистов', 661: '661 программист',
    662: '662 программиста', 663: '663 программиста', 664: '664 программиста', 665: '665 программистов',
    666: '666 программистов', 667: '667 программистов', 668: '668 программистов', 669: '669 программистов',
    670: '670 программистов', 671: '671 программист', 672: '672 программиста', 673: '673 программиста',
    674: '674 программиста', 675: '675 программистов', 676: '676 программистов', 677: '677 программистов',
    678: '678 программистов', 679: '679 программистов', 680: '680 программистов', 681: '681 программист',
    682: '682 программиста', 683: '683 программиста', 684: '684 программиста', 685: '685 программистов',
    686: '686 программистов', 687: '687 программистов', 688: '688 программистов', 689: '689 программистов',
    690: '690 программистов', 691: '691 программист', 692: '692 программиста', 693: '693 программиста',
    694: '694 программиста', 695: '695 программистов', 696: '696 программистов', 697: '697 программистов',
    698: '698 программистов', 699: '699 программистов', 700: '700 программистов', 701: '701 программист',
    702: '702 программиста', 703: '703 программиста', 704: '704 программиста', 705: '705 программистов',
    706: '706 программистов', 707: '707 программистов', 708: '708 программистов', 709: '709 программистов',
    710: '710 программистов', 711: '711 программистов', 712: '712 программистов', 713: '713 программистов',
    714: '714 программистов', 715: '715 программистов', 716: '716 программистов', 717: '717 программистов',
    718: '718 программистов', 719: '719 программистов', 720: '720 программистов', 721: '721 программист',
    722: '722 программиста', 723: '723 программиста', 724: '724 программиста', 725: '725 программистов',
    726: '726 программистов', 727: '727 программистов', 728: '728 программистов', 729: '729 программистов',
    730: '730 программистов', 731: '731 программист', 732: '732 программиста', 733: '733 программиста',
    734: '734 программиста', 735: '735 программистов', 736: '736 программистов', 737: '737 программистов',
    738: '738 программистов', 739: '739 программистов', 740: '740 программистов', 741: '741 программист',
    742: '742 программиста', 743: '743 программиста', 744: '744 программиста', 745: '745 программистов',
    746: '746 программистов', 747: '747 программистов', 748: '748 программистов', 749: '749 программистов',
    750: '750 программистов', 751: '751 программист', 752: '752 программиста', 753: '753 программиста',
    754: '754 программиста', 755: '755 программистов', 756: '756 программистов', 757: '757 программистов',
    758: '758 программистов', 759: '759 программистов', 760: '760 программистов', 761: '761 программист',
    762: '762 программиста', 763: '763 программиста', 764: '764 программиста', 765: '765 программистов',
    766: '766 программистов', 767: '767 программистов', 768: '768 программистов', 769: '769 программистов',
    770: '770 программистов', 771: '771 программист', 772: '772 программиста', 773: '773 программиста',
    774: '774 программиста', 775: '775 программистов', 776: '776 программистов', 777: '777 программистов',
    778: '778 программистов', 779: '779 программистов', 780: '780 программистов', 781: '781 программист',
    782: '782 программиста', 783: '783 программиста', 784: '784 программиста', 785: '785 программистов',
    786: '786 программистов', 787: '787 программистов', 788: '788 программистов', 789: '789 программистов',
    790: '790 программистов', 791: '791 программист', 792: '792 программиста', 793: '793 программиста',
    794: '794 программиста', 795: '795 программистов', 796: '796 программистов', 797: '797 программистов',
    798: '798 программистов', 799: '799 программистов', 800: '800 программистов', 801: '801 программист',
    802: '802 программиста', 803: '803 программиста', 804: '804 программиста', 805: '805 программистов',
    806: '806 программистов', 807: '807 программистов', 808: '808 программистов', 809: '809 программистов',
    810: '810 программистов', 811: '811 программистов', 812: '812 программистов', 813: '813 программистов',
    814: '814 программистов', 815: '815 программистов', 816: '816 программистов', 817: '817 программистов',
    818: '818 программистов', 819: '819 программистов', 820: '820 программистов', 821: '821 программист',
    822: '822 программиста', 823: '823 программиста', 824: '824 программиста', 825: '825 программистов',
    826: '826 программистов', 827: '827 программистов', 828: '828 программистов', 829: '829 программистов',
    830: '830 программистов', 831: '831 программист', 832: '832 программиста', 833: '833 программиста',
    834: '834 программиста', 835: '835 программистов', 836: '836 программистов', 837: '837 программистов',
    838: '838 программистов', 839: '839 программистов', 840: '840 программистов', 841: '841 программист',
    842: '842 программиста', 843: '843 программиста', 844: '844 программиста', 845: '845 программистов',
    846: '846 программистов', 847: '847 программистов', 848: '848 программистов', 849: '849 программистов',
    850: '850 программистов', 851: '851 программист', 852: '852 программиста', 853: '853 программиста',
    854: '854 программиста', 855: '855 программистов', 856: '856 программистов', 857: '857 программистов',
    858: '858 программистов', 859: '859 программистов', 860: '860 программистов', 861: '861 программист',
    862: '862 программиста', 863: '863 программиста', 864: '864 программиста', 865: '865 программистов',
    866: '866 программистов', 867: '867 программистов', 868: '868 программистов', 869: '869 программистов',
    870: '870 программистов', 871: '871 программист', 872: '872 программиста', 873: '873 программиста',
    874: '874 программиста', 875: '875 программистов', 876: '876 программистов', 877: '877 программистов',
    878: '878 программистов', 879: '879 программистов', 880: '880 программистов', 881: '881 программист',
    882: '882 программиста', 883: '883 программиста', 884: '884 программиста', 885: '885 программистов',
    886: '886 программистов', 887: '887 программистов', 888: '888 программистов', 889: '889 программистов',
    890: '890 программистов', 891: '891 программист', 892: '892 программиста', 893: '893 программиста',
    894: '894 программиста', 895: '895 программистов', 896: '896 программистов', 897: '897 программистов',
    898: '898 программистов', 899: '899 программистов', 900: '900 программистов', 901: '901 программист',
    902: '902 программиста', 903: '903 программиста', 904: '904 программиста', 905: '905 программистов',
    906: '906 программистов', 907: '907 программистов', 908: '908 программистов', 909: '909 программистов',
    910: '910 программистов', 911: '911 программистов', 912: '912 программистов', 913: '913 программистов',
    914: '914 программистов', 915: '915 программистов', 916: '916 программистов', 917: '917 программистов',
    918: '918 программистов', 919: '919 программистов', 920: '920 программистов', 921: '921 программист',
    922: '922 программиста', 923: '923 программиста', 924: '924 программиста', 925: '925 программистов',
    926: '926 программистов', 927: '927 программистов', 928: '928 программистов', 929: '929 программистов',
    930: '930 программистов', 931: '931 программист', 932: '932 программиста', 933: '933 программиста',
    934: '934 программиста', 935: '935 программистов', 936: '936 программистов', 937: '937 программистов',
    938: '938 программистов', 939: '939 программистов', 940: '940 программистов', 941: '941 программист',
    942: '942 программиста', 943: '943 программиста', 944: '944 программиста', 945: '945 программистов',
    946: '946 программистов', 947: '947 программистов', 948: '948 программистов', 949: '949 программистов',
    950: '950 программистов', 951: '951 программист', 952: '952 программиста', 953: '953 программиста',
    954: '954 программиста', 955: '955 программистов', 956: '956 программистов', 957: '957 программистов',
    958: '958 программистов', 959: '959 программистов', 960: '960 программистов', 961: '961 программист',
    962: '962 программиста', 963: '963 программиста', 964: '964 программиста', 965: '965 программистов',
    966: '966 программистов', 967: '967 программистов', 968: '968 программистов', 969: '969 программистов',
    970: '970 программистов', 971: '971 программист', 972: '972 программиста', 973: '973 программиста',
    974: '974 программиста', 975: '975 программистов', 976: '976 программистов', 977: '977 программистов',
    978: '978 программистов', 979: '979 программистов', 980: '980 программистов', 981: '981 программист',
    982: '982 программиста', 983: '983 программиста', 984: '984 программиста', 985: '985 программистов',
    986: '986 программистов', 987: '987 программистов', 988: '988 программистов', 989: '989 программистов',
    990: '990 программистов', 991: '991 программист', 992: '992 программиста', 993: '993 программиста',
    994: '994 программиста', 995: '995 программистов', 996: '996 программистов', 997: '997 программистов',
    998: '998 программистов', 999: '999 программистов',

}
print(dct[int(input())]) -End,"
 import numpy as np
a, b = np.array(input().split()), input()
r = np.where(a==b)[0]
if len(r): print(*r)
else: print('None') -End,"
 s = input()+' '
result = ''
count = 0
for a,b in zip(s, s[1:]):
    count += 1
    if a != b:
        result += (str(count) if count > 1 else '') + a
        count = 0 
print(result) -End,"
 a, op, b = input().split()
ops = {'plus': lambda x,y: x+y,
       'minus': lambda x,y: x-y,
      'multiply': lambda x,y: x*y,
      'divide': lambda x,y: x//y}
print(ops[op](int(a), int(b))) -End,"
 import math
closest_mod_5 = lambda x: math.ceil(x/5) * 5



 -End,"
 from scipy.special import binom as b
print(int(b(*map(int, input().split()))))




 -End,"
 class Buffer:
    def __init__(self):
        self.a = []

    def add(self, *a):
        self.a += a
        while len(self.a) >= 5:
            print(sum(self.a[:5]))
            self.a = self.a[5:]
        
    def get_current_part(self):
        return self.a -End,"
 
class LoggableList(list, Loggable):
    def append(self, x):
        self.log(x)
        return super().append(x)



 -End,"
 try: foo()
except Exception as e:
    name = type(e).__name__ 
    print(name if name.startswith(('As', 'Z')) else 'ArithmeticError')




 -End,"
 import sys, re
print(*[line for line in sys.stdin if re.findall(r'\bcat\b', line)], sep='')
 -End,"
 import sys, re
print(*[r[0].rstrip() for r in re.findall(r'(^.*\b(?P<f>.+)(?P=f)\b.*)', sys.stdin.read(), flags=re.M)], sep='\n')



 -End,"
 import re, sys
for line in sys.stdin:
    print(re.sub(r'\b(\w)(\w)(?<=.)', r'\2\1', line), end='')




 -End,"
 import requests, re

def get_body(link):
    try:
        return requests.get(link).text
    except:
        return ''
    
all_links = re.findall(r'<a.*\bhref=""(.+)"".*?>', requests.get(input()).text)    
print('Yes' if re.findall(r'href=""{}""'.format(input()), ''.join(map(get_body, all_links))) else 'No')




 -End,"
 # put your python code here
import sys

counts = {}
sums = {}

for line in sys.stdin:
    w, v = line.split()
    counts[w] = counts.get(w, 0) + 1
    sums[w] = sums.get(w, 0) + int(v)

print(*[k + '\t' + str(round(sums[k]/counts[k])) for k in counts], sep='\n')
    



 -End,"
 import sys

counts = {}
sums = {}

for line in sys.stdin:
    w, v = line.split()
    counts[w] = counts.get(w, 0) + 1
    sums[w] = sums.get(w, 0) + int(v[:-2])

print(*[k + '\t' +  str(sums[k]) + ';' + str(counts[k]) for k in counts], sep='\n') -End,"
 import sys
print(*sorted(list(set([l.split('\t')[0] for l in sys.stdin]))), sep='\n')     -End,"
 import sys
print(*sorted(list(map(lambda x:x.split(',')[1].strip(), sys.stdin.readlines()))),
      sep = '\t1\n', end = '\t1\n') -End,"
 import sys
print(*filter(lambda x:x.split()[1] == 'user10', sys.stdin.readlines()), sep='')



 -End,"
 import sys
print(*map(lambda x: x.split()[-1], sys.stdin.readlines()), sep='\n') -End,"
 import sys
print(*sorted(set(map(lambda x:x.split()[0], sys.stdin.readlines()))), sep='\n') -End,"
 import sys
print(*map(lambda x: x.split()[0] + '\t' + ';'.join(x.split()[1:]) + ';1',
            sys.stdin.readlines()),
      sep='\n')
 -End,"
 import numpy as np

V, E = input().split()
V, E = int(V), int(E)
M = np.zeros((V + 1, V + 1))
for i in range(E):
    from_, to_, weight = map(int, input().split())
    M[from_, to_]  = weight

start, end = input().split()
start, end = int(start), int(end)

known = set([start])
rest = set(range(1, V + 1))
rest.discard(start)
lengths = np.array([-1]*(V + 1))
lengths[start] = 0

last_vertex = start

while lengths[end] < 0 and end in rest:
    best_len = np.inf
    best_vertex = -1
    for possible_vertex in rest:
        for existed_vertex in known:
            if lengths[existed_vertex] < M[existed_vertex, possible_vertex]  + lengths[existed_vertex] < best_len:
                best_len = lengths[existed_vertex] + M[existed_vertex, possible_vertex]
                best_vertex = possible_vertex
    if best_vertex < 0: break
    known.add(best_vertex)
    rest.discard(best_vertex)
    lengths[best_vertex] = best_len
    
print(lengths[end])     -End,"
 import sys

i, p, s = 0, 0, '{}'

for line in sys.stdin.readlines() + ['1\t1\t{}']:
    line = line.rstrip()
    ni, np, ns = line.split('\t')
    ni, np = int(ni), float(np)
    if ni != i:
        if i > 0: print(i, p, s, sep='\t')
        i, p, s = ni, 0, ns
    p += np * (ns == '{}')
    if ns != '{}': s = ns -End,"
 n , _ = map(int, input().split())
tasks = list(map(int, input().split()))

# processor ID, time when it will be free 
PQ = [[_, 0] for _ in range(n)]

le = lambda A,B: A[1] < B[1] or A[0] < B[0] and A[1] == B[1]

for task_time in tasks:
    print(*PQ[0])    
    PQ[0][1] += task_time
    # SwiftDown
    c, m, l, r = 0, 0, 1, 2
    while True:
        if l < n and le(PQ[l], PQ[m]): m = l
        if r < n and le(PQ[r], PQ[m]): m = r
        if m != c:
            PQ[c], PQ[m] = PQ[m], PQ[c]
            c, l, r = m, m * 2 + 1, c * 2 + 2 
        else: break -End,"
 n, s, e = [int(x) for x in input().split()]
ids = list(range(n + 1))

def getID(i):
    while ids[i] != i: i = ids[i]
    return i
    
for i in range(s):
    xi, xj = input().split()
    xi, xj = int(xi), int(xj)
    if ids[xi] != ids[xj]:
        while ids[xi] != xj: ids[xi], xi = xj, ids[xi]
        
for i in range(e):
    a, b = input().split()
    if getID(int(a)) == getID(int(b)): 
        print(0)
        exit()
    
print(1) -End,"
 n, m = [int(x) for x in input().split()]
size = [0] + [*map(int, input().split())]
root = [i for i in range(n + 1)]
current_max = max(size)
    
    
for i in range(m):
    root_d, root_s = [*map(int, input().split())]    
    
    # после этого в root_d -- корень дерева, в которое надо пихать
    while root_d != root[root_d]: root_d = root[root_d]
    
    # ищем корень той таблицы, которую надо влить в root_d 
    while root_s != root[root_s]: 
        root[root_s], root_s = root_d, root[root_s]
        
    if root_s != root_d: 
        size[root_d] += size[root_s]
        root[root_s] = root_d
        current_max = max(current_max, size[root_d])
 
    print(current_max) -End,"
 left = []
right = []
key = []
q = []

n = int(input());
if n == 0:
    print(""CORRECT"")
    exit()

parent = [-1] * n 
mins = [+2**31] * n
maxs = [-2**31] * n
    
for i in range(n):
    k, l, r = [*map(int, input().split())]
    key.append(k)
    left.append(l)
    right.append(r)
    if l != -1:
        parent[l] = i
    if r != -1: parent[r] = i
    if l == r == -1: q.append(i)
        
        
def check(q):
    while len(q) > 0:
        new_q = []
        for leave in q: 
            # для текущей вершины нужно проверить, выполняется ли для нее свойства
            # и обновить минимум и максимум соответствующие 
            maxs[leave] = max(maxs[leave], key[leave])
            mins[leave] = min(mins[leave], key[leave])
            
            if left[leave] != -1:
                if maxs[left[leave]] > key[leave]: return False
                maxs[leave] = max(maxs[leave], maxs[left[leave]])
                mins[leave] = min(mins[leave], mins[left[leave]])
            
            if right[leave] != -1:
                if mins[right[leave]] < key[leave]: return False
                maxs[leave] = max(maxs[leave], maxs[right[leave]])
                mins[leave] = min(mins[leave], mins[right[leave]])
            
            
            if parent[leave] !=-1 and parent[leave] not in new_q:
                new_q.append(parent[leave])
        q = new_q
    return True


print(""CORRECT"" if check(q) else ""INCORRECT"") -End,"
 from itertools import dropwhile
cuts = [[*map(int, input().split())] for _ in range(int(input()))]
cuts.sort(key=lambda x: x[1] * 10**10 + x[0])
points = []
while len(cuts):
    current_cut = cuts[0].copy()
    points.append(current_cut[1])
    cuts = [*dropwhile(lambda p: p[0] <= current_cut[1], cuts)]
print(len(points))
print(*points)
 -End,"
 n = int(input())
k = int((2*n + 1/4)**0.5 - 1/2)
s = [i + 1 for i in range(k-1)]
print(k, '\n', *s, n - sum(s))   -End,"
 k, l = map(int, input().split())
keys = []
for i in range(k):
    key, code = input().split(': ')
    keys.append((key, code))
s = input()  
while len(s):
    for key, code in keys:
        if s.startswith(code):
            print(key, end='')
            break
    s = s[len(code):] -End,"
 from array import array
q = array('Q') # unsigned long long
N = 0

def siftDown(index):
    child1Index, child2Index = index * 2 + 1, index * 2 + 2
    maxIndex = index
    if child2Index < N:
        if q[child2Index] > q[maxIndex]:
            maxIndex = child2Index 
    if child1Index < N:
        if q[child1Index] > q[maxIndex]:
            maxIndex = child1Index
    if maxIndex != index:
        q[index], q[maxIndex] = q[maxIndex], q[index]
        siftDown(maxIndex)
        
def siftUp(index):
    parentIndex = (index - 1) // 2
    if parentIndex >= 0 and q[parentIndex] < q[index]:
        q[parentIndex], q[index] = q[index], q[parentIndex]
        siftUp(parentIndex)
        
def insert(x):
    global N
    q.append(x)
    siftUp(N)
    N += 1

def extractMax():
    global N
    print(q[0])
    q[0] = q[N - 1]
    q.pop()
    N -= 1
    siftDown(0)

for i in range(int(input())):
    command = input()
    if command[0] == 'I':
        insert(int(command.split(' ')[1]))
    else: 
        extractMax()
 -End,"
 import math
max_subseq = dict()
answer = 0
input()
for x in map(int, input().split()):
    best_value = max_subseq.get(x, 0)
    for i in range(math.floor(x**0.5), 0, -1):
        if x % i == 0:
            best_value = max(best_value, max_subseq.get(i, 0), max_subseq.get(x // i, 0))
    max_subseq[x] = best_value + 1
    answer = max(answer, best_value + 1)
print(answer) -End,"
 from functools import lru_cache
W_, n_ = map(int, input().split())
bars = [0] + [*map(int, input().split())]

@lru_cache(maxsize=None)
def result(W, n):
    if n == 0: return 0
    if n == 1: return bars[1] if W >= bars[1] else 0
    return max(result(W, n-1), result(W-bars[n],n-1)+bars[n] if W-bars[n] >= 0 else 0)

print(result(W_, n_)) -End,"
 from functools import lru_cache


@lru_cache(maxsize=None)
def edit_distance(A, B):
    if len(A) > len(B):
        A, B = B, A
    i = 0
    while i < len(A) and A[-i-1] == B[-i-1]:
        i += 1
    A, B = A[:len(A)-i], B[:len(B)-i]
    if not A or not B: 
        return len(A) + len(B)
    temporary_result = edit_distance(A[:-1], B) + 1
    temporary_result = min(temporary_result, edit_distance(A, B[:-1]) + 1)
    temporary_result = min(temporary_result, edit_distance(A[:-1], B[:-1]) + 1)
    return temporary_result


print(edit_distance(input(), input()))
 -End,"
 print(f""{input()}${input()}"") -End,"
 L = eval(input()) -End,"
 for i in range(0, int(input()), 2):
    print(i**2)





 -End,"
 n = int(input())
for i in range(2, int(n ** (1/2))):
    if n % i == 0:
        print(i)
        break -End,"
 def dfactorial(n):
    result = 1
    for i in range(n % 2 + 2, n + 1, 2):
        result *= i
    return result -End,"
 # import libraries
from math import exp

def def_e(x, prev=0):
    dx = 0.1
    while abs(abs(exp(x + dx) - exp(x))/dx - prev) > 0.0005:
        prev = abs(exp(x + dx) - exp(x))/dx
        dx /= 10
    return round(prev, 3)
 -End,"
 n = int(input()) # Input and convert to int
res = sum(filter(lambda x: x % 5 == 0 and x % 3, range(1,n+1)))
print(res)




 -End,"
 def common(list_a, list_b):
    return list(filter(lambda x: x in list_b, list_a))




 -End,"
 n = int(input())
def donuts(n):
    return f""Всего пончиков: {n if n <=9 else 'много'}""

print(donuts(n)) -End,"
 from json import dumps, loads
L2 = loads(dumps(L1))
 -End,"
 print(*df[[""age""]].describe().loc[[""count"", ""75%""]].values.ravel(), sep='\n')
 -End,"
 from numpy import number

print(*[f""{a}:{b:g}"" for a, b in df.select_dtypes(include=""number"").sum().items()], sep='\n')




 -End,"
 a = int(input())
b = int(input())
c = int(input())
if a >= b and a >= c:
    print(a)
    if b < c:
        print(b)
        print(c)
    else:
        print(c)
        print(b)
if b > a and b >= c:
    print(b)
    if a < c:
        print(a)
        print(c)
    else:
        print(c)
        print(a)
if c > a and c > b:
    print(c)
    if a < b:
        print(a)
        print(b)
    else: 
        print(b)
        print(a) -End,"
 n = int(input())
if n <= 10:
    if n == 1:
        print(n, 'программист')
    if 2 <= n <= 4:
        print(n, 'программиста')
    if 5 <= n <= 10:
        print(n, 'программистов')
    if n == 0:
        print(n, 'программистов')
else: 
    if (n % 10 == 0) or (11 <= (n % 100 // 1) <= 14 ):
        print(n, 'программистов')
        # x % 100 // 1 -- так находятся две последние цифры
    if n % 10 == 1 and (n % 100 // 1) != 11:
        print(n, 'программист')
    if (2 <= (n % 10) <= 4) and (n % 100 // 10) != 1:
        print(n, 'программиста')
        # x % 100 // 10 -- так находится предпоследняя цифра
    if 5 <= (n % 10) <= 10:
        print(n, 'программистов') -End,"
 tNumber = str(input())
'''Оператор извлечения среза: [X:Y]. X – начало среза, а Y – окончание; 
символ с номером Y в срез не входит. По умолчанию первый индекс равен 0, а второй - длине строки. '''
if int(tNumber[0]) + int(tNumber[1]) + int(tNumber[2]) == int(tNumber[3]) + int(tNumber[4]) + int(tNumber[5]):
    print('Счастливый')
else: 
    print('Обычный') -End,"
 a = int(input())
sum = 0
while a != 0:
        sum += a
        a = int(input())
print(sum) -End,"
 a, b = int(input()), int(input())
d = max(a,b) #функция поиска максимального числа
while d % b != 0 or d % a != 0:
    d += 1
print(d)
 -End,"
 a = int(input())
while a >= 0 or a <= 0:
    if a < 10:
        a = int(input())
    if a > 100:
        break
    if a>= 10:
        print(a)
        a = int(input())
         -End,"
 a = int(input()) 
b = int(input())
c = int(input())
d = int(input()) 
for i in range(c, d+1):
    print('\t', i, end='')  # отрисовывает первую строку с-d
print()
for i in range(a, b+1):
    print(i, end='')  # 1. это начинает новую строку a-b, end='' припятствует переводу строки
    for j in range(c, d+1):
        print('\t', i*j, end='')  # 2. отрисовывает каждое произведение с отступом
    print()  # 3. переводит строку, переход к 1.  -End,"
 a = int(input()) 
b = int(input())
so = 0
k = 0
for i in range(a, b+1):  # не забываем про +1 для интервала
    if i % 3 == 0:
#        print(i)
        so = i + so
#        print(so)
        k += 1  # счетчик итераций
""""""        print(k)
        print(___)""""""
print(so/k) -End,"
 genome = str(input())
g = int(genome.upper().count('G'))
c = int(genome.upper().count('C'))
length = len(genome)
print(((g + c) / length) * 100)
 -End,"
 genome = str(input())
line = ''
if len(genome) == 1:
    print(genome + '1')
else:
    i = 0
    while i < len(genome) - 1:  # len(genome) - 1 — это последний сим.
        if genome[i] == genome[i + 1]:
            counter = 1
            fragment = genome[i]
            while genome[i] == genome[i + 1]:
                counter += 1
                i += 1
                if i == len(genome) - 1:
                    break    
            line += fragment + str(counter)
            continue
            if i == len(genome) - 1:
                break
        if i != len(genome) - 1:
            if genome[i] != genome[i+1] and genome[i] != genome[i-1]:
                line += genome[i] + '1'
                i += 1
                if i == len(genome) - 1:
                    continue    
            if genome[i] != genome[i+1] and genome[i] == genome[i-1]:
                i += 1
                continue
    if i == len(genome) - 1:
        if genome[i] != genome[i-1]:
            line += genome[i] + '1'
        if genome[i] == genome[i-1]:
            line = line
print(line) -End,"
 a = [int(i) for i in input().split()]
print(sum(a)) -End,"
 a = [int(i) for i in input().split()]
i = 0
strings = ''
if len(a) == 1:
    print(a[0])
while i < len(a) - 1:
    if i == 0:
        print(str(a[-1] + a[1]) + ' ', end = '') 
        i += 1
    if i > 0 and i != len(a) - 1:
        print(str(a[i-1] + a[i+1]) + ' ', end = '')
        i += 1
    if i == len(a) - 1:
        print(str(a[i-1] + a[0]))
        i +=1 -End,"
 firstList = [str(i) for i in input().split()]
firstList.sort()
newList = []
answer = ''
j = 0
while j < len(firstList) - 1:
    if firstList[j] == firstList[j+1] or firstList[j] == firstList[j-1]:
        if firstList[j] not in newList:
            newList += [firstList[j]]
            j += 1
        if firstList[j] in newList:
            j += 1
        if j == len(firstList) - 1:
            break
    else:
        j += 1
    if j == len(firstList) - 1:
        break
answer = ' '.join(newList)
print(answer) -End,"
 n = int(input())
i = 1
answer = []
while i <= n:
    a = [str(i) for j in range(i)]
    answer += a
    i += 1
stringForAnswer = ' '.join(answer[:n])
print(stringForAnswer) -End,"
 lst = [i for i in input().split()]
x = input()
if x not in lst:
    print('Отсутствует')
if x in lst:
    j = 0
    while j <= len(lst) - 1:
        if lst[j] == x:
            print(j, end=' ')
            j += 1
        else:
            j += 1 -End,"
 a = input().split()
matrix = []
while True:
    if a != ['end']:
        a = [int(i) for i in a]
        matrix.append(a)
        a = input().split()
    if a == ['end']:
        break
rows = len(matrix)  # строки
cols = len(matrix[0]) # колонки
i = 0
j = 0
while i <= rows - 1: # самая нижняя строка
    while j <= cols - 1:  # самый правый столбец
        if j != cols - 1 and i != rows - 1:  # некрайние нигде, вроде работает
            above = matrix[i - 1][j]
            right = matrix[i][j + 1]
            left = matrix[i][j - 1]
            below = matrix[i + 1][j]
            summA = above + below + left + right
            print(summA, end = ' ')
            j += 1
            if j == cols - 1:
                continue 
        if j != cols - 1 and i == rows - 1:  # не-правый нижний 
            above = matrix[i - 1][j]
            left = matrix[i][j - 1]
            below = matrix[0][j]  # верхняя в противоположной
            right = matrix[i][j + 1]
            summA = above + below + left + right
            print(summA, end = ' ')
            j += 1
            if j == cols - 1:
                continue
        if j == cols - 1 and i != rows - 1:  # посл.столбец непоследней стр.
            above = matrix[i - 1][j]
            left = matrix[i][j - 1]
            right = matrix[i][0]
            below = matrix[i + 1][j]
            summA = above + right + left + below
            print(summA, end = ' ')
            j += 1
        if j == cols - 1 and i == rows - 1:
            above = matrix[i - 1][j]
            left = matrix[i][j - 1]
            summA = above + matrix[0][j] + left + matrix[i][0]
            print(summA, end = ' ')
            break
    j = 0
    i += 1
    print()
     -End,"
 n = int(input())
startN = n
matrix = [[0 for j in range(n)] for i in range(n)]
result = n ** 2
a = 0  # накопитель значений для ячеек
while a < result:
    for j in range(n):  # движемся слева направо
        i = -n
        if matrix[i][j] == 0:
            a += 1  
            matrix[i][j] += a
            if matrix[i][j] == result:
                break
    for i in range(n):  # движемся сверху вниз
        if matrix[i][j] == 0:
            a += 1 
            matrix[i][j] += a
            if matrix[i][j] == result:
                break
    if i == n - 1:  # движемся справа налево
        while j >= 0:
            if matrix[i][j] == 0:
                a += 1  
                matrix[i][j] += a
                j -= 1
            elif matrix[i][j] == result:
                break
            else: 
                j -= 1
    if j < 0:  # движемся снизу вверх
        j = -n
        while i >= 0:
            if matrix[i][j] == 0:
                a += 1  
                matrix[i][j] += a
                i -= 1
            elif matrix[i][j] == result:
                break
            else: 
                i -= 1
    n -= 1    
for i in range(startN):  # переходим к печати
    for j in range(startN):
        print(matrix[i][j], end=' ')
    print() -End,"
 def modify_list(l):
    i = 0
    while i < len(l):
        if l[i] % 2 != 0:
            l[i] = 'K'
            i += 1
            if i >= len(l):
                break
        if l[i] % 2 == 0:
            l[i] = int(l[i] // 2)
            i += 1
            if i >= len(l):
                break
    if 'K' in l:
        if l.count('K') == len(l):
            l.clear()
        else:
            while True:
                l.remove('K')
                if 'K' not in l:
                    break -End,"
 line = input().lower().split()
words = {}
for i in line: 
    words[i] = line.count(i)
for k, v in words.items(): 
    print(k, v) -End,"
 import sys
for i in sys.argv[1:]:
    print(i)
 -End,"
 n = int(input())
game_results = []
teams = set()
for i in range(n):  # ввожу данные и рисую двумерный список
    line = input().split(';')
    game_results += [line]
for i in range(n):  # делаю список команд без повторов
    teams.add(game_results[i][0])
    teams.add(game_results[i][2])
t_score = dict.fromkeys(teams, 0)  # сумма очков
t_win = dict.fromkeys(teams, 0)  # число побед
t_lose = dict.fromkeys(teams, 0)  # число поражений
t_draw = dict.fromkeys(teams, 0)  # число ничьих
t_played = dict.fromkeys(teams, 0)  # число игр
for i in range(n):
    if game_results[i][1] != game_results[i][3]:
        if game_results[i][1] > game_results[i][3]:  # выиграла первая команда
            t_score[game_results[i][0]] += 3
            t_win[game_results[i][0]] += 1
            t_lose[game_results[i][2]] += 1
            t_played[game_results[i][2]] += 1
            t_played[game_results[i][0]] += 1
        if game_results[i][3] > game_results[i][1]:  # выиграла вторая команда
            t_score[game_results[i][2]] += 3
            t_win[game_results[i][2]] += 1
            t_lose[game_results[i][0]] += 1
            t_played[game_results[i][2]] += 1
            t_played[game_results[i][0]] += 1
    else:  # ничья
        t_score[game_results[i][2]] += 1
        t_score[game_results[i][0]] += 1
        t_draw[game_results[i][2]] += 1
        t_draw[game_results[i][0]] += 1
        t_played[game_results[i][2]] += 1
        t_played[game_results[i][0]] += 1
for i in teams:  # печатаю результат
    team_played = str(i) + ':' + str(t_played[i])  # убираю пробел между названием и числом игр
    print(team_played, t_win[i], t_draw[i], t_lose[i], t_score[i])
 -End,"
 dictionary = set()
text_to_check = set()
d = int(input())
for i in range(d):
    dict_word = str(input())
    dictionary.add(dict_word.lower())
l = int(input())
for i in range(l):
    line_to_check = input().lower().split()
    for word in line_to_check:
        text_to_check.add(word)
non_listed = text_to_check.difference(dictionary)
for word in non_listed:
    print(word) -End,"
 n = int(input())
coords_list = []
for i in range(n):
    coords = input().split()
    coords_list += [coords]
# движение начинается в точке (0, 0), и движение на восток увеличивает первую координату, а на север — вторую.
ew, ns = 0, 0
for i in range(n):
    direction = coords_list[i][0]
    steps = int(coords_list[i][1])
    if direction == 'север':
        ns += steps
    if direction == 'юг':
        ns -= steps
    if direction == 'восток':
        ew += steps
    if direction == 'запад':
        ew -= steps
print(ew, ns)
 -End,"
 ans = set()
for obj in objects: # доступная переменная objects
    ans.add(id(obj))
print(len(ans))
 -End,"
 to_decode = input().split('_')
for word in to_decode:
    new_word = word[0].upper() + word[1:]
    print(new_word, end='')
     -End,"
 n = int(input())
start_n = n
matrix = [[0 for j in range(n)] for i in range(n)]
result = n ** 2
a = 0  # накопитель значений для ячеек
while a < result:
    for j in range(n):  # движемся слева направо
        i = -n
        if matrix[i][j] == 0:
            a += 1 
            matrix[i][j] += a
            if matrix[i][j] == result:
                break
    for i in range(n):  # движемся сверху вниз
        if matrix[i][j] == 0:
            a += 1 
            matrix[i][j] += a
            if matrix[i][j] == result:
                break
    if i == n - 1:  # движемся справа налево
        while j >= 0:
            if matrix[i][j] == 0:
                a += 1  
                matrix[i][j] += a
                j -= 1
            elif matrix[i][j] == result:
                break
            else: 
                j -= 1
    if j < 0:  # движемся снизу вверх
        j = -n
        while i >= 0:
            if matrix[i][j] == 0:
                a += 1  
                matrix[i][j] += a
                i -= 1
            elif matrix[i][j] == result:
                break
            else: 
                i -= 1
    n -= 1    
for i in range(start_n):  # переходим к печати
    for j in range(start_n):
        print(matrix[i][j], end=' ')
    print()
 -End,"
 n = int(input())
line = []
for i in range(1, n+1):
    line += str(i) * i
    if len(line) >= n:
        break
print("" "".join(line[:n]))
 -End,"
 a = input().split()
for i in range(int(a[0]), int(a[1]) + 1):
    if i % 3 == 0:
        print('Fizz', end='')
    if i % 5 == 0:
        print('Buzz', end='')
    if i % 5 != 0 and i % 3 != 0:
        print(i, end='')
    print()
 -End,"
 command = input()
while command != 'End':
    print('Processing ""{}"" command...'.format(command))
    command = input()
print('Good bye!')
 -End,"
 n = int(input())
while n != 1:
    print(n, end = ' ')
    if n % 2 == 0:
        n = int(n / 2)
    elif n % 2 != 0:
        n = n * 3 + 1
print(n) -End,"
 def closest_mod_5(x):
    return 5 * ((x // 5) + 1) -End,"
 exp = input().split()
if exp[1] == 'plus':
    print(int(exp[0])+int(exp[2]))
if exp[1] == 'minus':
    print(int(exp[0])-int(exp[2]))
if exp[1] == 'multiply':
    print(int(exp[0])*int(exp[2]))
if exp[1] == 'divide':
    print(int(exp[0])//int(exp[2])) -End,"
 line = input()
line += ' '

ind = 0
quantity = 1
while ind < len(line) - 1:
    if line[ind] == line[ind + 1]:
        while line[ind] == line[ind + 1]:
            quantity += 1
            ind += 1
    else:
        if quantity > 1:
            print(str(quantity) + line[ind], end='')
        else:
            print(line[ind], end='')
        ind += 1
        quantity = 1
 -End,"
 line = input()
check_line = []
for letter in line:
    if not check_line or letter != check_line[-1][1]:
        check_line.append([1, letter])
    else:
        check_line[-1][0] += 1

for elem in check_line:
    if elem[0] != 1:
        print(elem[0], elem[1], end='', sep='')
    else:
        print(elem[1], end='')
 -End,"
 from collections import defaultdict

line = input().split()
words_number = defaultdict(int)

for word in line:
    words_number[word.lower()] += 1

for key in words_number:
    print(key, words_number[key]) -End,"
 def shorten_way(x):
    if x >= 27 or x <= -27:
        x = x % 27
    return(x)


steps = int(input())
line = input().strip()
abc = ' abcdefghijklmnopqrstuvwxyz'
answer = ''

steps = shorten_way(steps)

for letter in line:
    address = abc.find(letter) + steps
    address = shorten_way(address)
    letter = abc[address]
    answer += letter

print('Result: ""{}""'.format(answer))
 -End,"
 lat = input()
dec = []
meaning = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
for symbol in lat:
    dec.append(meaning[symbol])

answer = 0
previous_number = 4010

for number in dec:
    answer += number
    if number > previous_number:
        answer -= previous_number * 2
    previous_number = number
        
print(answer)
 -End,"
 dec = int(input())
answer = ''

signs = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
meaning = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD',
           100: 'C', 90: 'XC', 50: 'L', 40: 'XL',
           10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}

for sign in signs:
    if dec // sign >= 1:
        answer += meaning[sign] * (dec // sign)
        dec = dec % sign
        if dec == 0:
            break

print(answer)
 -End,"
 def is_anagram(x):
    set_letters = set()
    for letter in x:
        set_letters.add(letter)
    letters = dict.fromkeys(set_letters, 0)
    for letter in x:
        letters[letter] += 1
    return letters


word_1 = input().lower()
word_2 = input().lower()

print(is_anagram(word_1) == is_anagram(word_2))
 -End,"
 line = input()
quantity = ''
previous_symbol = 'a'

for symbol in line:
    if symbol.isdigit():
        quantity += str(symbol)
    if symbol.isalpha():
        if previous_symbol.isalpha():
            print(symbol, end='')
        if previous_symbol.isdigit():
            print(symbol * int(quantity), end='')
            quantity = ''
    previous_symbol = symbol
   
print()
 -End,"
 line = input().split()
line.sort()
previous_symbol = 'x'
answer = set()
for symbol in line:
    if symbol == previous_symbol:
        answer.add(symbol)
    previous_symbol = symbol
for symbol in answer:
    print(symbol, end=' ') -End,"
 units_m = {'mile': 1609,
           'yard': 0.9144,
           'km': 1000,
           'cm': 0.01,
           'mm': 0.001,
           'foot': 30.48 * 0.01,
           'inch': 2.54 * 0.01,
           'm': 1}

in_line = input().split()
number = float(in_line[0])
unit_from = in_line[1]
unit_to = in_line[3]

answer = number * units_m[unit_from] / units_m[unit_to]
print(""{0:.2e}"".format(answer))
 -End,"
 # Beautiful is better than ugly. Explicit is better than implicit.


from collections import defaultdict

line = input().split()
answer = defaultdict(int)
for word in line:
    answer[len(word)] += 1

answer = sorted(answer.items())

for x in answer:
    print('{}: {}'.format(x[0], x[1]))
     -End,"
 file_name = input().split()
print('_'.join(file_name))
 -End,"
 n = int(input())
answers = dict()

for i in range(n):
    x = int(input())

    if x not in answers:
        answers[x] = f(x)

    print(answers[x])
 -End,"
 i = 0
while i < 200:
  a = input()
  a = int(a)
  if a > 100:
    break
  if a < 10:
    continue
  print (a) -End,"
 c = int(input())
d = int(input())
a = int(input())
b = int(input())
for i in range (a,b + 1):
    print (i, end='\t')
for j in range (c, d + 1):
    print ('\n', j, end='')
    for k in range (a, b + 1):
        print ('\t',k * j, end='') -End,"
 A = [0] * int(input())
j = 0
line = [1]
try:
    for i in line:
        for k in range(i):
            A[j] = (i)
            j+=1
        line.append(i+1)
    print(*A)
except Exception:
    print(*A) -End,"
 A = [int(i) for i in input().split()]
number = int(input())
num_ind = []
for i in range(len(A)):
    if A[i] == number:
        num_ind.append(i)
print(' '.join(str(i) for i in num_ind) if num_ind != [] else 'Отсутствует') -End,"
 enter = input()
matrix = []
while enter != 'end':
    matrix.append([int(i) for i in enter.split()])
    enter = input()
new = [[0] * len(matrix[0]) for i in range(len(matrix))]
for i in range(len(matrix)):
    for j in range(len(matrix[i])):
        if i == len(matrix)-1:
            a = matrix[i][j-1] + matrix[i][j+1 - len(matrix[i])]
            b = matrix[i-1][j] + matrix[0][j]
            new[i][j] = a + b
        else:
            a = matrix[i][j-1] + matrix[i][j+1 - len(matrix[i])]
            b = matrix[i-1][j] + matrix[i+1][j]
            new [i][j] = a+b
for i in new:
    print(*i) -End,"
 n = int(input())
a = [[0] * n for i in range(n)]    # заполняем таблицу нулями
i = 0     # Даём изначальные координаты i, j на матрице 
j = 0
a[i][j] = 1    #Даём первое значение в координатах a[0][0]
for k in range(2, n**2+1):     # При помощи перебора увеличиваем значение k до n^2 включительно
    if (j < (len(a[0])-1) and j >= i) and a[i][j+1] == 0:    # условие для движения направо и недопущения смещения в другую сторону
        a[i][j+1] = k
        j += 1
    elif i < (len(a[0])-1) and a[i+1][j] == 0:    # условие для движения вниз
        a[i+1][j] = k
        i += 1
    elif j > 0 and a[i][j-1] == 0:    # условие для движения влево
        a[i][j-1] = k
        j -= 1
    elif i > 0 and a[i-1][j] == 0:    # условие для движения вверх
        a[i-1][j] = k
        i -= 1
    elif i > j:    # финальное условие для возможности запуска самого первого условия
        j += 1
        a[i][j] = k
for i in a:    # собственно печать результата
    print(*i)  -End,"
 def modify_list(l: list):
    i = 0
    while i <= (len(l) - 1):
        if l[i] % 2 != 0:
            l.remove(l[i])
        else:
            l[i]//=2
            i+= 1 -End,"
 def update_dictionary(d: dict, key, value):
    if d.get(key):
        d[key] += [value]
    else:
        if d.get(2*key):
            d[2*key] += [value]
        else:
            d[2*key] = [value] -End,"
 def words_count(something: str):
    a = [[i.lower(), 0] for i in something.split()]
    dict_a = dict(a)
    for i in a:
        if i[0] in dict_a:
            dict_a[i[0]] += 1
    for key, value in dict_a.items():
        print (key, value)
words_count(input()) -End,"
 from math import pi
print(2 * pi * float(input())) -End,"
 def football(n: int):
    stats = {}
    for i in range(n):
        string = input()
        line = [int(i) if i.isdigit() else i for i in string.split(';')]
        for j in range(0, len(line), 2):
            if line[j] not in stats:
                stats[line[j]] = [0, 0, 0, 0, 0]
        for j in range(1, 2):
            stats[line[j-1]][0] += 1
            stats[line[j+1]][0] += 1
            if line[j] > line[j+2]:
                stats[line[j-1]][1] += 1
                stats[line[j-1]][4] += 3
                stats[line[j+1]][3] += 1
            elif line[j] < line[j+2]:
                stats[line[j+1]][1] += 1
                stats[line[j+1]][4] += 3
                stats[line[j-1]][3] += 1
            else:
                stats[line[j-1]][2] += 1
                stats[line[j+1]][2] += 1
                stats[line[j-1]][4] += 1
                stats[line[j+1]][4] += 1
    for k, v in stats.items():
        print(k + ':', end = '')
        print(*v, sep = ' ')
football(int(input())) -End,"
 def crypto(s1: str, s2: str):
    dict1, dict2 = dict(zip(s1, s2)), dict(zip(s2, s1))
    encrypt, decrypt = input(), input()
    for i in encrypt:
        print(dict1[i], end = '')
    print()
    for i in decrypt:
        print(dict2[i], end = '')
crypto(input(), input()) -End,"
 line1, line2 = [], []
for i in range(int(input())):
    line1.append(input().lower())
line1 = set(line1)
for i in range(int(input())):
    line2 += [i if i.lower() not in line1 else '' for i in input().split()]
line2 = list(set(filter(None, line2)))
for i in line2:
    print(i) -End,"
 def turtle(n: int):
    dictx, dicty = {'запад': -1, 'восток': 1}, {'север': 1, 'юг':-1}
    x, y = 0, 0
    for i in range(n):
        route, dist = [int(i) if i.isdigit() else i for i in input().split()]
        if route in dictx:
            x += dictx[route] * dist
        elif route in dicty:
            y += dicty[route] * dist
    print(x, y)
turtle(int(input())) -End,"
 def summ(n : int):
    result = 0
    for i in range(n):
        result += int(input())
    return result
print(summ(int(input()))) -End,"
 x = [id(i) for i in objects]
print(len(set(x))) -End,"
 def c_func(n, k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    return c_func(n-1, k) + c_func(n-1, k-1)
n, k = list(map(int, input().split()))
print(c_func(n, k)) -End,"
 def get_func(ns, arg, namespace, var):
    if ns in var:
        if ns == 'global' and arg not in var[ns]:
            return None
        if arg in var[ns]:
            return ns
        return get_func(namespace[ns], arg, namespace, var)
    return None
namespace, var = {}, {'global':set()}
for _ in range(int(input())):
    cmd, ns, arg = input().split()
    if cmd == 'create':
        namespace[ns] = arg
        var[ns] = set()
    elif cmd == 'add':
        var[ns].add(arg)
    elif cmd == 'get':
        print(get_func(ns, arg, namespace, var)) -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.bank = capacity
        self.coin = 0
        
    def can_add(self, v):
        return True if self.bank - v >= 0 else False

    def add(self, v):
        x = self.can_add(v)
        if x:
            self.bank -=v;
            self.coin += v -End,"
 class Buffer:
    def __init__(self):
        self.buff = []
    def add(self, *a):
        self.buff += [int(i) for i in a]
        while len(self.buff) >= 5:
            print(sum(self.buff[:5]))
            self.buff = self.buff[5:]
    def get_current_part(self):
        return self.buff -End,"
 def parent(anc, heir, classes, past = set()): # anc - потенциальный предок, heir - потенциальный наследник
        if anc in classes[heir] or anc == heir: # условия Yes
            return True
        if classes[heir] == [] or heir in past: # условия поиска в ширину ([] как object)
            past.add(heir)
            return None
        if heir in classes[anc] : # условия No
            return False
        else:
            possible = classes[heir]
            if anc not in possible:
                for i in possible:
                    a = parent(anc, i, classes)
                    if a != None:
                        return a
classes = {}
n = int(input())
for i in range(n):
    potent = input()
    if ':' in potent:
        potent = potent.split()
        for i in potent[2:]:
            if i not in classes:
                classes[i] = []
            if potent[0] not in classes:
                classes[potent[0]] = [i]
            else:
                classes[potent[0]] += [i]
    else:
        classes[potent] = []       
n = int(input())
for i in range(n):
    anc, heir = input().split()
    print('Yes' if parent(anc, heir, classes) else 'No') -End,"
 class LoggableList(list, Loggable):
    def append(self, value):
        super(LoggableList, self).append(value)
        super(LoggableList, self).log(value) -End,"
 def func(check: str, err: str):  # проверка необходимости вызова ошибки
    if err in backlog:  # проверка на наличие в backlog вызова ошибки
        return True
    if errors[err] is False:  # если мы дошли до верхней точки
        if err == check:
            backlog.add(check)  # добавляем в backlog, если эту ошибку мы и проверяем
        else:
            return  # делаем возврат для прохода в ширину
    for i in errors[err]:  # цикл для проверки всех предков
        if func(check, i):
            return True  # если где-нибудь в backlog встречалась ошибка-предок - функция возвращает True
    backlog.add(check)  # добавление ошибки в backlog, т.к. ничего из вышеперечисленного не было выполнено
backlog = set()  # множество вызванных функций
errors = {}  # граф ошибок-наследников и ошибок-предков
for i in range(int(input())):   # цикл, формирующий граф
    err = input()  # err - ошибки, из которых мы составляем граф
    if ':' in err:
        err = err.split()
        for j in err[2:]:
            if err[0] not in errors:
                errors[err[0]] = []
            errors[err[0]].append(j)
            if j not in errors:
                errors[j] = []
    else:
        errors[err] = []
for i in range(int(input())): # цикл проверки необходимости вызова ошибки
    err_str = input()
    if func(err_str, err_str):
        print(err_str) -End,"
 class NonPositiveError(Exception):
    pass

class PositiveList(list):
    def append(self, x):
        if x <= 0:
            raise NonPositiveError(str(x) + ' is less/equal zero')
        else:
            super(PositiveList, self).append(x) -End,"
 from datetime import *

def is_leap(year):
    ""year -> 1 if leap year, else 0.""
    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)
    
MAX_MONTH = 12
days_in_month = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}

year, month, day = [int(i) for i in input().split()]

if is_leap(year):
    days_in_month[2] = 29
    
add_day = int(input())
x, y, z = date(year, month, day), timedelta(day), timedelta(add_day)
y += z

while y.days > days_in_month[month]:
    y -= timedelta(days_in_month[month])
    month += 1
    if month > MAX_MONTH:
        month -= MAX_MONTH
        year += 1
    if is_leap(year):
        days_in_month[2] = 29
    else:
        days_in_month[2] = 28
        
else:
    x = '{} {} {}'.format(year, month, y.days)
print(x) -End,"
 class multifilter:
    def judge_any(pos, neg):
        return True if pos >= 1 else False


    def judge_half(pos, neg):
        return True if pos >= neg else False


    def judge_all(pos, neg):
        return True if neg == 0 else False

    
    def __init__(self, iterable, *funcs, judge=judge_any):
        self.prev, self.f, self.j = iterable, funcs, judge
        self.res = []
        for i in self.prev:
            pos = neg = 0
            for j in self.f:
                if j(i):
                    pos += 1
                else:
                    neg += 1
            if self.j(pos, neg):
                self.res.append(i)


    def __iter__(self):
        self.board = 0
        return self


    def __next__(self):
        self.board += 1
        if self.board > len(self.res):
            raise StopIteration
        return self.res[self.board-1] -End,"
 def primes():
    n, primes = 7, [2, 3, 5, 7]
    for i in primes:
        yield i
    while True:
        n += 1
        for i in primes:
            if n % i == 0:
                break
        else:
            primes.append(n)
            yield n -End,"
 mod_checker = lambda x, mod = 0: lambda y: y%x==mod -End,"
 s = input()
a = input()
b = input()
count = 0
while True:
    if a in s:
        s = s.replace(a, b)
        count += 1
        if count > 1000:
            print('Impossible')
            break
    else:
        print(count)
        break -End,"
 s = input()
t = input()
count = 0
for i in range(len(s)):
    if s[i:i + len(t)] == t:
        count += 1
print(count) -End,"
 import sys
import re

pattern = r'cat'
for line in sys.stdin:
    line = line.rstrip()
    if len(re.findall(pattern, line)) >= 2:
        print(line) -End,"
 import sys
import re

pattern = r'\bcat\b'
for line in sys.stdin:
    if re.search(pattern, line):
        print(line.strip()) -End,"
 import sys
import re

for line in sys.stdin:
    if re.search(r'\b(\w+)\1\b', line):
        print(line.strip())
        -End,"
 import sys
import re

for line in sys.stdin:
    print(re.sub(r'(\w)(\w)(\w*)?', r'\2\1\3', line.strip())) -End,"
 import sys
import re

for line in sys.stdin:
    print(re.sub(r'(\w)(\1+)', r'\1', line.strip()))
 -End,"
 import re
import requests as r

work = r.get(input()).text
pattern = re.compile(r'<a.*href=[\'\""]\w*?[:/]*([\w-]+\.[\w.-]*).*>')
resp = sorted(list(set(pattern.findall(work))))
print('\n'.join(resp))
 -End,"
 values = {'6': 1, '7': 2, '8': 3,
          '9': 4, 'T': 5, 'J': 6,
          'Q': 7, 'K': 8, 'A': 9
          }
card_check = input().split()
for i in card_check:
    if '10' in i:
        card_check[card_check.index(i)] = 'T' + i[2]
first, second = card_check
trump = input()
if trump not in first and trump not in second:
        if first[1] == second[1] and first[0] != second[0]:
            print('First' if values[first[0]] > values[second[0]] else 'Second')
        else:
            print('Error')
else:
    if trump in first and trump in second:
        if first[0] != second[0]: 
            print('First' if values[first[0]] > values[second[0]] else 'Second')
        else:
            print('Error')
    elif trump in first:
        print('First')
    else:
        print('Second')
             -End,"
 import json

tmp_dict = {}
tmp_dict2 = {}

def rec_func(cl, check):
    if cl in tmp_dict[check]:
        return True
    elif tmp_dict[check] == []:
        return None
    for i in tmp_dict[check]:
        if rec_func(cl, i):
            return True


data = json.loads(input())
for cl in data:
    name, val = cl.values()
    tmp_dict[name] = val
for i in tmp_dict:
    cur_count = 1
    for check in tmp_dict:
        if i == check:
            continue
        else:
            if rec_func(i, check):
                cur_count += 1
    tmp_dict2[i] = cur_count
tmp_dict2 = sorted(tmp_dict2.items(), key = lambda x: x[0])
for name, count in tmp_dict2:
    print(f'{name} : {count}') -End,"
 import re
line = input()
pattern = r'(\d+\D)|(\D)'
match = re.findall(pattern, line)
print(''.join([int(k[:-1]) * k[-1] if v == '' else v for k, v in match])) -End,"
 def caesar_cipher(shift: int, line: str):
    symbols = ' abcdefghijklmnopqrstuvwxyz'
    pos_bord, neg_bord = 27, -27
    encode = ''
    for i in line.strip():
        new_ind = symbols.index(i) + shift
        while new_ind >= pos_bord:
            new_ind -= pos_bord
        while new_ind <= neg_bord:
            new_ind -= neg_bord
        encode += symbols[new_ind]
    return f'Result: ""{encode}""'

print(caesar_cipher(int(input()), input())) -End,"
 import xml.etree.ElementTree as ET
colors_dict = {'red': 0, 'green': 0,  'blue': 0}

def color_val(color, val=1):
    colors_dict[color.attrib['color']] += val
    val += 1
    for i in color:
        color_val(i, val)
        
root = ET.fromstring(input())
color_val(root)
r, g, b = colors_dict.values()
print(r, g, b, sep=' ') -End,"
 appr = ('A', 'B', 'C', 'D', 'F')
marks = dict.fromkeys(appr, 0)
appr_list = input().split()
for mark in appr_list:
    marks[mark] += 1
res = marks['A'] / len(appr_list)
print('%.2f' % res) -End,"
 from collections import Counter
words = Counter()
for word in input().split():
    words[word.lower()] += 1
for k, v in words.items():
    print(k, v) -End,"
 def f(x):
    if x <= -2:
        return 1 - (x + 2)**2
    elif x > 2:
        return (x - 2)**2 + 1
    else:
        return -(x/2)




 -End,"
 import re 
pattern = re.compile(r'((\w)\2*)')


def code(line):
    temp = [i[0] for i in pattern.findall(line)]
    return ''.join([f'{len(i)}{i[0]}' if len(i) > 1 else i for i in temp])

print(code(input())) -End,"
 # put your python code here
a = int(input())
if a < 0:
    print(""Введите натуральное число"")
elif (11 <= a % 100 <=19) or (a % 10 == 0) or (5 <= a % 10 <= 9):
    print(a, 'программистов')
elif (a % 10 == 1):
    print(a, 'программист')
elif (2 <= a % 10 <= 4):
    print(a, 'программиста')



 -End,"
 # put your python code here
i = 0
while i <= 100:
    i = int(input())
    if i < 10:
        continue
    if i > 100:
        break
    print(i)



 -End,"
 # put your python code here
a=int(input())
b=int(input())
c=int(input())
d=int(input())
f=a
print(' ',end='\t')
for k in range(c,d+1):
    print(k,end='\t')
print('')
while f<=b:
    for i in range(a,b+1):
        print(f,end='\t')
        for j in range(c,d+1):
            print(i*j, end='\t')
        print('')
        f +=1



 -End,"
 # put your python code here
s = input()
i = 0
qty = 1
list = []
while i < len(s):
    if i == len(s) - 1:
        list.append(s[i]+str(qty))
    elif s[i] == s[i + 1]:
        qty += 1
    else:
        list.append(s[i]+str(qty))
        qty = 1
    i += 1
answer = ''.join(list)
print(answer)
 -End,"
 # put your python code here
a = [int(i) for i in input().split()]
sums = []
i = 0
if len(a) == 1:
    sums = a
else:
    while i < len(a):
        if i == len(a) - 1:
            sums.append(int(a[i-1] + a[0]))
        else:
            sums.append(int(a[i-1] + a[i+1]))
        i += 1
for e in sums:
    print(e, end = ' ')

 -End,"
 # put your python code here
a = [int(i) for i in input().split()]
a.sort()
repeated = []
x = 0
if len(a) == 1:
    print() #если только одно число, ничего не выводится
else:
    for e in a:
        x += 1 #счетчик, чтобы сравнивать числа только справа от переменной
        if x == len(a):
            break #если прошли все числа, больше сравнивать не нужно
        elif e in repeated:
            continue #если число уже в списке повторяющихся, больше его проверять не нужно
        else:
            j = a[x] #число с индексом на один больше индекса переменной, которую мы сравниваем
            if e == j:
                repeated.append(e) #если переменная и следующая равны (а у нас числа отсортированы по возрастанию), то добавляем переменную в список повторяющихся
    for e in repeated:
        print(e, end = ' ')



 -End,"
 # put your python code here
a = int(input())
b = a
c = a ** 2
while b != 0:
    a = int(input())
    b += a
    c += a ** 2
print(c)
 -End,"
 # put your python code here
a = int(input())
count = 0
for i in range(1,a+1):
    if count < a:
        for e in range(i):
            if count < a:
                print(i, end=' ')
                count += 1
            else:
                break
    else:
        break
 -End,"
 # put your python code here
a = [int(i) for i in input().split()]
e = int(input())
count = 0
if e not in a:
        print('Отсутствует')
else:
    for i in a:
        if i == e:
            print(count, end=' ')
        count += 1



 -End,"
 # put your python code here
a = []
j = input()
while j != 'end':
    j = [int(i) for i in j.split()]
    a.append(j)
    j = input() #приходится вызывать ввод новых значений в цикле, чтобы проверять, нет ли end
qty_line = len(a) #длина строки
qty_col = len(a[0])#длина столбца. Есть другой способ?
b = [[0 for j in range(qty_col)] for i in range(qty_line)]#новая матрица для результатов, того же размера, что и а
for i in range(qty_line):
    for j in range(qty_col):
        b[i][j] = a[i-1][j] + a[i - qty_line + 1][j] + a[i][j-1] + a[i][j - qty_col +1]
#чтобы не получалось ошибок с правыми и нижними клетками, их индексы считаем как индекс вычисляемой клетки-длина строки+1
for i in range(qty_line):
    for j in range(qty_col):
        print(b[i][j], end=' ')
    print()



 -End,"
 # put your python code here
a=input()
a=a.lower()
b=a.split()
dictionary={}
for i in b:
    if i not in dictionary:
        c = b.count(i)
        dictionary[i] = c
for i in dictionary:
    print(i,dictionary[i])



 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
n=int(input())
dictionary = {}
i = 0
while i < n:
    x = int(input())
    if x in dictionary:
        print(dictionary[x])
    else:
        b = f(x)
        print(b)
        dictionary[x] = b
    i += 1



 -End,"
 # put your python code here
alphabet = [(i) for i in input()]
code = [(i) for i in input()]
dictionary = {}
for i in range(len(alphabet)):
    dictionary[alphabet[i]] = code[i]

message_to_encode = [(i) for i in input()]
message_encoded = []
for i in message_to_encode:
    #j = dictionary[i]
    message_encoded.append(dictionary[i])

message_to_uncode = [(i) for i in input()]
message_uncoded = []
for i in message_to_uncode:
    for key, value in dictionary.items():
        if i == value:
            message_uncoded.append(key)
print(''.join(str(i) for i in message_encoded))
print(''.join(str(i) for i in message_uncoded))



 -End,"
 # put your python code here
dictionary = []
for i in range(int(input())):
    j = input().lower()
    dictionary.append(j)

text = []
for i in range(int(input())):
     j = input().lower().split()
     for l in j:
         text.append(l)

errors = []
for i in text:
    if (i not in errors and i not in dictionary):
        errors.append(i)
for i in errors:
    print(i)



 -End,"
 a, b, c = input()
a, b, c = int(a), int(b), int(c)
print(a + b, b + c, sep='')




 -End,"
 n = int(input())
count = 1
while n >= 10:
    n = n // 10
    count += 1
print(count)




 -End,"
 a, b = int(input()), int(input())
sum = 0
count = 0
if a % 3 == 1:
    a += 2
elif a% 3 == 2:
    a += 1
for i in range(a, b + 1, 3):
    sum += i
    count += 1
print(sum / count)




 -End,"
 n = ''
summa = 0
while n != 0:
    n = int(input())
    if n % 6 == 0 and n % 10 == 4:
        summa += n
print(summa)



 -End,"
 n = int(input())
min_30 = False
max_speed = 0
for i in range(n):
    i = round(float(input()))
    if i < 30:
        min_30 = True
    if i > max_speed:
        max_speed = i
print(max_speed)
if min_30 == False:
    print('NO')
else:
    print('YES')




 -End,"
 n = int(input())
count_30 = 0
max_speed = 0
min_speed = 301
for i in range(n):
    i = round(float(input()))
    if i <= 30:
        count_30 += 1
    if i > max_speed:
        max_speed = i
    if i < min_speed:
        min_speed = i
print(max_speed - min_speed)
print(count_30)




 -End,"
 n = int(input())
count_div3 = 0
count = 0
while n != 0:
    count += 1
    if n % 2 != 0 and n % 3 == 0:
        count_div3 += 1
    n = int(input())
print(count, count_div3, sep='\n')




 -End,"
 n = int(input())
max_mark = 0
zero_answers = False
for i in range(n):
    i = int(input())
    if i == 0:
        zero_answers = True
    if i > max_mark:
        max_mark = i
print(max_mark)
if zero_answers == True:
    print('YES')
else:
    print('NO')

 -End,"
 def example (x):
    if x <= -2:
        n = 1 - (x+2) ** 2
    elif -2 < x <= 2:
        n = -x / 2
    elif x > 2:
        n = (x-2) ** 2 + 1
    return n

a = example(float(input()))
print(a)




 -End,"
 def factorial(n):
    if n == 1:
        s = 1
    elif n > 1:
        s = factorial(n-1)*n
    return s
print(factorial(int(input())))




 -End,"
 a = []
for i in range(5):
    r = int(input())
    a.append(r)
for i in range(len(a)):
    a[i] = a[i] ** 2
print(' '.join(str(i) for i in (a)))




 -End,"
 a = []
s = 0
p = int(input())
for i in range(p):
    i = int(input())
    a.append(i)
    s += i
print(s / len(a))




 -End,"
 n = int(input())
m = 0
dat = input().split()
dat = list(map(int, dat))
for i in dat:
    if i < 8:
        m += 1
print(m)




 -End,"
 n = int(input())
sum = 0
days_above_av = 0
dat = input().split()
dat = list(map(int, dat))
for i in (dat):
     sum += i
average = sum / len(dat)
for i in (dat):
    if i >= average:
       days_above_av += 1
print(days_above_av)




 -End,"
 a = input().split()
a = list(map(int, a))
summa = 0
for i in a:
    summa += i
print(summa)




 -End,"
 def search (x, a):
    i = 0
    while i < len(a):
        answer = ''
        if a[i] == x:
            answer = i
            return answer
            break
        else:
            i += 1
    if answer == '':
        return -1
b = [3, 4, 2, 1, 0, 7, 8]
print(search(int(input()), b))





 -End,"
 def max_min(spisok):
    maximum = spisok[0]
    minimum = spisok[0]
    for i in range(1, len(spisok)):
        if spisok[i] > maximum:
            maximum = spisok[i]
        if spisok[i] < minimum:
            minimum = spisok[i]
    return minimum, maximum
a = [3, 5, 65, 67, 4, 2, 3, 6, 9, -10, -27, 6, 0, 8]
b = max_min(a)
for i in b:
    print(i)




 -End,"
 a = [int(input()) for i in range(3)]
sum = 0
for i in a:
    if i % 2 == 0:
        sum = sum + i // 2
    elif i % 2 == 1:
        sum = sum + i // 2 + 1
print(sum)





 -End,"
 a, b, n = (int(input()) for i in range(3))
price = a * 100 + b
cost = price * n
print(cost // 100, cost % 100)




 -End,"
 a = input()
i = 0
j = len(a) - 1
answer = True
while i < (len(a) // 2):
    if a[i] != a[j]:
        answer = False
    i += 1
    j -= 1
print('YES' if answer == True else 'NO')




 -End,"
 p, x, y = (int(input()) for i in range(3))
vklad = x * 100 + y
cherez_god = int(vklad + vklad / 100 * p)
print(cherez_god // 100, cherez_god % 100)




 -End,"
 i = int(input())
sum = 0
max = 0
while i != 0:
    sum += i
    if max < i:
        max = i
    i = int(input())
print(sum, max, sep='\n')




 -End,"
 a = [170, 175, 166, 180, 167, 189, 150]
a.sort(reverse=True)
b = []
for i in range(1, len(a), 2):
    b.append(a[i])
for i in b:
    print(i)




 -End,"
 a = input()
name = a[0:4]
year = int(a[7:11])
if year > 2000:
    print('Привет, ' + name + '! Ждем тебя на первой секции (дети)')
elif 1983 <= year <= 2000:
    print('Привет, ' + name + '! Ждем тебя на второй секции (молодежь)')
else:
    print('Привет, ' + name + '! Ждем тебя на третьей секции')





 -End,"
 a = int(input())
vsego = 1
priletelo = 1
nakormleno = 0
while a > 0:
    a -= vsego
    nakormleno = vsego
    priletelo += 1
    if a <= vsego:
        break
    elif vsego < a <= vsego + priletelo:
        nakormleno = a
        break
    else: vsego = vsego + priletelo
print(nakormleno)




 -End,"
 a = input()
b = input()
if (a != 'rock' and a != 'paper' and a != 'scissors') or\
        (b != 'rock' and b != 'paper' and b != 'scissors'):
    print('Invalid input! You have not entered rock, paper or scissors, try again.')
elif a == b:
    print(""It's a tie!"")
elif (a == 'rock' and b == 'scissors') or (b == 'rock' and a == 'scissors'):
    print('Rock wins!')
elif (a == 'scissors' and b == 'paper') or (b == 'scissors' and a == 'paper'):
    print('Scissors win!')
elif (a == 'rock' and b == 'paper') or (b == 'rock' and a == 'paper'):
    print('Paper wins!')




 -End,"
 from math import sqrt
def fibo(n):
    if sqrt(5 * (n ** 2) - 4) % 1 == 0 or \
            sqrt(5 * (n ** 2) + 4) % 1 == 0:
        return True
    else:
        return False

a = [10000, 9999]
for i in range(2, 5001):
    if fibo(i) == True:
        a.append(a[i-1] - i)
    elif fibo(i) == False:
        a.append(a[i-1] + 1)
print(a.index(int(input())))




 -End,"
 ans = 0
b_id = []
for obj in objects:
    b_id.append(id(obj))
c = set(b_id)
print(len(c))





 -End,"
 # put your python code here
def soch(n, k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    elif n == k:
        return 1
    else:
        return soch(n-1, k) + soch(n-1, k-1)

n, k = map(int, input().split())
print(soch(n, k))



 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.cap = capacity
        
    def can_add(self, v):
        if self.cap - v >= 0:
            return True
        else:
            return False

    def add(self, v):
        self.cap -= v




 -End,"
 class Buffer:
    def __init__(self):
        self.count = []
        

    def add(self, *a):
        for i in a:
            self.count.append(i)
            if len(self.count) == 5:
                print(sum(self.count))
                self.count = []


    def get_current_part(self):
        return (self.count) -End,"
 # put your python code here
year = int(input())
ves_years = [ves_year for ves_year in range(1900, 3001, 4) if ves_year % 4 == 0 and ves_year % 100 !=0 or ves_year % 400 ==0 ]
if year in ves_years:
    print('Високосный')
else:
    print('Обычный') -End,"
 a = float(input())
b = float(input())
znak = input()
if znak == '+':
    print(a + b)
elif znak == '-':
    print(a - b)
elif znak == '*':
    print(a * b)
elif znak == '/':
    try:
        print(a / b)
    except ZeroDivisionError:
        print('Деление на 0!')
        
elif znak == 'mod':
    try:
        print(a % b)
    except ZeroDivisionError:
        print('Деление на 0!')
elif znak == 'pow':
    print(a ** b)
    
elif znak == 'div':
     try:
        print(a // b)
     except ZeroDivisionError:
        print('Деление на 0!')
 -End,"
 men = int(input())
if men % 10 == 1 and men % 100 != 11:
    word = 'программист'
elif men % 10 in (2, 3, 4) and (men % 100 <10 or men % 100 > 20):
    word = 'программиста'
else:
    word = 'программистов'
print(str(men), word) -End,"
 summ = 0
while True:
    num = int(input())
    if num == 0:
        break
    summ += num
print(summ) -End,"
 a = int(input())
b = int(input())
#записываем первоначальные значения a и b
d = a
e = b
#находим НОД по алгоритму Евклида
c = 1 #определяем с чтобы цикл сработал первый раз
while c != 0:
    c = a % b
    a = b
    b = c
nod = a
#вычисляем НОК из найденного НОДа
nok = d * e / nod
#по условиям задачи вывод должен быть целым числом
print(int(nok)) -End,"
 num = 0
while True:
    num = int(input())
    if num >100:
        break
    if num < 10:
        continue
    else:
        print(num) -End,"
 a = int(input())
b = int(input())
c = int(input())
d = int(input())
print('\t', end='')
for j in range(c, d+1):
    print(j, end='\t')
print()
for i in range(a, b + 1):
    print(i, end='\t')
    for j in range(c, d+1):
        print(j * i, end='\t')
    print() -End,"
 a = int(input())
b = int(input())
while a % 3 != 0:
    a += 1
while b % 3 != 0:
    b -= 1
print((a+b)/2) -End,"
 string = input() 
a = 1           #счётчик одинаковых символов
res_string = '' #пустая строка где будем накапливать результат
for i in range(len(string)): #цикл для индексов от 0 до длинны строки
    #сравниваем два среза, если обращатся по индексам не включается последний
    #символ
    if string[i:i+1] == string[i+1:i+2]:
        a += 1   #если символы совпадают увеличивае счётчик
        continue #переходим к следующей итерации
    else: 
        res_string += string[i] + str(a) #добавляем символ и счётчик
        a = 1   #сбрасываем счётчик
print(res_string) #выводим результат -End,"
 st = [int(i) for i in input().split()]
print(sum(st)) -End,"
 st = [int(i) for i in input().split()]
res_string = []
if len(st) == 1:
    print(str(st[0]))
else:
    for i in range(len(st)-1): 
        res = st[i-1] + st[i+1]
        res_string.append(res)
    #костыль, куда же без него )))
    res_string.append(st[0] + st[len(st)-2])
    resalt = ' '.join(map(str,(res_string))) #преобразуем список в строку
    print(resalt) -End,"
 st = [i for i in input().split()] #вводимые числа сразу пишем в список
arr = set(st) #множество содержит только уникальные элементы 
res = [] #пустой список для хранения результата
for ar in arr:
    if st.count(ar) > 1: #если элемент в списке более 1 раза
        res.append(ar) #добавляем в результирующий список
#цикл для соответствия формату вывода
for re in set(res): #используем множество для отсечения повторяющихся элементов
    print(re, end=' ') -End,"
 s = 0
sq = 0
while True:
    num = int(input())
    s += num
    sq += num ** 2
    if s == 0:
        print(sq)
        break -End,"
 import sys #импортируем модуль sys
lim = int(input())
res = [] #здесь будем хранть результат
i = 0
while True:
    i += 1
    #добавляем i в список i раз
    for j in range(i):
        res.append(i)
        #проверка длинны списка
        if len(res) == lim: 
            print(*res) #вывод в строку через пробелы
            #список сформирован и выведен, завершаем программу
            sys.exit() -End,"
 import sys
lst = [int(i) for i in input().split()]
num = int(input())
if lst.count(num) == 0:
    print('Отсутствует')
    sys.exit() #завершаем программу если искомого числа нет в списке
for id, item in enumerate(lst):
    if item == num:
        print(id, end =' ') -End,"
 from copy import deepcopy 
matrix, raw = [], [] 
while True:
    raw = input()  
    if raw != 'end':
        raw = raw.split()
        raw = [int(i) for i in raw]
        r = len(raw)
        matrix.append(raw)
    else:
        break
res_matrix = deepcopy(matrix)
s = len(matrix)
for i in range(s):
    for j in range(r):
        res_matrix[i][j] = matrix[i-1][j] + matrix[i+1-s][j] + matrix[i][j-1] + matrix[i][j+1-r]
for raw in res_matrix:
    print(*raw) 
 -End,"
 def f(x):
    if x <= -2:
        a = 1 - (x + 2)**2
    elif x > -2 and x <= 2:
        a = -(x/2)
    else:
        a = (x - 2)**2 + 1
    return a -End,"
 def modify_list(l):
    """"""Удаляет все нечётные, чётные делит на 2""""""
    a = len(l)
    for i in range(len(l)):
        if l[i-a] % 2 == 1:
            l.remove(l[i-a])
    for i, num in enumerate(l):
        l[i] = num // 2 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key in d:
        d[key].append(value)
    elif key * 2 in d:
        d[key * 2].append(value)
    else:
        d[key * 2] = [value] -End,"
 strings = [i.lower() for i in input().split()]
for st in set(strings):
    print(st, strings.count(st))
 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
n = int(input()) #количество значений х
xs = [] #список для введённых х
fy = dict() #пустой словарь для значений функции
for i in range(n): #ввод аргументов функции
    x = int(input())
    xs.append(x) #добавляем в список аргументов
for x in set(xs): #вызываем функцию только для уникальных аргументов
    fy[x] = f(x) #сохранеем значения в словаре
#выводим значения функции для всех аргументов
for x in xs:  
    print(fy[x]) -End,"
 import math
r = float(input())
print(2 * r * math.pi) -End,"
 from sys import argv
print(*argv[1:])
 -End,"
 def encripter(dict_encripter, mess):
    """"""Шифрует строку""""""
    res_string = ''
    for id, item in enumerate(mess):
        for key, value in dict_encripter.items():
            if item == key:
                res_string += value
    return res_string

def decripter(dict_encripter, mess):
    """"""Расшифровывает строку""""""
    res_string = ''
    for id, item in enumerate(mess):
        for key, value in dict_encripter.items():
            if item == value:
                res_string += key
    return res_string
   
string = list(input())
capher = list(input())
need_to_encrypt = input()
need_to_decrypt = input()
dict_encripter = dict(zip (string, capher))
print(encripter(dict_encripter, need_to_encrypt))
print(decripter(dict_encripter, need_to_decrypt)) -End,"
 d = int(input())
words = []
strings = ''
for i in range(d):
    words.append(input().lower())
l = int(input())
for i in range(l):
    strings += input().lower() + ' '
string = strings.split()
for i in set(string):
    if i not in words:
        print(i) -End,"
 dif_obj = set()
for obj in objects: # доступная переменная objects
    dif_obj.add(id(obj))
print(len(dif_obj))
 -End,"
 def c_n_k(n, k):
    """"""Функция вычисляет число сочетаний из n по k""""""
    if k == 0:
        return 1
    elif n < k:
        return 0
    else:
        return c_n_k(n-1, k) + c_n_k(n-1, k - 1)
n, k = map(int, input().split())
print(c_n_k(n, k))
 -End,"
 class MoneyBox():
    """"""Класс имитирует поведение копилки""""""
    def __init__(self, capacity):
        """"""Инициирует копилку определяет ёмкость и текущее количество монет""""""
        self.capacity = capacity
        self.coin = 0
    def can_add(self, v):
        """"""True, если можно добавить v монет, False иначе""""""
        return self.coin + v <= self.capacity
    def add(self, v):
        """"""Кладёт v монет в копилку""""""
        self.coin += v -End,"
 class Buffer():
    def __init__(self):
        """"""Инициирует буфер""""""
        self.buff = []

    def add(self, *a):
        """"""
            добавить следующую часть последовательности и выводит
            сумму пятёрок
        """"""
        for i in a:
            self.buff.append(i)
            if len(self.buff) == 5:
                print(sum(self.buff))
                self.buff = []
    def get_current_part(self):
        """"""
            вернуть сохраненные в текущий момент элементы 
            последовательности в порядке, в котором они были добавлены
        """"""
        return self.buff -End,"
 def par_in_list(par, son):
    """"""Собирает всех родителей в один список""""""
    global mas
    try:
        mas += classes[son]
        for i in classes[son]:
            par_in_list(par, i)
    except:
        pass
mas, res = [], []
classes = {}
n = int(input())
for _ in range(n):
    string = input()
    if ':' in string:
        clas, parents = string.split(':')
        classes[clas.strip()] = set(parents.split())
    else:
        clas = string.strip()
        classes[clas] = {}
q = int(input())
for _ in range(q):
    par, son = input().split()
    if par == son:
        res.append('Yes')
        continue
    par_in_list(par, son)
    if par in set(mas):
        res.append('Yes')
        mas.clear()
    else:
        res.append('No')
        mas.clear()
for i in res:
    print(i)
 -End,"
 class ExtendedStack(list):
    def sum(self):
        # операция сложения
        top1 = self.pop()
        top2 = self.pop()
        self.append(top1 + top2)
    def sub(self):
        # операция вычитания
        top1 = self.pop()
        top2 = self.pop()
        self.append(top1 - top2)
    def mul(self):
        # операция умножения
        top1 = self.pop()
        top2 = self.pop()
        self.append(top1 * top2)
    def div(self):
        # операция целочисленного деления
        top1 = self.pop()
        top2 = self.pop()
        self.append(top1 // top2) -End,"
 class NonPositiveError(Exception):
    pass
class PositiveList(list):
    def append(self, a):
        if a > 0:
            list.append(self, a)
        else:
            raise NonPositiveError -End,"
 import datetime 
inp_day = datetime.datetime.strptime(input(), ""%Y %m %d"")
add_day = int(input())
delta = datetime.timedelta(days=add_day)
print((inp_day + delta).strftime(""%Y %-m %-d"")) -End,"
 class multifilter:
   
    def judge_half(pos, neg):
        # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)
        return pos >= neg
             
    def judge_any(pos, neg):
        # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)
        return pos >= 1
        
    def judge_all(pos, neg):
        # допускает элемент, если его допускают все функции (neg == 0)
        return neg == 0
        
    def __init__(self, iterable, *funcs, judge=judge_any):
        # iterable - исходная последовательность
        # funcs - допускающие функции
        # judge - решающая функция
        self.iterable = iterable
        self.judge = judge
        self.funcs = funcs
        
    def __iter__(self):
        # возвращает итератор по результирующей последовательности
        for i in self.iterable:
            pos, neg = 0, 0
            for foo in self.funcs:
                if foo(i):
                    pos += 1
                else:
                    neg += 1
            if self.judge(pos, neg):
                yield i -End,"
 def mod_checker(x, mod=0):
    """"""Возвращает лямбда функцию""""""
    return lambda y: y % x == mod
mod_3 = mod_checker(3)




 -End,"
 from sys import exit
s, a, b = input(), input(), input()
if a in b and a in s:
    print('Impossible')
    exit(0)
ans = 0
while True:
    if a in s:
        s = s.replace(a, b)
        ans += 1
    else:
        print(ans)
        break -End,"
 s, t = input(), input()
ans = 0
for i in s:
    if s.startswith(t):
        ans += 1
    s = s[1:]
print(ans) -End,"
 import re
import sys
for line in sys.stdin:
    line = line.strip()
    line = re.sub(""human"", ""computer"", line)
    print(line) -End,"
 import re
import sys
for line in sys.stdin:
    line = line.strip()
    line = re.sub(r""\b(\w)(\w)"", r""\2\1"", line)
    print(line) -End,"
 import requests
import re
a, b = input(), input()
res = requests.get(a)
res = str(res.content)
hrefs = re.findall(r'href=[\'""]?([^\'"" >]+)', res)
href = []
for i in hrefs:
    res = requests.get(i)
    href.append(str(res.content))
for i in href:
    if b in i:
        ans = 'Yes'
        break
    else:
        ans = 'No'
print(ans) -End,"
 import requests
import re
url = input()
res = requests.get(url)
res = str(res.content)
hrefs = re.findall(r'(?:<a.+?href=""\w+://)(\w+.+?)(?:[/|:|\""])', res)
ans = list(set(hrefs))
ans.sort()
for i in ans:
    print(i) -End,"
 def par_in_list(par, son):
    """"""Собирает всех родителей в один список""""""
    global mas
    try:
        mas += child_dict[son]
        for i in child_dict[son]:
            par_in_list(par, i)
    except:
        pass

import json
pars_string = json.loads(input())
class_dict = {}
child_dict = {}
mas = []
for i in pars_string:
    class_dict[i['name']] = i[""parents""]
# формируем словарь с детьми, сначала создаём пустые списки
for key in class_dict.keys():
    child_dict[key] = []
# в списки заносем дочерние классы, словарь родители: [дети]
for k in child_dict.keys():
    for key, val in class_dict.items():
        if k in val:
            child_dict[k].append(key)
res = {}
for i in child_dict.keys():
    mas.clear()
    for j in child_dict.keys():
        par_in_list(j, i)
        res[i] = list(set(mas))
keyses = list(child_dict.keys())
keyses.sort()
for i in keyses:
    print(i, ':', str(len(res[i]) + 1)) -End,"
 from xml.etree import ElementTree
def get_score(root, level):
    """""" 
        Рекурсивная функция обходет дерево, 
        плюсует в словарь уровень вложения
    """"""
    level += 1
    for i in root:
        colors[i.attrib['color']] += level
    for i in root:
        get_score(i, level)
root = ElementTree.fromstring(input())
colors = {'red': 0, 'green': 0, 'blue': 0}
level = 1
colors[root.attrib['color']] += level
get_score(root, level)
print(colors['red'], colors['green'], colors['blue']) -End,"
 import torch

w = torch.tensor([[5., 10.],
                 [1., 2.]], requires_grad=True) # put our code here
alpha = 0.001
optimizer = torch.optim.SGD([w], lr = alpha)
def function_prod(var):
    return (var + 7).log().log().prod()

def make_gradient_step(function, w):
    function_rez = function(w)
    function_rez.backward()
    optimizer.step()
    optimizer.zero_grad()
    
for _ in range(500):
    make_gradient_step(function_prod, w)
print(w) -End,"
 import random
for i in range(11):
    random.seed(i)
    a = random.randint(0, 10) 
    if a == 5:
        print(a)




 -End,"
 roomType = input()
par1 = float(input())
if roomType == 'круг':
    print(3.14*par1**2)
else:
    par2 = float(input())
    if roomType == 'прямоугольник':        
        print(par1*par2)
    else:
        par3 = float(input())
        if roomType == 'треугольник':  
            p = (par1 + par2 + par3)/2
            print((p*(p-par1)*(p-par2)*(p-par3))**0.5) -End,"
 figures = [int(input()),int(input()),int(input())]
i = 0 
n = len(figures)
while i < n-1: 
    j = i+1
    while j < n:
        if figures[j] > figures[i]:
            buf = figures[i]
            figures[i] = figures[j]
            figures[j] = buf            
        j += 1
    i += 1
print(figures[0])
print(figures[n-1])
print(figures[1])
 -End,"
 endings = ['','ов','а']
prgCountStr = '0' + input()
lastFig = int(prgCountStr[-1:])
prevFig = int(prgCountStr[-2:-1])
if prevFig == 1:
	endingInd = 1
else:
	if lastFig == 1:
		endingInd = 0
	elif 2<= lastFig <=4:
		endingInd = 2
	else:
		endingInd = 1
print(prgCountStr[1:], 'программист' + endings[endingInd])

 -End,"
 a = int(input())
b = int(input())
ab = a*b
k = a%b
while (k != 0):
    a = b
    b = k 
    k = a%b
print(int(ab/b)) -End,"
 outStr = ''
while (True):
    a = int(input())
    if 10 <= a <=100:
        outStr += str(a) + '\n'
    elif a>100:
        break
print(outStr) -End,"
 DNA = input()
encDNA = ''
pc = DNA[0:1]
count = 1
for c in DNA[1:]:
    if c != pc:
        encDNA += pc + str(count)
        count = 1
    else:
        count += 1
    pc = c
encDNA += pc + str(count)
print(encDNA) -End,"
 figures = list(int(s) for s in input().split())
if len(figures) == 1:
    print(figures[0])
else:
    figures = [figures[-1]] + figures + [figures[0]]
    for i in range(1, (len(figures)-1)):
        print((figures[i-1] + figures[i+1]), end = ' ') -End,"
 figures = sorted((int(i) for i in input().split()))
uniques = []
for i in range(1,len(list(figures))):
    if figures[i-1] == figures[i] and figures[i] not in uniques:
        uniques.append(figures[i])
for i in uniques: print(i, end=' ') -End,"
 summ = 0
arr = []
while True:
    dgt = int(input())
    arr.append(dgt)
    summ += dgt
    if summ == 0:
        break
for d in arr:
    summ += d**2
print(summ) -End,"
 cur_dgt = 1
n = 1
for i in range(int(input())):
    if n < (i+1):
        cur_dgt += 1
        n = cur_dgt*(cur_dgt+1)/2
    print(cur_dgt, end=' ') -End,"
 lst = input().split()
x = input()
fl = False
for i in range(len(lst)):
    if lst[i] == x:
        print(i, end = ' ')
        fl = True
if not fl: print('Отсутствует') -End,"
 input_row = input()
matrix = []
out_matrix = []
while input_row != 'end':
    matrix.append([int(i) for i in input_row.split()])
    input_row = input()
n = len(matrix)
for i in range(n):
    buf_arr = []
    m = len(matrix[i])
    for j in range(m):
        buf_arr.append(matrix[i-1][j] +  
        	           matrix[i][j-1] + 
        	           matrix[(n + i + 1)%n][j] +
        	           matrix[i][(m + j + 1)%m])
    out_matrix.append(buf_arr)
for mi in out_matrix:
    for mj in mi:
        print(mj, end=' ')
    print() -End,"
 count = int(input())
in_values = list()
processed = dict()
i = 0
while i < count:
    in_values.append(int(input()))
    if in_values[i] not in processed:
        processed[in_values[i]] = f(in_values[i])       
    i += 1
for value in in_values:
    print(processed[value]) -End,"
 n = int(input())
statistic = {'Games':0,'Win':0,'Draw':0,'Lose':0,'Score':0}
teams = dict()
for i in range(n): 
    in_data = input().split(';')
    if in_data[0] not in teams:
        teams[in_data[0]] = dict(statistic)
    if in_data[2] not in teams:
        teams[in_data[2]] = dict(statistic)
    teams[in_data[0]]['Games'] += 1
    teams[in_data[2]]['Games'] += 1
    if int(in_data[1]) > int(in_data[3]):
        teams[in_data[0]]['Win'] += 1
        teams[in_data[2]]['Lose'] += 1
        teams[in_data[0]]['Score'] += 3
    elif int(in_data[1]) < int(in_data[3]):
        teams[in_data[2]]['Win'] += 1
        teams[in_data[0]]['Lose'] += 1
        teams[in_data[2]]['Score'] += 3
    else:
        teams[in_data[2]]['Draw'] += 1
        teams[in_data[0]]['Draw'] += 1
        teams[in_data[2]]['Score'] += 1
        teams[in_data[0]]['Score'] += 1
for team, stat in teams.items():
    print(team + ':',end='')
    print(stat['Games'],stat['Win'],stat['Draw'],stat['Lose'],stat['Score']) -End,"
 alphabet, cypher = input(), input()
encode = {alphabet[i]:cypher[i] for i in range(len(alphabet))}
decode = {cypher[i]:alphabet[i] for i in range(len(cypher))}
encode_str, decode_str = '',''
for s in input(): encode_str += encode[s]
for s in input(): decode_str += decode[s]
print(encode_str)
print(decode_str) -End,"
 d = int(input())
dictionary = [input().lower() for i in range(d)]
l = int(input())
words = []
for i in range(l): words += input().lower().split()
for t in set(words): 
    if t not in dictionary: print(t) -End,"
 n = int(input())
commands = [input() for i in range(n)]
coord = {'x':0, 'y':0}
for c in commands:
    cmd_dtl = c.split()
    if cmd_dtl[0] == 'север':
        coord['y'] += int(cmd_dtl[1])
    elif cmd_dtl[0] == 'юг':
        coord['y'] -= int(cmd_dtl[1])
    elif cmd_dtl[0] == 'восток':
        coord['x'] += int(cmd_dtl[1])
    elif cmd_dtl[0] == 'запад':
        coord['x'] -= int(cmd_dtl[1])
print(coord['x'], coord['y']) -End,"
 print(sum([int(input()) for j in range(int(input()))]))
 -End,"
 def c(n, k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    else:
        return c(n-1,k) + c(n-1,k-1)
n, k = map(int, input().split())
print(c(n,k)) -End,"
 def create_namespace(name, parent=''):
    return {name: {'vars':[], 'parent':parent}}

instructs = [input().split() for i in range(int(input()))]
namespaces = create_namespace('global')
for ins in instructs:
    cmd, nms, var = ins[0], ins[1], ins[2]
    if cmd == 'create':
        namespaces.update(create_namespace(nms,var))
    elif cmd == 'add':        
        namespaces[nms]['vars'].append(var)
    elif cmd == 'get': 
        cur_nms, ans = nms, 'None'
        while cur_nms in namespaces:
            if var in namespaces[cur_nms]['vars']:
                ans = cur_nms
                break
            else:
                cur_nms = namespaces[cur_nms]['parent']
        print(ans) -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.money = 0
    def can_add(self, v):
        if (self.money + v) <= self.capacity:
            return True
        return False
    def add(self, v):
        self.money += v -End,"
 class Buffer:
    def __init__(self):
        self.content = []
        self.limit = 5

    def add(self, *a):
        temp_content = self.content + list(a)
        i, l = 0, self.limit
        n = len(temp_content)//l
        while i<n:
            print(sum(temp_content[i*l:(i*l+l)]))
            i +=1
        self.content = temp_content[n*l:]
        
    def get_current_part(self):
        return self.content -End,"
 def is_ancestor(cls_anc, cls_dsp, classes):
    if cls_anc in classes[cls_dsp] or cls_anc == cls_dsp:
        return 'Yes'
    else:
        for cls in classes[cls_dsp]:
            if is_ancestor(cls_anc, cls, classes) == 'Yes': return 'Yes'
    return 'No'
            
inh_data = [input().replace(':','').split() for i in range(int(input()))]
qry_data = [input().split() for i in range(int(input()))]
classes = {}
for elm in inh_data:
    classes[elm[0]] = []
    for i in range(1,len(elm)):
        classes[elm[0]].append(elm[i])
for elm in qry_data:
    print(is_ancestor(elm[0],elm[1],classes)) -End,"
 class ExtendedStack(list):
    def sum(self):
        self.append(self.pop() + self.pop())

    def sub(self):
        self.append(self.pop() - self.pop())

    def mul(self):
        self.append(self.pop() * self.pop())

    def div(self):
        self.append(self.pop() // self.pop()) -End,"
 class LoggableList(list, Loggable):
    def append(self, obj):
        super().append(obj)
        self.log(obj) -End,"
 def is_ancestor(cls_anc, cls_dsp, classes):
    if cls_anc in classes[cls_dsp] or cls_anc == cls_dsp:
        return True
    else:
        for cls in classes[cls_dsp]:
            if is_ancestor(cls_anc, cls, classes): return True
    return False
            
inh_data = [input().replace(':','').split() for i in range(int(input()))]
qry_data = [[input(), True] for i in range(int(input()))]
classes = {}
for elm in inh_data:
    classes[elm[0]] = []
    for i in range(1,len(elm)):
        classes[elm[0]].append(elm[i])  
if len(qry_data) > 1:    
    for i in range((len(qry_data)-1),0,-1):
        for j in range(i-1, -1,-1):
            if is_ancestor(qry_data[j][0],qry_data[i][0], classes):
                qry_data[i][1] = False
                break
[print(elm[0]) for elm in qry_data if elm[1] == False] -End,"
 class multifilter:
    def judge_half(pos, neg):
        if pos >= neg: return True
        return False

    def judge_any(pos, neg):
        if pos >= 1: return True
        return False

    def judge_all(pos, neg):
        if neg == 0: return True
        return False

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.source = iterable
        self.filtered = []        
        for item in iterable:
            pos, neg = 0, 0
            for func in funcs:
                if func(item) == True:
                    pos +=1
                else:
                    neg +=1
            if judge(pos,neg) == True:
                self.filtered.append(item)
                
    def __iter__(self):
        for item in self.filtered: yield item -End,"
 def primes():
    i = 2
    while True:
        count = 0        
        for j in range(1,(i+1)):
            if i%j == 0:
                count += 1
        if count == 2: yield i
        i += 1 -End,"
 s, a, b = [input() for _ in range(3)]
buf_str, count = '', -1
if a in b and a in s:
    print('Impossible')
else:
    while buf_str != s:
        buf_str = s
        s = s.replace(a,b)
        count += 1
    print(count) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.match('(.*cat.*){2,}',line): 
        print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.match(r'.*\bcat\b.*',line): 
        print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.match(r'.*z.{3}z.*',line): 
        print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.match(r'.*\\+.*',line): 
        print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.match(r'\b(\w{1,})\1\b',line): 
        print(line) -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()    
    print(re.sub(r'human','computer', line)) -End,"
 import sys
import re

for line in sys.stdin:
    print(re.sub(r'\ba+\b','argh',line.rstrip(), 1, re.IGNORECASE)) -End,"
 import sys
import re

def repl_func(matchobj):
    return matchobj.group(0)[::-1]

for line in sys.stdin:   
    print(re.sub(r'\b\w{2}',repl_func,line.rstrip())) -End,"
 import sys
import re

for line in sys.stdin:
    print(re.sub(r'((\w)(\2)+)','\g<2>',line.rstrip())) -End,"
 import re
import sys

for line in sys.stdin:
    if re.match(r'^(1(01*0)*1|0)*$',line.rstrip()): 
        print(line.rstrip()) -End,"
 import requests
import re

url = input()
req = (requests.get(url)).text
sites = []
for m in re.finditer(r'<a.*href=[""\'](\w*://)?(([\w\-\d]+\.?)*)([/:].*)?[""\'].*>',req):
    sites.append(m.group(2))
for site in sorted(list(set(sites))):
    print(site) -End,"
 import json

def getAllParents(objs, name):
    parents = set()
    for p in objs[name]:
        parents = parents.union([p], getAllParents(objs, p))
    return parents

objects = {o['name']:o['parents'] for o in json.loads(input())}
objects = {key:list(getAllParents(objects, key)) for key in objects}
for obj in sorted(objects):
    summ = 1 
    for vals in objects.values():
        if obj in vals:
            summ += 1
    print(obj, ':', summ) -End,"
 from xml.etree import ElementTree as ET

def test(root, tag, attr, out, weight):
    if attr in root.attrib and root.tag == tag:
        if root.attrib[attr] in out:
            out[root.attrib[attr]] += weight
        else:
            out[root.attrib[attr]] = weight
    for el in root:
        test(el, tag, attr, out, weight+1)
    return

colors = {'red': 0, 'green': 0, 'blue': 0}
test(ET.fromstring(input()), 'cube', 'color', colors, 1)
print(colors['red'],colors['green'],colors['blue']) -End,"
 import requests
import re

def url_steps(link, outlinks, steps):
    req = requests.get(link)
    if req.status_code == requests.codes.ok:
        txt = req.text
        for m in re.finditer(r'<a.*href=[""\'](\w*://.*?)[""?\:\'].*>',txt):
            if steps == 1:
                outlinks.append(m.group(1))
            else:
                url_steps(m.group(1), outlinks, steps-1)
urls = [input() for _ in range(2)]
links = []
url_steps(urls[0], links, 2)
if urls[1] in links:
    print('Yes')
else:
    print('No') -End,"
 d = [input().lower() for i in range(int(input()))]
text = [j.lower() for i in range(int(input())) for j in input().split()]
for i in set(text) - set(d): print(i) -End,"
 def primes():
    n = 2
    while 1:
        for i in range(2, n):
            if (n % i == 0):
                break
        else:
            yield n
        n += 1 -End,"
 s, a, b = input(), input(), input()
for i in range(0, 1001):
    if a not in s:
        print(i)
        break
    s = s.replace(a, b)
else:
    print('Impossible') -End,"
 s, t = input(), input()
print(len([i for i in range(0, len(s) - len(t) + 1) if s[i:].startswith(t)]))
 -End,"
 class queue_with_prior:
    def __init__(self, queue=[]):
        self.queue = queue

    def shift_up(self, i):
        while (i > 0) and (self.queue[i // 2] < self.queue[i]):
            self.queue[i // 2], self.queue[i] = self.queue[i], self.queue[i // 2]
            i //= 2

    def shift_down(self, i):
        while (2 * i < len(self.queue)):
            j = i
            if self.queue[2 * i] > self.queue[i]:
                j = 2 * i
            if (2 * i + 1 < len(self.queue)) and (self.queue[2 * i + 1] > self.queue[j]):
                j = 2 * i + 1
            if j == i:
                break
            self.queue[i], self.queue[j] = self.queue[j], self.queue[i]
            i = j

    def insert(self, n):
        self.queue.append(n)
        self.shift_up(len(self.queue) - 1)

    def get_max(self):
        return self.queue[0]

    def extract_max(self):
        res = self.get_max()
        self.queue[0] = self.queue[-1]
        self.shift_down(0)
        del self.queue[-1]
        return res

    def change_priority(self, i, p):
        self.queue[i] = p
        self.shift_up(i)
        self.shift_down(i)

a = queue_with_prior()
for i in range(int(input())):
    cmnd, *val = input().split()
    if cmnd == 'Insert':
        a.insert(int(val[0]))
    elif cmnd == 'ExtractMax':
        print(a.extract_max())
         -End,"
 inp = list(input().split())
num = input()
res = [i for i in range(len(inp)) if inp[i] == num]
print(*res if res else ['Отсутствует'])

 -End,"
 F = {}


def walk(node, s=''):
    if not node[2]:
        F[node[0]] = s or '0'
    else:
        walk(node[2][0], s + '1')
        walk(node[2][1], s + '0')


s = input()
s_set = set(s)
H = sorted([(i, s.count(i), []) for i in s_set],
           key=lambda x: x[1],
           reverse=1)
while len(H) > 1:
    a = H.pop()
    b = H.pop()
    H.append((None, a[1] + b[1], [a, b]))
    H = sorted(H,
               key=lambda x: x[1],
               reverse=1)

walk(H[0])
s = ''.join(F[i] for i in s)
print(len(s_set), len(s))
for i in sorted(F.items()):
    print('{}: {}'.format(i[0], i[1]))
print(s)
 -End,"
 import sys

m_1 = [list(map(int, line.split())) for line in sys.stdin if line != 'end']
m_2 = [[m_1[(i + 1) % len(m_1)][j] +
        m_1[i - 1][j] +
        m_1[i][(j + 1) % len(m_1[0])] +
        m_1[i][j - 1]
        for j in range(len(m_1[0]))]
       for i in range(len(m_1))]
for i in m_2:
    print(*i)
 -End,"
 def snail(k):
    res = [[0 for j in range(k)] for i in range(k)]
    s = 1
    for c in range(k // 2):
        for i in range(c, k - c - 1):
            res[c][i] = s
            res[i][k - c - 1] = s + (k - 2 * c - 1)
            res[k - c - 1][k - 1 - i] = s + 2 * (k - 2 * c - 1)
            res[k - 1 - i][c] = s + 3 * (k - 2 * c - 1)
            s += 1
        s += 3 * (k - 2 * c - 1)
    if k % 2:
        res[k // 2][k // 2] = s
    return res


for i in snail(int(input())):
    print(*i)
 -End,"
 def modify_list(l):
    i = 0
    while i < len(l):
        if l[i] % 2:
            del l[i]
        else:
            l[i] //= 2
            i += 1
 -End,"
 import collections
for key, val in collections.Counter(input().lower().split()).items():
    print(key, val)
 -End,"
 import sys

стек = []
максимумы = [-float('inf')]
for строка in sys.stdin:
    команда, *значение = строка.strip().split()
    if команда == 'push':
        значение = int(значение[0])
        стек.append(значение)
        if значение >= максимумы[-1]:
            максимумы.append(значение)
    elif команда == 'pop':
        выброс = стек.pop()
        if максимумы[-1] == выброс:
            максимумы.pop()       
    elif команда == 'max':
        print(максимумы[-1])
 -End,"
 def test_substring(full_string, substring):
    assert substring in full_string,\
    f""expected '{substring}' to be substring of '{full_string}'""
 -End,"
 def z_func(s):
    n = len(s)
    z = [0] * n
    l, r = 0, 0
    for i in range(1, n):
        if i <= r:
            z[i] = min(r - i + 1, z[i - l])
        while i + z[i] < n and s[z[i]] == s[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l, r = i, i + z[i] - 1
    return z

def z_find(t, p):
    len_p = len(p)
    len_t = len(t)
    z = z_func('{}#{}'.format(p, t))
    return tuple(i for i in range(len_t) if z[i + len_p + 1] == len_p)

print(*z_find(input(), input()) or ['-1']) -End,"
 import re
print(''.join([i[-1]*int(i[:-1] or 1) for i in re.split(r'(\d*[^\d])', input()) if i]))
 -End,"
 d = {'plus': '+', 'minus': '-', 'multiply': '*', 'divide': '//'}
inp = input()
for i in d:
    inp = inp.replace(i, d[i])
print(eval(inp)) -End,"
 def sum2(a,b):
    first = not (isinstance(a, int) or isinstance(a, float))
    second = not (isinstance(b, int) or isinstance(b, float))
    if first and second:
        return ""all arguments are not a numbers""
    elif first:
        return ""1st argument is not a number""
    elif second:
        return ""2nd argument is not a number""
    else:
        return a + b -End,"
 def lam(U):
    import scipy.constants as const
    return const.h*const.c/(const.e*U)




 -End,"
 res = []
import sys
for s in sys.stdin:
    res.append(str(sum(tuple(map(int, s.split())))))
print('#'.join(res)) -End,"
 # your code
L = eval(input())
 -End,"
 def sum2(a, b):
    return sum([a, b]) -End,"
 from functools import reduce

def factorial(n):
    return reduce(lambda x,y: x * y, range(1, n + 1)) if n else 1

def sf(n):
    return reduce(lambda x,y: x * factorial(y), range(1, n + 1)) if n else 1
 -End,"
 def front_x(words):
    return sorted(words, key=lambda x: (not x.startswith('x'), x))
 -End,"
 def is_prime(n):
    for i in range(2, round(n**(1/2))+1):
        if not (n % i):
            return False
    return True
 -End,"
 s = input()
def both_ends(s):
    return '' if len(s) < 2 else s[:2]+s[-2:]

print(both_ends(s)) -End,"
 from functools import reduce
def kaprekar_step(L):
    f = lambda x, y: str(x) + str(y)
    return int(reduce(f, sorted(L, reverse=1))) - int(reduce(f, sorted(L)))
 -End,"
 from functools import reduce

def numerics(n):
    return list(map(int, list(str(n))))

def kaprekar_step(L):
    f = lambda x, y: str(x) + str(y)
    return int(reduce(f, sorted(L, reverse=1))) - int(reduce(f, sorted(L)))

def kaprekar_loop(n):
    def is_7_zaloop(n):
        print(n)
        while n != 6174:
            n = kaprekar_step(numerics(n))
            print(n)
    is_7_zaloop(n) -End,"
 def kaprekar_check(n):
    a = True if len(str(n)) in (3,4,6) else False
    a = True if len(set(str(n))) > 1 and a else False
    return True if n not in (100, 1000, 100000) and a else False
 -End,"
 def super_L(n):
    if n % 4 == 0:
        n = n//4
        return super_L(n)**4 - 4 * (-1)**n * super_L(n)**2 + 2
    elif n % 2 == 0:
        n = n//2
        return super_L(n)**2 - 2 * (-1)**n
    else:
        a, b = 2, 1
        for i in range(n - 1):
            a, b = b, a + b
        return b
 -End,"
 def convert(num, to_base=10, from_base=10):
    d = {j:chr(i) for i,j in zip(range(ord('a'),ord('z')+1), range(10, 36))}
    num = int(num, int(from_base))
    if to_base == 10:
        return str(num)
    res = []
    to_base = int(to_base)
    div, mod = num // to_base, num % to_base
    while div:
        res.append(d[mod] if mod in d else str(mod))
        div, mod = div // to_base, div % to_base
    res.append(d[mod] if mod in d else str(mod))
    return ''.join(res[::-1]).upper()
 -End,"
 def list_pull(L):
    res = []
    while L:
        item = L.pop()
        if isinstance(item, list):
            L += item
        else:
            res.insert(0, item)
    return res
 -End,"
 L2 = [i.copy() for i in L1]
 -End,"
 def verbing(s):
    if len(s) < 3:
        return s
    return s + 'ly' if s.endswith('ing') else s + 'ing'
 -End,"
 from math import ceil


def front_back(a,b):
    half_a = ceil(len(a)/2)
    half_b = ceil(len(b)/2)
    return a[:half_a] + b[:half_b] + a[half_a:] + b[half_b:]
 -End,"
 import random


def print_mimic(mimic_dict, word):
    res = [word]
    while len(res) != 200:
        word = random.choice(mimic_dict[word]) if word in mimic_dict else ''
        if word:
            res.append(word)
    return ' '.join(res)
 -End,"
 import numpy


*shape, t = input().split()
if t.isdigit():
    shape.append(t)
    t = numpy.float64
Z = numpy.zeros(tuple(map(int, shape)), dtype=t)
 -End,"
 Z[:] = Z.itemsize
print(int(np.sum(Z))) -End,"
 print(sum(df[df['age'].notnull()]['age'])) -End,"
 types = df.dtypes
for i in dict(types):
    if types[i] in ['int64', 'float64']:
        print('{}:{}'.format(i, df[i].sum()))
 -End,"
 df = df.drop(del_index)
df.loc[new_index] = new_data
print(df)
 -End,"
 print(df[group_by].value_counts(sort=True)) -End,"
 import numpy
import sys
input()
system = []
for string in sys.stdin:
    system.append(tuple(map(float, string.split())))
S = numpy.array(system) # Система
M1 = S[:,:-1] # Матрица (левая часть системы)
if numpy.linalg.det(M1) == 0:
    print('Система не имеет решений')
    exit()
v1 = S[:,-1] # Вектор (правая часть системы)
r = numpy.linalg.solve(M1, v1) #Находим решение системы
print(*r)
 -End,"
 a, b = tuple(map(int, input().split()))
if (b > a) or ((a - b) % 2 != 0):
    print('Такой класс не существует')
    exit()
y = (a - b) // 2
x = y + b
print(x, y)
 -End,"
 repl = tuple(map(int, input().split()))
repls = 0
for n, i in enumerate(repl):
    repls += len([j for j in repl[n:] if j < i])
print(-1 if repls % 2 else 1)
 -End,"
 a, b = input(), 0
for i in a:
    b += int(i)
print(b)
 -End,"
 x, y, x1, y1 = (int(input()) for i in range(4))
print('YES' if (x + y == x1 + y1) or (x + y1 == x1 + y) else 'NO')
 -End,"
 a = int(input())
if a % 100 == 11 or a % 100 in [11, 12, 13, 14]:
    x = 'программистов' 
elif a % 10 == 1:
    x = 'программист'
elif a % 10 in [2, 3, 4]:
    x = 'программиста'
else:
    x = 'программистов'
print(a, x)
 -End,"
 s, n = 0, int(input())
n = str(abs(n))
for i in n:
    s += int(i)
print(s)
 -End,"
 n = int(input())
s = 'Введённое число является простым'
for i in [2, 3, 5, 7]:
    if n % i == 0 and n not in [2, 3, 5, 7]:
        s = 'Введённое число не является простым'
        break
print(s)
 -End,"
 x, y = (int(input()) for i in range(2))
for i in range(max(x, y), (x * y)+1):
    if i % x == 0 and i % y == 0:
        print(i)
        break
 -End,"
 n, s = input(), 0
for i in n:
    s += int(i)
k = []
for x in range(s, int(n)):
    ss = 0
    for y in str(x):
        ss += int(y)
    if ss == s:
        k.append(x)
print('Искомых чисел не найдено' if not k else 'Найденные числа:')
for j in k:
    print(j)
 -End,"
 n, max, min = int(input()), 0, 30
for i in range(n):
    y = round(float(input()))
    if y > max: max = y
    if y < min: min = y
print(int(max))
print('YES' if min < 30 else 'NO')
   -End,"
 min, n = 100, int(input())
for i in range(n):
    a = int(input())
    if a < min: min = a
print(min, 'YES' if min < -15 else 'NO', sep='\n')
 -End,"
 def f(x):
    res = 0
    if x <= -2:
        res = 1 - (x + 2)**2
    elif -2 <= x <= 2:
        res = (x / 2) * -1
    else:
        res = (x - 2)**2 + 1
    return res
print(f(float(input())))
 -End,"
 p, s = int(input()), 0
a = [int(input()) for i in range(p)]
for i in a:
    s += i
print(s/p)
 -End,"
 s = 0
for i in range(3):
    a = int(input())
    if a % 2 == 0:
        s += a / 2
    else:
        s += a // 2 + 1
print(round(s))
 -End,"
 def f(x, a):
    if a == 0:
        return 1
    if a == 1:
        return x
    else:
        return x * f(x, a-1)
x = int(input())
a = int(input())
print(f(x, a))
 -End,"
 n = int(input())
c, cc = 0, 0
while cc < n:
    c += 1
    cc += c
    n -= cc
print(cc)
 -End,"
 fib = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946]
s, n = 10000, int(input())
i = 1
while i < 5001:
    if i in fib:
        s -= i
    else:
        s += 1
    if s == n:
        print(i)
        break
    else:
        i += 1
 -End,"
 n = [int(i) for i in input().split()]
x = []
y = 0
for i in range(3):
    x.append(sum(n[y:y+3]))
    y += 3
print(max(x))
 -End,"
 n = int(input())
ch = n % 3
t = (n - (n % 3) * 4) // 3
if t <= 0: 
    t = ch = 0
print(t, ch, sep='\n')
 -End,"
 n, r = input(), 0
a =  [6, 2, 5, 5, 4, 5, 6, 3, 7, 6]
for i in range(len(n)):
    r += a[int(n[i])]
print(r)
 -End,"
 a = 'abcdefghijklmnopqrstuvwxyz 0123456789,.!?'
s = 'nopqrstuvwxyzabcdefghijklm 0123456789,.!?'
n = input()
for i in n:
    print(s[a.index(i)], end='')
 -End,"
 n = int(input())
c = d = 1
x, y, a, = '1', '0', '0'
while d < n:
    d *= 2
    c += 1
for i in range(c):
    for j in range(len(a)):
        b = ''
        if a[j] == x:
            b += y
        else:
            b += x
        a += b
print(a[n-1])
 -End,"
 n = input()
n = n.lower().split()
a = []
for i in n:
    if not i in a:
        a.append(i)
for i in a:
    print(i, n.count(i))
     -End,"
 b, n ='', input()
c = 1
for i in range(len(n) - 1):
    if n[i + 1] == n[i]:
        c += 1
    else:
        if c == 1:
            b += n[i]
        else:
            b += str(c) + n[i - 1]
            c = 1
if c > 1:
    b += str(c) + n[-1]
else:
    b += n[-1]
print(b)
 -End,"
 a = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
n = input().split()
k = input()

if n[0][-1] == k and n[1][-1] != k:
    r = 'First'
elif n[0][-1] != k and n[1][-1] == k:
    r = 'Second'
elif (n[0][-1] == k and n[1][-1] == k) or ((n[0][-1] != k and n[1][-1] != k) and n[0][-1] == n[1][-1]):
    if a.index(n[0][0:-1]) > a.index(n[1][0:-1]):
        r = 'First'
    elif a.index(n[0][0:-1]) == a.index(n[1][0:-1]):
        r = 'Error'
    else:
        r = 'Second'
else:
    r = 'Error'
print(r)
 -End,"
 n = input().split('_')
for i in range(len(n)):
    n[i] = n[i].capitalize()
print("""".join(n))
 -End,"
 n = int(input())
s, z, a = 1, 0, ''
while z < n:
    z += s
    s += 1
for i in range(s):
    a += str(i) * i
for i in a[:n]:
    print(i, end=' ')
 -End,"
 n =input().split()
print('%.2f' % (n.count('A')/(len(n))))
 -End,"
 n = input()
s, c = [], ''
rr = [0, 1, 10, 100, 1000]
r = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}
for i in range(len(n)):
    s.append(int(str(n[i]) + '0' * (len(n) - (i + 1))))
for i in range(len(s)):
    l_s = len(str(s[i]))
    if s[i] in r:
        c += r[s[i]]
    elif 9 * rr[l_s] > s[i] > 5 * rr[l_s]:
        c += r[5 * rr[l_s]] + r[1 * rr[l_s]] * int((s[i] - 5 * rr[l_s])/rr[l_s])
    elif 4 * rr[l_s] > s[i] > 1 * rr[l_s]:
        c += r[1 * rr[l_s]] * int(s[i]/rr[l_s])
print(c)
 -End,"
 x = int(input())
y = int(input())
if x > y:
    print(1)
elif x == y:
    print(0)
else:
    print(2)
 -End,"
 A = int(input())
B = int(input())
C = int(input())

max = A
min = B
if B > max:
    max = B
    min = A
if C > max:
    max = C
if C < min:
    min = C

print(min)
print(max)
 -End,"
 x, y = [int(i) for i in input().split()]
x2, y2 = [int(i) for i in input().split()]

if abs(x - x2) + abs(y - y2) == 3 and x != x2 and y != y2:
    print('YES')
else:
    print('NO')
 -End,"
 n = int(input())
max = min = 0
for i in range(n):
    a = float(input())
    if min == 0 and max == 0:
        max = min = a
    elif a > max:
        max = a
    elif a < min:
        min = a
print(round(max - min, 2)) -End,"
 a = int(input())
for i in range(1, a + 1):
    if i % 10 == 1 and i != 11:
        r = 'корова'
    elif 1 < i % 10 < 5 and not i in (12, 13, 14):
        r = 'коровы'
    else:
        r = 'коров'
    print('На лугу', i, r)
 -End,"
 n = input()
s = 0
while n != '':
    s += 1
    print('Великолепно, пишите еще!')
    n = input()
if s == 0:
    print('Нет вдохновения? Ну ничего, попробуйте завтра')
else:
    print('Эти строки запомнятся надолго')
 -End,"
 n = int(input())
s = 0
for i in range(2, n + 1):
    k = 0
    d = 2
    while d * d <= i:
        if i % d == 0 and i != d:
            k += 1
            break
        else: d += 1
    if k == 0:
        s += 1
print(s)
 -End,"
 n = int(input())
x = mn = 0
while x != n:
    a = int(input())
    if a % 10 == 4 and mn == 0:
        mn = a
    elif a % 10 == 4 and a < mn:
        mn = a
    x += 1
print(mn)
 -End,"
 n = input()
k = 0
mas = []
while n != '.':
    mas.append(n)
    n = input()
for i in range(len(mas)):
    if 'PYTHON' in mas[i].upper().split():
        k += 1
for i in range(len(mas)):
    print(mas[i][k - 1], end = ' ')
 -End,"
 n = input()
result, res_summa = '', 0
mas = ['1','2','3','4','5','6','7','8','9','0']
for i in n:
    if i.isdigit():
        x = int(i)
        i = i.replace(i, mas[x])
        res_summa += int(mas[x])
    result += i
print(result, res_summa, sep = '\n')
 -End,"
 n, s = [int(i) for i in input().split(', ')], int(input())
a, max_n = set(n), max(n)
for i in n:
    if s < i < max_n:
        max_n = i
print(len(a), max_n, sep = '\n')
 -End,"
 a, b, x = map(int, input().split())
res = 0
for i in range(1, a + 1):
    for j in range(1, b + 1):
        if x == i * j:
            res += 1
            break
    if res > 0:
        break
print('YES' if res > 0 else 'NO')
 -End,"
 a, b = map(int, input().split())
n = [int(i) for i in input().split(', ')]
for i in range(a):
    n = [i * 2 for i in n]
n = [n.index(i) + 1 for i in n if i < b]
print(', '.join(str(i) for i in n)) -End,"
 n = int(input())
res = []
for i in range(n):
    Min = -1
    a = input().replace(',', ' ')
    x = [int(i) if i.isdigit() else i for i in a.split()]
    for j in x:
        if type(j) is int and Min == -1:
            Min = j
        elif type(j) is int and j < Min:
            Min = j
    res.append(x[x.index(Min) - 1])
print(', '.join(res))
 -End,"
 def check_variable(a):
    if 64 < ord(a[0]) < 91 or 96 < ord(a[0]) < 123 or ord(a[0]) == 95: 
        for i in a:
            if 47 < ord(i) < 58 or 64 < ord(i) < 91 or 96 < ord(i) < 123 or ord(i) == 95:
                res = 'Можно использовать'
            else:
                res = 'Нельзя использовать'
                break
    else:
        res = 'Нельзя использовать'
    print(res)
    
a = input()
while a != 'Поработали, и хватит':
    check_variable(a)
    a = input()
 -End,"
 def get_pow(a, n):
    if a ==0 or a ==1 or n == 1:
        return a
    elif n == 0:
        return 1
    else:
        return a * get_pow(a, n - 1)
 -End,"
 mas, res = [], []
while True:
    n = input()
    if n == 'end':
        break
    else:
        mas.append([int(i) for i in n.split()])
        res.append([int(i) for i in n.split()])
for i in range(len(mas)):
    for j in range(len(mas[i])):
        if i == len(mas) - 1: ii = 0
        else: ii = i + 1
        if j == len(mas[i]) - 1: jj = 0
        else: jj = j + 1
        res[i][j] = mas[i - 1][j] + mas[ii][j] + mas[i][j - 1] + mas[i][jj]
for i in res:
    print(*i)
 -End,"
 a,b,h=(int(input()) for i in range(3))
print([['Пересып', 'Недосып'][h<a],'Это нормально'][h>=a and h<=b])



 -End,"
 n = int(input())
print(""Високосный""*(n%4==0 and n%100!=0 or n%400==0) or ""Обычный"")




 -End,"
 a,b,c = (int(input()) for ___ in range(3))
p = (a+b+c)/2
print((p*(p-a)*(p-b)*(p-c))**0.5) -End,"
 print((lambda n :[""False"", ""True""][(n>-15 and n<=12)or(n>14 and n<17)or(n>=19)])(int(input()))) -End,"
 print((lambda n :(n>-15 and n<=12)or(n>14 and n<17)or(n>=19))(int(input()))) -End,"
 a = float(input())
b = float(input())
o = str(input())
if b==0 and (o in ['/','div','mod']):
  print('Деление на 0!')
else:
  if o=='/':
    print(a/b)
  elif o=='div':
    print(a//b)
  elif o=='mod':
    print(a%b)
  elif o=='+':
    print(a+b)
  elif o=='-':
    print(a-b)
  elif o=='*':
    print(a*b)
  elif o=='pow':
    print(a**b) -End,"
 _ = {'треугольник': (lambda o: (((o[0]+o[1]+o[2])/2)*(((o[0]+o[1]+o[2])/2)-o[0])*(((o[0]+o[1]+o[2])/2)-o[1])*(((o[0]+o[1]+o[2])/2)-o[2]))**0.5, 3),
     'прямоугольник': (lambda o: o[0]*o[1], 2),
     'круг': (lambda o: (o[0]**2)*3.14, 1)}
f = str(input())
print(_[f][0]([___ for ___ in (float(input()) for __ in range(_[f][1]))])) -End,"
 a, b, c = (int(input()) for _ in range(3))
print(max(a,b,c),'\n',min(a,b,c),'\n',sum([a,b,c])-max(a,b,c)-min(a,b,c), sep='') -End,"
 n = int(input())
print(n, ' программист','а' if (n%10>1 and n%10<5)and not(n>100 and (n%100>10 and n%100<=20)) else 'ов' if (n%10>=5 and n%10<=20)or(n%10==0)or(n>100 and (n%100>10 and n%100<=20)) else '', sep='') -End,"
 n = list(map(int, input()))
print('Счастливый' if n[0]+n[1]+n[2] == n[3]+n[4]+n[5] else 'Обычный') -End,"
 a, b = (int(input()) for _ in range(2))
n = 1
while (n % a) or (n % b): n += 1
print(n) -End,"
 while True:
    n = int(input())
    if n > 100: break
    if n >= 10: print(n) -End,"
 a, b, c, d = (int(input()) for _ in range(4))
print(' ', end='\t')
for i in range(c, d + 1):
    print(i, end='\t')
print()
for i in range(a, b + 1):
    print(i, end='\t')
    for j in range(c, d + 1):
        print(i * j, end='\t')
    print() -End,"
 a, b = (int(input()) for _ in range(2))
g = []
for i in range(a, b + 1):
    if not i % 3: g.append(i)
print(sum(g) / len(g)) -End,"
 s = str(input()).lower()
print(((s.count('g')+s.count('c'))/len(s))*100) -End,"
 s = str(input())
while s!='':
    c = 1
    t = s[:1]
    while (t==s[1:2]) and len(s)!=0:
        c +=1
        s = s[1:]
    print(t,c, sep='',end='')
    s = s[1:] -End,"
 print(sum(int(i) for i in str(input()).split())) -End,"
 s = [int(i) for i in str(input()).split()]
if len(s) > 1:
    s = [s[len(s) - 1]] + s + [s[0]]
    for i in range(1, len(s) - 1):
        print(s[i - 1] + s[i + 1], end=' ')
else:
    print(s[0]) -End,"
 s = [int(i) for i in str(input()).split()]
r = []
for i in range(len(s)):
    if (s.count(s[i]) > 1)and not(s[i] in r):
        r.append(s[i])
for i in sorted(r):
    print(i, end=' ') -End,"
 a = int(input())
s = a
k = a**2
while s!=0:
    a = int(input())
    s +=a
    k +=a**2
print(k) -End,"
 a = int(input())
b = []
for i in range(1,a+1):
    if len(b) == a: break
    for k in range(i):
        b.append(i)
        if len(b) == a:
            break
print(*b) -End,"
 def f(l: list, k: int, r: int, y: list):
    try:
        if not l.index(k, r) in y:
            y.append(l.index(k, r))
        return l.index(k, f(l, k, r + 1, y))
    except:
        pass


s = [int(i) for i in str(input()).split()]
a = int(input())
try:
    g = s.index(a)
    g = []
    f(s, a, 0, g)
    print(*g)
except:
    print('Отсутствует') -End,"
 s = str(input())
a = []
while s!='end':
    a.append([int(i) for i in s.split()])
    s = str(input())
for i in range(len(a)):
    for j in range(len(a[i])):
        print(a[i][j+1 if j < len(a[i])-1 else 0] + a[i][j-1] + a[i+1 if i < len(a)-1 else 0][j] + a[i-1][j],' ' if j!=len(a[i])-1 else '',end='',sep='')
    print() -End,"
 a = int(input())
b = []
for i in range(a):
    b.append([])
    for j in range(a):
        b[i].append(0)
c = 1
d = 0
while c <= a ** 2:
    for i in range(d, a - d):
        b[d][i] = c
        c += 1
    for i in range(d, a - 1 - d):
        b[i + 1][a - 1 - d] = c
        c += 1
    for i in range(a - 1 - d, d, -1):
        b[a - 1 - d][i - 1] = c
        c += 1
    for i in range(a - 1 - d, d + 1, -1):
        b[i - 1][d] = c
        c += 1
    d += 1
for i in range(len(b)):
    print(*b[i]) -End,"
 def modify_list(l):
    c = 0
    while c < len(l):
        if l[c] % 2 != 0:
            l.pop(c)
        else:
            l[c] = l[c] // 2
            c+=1 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key in d.keys():
        d[key].append(value)
    else:
        if 2*key in d.keys():
            d[2*key].append(value)
        else:
            d[2*key] = [value] -End,"
 s = str(input()).lower().split()
d = dict.fromkeys(s, 0)
for _ in s:
    d[_] += 1
print(*[_ + ' ' + str(d[_]) + '\n' for _ in d], sep='', end='') -End,"
 s = str(input()).lower().split()
d = {i: s.count(i) for i in s}
print(*[_ + ' ' + str(d[_]) + '\n' for _ in d], sep='', end='') -End,"
 a = int(input())
d ={}
for i in range(a):
    b = int(input())
    if b not in d.keys():
        d[b] =f(b)
    print(d[b]) -End,"
 from math import pi as p
print(float(input())*2*p) -End,"
 from sys import argv as a
print(*[a[x+1] for x in range(len(a)-1)]) -End,"
 from sys import argv as a
print(*a[1:]) -End,"
 o = [[1, 0, 0, 1, 0], [1, 1, 0, 0, 3], [1, 0, 1, 0, 1]]
a = {}
s = [str(input()).split(';') for i in range(int(input()))]
for x in s:
    if x[0] in a:
        a[x[0]] = list(map(lambda a, b: a + b, a[x[0]], o[x[1] > x[3]] if x[1] != x[3] else o[2]))
    else:
        a[x[0]] = o[x[1] > x[3]] if x[1] != x[3] else o[2]
    if x[2] in a:
        a[x[2]] = list(map(lambda a, b: a + b, a[x[2]], o[x[1] < x[3]] if x[1] != x[3] else o[2]))
    else:
        a[x[2]] = o[x[1] < x[3]] if x[1] != x[3] else o[2]
for x in a:
    print('{0}:{1} {2} {3} {4} {5}'.format(x, *a[x])) -End,"
 _1 = [x for x in str(input())]
_2 = [x for x in str(input())]
for _3 in str(input()):
    print(_2[_1.index(_3)], end='')
print()
for _3 in str(input()):
    print(_1[_2.index(_3)], end='') -End,"
 a,b = {},{}
for x in range(int(input())):
    a[input().lower()] = None
for x in range(int(input())):
    for y in input().lower().split():
        if y not in a:
            b[y] = None
for x in b:
    print(x) -End,"
 a = {'север': lambda a, x: [a[0], a[1] + x],
     'запад': lambda a, x: [a[0] - x, a[1]],
     'юг': lambda a, x: [a[0], a[1] - x],
     'восток': lambda a, x: [a[0] + x, a[1]]}
b = [0, 0]
for i in range(int(input())):
    s = input().split()
    b = a[s[0]](b, int(s[1]))
print(*b) -End,"
 s = input().split()
e = dict(m=1, mile=1609, yard=0.9144, foot=0.3048, inch=0.0254, km=1000, cm=0.01, mm=0.001)
print(""{0:.2e}"".format((float(s[0]) * float(e[s[1]])) / float(e[s[3]]))) -End,"
 s, v = input(), input()
b = []
if s.find(v) >= 0:
    for a in range(len(s) - len(v) + 1):
        if s[a:a + len(v)] == v:
            b.append(a)
    print(*b)
else:
    print('-1') -End,"
 n, m = input().split()
a = []
for i in range(int(n)):
    a.append(list(input().strip()))
for i in range(len(a)):
    for j in range(len(a[i])):
        c = 0
        if a[i][j] == '.':
            t = [i > 0 and a[i - 1][j] == '*',
                 i < len(a) - 1 and a[i + 1][j] == '*',
                 j > 0 and a[i][j - 1] == '*',
                 j < len(a[i]) - 1 and a[i][j + 1] == '*',
                 i < len(a) - 1 and j < len(a[i]) - 1 and a[i + 1][j + 1] == '*',
                 i < len(a) - 1 and j > 0 and a[i + 1][j - 1] == '*',
                 i > 0 and j > 0 and a[i - 1][j - 1] == '*',
                 i > 0 and j < len(a[i]) - 1 and a[i - 1][j + 1] == '*']
            c += t.count(True)
            a[i][j] = c
    print(*a[i], sep='') -End,"
 n = int(input())
print(n,end=' ')
while n != 1:
    n = n // 2 if n % 2 == 0 else (n*3)+1
    print(n, end=' ') -End,"
 a = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',
     50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}
n = int(input())
for i in a:
    if n // i > 0:
        print(a[i]*(n // i), end='')
        n = n - i*(n // i) -End,"
 ans = 0
a = set()
for obj in objects: # доступная переменная objects
    if id(obj) not in a:
        ans += 1
        a.add(id(obj))

print(ans) -End,"
 n, k = map(int, input().split())
def c(n,k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    else:
        return c(n-1,k) + c(n-1,k-1)
print(c(n,k)) -End,"
 d = {}
d['global'] = [[],'']

def get_var(namespace, var):
    try:
        if var in d[namespace][0]:
            return namespace
        else:
            return get_var(d[namespace][1], var)
    except:
        return None

for i in range(int(input())):
    command, namespace, var = input().split()
    if command == 'add':
        d[namespace][0].append(var)
    elif command == 'create':
        d[namespace] = [[],var]
    elif command == 'get':
        print(get_var(namespace,var)) -End,"
 n, capacity = map(int, input().split())
items = [[*map(int, input().split())] for i in range(n)]
items_mod = [(items[j][0] / items[j][1], items[j][1]) for j in range(len(items))]
items_mod.sort(reverse=True)
result = 0
for price, w in items_mod:
    if w < capacity:
        capacity -= w
        result += price * w
    else:
        result += price * capacity
        break
print(""{:.3f}"".format(result))
 -End,"
 n = int(input())
result = []
if n == 1:
    print(""1 \n 1"")
elif n == 2:
    print(""1 \n 2"")
else:
    for i in range(1, n):
        if i <= n:
            n -= i
            result.append(i)
        else:
            result[-1] += n
            break
print(len(result))
print(*result)
 -End,"
 # put your python code here
def huffman_encode(string):
    _dict, result = {}, {}

    for i in string:
        if i in _dict:
            _dict[i] += 1
        else:
            _dict[i] = 1

    if len(_dict) == 1:
        result[string[0]] = ""0""
    else:
        while len(_dict) > 1:
            left_key = min(_dict, key=_dict.get)
            left = _dict[left_key]
            del _dict[left_key]

            right_key = min(_dict, key=_dict.get)
            right = _dict[right_key]
            del _dict[right_key]

            for x in left_key:
                if x in result:
                    result[x] = '0' + result[x]
                else:
                    result[left_key] = '0'
            for y in right_key:
                if y in result:
                    result[y] = '1' + result[y]
                else:
                    result[right_key] = '1'

            _dict[left_key + right_key] = left + right
    return result


def main():
    string = input()
    code = huffman_encode(string)
    encoded = """".join(code[ch] for ch in string)
    print(len(code), len(encoded))
    for ch in sorted(code):
        print(""{}: {}"".format(ch, code[ch]))
    print(encoded)


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
def huffman_decode(encoded, code):
    result = """"
    string = """"
    for i in encoded:
        string += i
        for j in code:
            if code.get(j) == string:
                result += j
                string = """"
                break
    return result


def main():
    letters, size = map(int, input().split("" ""))
    code = {}
    for i in range(0, letters):
        l, c = map(str, input().split("": ""))
        code[l] = c
    encoded = input()
    print(huffman_decode(encoded, code))


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
def binary_search(_numbers, _item):
    left = 0
    right = len(_numbers) - 1
    while left <= right:
        mid = (left + right) // 2
        if _numbers[mid] == _item:
            return mid + 1
        elif _numbers[mid] > _item:
            right = mid - 1
        elif _numbers[mid] < _item:
            left = mid + 1
    return -1


def main():
    numbers = list(map(int, input().split("" "")))[1:]
    search = list(map(int, input().split("" "")))[1:]
    result = [str(binary_search(numbers, item)) for item in search]
    print("" "".join(result))


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
def binary_search(_array, item):
    first = 0
    last = len(_array) - 1
    found = False

    while first <= last and not found:
        midpoint = (first + last)//2
        if _array[midpoint] == item:
            return midpoint
        else:
            if item < _array[midpoint]:
                last = midpoint - 1
            else:
                first = midpoint + 1


def get_count(_array):
    count = 0
    b_list = list(_array)
    b_list.sort()
    for i in range(len(_array)):
        j = binary_search(b_list, _array[i])
        while b_list[j] == b_list[j - 1]:
            if j < 1:
                break
            j -= 1

        count += j
        b_list.pop(j)

    return count


def main():
    n = int(input())
    a_list = list(map(int, input().split("" "")))
    print(get_count(a_list))


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
a, b, c = (int(input()) for i in range(3))
_list = [a, b, c]

print(_list.pop(_list.index(max(_list))))
print(_list.pop(_list.index(min(_list))))
print(_list[0])
 -End,"
 # put your python code here
import random


def quick_sort_3(_array, left, right):
    if left >= right:
        return

    lt = left
    gt = right

    pivot = _array[random.randint(left, right)]

    i = left
    while i <= gt:
        if _array[i] < pivot:
            _array[lt], _array[i] = _array[i], _array[lt]
            lt += 1
            i += 1
        elif _array[i] > pivot:
            _array[gt], _array[i] = _array[i], _array[gt]
            gt -= 1
        else:
            i += 1

    quick_sort_3(_array, left, lt - 1)
    quick_sort_3(_array, gt + 1, right)


def binary_search(_array, point, n):
    left, right = 0, len(_array) - 1
    while left <= right:
        m = left + (right - left) // 2
        if _array[m] <= point - n:
            left = m + 1
        elif _array[m] > point - n:
            right = m - 1
    return left


def main():
    n, m = map(int, input().split())
    starts = []
    ends = []
    for i in range(n):
        segments = list(map(int, input().split("" "")))
        starts.append(segments[0])
        ends.append(segments[1])
    points = list(map(int, input().split("" "")))
    quick_sort_3(starts, 0, len(starts) - 1)
    quick_sort_3(ends, 0, len(starts) - 1)
    result = []
    for point in points:
        count1 = binary_search(starts, point, 0)
        count2 = binary_search(ends, point, 1)
        result.append(count1 - count2)
    print(*result)


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
def count_sort(array, num):
    count = [0]*11
    for i in range(0, num):
        count[array[i]] += 1
    ind = 0
    while ind < len(count) - 1:
        count[ind + 1] += count[ind]
        ind += 1

    sorted_array = [0] * len(array)
    for j in range(len(array) - 1, -1, -1):
        sorted_array[count[array[j]] - 1] = array[j]
        count[array[j]] -= 1
    return sorted_array


def main():
    n = int(input())
    numbers = list(map(int, input().split("" "")))
    for y in count_sort(numbers, n):
        print(y, end=' ')


if __name__ == ""__main__"":
    main()
 -End,"
 def find_sequence(array, n):
    seq_array = [0] * n
    for i in range(0, n):
        seq_array[i] = 1
        for j in range(0, i):
            if array[j] <= array[i] and seq_array[j] + 1 > seq_array[i] and array[i] % array[j] == 0:
                seq_array[i] = seq_array[j] + 1      
    return max(seq_array)


def main():
    n = int(input())
    lst = list(map(int, input().split()))
    print(find_sequence(lst, n))


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
def gcd(a, b):
    assert a >= 0 and b >= 0
    while a and b:
        if a >= b:
            a %= b
        else:
            b %= a
    return max(a, b)


num1 = int(input())
num2 = int(input())
print(int(num1 * num2 / gcd(num1, num2)))
 -End,"
 # put your python code here
def max_price(_len, array):
    prev = 0
    curr = array[0]
    for i in range(1, _len):
        prev, curr = curr, max(prev, curr) + array[i]
    return curr


def main():
    n = int(input())
    stairs = list(map(int, input().split()))
    print(max_price(n, stairs))


if __name__ == ""__main__"":
    main()
 -End,"
 a = int(input())
b = int(input())
c = int(input())
d = int(input())


for i in range(c, d + 1):
    print(' \t', i, end='')
for x in range(a, b + 1):
    print('\n', x, end='\t')
    for y in range(c, d + 1):
        print(x * y, end='\t')
 -End,"
 # put your python code here
string = input().upper()
print((string.count('G') + string.count('C')) * 100 / len(string))
 -End,"
 # put your python code here
string = input()
count = 0
new_string = """"
if len(string) == 1:
    print(string + str(1))
for i in range(1, len(string)):
    if string[i] == string[i - 1]:
        count += 1
    else:
        count += 1
        new_string += string[i - 1] + str(count)
        count = 0
    if i == len(string) - 1:
        count += 1
        new_string += string[i] + str(count)
print(new_string)
 -End,"
 # put your python code here
array = [int(i) for i in input().split()]
res = 0
for x in array:
    res += x
print(res)
  -End,"
 array = [int(i) for i in input().split()]
result = []
if len(array) == 1:
    print(array[0])
else:
    for j in range(len(array) - 1):
        result.append(array[j - 1] + array[j + 1])
    
    result.append(array[-2] + array[0])
    for x in result:
        print(x, end="" "")
 -End,"
 # put your python code here
array = [int(i) for i in input().split()]
array.sort()
result = []
if len(array) == 1:
    print("""")
else:
    for j in array:
        if array.count(j) >= 2:
            if j not in result:
                result.append(j)
            array.remove(j)
for x in result:
    print(x, end="" "")
 -End,"
 # put your python code here
from math import pi
print(2 * pi * float(input()))
 -End,"
 from sys import argv
print("" "".join(argv[1:]))




 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    # put your python code here
    if key in d:
        d[key] += [value]
    else:
        if 2 * key in d:
            d[2 * key] += [value]
        else:
            d[2 * key] = [value]
# не добавляйте кода вне функции -End,"
 # put your python code here
def get_dict(_string):
    return set(_string.lower().split())


def update_dictionary(_dict, _string):
    for word in get_dict(_string.lower()):
        _dict[word] = _string.lower().split().count(word)
    return _dict


def main():
    _dict = {}
    for item in sorted(update_dictionary(_dict, input())):
        print(item, _dict[item], end="" "" '\n')


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
_seq = [[num] * int(num) for num in range(1, 1000)]
limit = int(input())
count = 0

for i in range(len(_seq)):
    for j in range(len(_seq[i])):
        count += 1
        if count > limit:
            break
        print(_seq[i][j], end="" "")
    if count > limit:
        break
 -End,"
 ans = {id(objects[0])}
for i in range(1, len(objects)):
    if objects[0] is not objects[i]:
        ans.add(id(objects[i]))
print(len(ans))
 -End,"
 def closest_mod_5(x):
    if x % 5 == 0:
        return x
    return closest_mod_5(x + 1)
 -End,"
 import datetime

result = datetime.date(*[int(num) for num in input().split()]) + datetime.timedelta(int(input()))
print(result.year, result.month, result.day)




 -End,"
 def mod_checker(x, mod=0):
    return lambda y: True if y % x == mod else False
 -End,"
 def mod_checker(x, mod=0):
    return lambda y: y % x == mod
 -End,"
 import sys
import re

_output = [print(line.rstrip()) for line in sys.stdin if len(re.findall(""cat"", line.rstrip())) >= 2]
 -End,"
 import sys
import re

_output = [print(line.rstrip()) for line in sys.stdin if re.findall(r""^cat$|\bcat\b"", line.rstrip())]
 -End,"
 # put your python code here
def check(_str):
    result = []
    opening = ""([{""
    closing = "")]}""
    numbers = []
    for i in range(len(_str)):
        if _str[i] not in opening and _str[i] not in closing:
            continue
        else:
            if _str[i] in opening:
                result.append(_str[i])
                numbers.append(i + 1)
            else:
                if len(result) == 0:
                    return i + 1
                top = result.pop()
                numbers.pop()
                if (top == ""("" and _str[i] != "")"") or \
                        (top == ""["" and _str[i] != ""]"") \
                        or (top == ""{"" and _str[i] != ""}""):
                    return i + 1

    if len(result) == 0:
        return ""Success""
    else:
        return numbers[-1]


print(check(input()))
 -End,"
 # put your python code here
def stack_max(_lst):
    if len(_lst) == 0:
        return
    max_stack = [0]
    for req in _lst:
        if req[0] == ""push"":
            num = int(req[1])
            if max_stack[-1] < num:
                max_stack.append(num)
            else:
                max_stack.append(max_stack[-1])
        else:
            if req[0] == ""pop"":
                max_stack.pop()
            else:
                print(max_stack[-1])


def main():
    n = int(input())
    lst = tuple(tuple(input().split()) for i in range(n))
    stack_max(lst)


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
class QueueMod:
    def __init__(self, lst, win):
        self.lst = lst
        self.win = win
        self._in = list()
        self._out = list()
        self.result = list()
        self.max_in = len(self._in)

    def pop_item(self):
        if self._out:
            self._out.pop()
        else:
            for i in range(self.win - 1, -1, -1):
                if len(self._out) == 0 or self._in[i][0] > self._out[-1][1]:
                    self._out.append([self._in[i][0], self._in[i][0]])
                elif self._in[i][0] <= self._out[-1][1]:
                    self._out.append([self._in[i][0], self._out[-1][1]])
            self._in.clear()
            self._out.pop()

    def add_item(self, _item):
        self.pop_item()
        if len(self._in) == 0 or _item > self._in[-1][1]:
            self._in.append([_item, _item])
        else:
            self._in.append([_item, self._in[-1][1]])

    def comparison(self):
        if len(self._out) == 0:
            self.result.append(self._in[-1][1])
        elif self._in[-1][1] <= self._out[-1][1]:
            self.result.append(self._out[-1][1])
        elif self._in[-1][1] > self._out[-1][1]:
            self.result.append(self._in[-1][1])

    def create_queue(self):
        self._in.append([self.lst[0], self.lst[0]])
        for item, i in zip(self.lst[1:self.win], range(self.win)):
            if self._in is False or item > self._in[i][1]:
                self._in.append([item, item])
            else:
                self._in.append([item, self._in[i][1]])


def main():
    n = int(input())
    seq = tuple(map(int, input().split("" "")))
    window = int(input())
    q = QueueMod(seq, window)
    q.create_queue()
    q.comparison()
    for i in seq[window:]:
        q.add_item(i)
        q.comparison()
    print(*q.result)


if __name__ == ""__main__"":
    main()
 -End,"
 class MinHeap:
    def __init__(self, seq):
        self.seq = seq
        self.result = list()
        self.size = len(seq)

    @staticmethod
    def left_child(index):
        return index * 2 + 1

    @staticmethod
    def right_child(index):
        return index * 2 + 2

    def swap(self, x, y):
        self.seq[x], self.seq[y] = self.seq[y], self.seq[x]

    def sift_down(self, i):
        min_index = i
        left = self.left_child(i)
        right = self.right_child(i)
        if left < self.size and self.seq[left] < self.seq[min_index]:
            min_index = left
        if right < self.size and self.seq[right] < self.seq[min_index]:
            min_index = right
        if min_index != i:
            self.result.append([i, min_index])
            self.swap(i, min_index)
            self.sift_down(min_index)


def main():
    n = int(input().strip())
    _seq = list(map(int, input().split()))
    h = MinHeap(_seq)
    for item in range(n // 2 - 1, -1, -1):
        h.sift_down(item)
    print(len(h.result))
    for pair in h.result:
        print(*pair)


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
class MinHeap:
    def __init__(self, n):
        self.seq = list()
        self.size = n
        self.result = list()

    def make_heap(self):
        [self.seq.append([i, 0]) for i in range(self.size)]

    @staticmethod
    def parent(index):
        return (index - 1) // 2

    @staticmethod
    def left_child(index):
        return index * 2 + 1

    @staticmethod
    def right_child(index):
        return index * 2 + 2

    def swap(self, x, y):
        self.seq[x], self.seq[y] = self.seq[y], self.seq[x]

    def sift_down(self, i):
        min_index = i
        left = self.left_child(i)
        right = self.right_child(i)
        if left < self.size and self.seq[left][1] < self.seq[min_index][1]:
            min_index = left
        if right < self.size and self.seq[right][1] < self.seq[min_index][1]:
            min_index = right
        if left < self.size and self.seq[left][1] == self.seq[min_index][1] and \
                self.seq[left][0] < self.seq[min_index][0]:
            min_index = left
        if right < self.size and self.seq[right][1] == self.seq[min_index][1] and \
                self.seq[right][0] < self.seq[min_index][0]:
            min_index = right
        if min_index != i:
            self.swap(i, min_index)
            self.sift_down(min_index)

    def get_min(self):
        return self.seq[0]

    def change_priority(self, i, value):
        self.seq[i] = [self.seq[i][0], self.seq[i][1] + value]

    def add_process(self, task):
        self.result.append(self.get_min())
        if task == 0:
            pass
        else:
            self.change_priority(0, task)
            self.sift_down(0)


def main():
    n, m = map(int, input().split("" ""))
    tasks = list(map(int, input().split()))
    h = MinHeap(n)
    h.make_heap()
    for task in tasks:
        h.add_process(task)
    for res in h.result:
        print(*res)


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
class DSU:
    """""" disjoint-set-union class""""""
    def __init__(self, tables, _max):
        self.tables = tables
        self.parent = list(i for i in range(len(self.tables)))
        self._max = _max
        self.result = list()

    def find_set(self, x):
        if x != self.parent[x]:
            self.parent[x] = self.find_set(self.parent[x])
        return self.parent[x]

    def union_set(self, dest, source):
        _dest = self.find_set(dest)
        _source = self.find_set(source)
        if _dest != _source:
            self.parent[_source] = _dest
            self.tables[_dest] += self.tables[_source]
            if self._max < self.tables[_dest]:
                self._max = self.tables[_dest]
        self.result.append(self._max)
        return self.parent[_source]


def main():
    n, m = map(int, input().split("" ""))
    tables = list(map(int, input().split()))
    merges = [[*map(int, input().split())] for i in range(m)]
    _max = max(tables)
    tables.insert(0, _max)
    dsu = DSU(tables, _max)
    for merge in merges:
        dsu.union_set(merge[0], merge[1])
    for res in dsu.result:
        print(res)


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
class DSU:
    """""" disjoint-set-union class""""""
    def __init__(self, parent):
        self.parent = parent

    def find_set(self, x):
        if x != self.parent[x]:
            self.parent[x] = self.find_set(self.parent[x])
        return self.parent[x]

    def union_set(self, dest, source):
        _dest = self.find_set(dest)
        _source = self.find_set(source)
        if _dest != _source:
            self.parent[_source] = _dest
        return self.parent[_source]


def main():
    n, e, d = map(int, input().split("" ""))
    equality = [[*map(int, input().split())] for i in range(e)]
    comparison = [[*map(int, input().split())] for i in range(d)]
    dsu = DSU(list(i for i in range(n + 1)))
    for eq in equality:
        dsu.union_set(eq[0], eq[1])
    for com in comparison:
        if dsu.find_set(com[0]) == dsu.find_set(com[1]):
            print(0)
            exit()
    print(1)


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
class PhoneBook:
    def __init__(self):
        self._dict = dict()

    def add_contact(self, number, name):
        self._dict[number] = name

    def del_contact(self, number):
        if number in self._dict:
            self._dict.pop(number)
        else:
            return

    def find_contact(self, number):
        if number in self._dict:
            return self._dict[number]
        else:
            return ""not found""


def main():
    n = int(input().strip())
    numbers = [[*map(str, input().strip().split("" ""))] for i in range(n)]
    pb = PhoneBook()
    for num in numbers:
        if num[0] == ""add"":
            pb.add_contact(num[1], num[2])
        elif num[0] == ""del"":
            pb.del_contact(num[1])
        else:
            print(pb.find_contact(num[1]))


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
class ChainHash:
    def __init__(self, _dict):
        self._dict = _dict
        self.x = 263
        self.mod = 1000000007

    def pow(self, degree):
        if degree == 0:
            return 1
        elif degree == 1:
            return self.x
        elif degree % 2 == 0:
            result = self.pow(degree / 2)
            return (result * result) % self.mod
        else:
            return (self.pow(degree - 1) * self.x) % self.mod

    def calc_hash(self, string):
        _hash = 0
        for i in range(len(string)):
            _hash += ((ord(string[i]) * self.pow(i)) % self.mod)
        return _hash % self.mod % len(self._dict)

    def add_string(self, string):
        if self.find_string(string) == ""yes"":
            return
        else:
            self._dict[self.calc_hash(string)].insert(0, string)

    def del_string(self, string):
        if self.find_string(string) == ""yes"":
            self._dict[self.calc_hash(string)].remove(string)

    def find_string(self, string):
        if string in self._dict[self.calc_hash(string)]:
            return ""yes""
        else:
            return ""no""

    def check_string(self, i):
        print(*self._dict[i])


def main():
    m = int(input().strip())
    n = int(input().strip())
    requests = [[*map(str, input().strip().split("" ""))] for i in range(n)]
    c = ChainHash({i: [] for i in range(m)})
    for req in requests:
        if req[0] == ""add"":
            c.add_string(req[1])
        elif req[0] == ""del"":
            c.del_string(req[1])
        elif req[0] == ""find"":
            print(c.find_string(req[1]))
        else:
            c.check_string(int(req[1]))


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
class Hash:
    def __init__(self):
        self.x = 263
        self.mod = 1000000007
        self.result = list()

    def pow(self, degree):
        if degree == 0:
            return 1
        elif degree == 1:
            return self.x
        elif degree % 2 == 0:
            result = self.pow(degree / 2)
            return (result * result) % self.mod
        else:
            return (self.pow(degree - 1) * self.x) % self.mod

    def calc_hash(self, string):
        _hash = 0
        for i in range(len(string)):
            _hash += ((ord(string[i]) * self.pow(i)) % self.mod)
        return _hash % self.mod

    def rolling_hash(self, prev_hash, left, right, pow_right):
        return ((prev_hash - (right * pow_right) % self.mod) * self.x + left) % self.mod

    def implementation(self, pattern, text):
        self.result.clear()
        size = len(pattern)
        if pattern == text:
            return [0]
        pattern_hash = self.calc_hash(pattern)
        window_hash = self.calc_hash(text[-size:])
        pow_right = self.pow(size - 1)
        i = len(text) - size
        while True:
            if window_hash == pattern_hash and text[i] == pattern[0] and text[i + size - 1] == pattern[-1]:
                self.result += [i]
            i -= 1
            if i < 0:
                break
            window_hash = self.rolling_hash(window_hash, ord(text[i]), ord(text[i + size]), pow_right)
        return self.result


def main():
    h = Hash()
    print(*reversed(h.implementation(input().strip(), input().strip())))

if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
class BinaryTree:
    def __init__(self, tree):
        self.tree = tree
        self.result = list()

    def in_order(self, node):
        if node == -1:
            return
        self.in_order(self.tree[node][""left""])
        self.result.append(self.tree[node][""key""])
        self.in_order(self.tree[node][""right""])
        return self.result

    def pre_order(self, node):
        if node == -1:
            return
        self.result.append(self.tree[node][""key""])
        self.pre_order(self.tree[node][""left""])
        self.pre_order(self.tree[node][""right""])
        return self.result

    def post_order(self, node):
        if node == -1:
            return
        self.post_order(self.tree[node][""left""])
        self.post_order(self.tree[node][""right""])
        self.result.append(self.tree[node][""key""])
        return self.result

    def implementation(self):
        print(*self.in_order(0))
        self.result.clear()
        print(*self.pre_order(0))
        self.result.clear()
        print(*self.post_order(0))


def main():
    tree = list()
    n = (int(input()))
    for node in range(n):
        tree.append({""key"": None, ""left"": None, ""right"": None})
        tree[node][""key""], tree[node][""left""], tree[node][""right""] = [int(i) for i in input().strip().split("" "")]
    t = BinaryTree(tree)
    t.implementation()


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
import sys
sys.setrecursionlimit(10000000)
class BinaryTree:
    def __init__(self, tree):
        self.tree = tree
        self.result = list()

    def in_order(self, node):
        if node == -1:
            return
        self.in_order(self.tree[node][""left""])
        self.result.append(self.tree[node][""key""])
        self.in_order(self.tree[node][""right""])
        return self.result

    def implementation(self):
        if len(self.tree) == 0 or len(self.tree) == 1:
            return ""CORRECT""
        res = self.in_order(0)
        for i in range(len(res) - 1):
            if res[i] > res[i + 1]:
                return ""INCORRECT""
        return ""CORRECT""


def main():
    tree = list()
    n = (int(input()))
    for node in range(n):
        tree.append({""key"": None, ""left"": None, ""right"": None})
        tree[node][""key""], tree[node][""left""], tree[node][""right""] = [int(i) for i in input().strip().split("" "")]
    t = BinaryTree(tree)
    print(t.implementation())


if __name__ == ""__main__"":
    main()
 -End,"
 import sys

sys.setrecursionlimit(100000)


class BinaryTree:
    def __init__(self, tree):
        self.tree = tree
        self.result = list()
        self.min = -2 ** 31
        self.max = 2 ** 31
        if len(tree) > 0:
            self.root = tree[0][""key""]

    def in_order(self, node, _min, _max):
        if node == -1:
            return
        if _min <= self.tree[node][""key""] < _max:
            pass
        else:
            self.result.append(""inc"")
            return
        self.in_order(self.tree[node][""left""], _min, self.tree[node][""key""])
        self.in_order(self.tree[node][""right""], self.tree[node][""key""], _max)

    def implementation(self):
        if len(self.tree) == 0 or len(self.tree) == 1:
            return ""CORRECT""
        self.in_order(self.tree[0][""left""], self.min, self.root)
        self.in_order(self.tree[0][""right""], self.root, self.max)
        if ""inc"" not in self.result:
            return ""CORRECT""
        else:
            return ""INCORRECT""


def main():
    tree = list()
    n = (int(input()))
    for node in range(n):
        tree.append({""key"": None, ""left"": None, ""right"": None})
        tree[node][""key""], tree[node][""left""], tree[node][""right""] = [int(i) for i in input().strip().split("" "")]
    t = BinaryTree(tree)
    print(t.implementation())


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
import sys

sys.setrecursionlimit(100000)


class BinaryTree:
    def __init__(self, tree):
        self.tree = tree
        self.result = list()
        self.min = -2 ** 31
        self.max = 2 ** 31
        if len(tree) > 0:
            self.root = tree[0][""key""]

    def in_order(self, node, _min, _max):
        if node == -1:
            return
        if _min < self.tree[node][""key""] < _max:
            pass
        else:
            self.result.append(""inc"")
            return
        self.in_order(self.tree[node][""left""], _min, self.tree[node][""key""])
        self.in_order(self.tree[node][""right""], self.tree[node][""key""], _max)

    def implementation(self):
        if len(self.tree) == 0 or len(self.tree) == 1:
            return ""CORRECT""
        self.in_order(self.tree[0][""left""], self.min, self.root)
        self.in_order(self.tree[0][""right""], self.root, self.max)
        if ""inc"" not in self.result:
            return ""CORRECT""
        else:
            return ""INCORRECT""


def main():
    tree = list()
    n = (int(input()))
    for node in range(n):
        tree.append({""key"": None, ""left"": None, ""right"": None})
        tree[node][""key""], tree[node][""left""], tree[node][""right""] = [int(i) for i in input().strip().split("" "")]
    t = BinaryTree(tree)
    print(t.implementation())


if __name__ == ""__main__"":
    main()
 -End,"
 # put your python code here
exec(""print(('Недосып', 'Это нормально', 'Пересып')[sum([0 if h < i else 1 for i in [a, b]]) - int(h==b)])"", {k:int(input()) for k in ('a', 'b', 'h')})



 -End,"
 print(('Обычный', 'Високосный', 'ОШИБКА ВВОДА (число должно быть от 1900 до 3000), попробуйте еще раз, спасибо!')[sum([bool((not (y % 4)) * (y % 100) + (not (y % 400))) if 1900 <= y <=3000 else 2 for y in [int(input())]])])





 -End,"
 print(*[True if (-15 < x <= 12) + (14 < x < 17) + (x >= 19) else False for x in ([int(input())])])



 -End,"
 data = str(input())
(output, n, b) = '', 0, 1
while n < len(data):
    if (n+b) < len(data) and data[n] == data[n+b]:
        b += 1
        continue
    else:
        output = output + data[n] + str(b)
    n += b
    b = 1
print(output)
 -End,"
 print(sum([int(i) for i in input().split()]))
 -End,"
 data, output = [int(i) for i in input().split()], []
for n in range(len(data)):
    if len(data) == 1:
        output = data
        break
    output.append(data[n-1] + data[(n+1)*(n != len(data) - 1)])
print(*output, sep=' ')
 -End,"
 data, output = [int(i) for i in input().split()], []
for n in data:
    if data.count(n) > 1 and not(output.count(n)):
        output.append(n)
print(*(sorted(output)), sep=' ')
 -End,"
 data = []
s = n = 0
while True:
    data.append(int(input()))
    s = s + data[n]**2
    if sum(data) == 0:
        print(s)
        break
    n += 1
 -End,"
 n, z = int(input()), 0
for c in range(1, n+1):
    for x in range(c):
        if x < c and z < n:
            print(c, end=' ')
            z += 1
        else:
            break
 -End,"
 data, output = [int(i) for i in input().split()], []
x, z = int(input()), 0
for n in range(data.count(x)):
    output.append(z + data[z::].index(x))
    z = output[n] + 1
print(*output, 'Отсутствует' * (not(data.count(x))))
 -End,"
 d, i = [], 0
while True:
    ind = input()
    if ind == 'end':
        break
    d.extend([ind.split()])
    i += 1
    j = len(ind.split())
for e in range(i):
    for g in range(j):
        x = int(d[e - 1][g]) + int(d[e][g - 1]) + int(d[(e + 1) * (e != (i - 1))][g]) + int(d[e][(g + 1) * (g != (j - 1))])
        print(x, end=' ')
    print()
 -End,"
 n = int(input())
x = y = 0
s = 1
world_2d = ([[0 for x in range(n)] for y in range(n)])
world_2d[0][0] = 1
while s < (n**2):
    while (x + 1) != n and world_2d[y][x + 1] == 0:
        x += 1
        s += 1
        world_2d[y][x] = s
    while (y + 1) != n and world_2d[y + 1][x] == 0:
        y += 1
        s += 1
        world_2d[y][x] = s
    while x != 0 and world_2d[y][x - 1] == 0:
        x -= 1
        s += 1
        world_2d[y][x] = s
    while y != 0 and world_2d[y - 1][x] == 0:
        y -= 1
        s += 1
        world_2d[y][x] = s
for y in range(n):
    for x in range(n):
        print(world_2d[y][x], end=' ')
    print()
 -End,"
 def f(x):
    if x <= -2:
        x = 1 - (x + 2)**2
        return x
    elif -2 < x <= 2:
        x = -x / 2
        return x
    elif 2 < x:
        x = (x - 2)**2 + 1
        return x
    print('ТАКОГО НЕ МОЖЕТ БЫТЬ')
    return



 -End,"
 from  math import pi
data = float(input())
p = 2 * pi * data
print(p)
 -End,"
 import sys
f = sys.argv
for x in range(1, len(f)):
    print(f[x], end=' ')
 -End,"
 n = int(input())
game, data = [[0] * 4] * n, {}
for i in range(n):
    game[i] = input().split(';')
for i in game:
    data[i[0]] = [0] * 3
    data[i[2]] = [0] * 3
for n in range(0, 4, 2):
    for i in game:
        data[i[n]][abs(0 - n)] += i[1] > i[3]
        data[i[n]][abs(1 - n)] += i[1] == i[3]
        data[i[n]][2 - n] += int(i[1] < i[3])
for komanda, value in data.items():
    print(str(komanda) + ':' + str(sum(value)), *value, (value[0] * 3) + value[1])
 -End,"
 n, text = int(input()), []
words = [input().lower() for i in range(n)]
c = int(input())
for x in range(c):
    text += input().lower().split()
print(*(set(text) - set(words)), sep='\n')
 -End,"
 n = int(input())
data = [[0] * 2] * n
x = y = 0
for i in range(n):
    data[i] = input().split()
for n in range(n):
    x += (data[n][0] == 'восток') * int((data[n][1]))
    x -= (data[n][0] == 'запад') * int((data[n][1]))
    y += (data[n][0] == 'север') * int((data[n][1]))
    y -= (data[n][0] == 'юг') * int((data[n][1]))
print(x, y)
 -End,"
 def closest_mod_5(x):
    while True:
        if x % 5 == 0:
            return x
        x += 1
    return ""I don't know :("" #контрактное программирование 
 -End,"
 def add(space, var):
    global data
    data[space].append(var)
    return


def create(new_space, parent):
    global data
    data[new_space] = [parent]
    return


def get(space, var):
    while True:
        if var in data[space]:
            print(space)
            return
        if space == 'global':
            print('None')
            return
        space = data[space][0]


n = int(input())
data = {'global': []}
for x in range(n):
    a, b, c = map(str, input().split())
    eval(a)(b, c)
exit() -End,"
 class Buffer:
    def __init__(self):
        self.tup = ()

    def add(self, *a):
        self.tup += a
        while len(self.tup) >= 5:
            print(sum(self.tup[:5]))
            self.tup = self.tup[5:]

    def get_current_part(self):
        return [*self.tup] -End,"
 def search(var):
    for z in data[var]:
        ch.append(z)
        if z in data: search(z)
    return ch
data = {}
for i in range(2):
    n = int(input())
    s_data = [0] * n
    for x in range(n):
        inp = input().split()
        if bool(i): s_data[x] = inp[0]
        else: data[inp[0]] = tuple(inp[2:])
for i in range(1, len(s_data)):
    ch = []
    for x in range(i):
        if s_data[x] not in search(s_data[i]): continue
        print(s_data[i])
        break -End,"
 import json
ch = []
data = {}
pd = json.loads(input())
for i in pd:
    data[i['name']] = i['parents']


def search(var):
    for key, value in data.items():
        if var in value:
            c.append(key)
            search(key)
    return len(set(c)) + 1


for i in data.keys():
    ch.append(i)
for i in sorted(ch):
    c = []
    print(i, "":"", search(i))
exit()
 -End,"
 import urllib
from urllib import request
import numpy as np

fname = input()  # read file name from stdin
f = urllib.request.urlopen(fname)  # open file from URL
X = np.loadtxt(f, delimiter=',', skiprows=1)  # load data to work with
Y = np.array(X[:, 0])
X[:, 0] = 1
step1 = X.T.dot(X)
step2 = np.linalg.inv(step1)
step3 = step2.dot(X.T)
b = step3.dot(Y)
print(*b)
exit() -End,"
 import numpy as np


def update_mini_batch(self, x, y, learning_rate, eps):
    j_0 = J_quadratic(self, x, y)
    self.w -= learning_rate * compute_grad_analytically(self, x, y)
    j_1 = J_quadratic(self, x, y)
    return j_0 - j_1 < eps
 -End,"
 # Your code goes here
mean_concentrations = concentrations.groupby(['genus']).mean()




 -End,"
 import pandas as pd    
# переменная my_stat уже создана
subset_1 = my_stat[:10].drop(['V2', 'V4'], axis=1)
subset_2 = my_stat.drop([0, 4]).drop(['V1', 'V3'], axis=1) -End,"
 import pandas as pd    
# переменная my_stat уже создана
subset_1 = my_stat.query(""V1 > 0 & V3 == 'A'"")
subset_2 = my_stat.query(""V4 >= 1 | V2 != 10"") -End,"
 import pandas as pd    
# переменная my_stat уже создана
my_stat = my_stat.assign(V5 = my_stat.V1 + my_stat.V4, V6 = np.log(my_stat.V2)) -End,"
 import pandas as pd    
# переменная my_stat уже создана
my_stat = my_stat.fillna(0)
my_stat.n_users = my_stat.n_users.where(my_stat.n_users >= 0, my_stat.n_users[my_stat.n_users >= 0].median()) -End,"
 import pandas as pd
# переменная my_stat уже создана
mean_session_value_data = my_stat.groupby('group', as_index=False)\
    .aggregate({'session_value': 'mean'})\
    .rename(columns={'session_value': 'mean_session_value'}) -End,"
 #You already have a DNA sequence stored as my_seq. 

#Write your code here
print(len(my_seq.replace('C', ' ').split(' ')) - 1)



 -End,"
 # You already have a list stored as prot_sizes
# Write your code here
import pandas as pd
df = pd.Series(prot_sizes)
print(list(df[df>=250]))


 -End,"
 def replace_aa(sequence):
    return sequence.replace(sequence[-5:], sequence[:5])
print(replace_aa(test_prot)) -End,"
 df = list(map(int, open(""my_file.txt"").read().split()))
out = 'Number of SNP IDs: ' + str(len(df)) + '\n' + 'Total SNPs: ' + str(sum(df)) + '\n' + 'Highest frequency: ' + str(max(df)) + '\n' + 'Lowest frequency: ' + str(min(df))
out_file = open(""stats.txt"",""w"")
print(out)
out_file.write(out) -End,"
 f, c = open(""seq_file.txt"", ""r""), 0
for x in f:
    if x != '>test_sequence':
        for i in 'GC':
            b = x.count(i)
            c += b*100/len(x)
print(""GC content is: {}"".format(c)) -End,"
 def fib(n):
    # put your code here
    x, y = 0, 1
    for i in range(n - 1):
        x, y = y, x + y
    return y


def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main()
     -End,"
 def fib_digit(n):
    x, y = 0, 1
    for i in range(n - 1):
        x, y = y % 10, x + y
    return y % 10


def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 def fib_mod(n, m):
    S  = [[0, 1], [0]]
    for i in range(2, m * 6 + 1):
        S[0].append((S[0][i - 1] + S[0][i - 2]) % m)
        S[1][0] += 1
        if S[0][i - 1:i + 1] == [0, 1]:
            return S[0][n % S[1][0]]

def main():
    n, m = map(int, input().split())
    print(fib_mod(n, m))


if __name__ == ""__main__"":
    main() -End,"
 import sys
import numpy as np
input = sys.stdin
item, cost = [], 0
item_count, bag_size = map(int, input.readline().split())
for i in range(item_count):
    x, y = map(int, input.readline().split())
    item.append((x, y, x / y))
dtype = [('price', float),  ('size', float), ('cost', float)]
item_s = np.sort(np.array(item, dtype=dtype), order='cost')[::-1]
for i in range(item_count):
    if item_s['size'][i] > bag_size:
        cost += bag_size * item_s['cost'][i]
        break
    cost += item_s['price'][i]
    bag_size -= item_s['size'][i]    
print(cost)

 -End,"
 res, s = [], 0
n = int(input())
for i in range(n):
    res.append(i + 1)
    s += (i + 1)
    if s > n:
        res.pop(s - n - 1)
        break
print(len(res))
print(*res)

 -End,"
 a, b = map(int, input().split())
for x in '+', '-', '*', '/', '**':
    print(eval('a' + x + 'b'))
 -End,"
 df = [int(input()) for x in range(5)]
print(sum([df[x] * (6 - x) for x in range(1, 5)]) / df[0])



 -End,"
 # put your python code here
print(*sorted(list(map(int, input().split()))))



 -End,"
 X = int(input())
Y = int(input())
print(X*60 + Y) -End,"
 time = int(input())
chas = time // 60
minut = time % 60
print(chas)
print(minut)



 -End,"
 min_son = int(input())
hours = int(input())
min = int (input())
son = hours * 60 + min + min_son
print(son//60)
print(son%60)



 -End,"
 rec_min = int(input())
rec_max = int(input())
really = int(input())
if (really >= rec_min) and (really <= rec_max):
   print('Это нормально')
elif really < rec_min:
   print('Недосып')
else:
   print('Пересып')




 -End,"
 god = int(input())
if (god % 4 == 0) and (god % 100 != 0):
   print('Високосный')
elif (god % 400 == 0):
   print('Високосный')
else:
    print('Обычный')




 -End,"
 a = int(input())
b = int(input())
c = int(input())
p = (a+b+c) / 2
s = (p*(p-a)*(p-b)*(p-c)) ** 0.5
print(s)




 -End,"
 a = int(input())
if ((a > -15) and (a <= 12)) or ((a > 14) and (a < 17)) or (a >= 19):
   print('True')
else:
   print('False')




 -End,"
 a = float(input())
b = float(input())
operation = input()
if operation == '+':
    print(a+b)
elif operation == '-':
    print(a-b)
elif operation == '/':
    if b == 0:
        print('Деление на 0!')
    else:
        print(a/b)
elif operation == '*':
    print(a*b)
elif operation == 'mod':
    if b == 0:
        print('Деление на 0!')
    else:
        print(a%b)      
elif operation == 'pow':
    print(a**b)
elif operation == 'div':
    if b == 0:
        print('Деление на 0!')
    else:
        print(a//b)



 -End,"
 pi = 3.14
forma = input()
if forma == 'треугольник':
    a = int(input())
    b = int(input())
    c = int(input())
    p = (a+b+c) / 2
    s = (p*(p-a)*(p-b)*(p-c)) ** 0.5
    print(s)
elif forma == 'прямоугольник':
    a = int(input())
    b = int(input())
    s = a * b
    print(s)
elif forma == 'круг':
    r = int(input())
    s = pi * (r ** 2)
    print(s)




 -End,"
 a = int(input()) 
b = int(input()) 
c = int(input()) 
if (a >= b) and (a >= c) and (c <= b <= a): 
   max_n = a 
   min_n = c 
   medium_n = b 
elif (a >= b) and (a >= c) and (b <= c <= a): 
   max_n = a 
   min_n = b 
   medium_n = c 
elif (b >= a) and (b >= c) and (a <= c <= b): 
   max_n = b 
   min_n = a 
   medium_n = c 
elif (b >= a) and (b >= c) and (c <= a <= b): 
   max_n = b 
   min_n = c 
   medium_n = a 
elif (c >= a) and (c >= b) and (a <= b <= c): 
   max_n = c 
   min_n = a 
   medium_n = b 
elif (c >= a) and (c >= b) and (b <= a <= c): 
   max_n = c 
   min_n = b 
   medium_n = a 
print(max_n) 
print(min_n) 
print(medium_n)




 -End,"
 # put your python code here
n = int(input())
if (n % 10 == 1) and (n % 100 != 11):
    print(str(n)+' программист')
elif ((n % 10 == 2) or (n % 10 == 3) or (n % 10 == 4)) and ((n % 100 != 12) and (n % 100 != 13) and (n % 100 != 14)):
    print(str(n)+' программиста')           
else: 
    print(str(n)+' программистов')



 -End,"
 b = str(input())
if int(b[0])+int(b[1])+int(b[2]) == int(b[3])+int(b[4])+int(b[5]):
    print('Счастливый')
else:
    print('Обычный')



 -End,"
 i,s = int(input()),0
if i != 0:
    s += i
    while i != 0:
        i = int(input())
        s += i
    print(s)
else:
    print(s)
        



 -End,"
 
a , b = int(input()) , int(input())
d = 0
if a >= b:
    d = a
if b >= a:
    d = b
while (d % a != 0) or (d % b != 0):
    d += 1
print(d)



 -End,"
 while True:
    a = int(input())
    if a < 10:
        continue
    if a > 100:
        break
    print(a)
  




 -End,"
 a,b,c,d = int(input()),int(input()),int(input()),int(input())
for i in range(c,d+1):
    print('\t',i,end='')
print()    
for i in range(a,b+1):
    print(i,end='')
    for j in range(c,d+1):
        print('\t',i*j,end='')
    print()   




 -End,"
 a,b,s,k = int(input()),int(input()),0,0
for i in range(a,b+1):
    if i % 3 == 0:
        s += i
        k += 1
if k == 0:
    ('Ни одно число не делится на 3!')
else:
    print(s/k)
        




 -End,"
 gc = input()
gc = gc.lower()
g = gc.count('g')
c = gc.count('c')
procent =(( g + c ) / len(gc)) * 100
print(procent)




 -End,"
 string,sum_number = [int(i) for i in input().split()],0
for i in string:
	sum_number += i 
print(sum_number)


 -End,"
 spisok_number,sum_number = [int(i) for i in input().split()],0
len_spisok_number = len(spisok_number)
if len_spisok_number == 0:
	print('Ошибка!Введите числа!')
if len_spisok_number == 1:
	print(spisok_number[0])
elif True:
	for index in range(0,len_spisok_number):
		if index == len_spisok_number - 1:
			sum_number += spisok_number[0] + spisok_number[index-1]
			print(sum_number,'',end='')
			sum_number = 0
		elif True:
			sum_number += spisok_number[index-1] + spisok_number[index+1]
			print(sum_number,'',end='')
			sum_number = 0



 -End,"
 a, b = [int(i) for i in input().split()], []
for i in a:
    if a.count(i) > 1 and b.count(i) == 0:
        b.append(i)
for i in b:
    print(i, end="" "")




 -End,"
 number,sum_square,sum_number = int(input()),0,0
sum_square += number ** 2
sum_number += number
while sum_number != 0:
	number = int(input())
	sum_number += number
	sum_square += number ** 2
print(sum_square)	




 -End,"
 number,i,spisok = int(input()),0,[]
while len(spisok) < number:
	for i in range(1,number+1):
		spisok += [i] * i
spisok = spisok[0:number]
for j in spisok:
	print(j,'',end='')


 -End,"
 n = ''
m = []
while True:
    n = str(input()) # ввод строк
    if n == 'end':
        break
    m.append([int(s) for s in n.split()]) 
li, lj = len(m), len(m[0])
new = [[sum([m[i-1][j], m[(i+1)%li][j], m[i][j-1], m[i][(j+1)%lj]]) for j in range(lj)] for i in range(li)]

for i in range (li):
    for j in range (lj):
        print(new[i][j], end =' ')
    print()



 -End,"
 def f(x):
    if x <= -2:
        return 1 - (x+2)**2
    elif -2 < x <= 2:
        return -x/2
    else:
        return (x-2)**2 + 1




 -End,"
 def modify_list(l):
    le = len(l)-1
    i = le
    while i!=-1:
        if l[i]%2:
            del l[i]
        else:
            l[i]=l[i]//2
        i -=1
    return





 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    # put your python code here
    if key in d:
        d[key].append(value)
        #print('ключ есть')
    elif key is not d:
        #d[2*key]=[]
        if 2*key is d:
            d[2*key].append(value)
            #print('ключ 2*key уже есть')
        elif (2*key is not d) and d.get(2*key)==None:
            d[2*key]=[]
            d[2*key].append(value)
            #print('создание ключа и + новое значение списка')
        elif (2*key is not d) and d.get(2*key)!=None:
            d[2*key].append(value)
            #print('создание ключа и + значение списка')       
    return      -End,"
 # put your python code here
n='' #инициализация строки
n = str(input())
m = [] #инициализация списка
m.append([str(s.lower()) for s in n.split()]) 
d = {} #инициализация пустого словаря
li, lj = len(m), len(m[0])
for i in range(li):
    for j in range(lj):
        p = m[i][j]
        if p in d:
            d[p]+=1
        else:
            d[p] = 1
for key,value in d.items():
   print(key,value)





 -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
d={}
k=[]
n=int(input())
for i in range(n):
    x = int(input())
    k.append(x)
for j in range(0,len(k)):
    key=k[j]
    if  key in d:
        print(d[key])
    elif key not in d:
        p = k[j]
        d[key]=f(p)
        print(d.get(key))





 -End,"
 n = int(input())
x_list = [input().split(';') for x in range(n)]
vs = [(x[0], x[2]) for x in x_list]
import itertools
clubs = set(itertools.chain.from_iterable(vs))
res = {club:[0, 0, 0, 0, 0] for club in clubs}
for kom1, gol1, kom2, gol2 in x_list:
    res[kom1][0] += 1
    res[kom2][0] += 1
    if int(gol1) > int(gol2):
        res[kom1][1] += 1
        res[kom1][4] += 3
        res[kom2][3] += 1
    elif int(gol1) < int(gol2):
        res[kom2][1] += 1
        res[kom2][4] += 3
        res[kom1][3] += 1
    elif int(gol1) == int(gol2):
        res[kom1][2] += 1
        res[kom1][4] += 1
        res[kom2][2] += 1
        res[kom2][4] += 1
for club in clubs:
    print('{}:{}'.format(club, ' '.join(map(str, res[club]))))




 -End,"
 # put your python code here
alf = input()
res_alf = input()

encode = input()
decode = input()

code = {}
decrypt = {}
for i in range(len(alf)):
    code.update([(alf[i], res_alf[i])])
    decrypt.update([(res_alf[i], alf[i])])


res_encode = []
for letter in encode:
    res_encode.append(code[letter])

print(''.join(res_encode))

res_decode = [decrypt[let] for let in decode]
print(''.join(res_decode))





 -End,"
 number = int(input())
dictionary = [input().lower() for i in range(number)]
number = int(input())
words = []
for i in range(number):
  string = input().split(' ')
  for word in string:
    words.append(word)

d = {*[elem for elem in words if dictionary.count(elem.lower()) == 0]}

print(*d, sep='\n')





 -End,"
 # put your python code here
n = int(input())
a = {'север':[0,0], 'запад':[0,0], 'юг':[0,0], 'восток':[0,0]}
for i in range(n):
    i = input().split()
    if i[0] == 'север':
        a['север'][1] += int(i[1])
    elif i[0] == 'запад':
        a['запад'][0] += int(i[1])
    elif i[0] == 'юг':
        a['юг'][1] += int(i[1])
    elif i[0] == 'восток':
        a['восток'][0] += int(i[1])
    #else:
        #print('Ошибка ввода данных')
print(int(a['восток'][0]) - int(a['запад'][0]), end=' ')
print(int(a['север'][1]) - int(a['юг'][1]))





 -End,"
 number, sum_number, i = int(input()), 0, 1
while i <= number:
	sum_number += int(input())
	i += 1
print(sum_number)
    




 -End,"
 # put your python code here
X=int(input())
H=int(input())
M=int(input())
x=(H*60)+M+X
h=x//60
m=x%60
print(h)
print(m)



 -End,"
 # put your python code here
A= float(input())
B= float(input())
O= str(input())
if O==""+"":
    print(A+B)
elif O==""-"":
    print(A-B)
elif O==""*"":
    print(A*B)
elif O==""/"":
    if B!=0:
        print(A/B)
    else:
        print(""Деление на 0!"")
elif O==""mod"":
    if B!=0:
        print(A%B)
    else:
        print(""Деление на 0!"")
elif O==""div"":
    if B!=0:
        print(A//B)
    else:
        print(""Деление на 0!"")
elif O==""pow"":
    print(A**B) -End,"
 # put your python code here
figure= str(input())
if figure==""круг"":
    r=float(input())
    print(3.14*r*r)
elif figure==""прямоугольник"":
    A= float(input())
    B= float(input())
    print(A*B)
elif figure==""треугольник"":
    a= float(input())
    b= float(input())
    c= float(input())
    p=float((a+b+c)/2)
    s=((p*(p-a)*(p-b)*(p-c))**0.5)
    print(s) 



 -End,"
 # put your python code here
a= int(input())
b= int(input())
c= int(input())
if a >=b:
    max=a
else:
    max=b
if c>=max:
    max=c
if a<=b:
    min=a
else:
    min=b
if c<=min:
    min=c
m=((a+b+c)-(min+max))
print(max)
print(min)
print(m)



 -End,"
 # put your python code here
a= int(input())
if a%10==0 or a%10==5 or a%10==6 or a%10==7 or a%10==8 or a%10==9 or a%100==11 or a%100==12 or a%100==13 or a%100==14:
    print(a,""программистов"")
elif a%10==2 or a%10==3 or a%10==4:
    print(a,""программиста"")
else: 
    print(a,""программист"")


 -End,"
 # put your python code here
z= int(input())
a=z//100000
f= z%10
e=(z%100)//10
d=(z%1000)//100
c=(z%10000)//1000
b=(z%100000)//10000
if (a+b+c)==(d+e+f):
    print(""Счастливый"")
else:
    print(""Обычный"")



 -End,"
 # put your python code here
a=int(input())
b=int(input())
i=1
while not ((i%a==0) and (i%b==0)):
       i=i+1
print(i)
 -End,"
 c=0
while c<=100:
    c=int(input())
    if c>=10 and c<=100:
        print(c)



 -End,"
 # put your python code here
a=int(input())
b=int(input())
c=int(input())
d=int(input())
for k in range (c,d+1):
    print ('\t',k,end='')
for i in range (a-1,b+1):
    if i >=a:
     print(i,end='\t')
     for j in range (c,d+1):
        print(j*i,end='\t')
    print()



 -End,"
 message = str(input())
cnt = 1
x = 1
j = message[x:x+1]
for i in message:
    if i in j:
        cnt += 1
    else:
        print(i, end='')
        print(cnt, end='')
        cnt = 1
    x += 1
    j = message[x:x+1]
 -End,"
 # put your python code here
a=[int(i) for i in input().split()]
s=0
for k in range(len(a)):
    s+=a[k]
print(s)



 -End,"
 # put your python code here
a=[int(i) for i in input().split()]
if len(a)==1:
    print(a[0])
else:
    tcepochka=[]
    for z in range((len(a)-1)):
        l=z-1
        p=z+1
        r=a[l]+a[p]
        tcepochka.append(r)
    posledny=a[(len(a)-2)]+a[0]
    tcepochka.append(posledny)
    for k in tcepochka:
        print(k,end=' ')


 -End,"
 indik=True
Sum=0
Kv=0
while indik :
    i= int(input())
    Sum+=i
    Kv+=i*i
    if Sum==0:
        indik=False
print(Kv)




 -End,"
 L=int(input())
if L==1:
    print(1)
elif L==2:
    print(1,2)
else:
    cnt=0
    for i in range (L):
        for l in range(i):
            if cnt<L:
                print(i,end=' ')
                cnt+=1



 -End,"
 s=[int(i) for i in input().split()]
x=int(input())
L=[]
for i in range(len(s)):
    if s[i]==x:
        L.append(i)
for k in L:
    print(k,end=' ')
if L==[]:
    print('Отсутствует')

 -End,"
 def f(x):
    if x <=-2:
        return ((1)-((x+2)**2))
    elif -2<x<=2:
        return -(x/2)
    elif x>2:
        return (((x-2)**2) +1)



 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key in d :
        d[key]+=[value]
    elif key not in d:
        if 2*key not in d:
            d[2*key]=[value]
        else:
            d[2*key]+=[value]

# не добавляйте кода вне функции -End,"
 # put your python code here
d={}
spisok=[str(i).lower() for i in input().split()]
for i in spisok:
    c=spisok.count(i)
    d[i]=c
for key,value in d.items():
    print(key,' ',value)




 -End,"
 import sys
print(' '.join(sys.argv[1:]))




 -End,"
 n=int(input())
d={}
for i in range(n):
    stroka=[str(i) for i in input().split(';')]
    if stroka[0] not in d:
        d[stroka[0]]=[0,0,0,0,0] 
    if stroka[2] not in d:
        d[stroka[2]]=[0,0,0,0,0]
    if int(stroka[1]) > int(stroka[3]):
        d[stroka[0]][0]+=1
        d[stroka[0]][1]+=1
        d[stroka[0]][4]+=3
        d[stroka[2]][0]+=1
        d[stroka[2]][3]+=1
    if int(stroka[1]) < int(stroka[3]):
        d[stroka[0]][0]+=1
        d[stroka[0]][3]+=1
        d[stroka[2]][0]+=1
        d[stroka[2]][1]+=1
        d[stroka[2]][4]+=3
    if int(stroka[1]) == int(stroka[3]):
        d[stroka[0]][0]+=1
        d[stroka[0]][2]+=1
        d[stroka[0]][4]+=1
        d[stroka[2]][0]+=1
        d[stroka[2]][2]+=1
        d[stroka[2]][4]+=1
for key in d.keys():
    toprint=str(key)+':'
    print(toprint,end='')
    s=d.get(key)
    for q in s:
        print(q,end=' ')
    print()


 -End,"
 abcin=str(input())
abcout=str(input())
toshif=str(input())
todeshif=str(input())
shif=[]
deshif=[]
for i in toshif:
    for k in range(len(abcin)):
        if i==abcin[k]:
            shif.append(abcout[k])
for z in todeshif:
    for o in range(len(abcout)):
        if z==abcout[o]:
            deshif.append(abcin[o])
for x in shif:
    print(x,end='')
print()
for r in deshif:
    print(r,end='')




 -End,"
 x=0
y=0
for i in range(int(input())):
    stroka=str(input()).split(' ')
    if stroka[0]=='север':
        y+=int(stroka[1])
    if stroka[0]=='запад':
        x-=int(stroka[1])
    if stroka[0]=='юг':
        y-=int(stroka[1])
    if stroka[0]=='восток':
        x+=int(stroka[1])
print(x,' ',y)




 -End,"
 def closest_mod_5(x):
    g=x//10
    x=x%10
    if x < 5:
        return g*10+5
    if x >=5:
        return g*10+10





 -End,"
 def C(n,k):
    if k ==0:
        return 1
    elif k>n:
        return 0
    else:
        return C(n-1,k)+C(n-1,k-1)
n, k = map(int, input().split())
print(C(n,k))




 -End,"
 class MoneyBox:
    def __init__(self, capacity=0):
        self.cap=capacity
    def can_add(self, v):
        if self.cap >= v:
            return True
        else:
            return False
    def add(self, v):
        self.cap-=v


 -End,"
 class Buffer:
    def __init__(self):
        self.stroka=[]
    def add(self, *a):
        self.stroka+=list(a)
        l=len(self.stroka)
        if l >=5:
            s=0
            for i in range(5):
                s+=self.stroka[i]
            self.stroka=self.stroka[5:]
            print(s)
            self.add()
    def get_current_part(self):
        return self.stroka -End,"
 class ExtendedStack(list):
    def sum(self):
        top1=self.pop()
        top2=self.pop()
        self.append(top1+top2)

    def sub(self):
        top1=self.pop()
        top2=self.pop()
        self.append(top1-top2)

    def mul(self):
        top1=self.pop()
        top2=self.pop()
        self.append(top1*top2)

    def div(self):
        top1=self.pop()
        top2=self.pop()
        self.append(top1//top2)




 -End,"
 class NonPositiveError(Exception):
    pass
class PositiveList(list):
    def append(self,x):
        if x >0:
            super(PositiveList,self).append(x)
        else:
            raise NonPositiveError




 -End,"
 from datetime import date, timedelta
l=[ int(i) for i in input().split(' ')]
nowd=date(l[0], l[1], l[2])
a=int(input())
d=timedelta(days=a)
res=nowd+d
print(res.year, res.month, res.day)




 -End,"
 def primes():
    n = 2
    prim = set()
    while True:
        for p in prim:
            if n % p == 0:
                break
        else:
            prim.add(n)
            yield n
        n += 1




 -End,"
 def mod_checker(x,mod=0):
    return lambda y:y%x==mod




 -End,"
 # put your python code here
s = input()
a = input()
b = input()
if s.find(a) == -1:
    print(0)
else:
    new = s.replace(a, b)
    k = 1
    while a in new:
        new = new.replace(a,b)
        k += 1
        if k > 1000:
            print(""Impossible"")
            break
    if k < 1000:
        print(k)




 -End,"
 # put your python code here
s = input()
t = input()
L = len(t)
k = 0
z = 0
for i in range(len(s)):
    if t == s[z:L]:
        k += 1
    z += 1
    L += 1
print(k)



 -End,"
 # put your python code here
import sys
import re
pattern = r""\bcat\b""
for string in sys.stdin:
    string = string.strip()
    match = re.search(pattern, string)
    if match != None:
        print(string)



 -End,"
 # put your python code here
import sys
import re

pattern = r""z...z""
for string in sys.stdin:
    string = string.strip()
    if re.search(pattern, string):
        print(string)



 -End,"
 # put your python code here
import sys
import re

pattern = r""\\""
for string in sys.stdin:
    string = string.strip()
    if re.search(pattern, string):
        print(string)



 -End,"
 # put your python code here
import sys
import re

pattern = r""\b(\w+?)\1\b""
for string in sys.stdin:
    string = string.strip()
    if re.search(pattern, string):
        print(string)



 -End,"
 # put your python code here
import sys
import re

pattern = r""human*""
for string in sys.stdin:
    string = string.strip()
    print(re.sub(pattern, ""computer"", string))

    



 -End,"
 
import sys
import re

pattern = r""\b[Aa]+\b""
for string in sys.stdin:
    string = string.strip()
    print(re.sub(pattern, ""argh"", string, count=1))



 -End,"
 import sys
import re

pattern = r""(\b\w)(\w)""
for string in sys.stdin:
    string = string.strip()
    print(re.sub(pattern, r""\2\1"", string))


 -End,"
 # put your python code here
import sys
import re

pattern = r""(\w)\1+""
for string in sys.stdin:
    string = string.strip()
    print(re.sub(pattern, r""\1"", string, )) -End,"
 import re
import requests

content = requests.get(input()).text
d = []
for link in re.findall(r""<a(.*?)href(.*?)=(.*?)(\""|')(((.*?):\/\/)|(\.\.)|)(.*?)(\/|:|\""|')(.*)"", content):
    domain = link[8]
    if domain not in d:
        d.append(domain)
d.sort()
for i in d:
    print(i)



 -End,"
 # put your python code here
l, p = map(int, input().split())
for i in range(l, p+1):
    if i % 5 == 0 and i % 3 == 0:
        print(""FizzBuzz"")
    elif i % 3 == 0:
        print('Fizz')
    elif i % 5 == 0:
        print(""Buzz"")
    else:
        print(i)



 -End,"
 i = input()
if i==""1"": print(""I"")
if i==""5"": print(""V"")
if i==""10"": print(""X"")
if i==""50"": print(""L"")
if i==""100"": print(""C"")
if i==""500"": print(""D"")
if i==""1000"": print(""M"")




 -End,"
 a = int(input())
if a == 0: print(""Division by zero!"")
else: print(round(int(input())/a, 1))




 -End,"
 ltype = input()
if ltype == ""int"":
    a = int(input())
    b = int(input())
    if a or b: print(a + b)
    else: print(""Empty Ints"")
elif ltype == ""str"":
    a = input()
    if a: print(a)
    else: print(""Empty String"")
elif ltype == ""list"":
    a = input().split()
    if a: print(a[-1])
    else: print(""Empty List"")
else: print(""Unknown type"")
  




 -End,"
 for i in range(int(input()) + 1): print(i)




 -End,"
 n = int(input())
for i in range(0,n,2): print(i ** 2)




 -End,"
 from sys import stdin
lsum = 0
for s2 in stdin:
    s = s2.strip()
    if s == ""The End"": break
    lsum += int(s)
print(lsum)
    




 -End,"
 A = input().split()
print(*[x for x in A if x[0] != ""*""], sep = '\n')




 -End,"
 n = int(input())
for i in range(2, n + 1):
    if n % i == 0: break
print(i)




 -End,"
 n = int(input())
for i in range(1, abs(n)): print(i ** 3)




 -End,"
 def sum2(a, b): return a + b




 -End,"
 def Hello(pname=""%UserName%""): print(f""Hello, {pname}!"")




 -End,"
 def dfactorial(n):
    rez = 1
    for i in range(1 if n % 2 else 2, n + 1, 2): rez *= i
    return rez




 -End,"
 def Kfactorial(n, k=1):
    rez = 1
    for i in range(n, 0, -1 * k): rez *= i
    return rez




 -End,"
 def convert(L): return list(map(int, L))




 -End,"
 def translate(px, pn=2):
    if not px: return ""0""
    rez = """"
    while px:
        rez = str(px % pn) + rez
        px //= pn
    return rez
        




 -End,"
 import functools
import operator
def factorial(n): return functools.reduce(operator.mul, range(1, n+1)) if n else 1
def sf(n): return functools.reduce(operator.mul, map(factorial, range(1, n+1))) if n else 1




 -End,"
 import functools
import operator
from math import factorial
def sf(n): return functools.reduce(operator.mul, map(factorial, range(n+1))) 




 -End,"
 def maxId(L):
    L1 = list(map(int, L))
    lmax = max(L1)
    return L1.index(lmax)




 -End,"
 import math


def f(x): return 2 * math.atan(x)

lim = f(float(""+inf""))
print (lim) -End,"
 import math
def def_e(x):
    epsilon = 0.00000000001
    return (math.exp(x + epsilon) - math.exp(x)) / epsilon




 -End,"
 def even_indeces(l): return l[::2]
    




 -End,"
 def even_elements(l): return [x for x in l if x % 2 == 0]
   




 -End,"
 def last_to_first(l): return l[::-1]
   




 -End,"
 n = int(input()) 
res = sum([x for x in range(n + 1) if (x % 5 == 0) and (x % 3 != 0)])
print(res)




 -End,"
 def common(list_a, list_b): return list(set(list_a) & set(list_b))
    




 -End,"
 def mysort(ps):
    if ps == """": return (1, """")
    return (ps[0] != ""x"", ps)

def front_x(words): return sorted(words, key=mysort)
    




 -End,"
 def fib(n):
    a, b = 0, 1
    for _ in range(n): a, b = b, a + b
    return a




 -End,"
 n = int(input())
def donuts(n):
    if n > 9: return ""Всего пончиков: много""
    else: return f""Всего пончиков: {n}""

print(donuts(n)) -End,"
 s = input()
def both_ends(s):
    if len(s) < 2: return """"
    else: return s[:2] + s[-2:]

print(both_ends(s)) -End,"
 def numerics(n): return list(map(int,str(n)))
    




 -End,"
 def kaprekar_step(L):
    L1 = list(map(str,sorted(L)))
    L2 = L1[::-1]
    a = int("""".join(L1))
    b = int("""".join(L2))
    return b - a
    




 -End,"
 def numerics(n): return list(map(int,str(n)))

def kaprekar_step(L):
    L1 = list(map(str,sorted(L)))
    L2 = L1[::-1]
    a = int("""".join(L1))
    b = int("""".join(L2))
    return b - a

def kaprekar_loop(n):
    a, b = n, 0
    while a != b:
        print(a)
        a, b = kaprekar_step(numerics(a)), a -End,"
 def numerics(n): return list(map(int,str(n)))

def kaprekar_step(L):
    L1 = list(map(str,sorted(L)))
    L2 = L1[::-1]
    a = int("""".join(L1))
    b = int("""".join(L2))
    return b - a

def kaprekar_loop(n):
    if n == 1000:
        print(""Ошибка! На вход подано число 1000"")
        return
    L1 = list(map(str,sorted(numerics(n))))
    if L1[0] == L1[3]:
        print(f""Ошибка! На вход подано число {n} - все цифры одинаковые"")
        return
    a, b = n, 0
    while a != b:
        print(a)
        a, b = kaprekar_step(numerics(a)), a -End,"
 def numerics(n): return list(map(int,str(n)))




 -End,"
 def kaprekar_step(L):
    L1 = list(map(str,sorted(L)))
    L2 = L1[::-1]
    a = int("""".join(L1))
    b = int("""".join(L2))
    return b - a




 -End,"
 def kaprekar_check(n):
    str1 = str(n)
    if len(str1) not in [3, 4, 6]: return False
    if len(set(x for x in str1)) == 1: return False
    if n in[100, 1000, 100000]: return False
    return True

def numerics(n): return list(map(int,str(n)))

def kaprekar_step(L):
    L1 = list(map(str,sorted(L)))
    L2 = L1[::-1]
    a = int("""".join(L1))
    b = int("""".join(L2))
    return b - a

def kaprekar_loop(n):
    if not kaprekar_check(n):
        print( f""Ошибка! На вход подано число {n}, не удовлетворяющее условиям процесса Капрекара"")
        return
    L = []
    a = n
    while a not in L:
        print(a)
        L.append(a)
        a = kaprekar_step(numerics(a))
    if L[-1] != a: print(f""Следующее число - {a}, кажется процесс зациклился..."")



 -End,"
 def luka(L0, L1, n):
    a, b = L0, L1
    for _ in range(n): a, b = b, a + b
    return a




 -End,"
 def fi(L0, L1, n):
    a, b = L0, L1
    for _ in range(n - 1): a, b = b, a + b
    return Decimal(b) / Decimal(a)




 -End,"
 def kaprekar(n):
    rez = False
    str1 = str(n**2)
    for i in range(1, len(str1)):
        a = int(str1[:i])
        b = int(str1[i:])
        if (a + b == n) and (a > 0) and (b > 0): rez = True
    return rez  




 -End,"
 a = int(input())
b = int(input())
print(b//a)



 -End,"
 a = int(input())
b = a*a
c = b*b
print(b*c)




 -End,"
 print(input()[::-1])




 -End,"
 a = int(input())
b = int(input())
c = int(input())
s = (a*100+b)*c
print(s//100, s%100)



 -End,"
 numrow = list(int(s) for s in input().split())
tofind = int(input())
if tofind in numrow:
    for id, item in enumerate(numrow):
        if item == tofind:
            print(id, end = ' ')
else:
    print(None)
 -End,"
 command = input()
while command != 'End':
    print(f'Processing ""{command}"" command...')
    command = input()
print(""Good bye!"")
 -End,"
 seq = [int(x) for x in input().split()]
check = set()
idealseq = set(int(x) for x in range(1, len(seq)))
for i in range(len(seq)-1):
    check.add(abs(seq[i+1] - seq[i]))
if check == idealseq:
    print('Jolly')
else:
    print('Not jolly')
 -End,"
 a, b = (float(input()) for i in range (2))
oper = input()
err = (f'Деление на 0!')
operlist = {
    '+': a + b,
    '-': a - b,
    '/': a / b if b else err,
    '*': a * b,
    'mod': a % b if b else err,
    'pow': a ** b,
    'div': a // b if b else err,
}
print(operlist[oper])
 -End,"
 num = int(input())
if num % 10 in (2, 3, 4) and num % 100 not in (12, 13, 14):
    print(f'{num} программиста')
elif num % 10 in (5, 6, 7, 8, 9, 0) or num % 100 in (11, 12, 13, 14):
    print(f'{num} программистов')
elif num % 10 == 1 and num % 100 != 11:
    print(f'{num} программист')
 -End,"
 max, min = (int(input()) for i in range(2))
count = 2
if max < min:
    max, min = min, max
res = max
while res % min != 0:
    res = max * count
    count += 1
print(res)
 -End,"
 a, b, c, d = (int(input()) for _ in range(4))
for i in range(c, d + 1):
    print(f'\t{i}', end = '')
for j in range(a, b + 1):
    print(f'\n{j}\t', end = '')
    for k in range(c, d + 1):
        print(f'{j*k}', end = '\t')
 -End,"
 tocode = input()
count = 1
res = ''
for i in range(len(tocode) - 1):
    if tocode[i] == tocode[i + 1]:
        count += 1
    else:
        res += tocode[i] + str(count)
        count = 1
res += tocode[-1] + str(count)
print(res)
 -End,"
 row = list(map(int, input().split()))
if len(row) == 1:
    print(f'{row[0]}')
if len(row) >= 2:
    for i in range(len(row) - 1):
        print(f'{row[i - 1] + row[i + 1]}', end=' ')
    print(f'{row[0] + row[-2]}')
 -End,"
 row, res = sorted(list(map(int, input().split()))), []
for i in range(len(row)):
    if row.count(row[i]) > 1 and (row[i] not in res):
        res.append(row[i])
for x in res:
    print(f'{x}', end = ' ')
 -End,"
 bou, res = int(input()), []
while len(res) <= bou:
    for i in range(1, bou + 1):
        for j in range(i):
            res.append(i)
            if len(res) >= bou:
                break
print(*res[:bou])
 -End,"
 lst = list(int(i) for i in input().split())
tofind = int(input())
if lst.count(tofind) == 0:
    print(f'Отсутствует')
else:
    for i in range (len(lst)):
        if lst[i] == tofind:
            print(f'{i}', end = ' ')
 -End,"
 def modify_list(l):
    for i in range(len(l) - 1, -1, -1):
        if l[i] % 2 == 0:
            l[i] //= 2
        else:
            l.pop(i) -End,"
 mylist = input().lower().split()
mydict = {word:mylist.count(word) for word in mylist}
for k, v in mydict.items():
    print(f'{k} {v}')
 -End,"
 param = [int(input()) for i in range(int(input()))]
mydict = {word:f(word) for word in set(param)}
for word in param:
    print(f'{mydict.get(word)}')
 -End,"
 from math import tau
print(f'{tau * float(input())}')
 -End,"
 from sys import argv
for i in range(1, len(argv)):
    print(f'{argv[i]}', end=' ')
 -End,"
 num = int(input())
stand = {}
for i in range(num):
    team1, score1, team2, score2 = input().split(';')
    if team1 not in stand:
        stand[team1] = {'games': 0, 'wins': 0, 'draws': 0, 'loses': 0, 'pts': 0}
    if team2 not in stand:
        stand[team2] = {'games': 0, 'wins': 0, 'draws': 0, 'loses': 0, 'pts': 0}
    if int(score1) > int(score2):
        stand[team1]['wins'] += 1
        stand[team2]['loses'] += 1
    elif int(score1) < int(score2):
        stand[team1]['loses'] += 1
        stand[team2]['wins'] += 1
    elif int(score1) == int(score2):
        stand[team1]['draws'] += 1
        stand[team2]['draws'] += 1
for item in stand:
    stand[item]['games'] = stand[item]['wins'] + stand[item]['draws'] + stand[item]['loses']
    stand[item]['pts'] = 3 * stand[item]['wins'] + stand[item]['draws']
    print(f""{item}:{stand[item]['games']} {stand[item]['wins']} {stand[item]['draws']} {stand[item]['loses']} {stand[item]['pts']}"")
 -End,"
 dict = set(input().lower() for i in range(int(input())))
text = set()
for i in range(int(input())):
    paragraph = input().strip().split(' ')
    for item in paragraph:
        text.add(item.lower())

for item in text - dict:
    print(item)
 -End,"
 matrix_len = int(input())
matrix = [[0 for i in range(matrix_len)] for i in range(matrix_len)]

# Счетчики для заполнения матрицы
i, j = 0, 0
# Счетчики краев заполнения матрицы
forward_go, reverse_go = matrix_len, -1
# Текущее число и максимальное число для заполнения
counter, counter_len = 1, matrix_len ** 2

# Цикл работает пока счетчики краев не сравняются и пока число для заполнения не достигнет максимального значения
while (forward_go > reverse_go) and (counter <= counter_len):

    # Заполнение на восток
    for j in range(j, forward_go, 1):
        matrix[i][j] = counter
        counter += 1
    # Шаг на юг, т.к. первый элемент столбца уже заполнили шагом ранее
    i += 1

    # Заполнение на юг
    for i in range(i, forward_go, 1):
        matrix[i][j] = counter
        counter += 1
    # Шаг на запад, т.к. последний элемент строки уже заполнили шагом ранее
    j -= 1
    forward_go -= 1

    # Заполнение на запад
    for j in range(j, reverse_go, -1):
        matrix[i][j] = counter
        counter += 1
    # Шаг на север, т.к. последний элемент столбца уже заполнили шагом ранее
    i -= 1
    reverse_go += 1

    # Заполнение на север
    for i in range(i, reverse_go, -1):
        matrix[i][j] = counter
        counter += 1
    # Шаг на восток, т.к. первый элемент строки уже заполнили шагом ранее
    j += 1


for item in matrix:
    print(*item, sep="" "")
 -End,"
 cipher = ' abcdefghijklmnopqrstuvwxyz'


def decoder(text, key):
    answer = ''
    for item in text:
        code = cipher.find(item)
        shift = code + key
        if abs(shift) >= len(cipher):
            shift %= len(cipher)
        answer += cipher[shift]
    return f'Result: ""{answer}""'

clue = int(input())
sentence = input().strip()
print(decoder(sentence, clue))
 -End,"
 def uppercamelcase(phrase):
    new_string = """"
    new_string += string[0].upper()
    for i in range(1, len(string)):
        if (string[i] != '_') and (string[i-1] != '_'):
            new_string += string[i]
        elif string[i] == '_':
            pass
        else:
            new_string += string[i].upper()
    return new_string


string = input()
print(uppercamelcase(string))
 -End,"
 seq, iter = [], 1
length = int(input())
while len(seq) < length:
    temp = [iter] * iter
    seq.extend(temp)
    iter += 1
for item in seq[:length]:
    print(item, end=' ')
 -End,"
 order = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
card1, card2 = [i for i in input().split(' ')]
trump = input()
if card1[-1] == card2[-1]:
    if order.index(card1[:-1]) > order.index(card2[:-1]):
        print(f'First')
    elif order.index(card1[:-1]) < order.index(card2[:-1]):
        print(f'Second')
    else:
        print(f'Error')
else:
    if card1[-1] == trump:
        print(f'First')
    elif card2[-1] == trump:
        print(f'Second')
    else:
        print(f'Error')
 -End,"
 cipher = ''.join([chr(i) for i in range(int(0x1f600), int(0x1f64f) + 1)])


def decoder(text, key):
    answer = ''
    for item in text:
        code = cipher.find(item)
        shift = code + key
        if abs(shift) >= len(cipher):
            shift %= len(cipher)
        answer += cipher[shift]
    return f'Result: ""{answer}""'

clue = int(input())
sentence = input().strip()
print(decoder(sentence, clue))
 -End,"
 # Для всех величин указано значение в метрах
len_dic = {'mile': 1609, 'yard': 0.9144, 'foot': 0.3048, 'inch': 0.0254, 'km': 1000, 'm': 1, 'cm': 0.01, 'mm': 0.001}
orig_num, orig_unit, _, new_unit = [i for i in input().split(' ')]
result = float(orig_num) * len_dic[orig_unit] / len_dic[new_unit]
print(f'{result:.2e}')
 -End,"
 def divider(delimoe, delitel, res_list):
    if delitel == 0:
        return None
    else:
        chastnoe = delimoe // delitel
        res_list.append(chastnoe)
        delimoe, delitel = delitel, delimoe % delitel
        return divider(delimoe, delitel, res_list)


numerator, denominator = [int(i) for i in input().split('/')]
coeffs = []
divider(numerator, denominator, coeffs)
for item in coeffs:
    print(item, end=' ')
 -End,"
 import re
string = input()
words = re.findall(r'(?:\d+)?[A-z]{1}', string)
result = ''
for item in words:
    if len(item) > 1:
        factor = re.match(r'\d+', item)
        result += int(factor.group()) * item[-1]
    else:
        result += item[-1]
print(f'{result}')
 -End,"
 counter = dict()
text = (word for word in input().lower().strip().split(' '))
for item in text:
    if item not in counter.keys():
        counter[item] = 1
    else:
        counter[item] += 1
for key, value in counter.items():
    print(f""{key} {value}"")
 -End,"
 matrix_len = int(input())
matrix = [[0 for i in range(matrix_len)] for i in range(matrix_len)]

# Счетчики для заполнения матрицы
i, j = 0, 0
# Счетчики краев заполнения матрицы
forward_go, reverse_go = matrix_len, -1
# Текущее число и максимальное число для заполнения
counter, counter_len = 1, matrix_len ** 2

# Цикл работает пока счетчики краев не сравняются и пока число для заполнения не достигнет максимального значения
while (forward_go > reverse_go) and (counter <= counter_len):

    # Заполнение на восток
    for j in range(j, forward_go, 1):
        matrix[i][j] = counter
        counter += 1
    # Шаг на юг, т.к. первый элемент столбца уже заполнили шагом ранее
    i += 1

    # Заполнение на юг
    for i in range(i, forward_go, 1):
        matrix[i][j] = counter
        counter += 1
    # Шаг на запад, т.к. последний элемент строки уже заполнили шагом ранее
    j -= 1
    forward_go -= 1

    # Заполнение на запад
    for j in range(j, reverse_go, -1):
        matrix[i][j] = counter
        counter += 1
    # Шаг на север, т.к. последний элемент столбца уже заполнили шагом ранее
    i -= 1
    reverse_go += 1

    # Заполнение на север
    for i in range(i, reverse_go, -1):
        matrix[i][j] = counter
        counter += 1
    # Шаг на восток, т.к. первый элемент строки уже заполнили шагом ранее
    j += 1


for item in matrix:
    print(*item, sep="" "")
 -End,"
 n, m = (int(i) for i in input().split(' '))
matrix = [input().split(' ') for i in range(n)]
inv = [[0 for i in range(n)] for i in range(m)]

for i in range(n):
    for j in range(m):
        inv[j][i] = matrix[i][j]

for item in inv:
    print(*item, sep="" "")
 -End,"
 print(sum([int(input()) for i in range(int(input()))]))
 -End,"
 ans = set()
for obj in objects: # доступная переменная objects
    ans.add(id(obj))
print(len(ans)) -End,"
 class Buffer:
    def __init__(self):
        self.temp = []

    def add(self, *a):
        for item in a:
            self.temp.append(int(item))

        def remover(lst):
            if len(lst) >= 5:
                print(sum(lst[:5]))
                for i in range(4, -1, -1):
                    lst.pop(i)
                return remover(lst)
            return None

        if len(self.temp) >= 5:
            remover(self.temp)

    def get_current_part(self):
        return self.temp

 -End,"
 from datetime import date, timedelta

ymd_dt = date(*(int(i) for i in input().split(' ')))
res = ymd_dt + timedelta(days = int(input()))
print(f'{res.year} {res.month} {res.day}')
 -End,"
 def primes():
    a = 1
    while True:
        a += 1
        if (a % 2 == 0 and a > 2) or (a % 5 == 0 and a > 5):
            continue
        else:
            counter = False
            for i in range(2, a):
                if a % i == 0:
                    counter = True
                    break
            if counter is False:
                yield a -End,"
 cntr, s, t = 0, input().strip(), input().strip()
for i in range(len(s) - len(t) + 1):
    if t == s[i:i + len(t)]:
        cntr += 1
print(cntr)
 -End,"
 import re, sys

for line in sys.stdin:
    line = line.rstrip()
    print(line) if len(re.findall('cat', line)) > 1 else None
 -End,"
 import re, sys

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r""\b(\w)(\w)(\w*)\b"", r""\2\1\3"", line))
 -End,"
 import re, sys

for line in sys.stdin:
    line = line.rstrip()
    print(line) if line == re.match(r'(0|1(01*0)*1)*', line).group() else None
 -End,"
 from requests import get
import re

link_a, link_b = input().strip(), input().strip()
# Шаг 1 - получаем ответ от страницы А
link_start = get(link_a).text
regex_parse = re.compile(r'(?<=href="")[\S]*?(?="">)')
# Шаг 2 - получаем все ссылки со страницы А
links_in_a = regex_parse.findall(link_start)
links_in_b = list()
# Шаг 3 - получаем ответ от всех ссылок со страниц C
# и из всех них собираем ссылки на страницы D
for item in links_in_a:
    links_in_b += regex_parse.findall(get(item.strip()).text)
# Шаг 4 - проверяем, есть ли ссылка B среди ссылок D
print('Yes') if link_b in links_in_b else print('No')
 -End,"
 from requests import get
import re
from urllib.parse import urlparse

link = input().strip()
link_text = get(link).text

# Регулярка для поиска ссылок в тексте
pattern_link = re.compile(r""(?:<a.*?\shref=[\""'])(\S+?)(?=[\""'])"")
# Регулярка для вытаскивания домена из path, если netloc не найден в URL
pattern_path = re.compile(r""^[a-z]\S+?(?=\/)|^[a-z][\w\.]+"")
# Список со всеми спарсенными URL из текста
all_links = pattern_link.findall(link_text)
# Пустой список для хранения доменов из спарсенных URL
domains = list()

for item in all_links:
    parsed = urlparse(item)  # распарсенный URL
    if parsed.netloc:  # если netloc не пустой
        if not parsed.port:  # если netloc без порта
            domains.append(parsed.netloc)
        else:  # если netloc с портом, отрезаем порт
            domains.append(parsed.netloc.replace("":"" + str(parsed.port), """"))
    else:  # если netloc пустой
        parsed_path = pattern_path.search(parsed.path)  # регуляркой пытаемся достать домен из path
        if parsed_path:  # если получилось регуляркой достать домен из path, кладем домен в domains
            domains.append(parsed_path.group())

for domain in sorted(set(domains)):
    print(domain)
 -End,"
 import json

scheme = json.loads(input())
# scheme = [{""A"": []}, {""B"": [""A""]}, {""C"": [""A""]}, {""D"": [""B"", ""C""]}, {""V"": [""D""]}]

parent_and_children = {item['name']: [] for item in scheme}
# {'A': [], 'B': [], 'C': [], 'D': [], 'V': []}

for item in scheme:
    for parent in parent_and_children:
        if parent in item['parents']:
            parent_and_children[parent].append(item['name'])
# {'A': ['B', 'C'], 'B': ['D'], 'C': ['D'], 'D': ['V'], 'V': []}
# если класс есть в parents - его прямые дети добавляются в словарь

for item in parent_and_children:
    parent_and_children[item] = set(parent_and_children[item])
# {'A': {'C', 'B'}, 'B': {'D'}, 'C': {'D'}, 'D': {'V'}, 'V': set()}
# словари с детьми преобразуются в множества


# https://eddmann.com/posts/depth-first-search-and-breadth-first-search-in-python/
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
    for upcoming in graph[start] - visited:
        dfs(graph, upcoming, visited)
    return visited


# parent_and_children = {'A': {'C', 'B'}, 'B': {'D'}, 'C': {'D'}, 'D': {'V'}, 'V': set()}
# dfs(parent_and_children, 'A') = {'A', 'D', 'C', 'V', 'B'}
for item in sorted(parent_and_children.keys()):
    print(item, ':', len(dfs(parent_and_children, item)))
 -End,"
 s, a , cnt = str(input()), str(input()), 0
while a in s:
    cnt += 1
    s = s[s.find(a) + 1:]
print(cnt)
 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.compile(r'\b[Aa]+\b').sub(""argh"", line, 1))
 -End,"
 n, stri = int(input()), str(input().strip())
alph = ' abcdefghijklmnopqrstuvwxyz'
code = alph[n%27:27] + alph[:n%27]
print(""Result: \"""" + stri.translate(str.maketrans(alph ,code)) + ""\"""") -End,"
 a, b = input().split()
n = int(a)
m = int(b)
fild = [[0 for i in range(0, m + 2)] for j in range (0, n + 2)]
data = [list("".""+input()+""."") for _ in range(0, n)]
data.append(list("".""*(m+2)))
data.insert(0,list("".""*(m+2)))
dx = [1, 1, 1, 0, 0, -1, -1, -1]
dy = [-1, 0, 1, -1, 1, -1, 0, 1]
for i in range(1, n+1):
    for j in range(1, m+1):
        mine_cnt = 0
        if data[i][j] == ""*"":
            fild[i][j] = ""*""
            continue
        for k  in range(8):
            if data[i + dy[k]][j + dx[k]] == ""*"":
                mine_cnt += 1
        fild[i][j] = str(mine_cnt)
for i in range(1, n+1):
        print("""".join(fild[i][1:-1]))



 -End,"
 print(*(lambda lst, x: [i for i, j in enumerate(lst) if j == x] if x in lst else ['None'])(input().split(), input()), end='') -End,"
 import fileinput
for i in fileinput.input():
    print(""Processing \"""" + i.strip(""\n"") + ""\"" command..."") if i != ""End"" else print(""Good bye!"")
 -End,"
 from operator import add
from functools import reduce
from itertools import zip_longest

roman = input()
d = {""I"":1,""V"":5,""X"":10,""L"":50,""C"":100,""D"":500,""M"":1000}
print(reduce(add, ((-d[x], d[x])[y is None or d[x] >= d[y]] for x, y in zip_longest(roman, roman[1:]))))
     -End,"
 h, w = map(int, input().split())
m =[]
[m.append(input().split()) for _ in range(0, h)]
t =[[m[row][col] for row in range(0, h)] for col in range(0, w)] 
for i in t:
    print(*i)
 -End,"
 s, e = map(int, input().split())
print(*['FizzBuzz' if i%15 == 0 else 'Fizz' if i%3 == 0 else 'Buzz' if i%5 == 0 else i for i in range(s, e + 1)], sep = '\n')
 -End,"
 row, col = list(map(int, input().split()))
li = [[1 if i == 'X' else 0 for i in input()] for _ in range(row)]
lo = [['X' if li[(j-1)%(row)][(i-1)%(col)] + li[(j)%(row)][(i-1)%(col)] + li[(j+1)%(row)][(i-1)%(col)] + li[(j-1)%(row)][(i)%(col)] + li[(j+1)%(row)][(i)%(col)] + li[(j-1)%(row)][(i+1)%(col)] + li[(j)%(row)][(i+1)%(col)] + li[(j+1)%(row)][(i+1)%(col)] == 3       else ('X' if li[j][i] == 1 else '.') if li[(j-1)%(row)][(i-1)%(col)] + li[(j)%(row)][(i-1)%(col)] + li[(j+1)%(row)][(i-1)%(col)] + li[(j-1)%(row)][(i)%(col)] + li[(j+1)%(row)][(i)%(col)] + li[(j-1)%(row)][(i+1)%(col)] + li[(j)%(row)][(i+1)%(col)] + li[(j+1)%(row)][(i+1)%(col)] == 2 else '.' for i in range(col)] for j in range(row)]
[print(*lo[i], sep = """") for i, _ in enumerate(lo)]
 -End,"
 a = int(input())
n = a//2 + a%2
cn, lastnum = 0, 0
out = [[0 for _ in range(a)] for __ in range(a)]
while cn < n:
    for j in range(cn, a - cn):
        lastnum += 1
        out[cn][j] = lastnum
    if lastnum == a*a: break
    for j in range(cn + 1, a - cn):
        lastnum += 1
        out[j][a - cn - 1] = lastnum
    if lastnum == a*a: break
    for j in range(a - cn - 2, cn - 1, -1):
        lastnum += 1
        out[a - cn - 1][j] = lastnum
    if lastnum == a*a: break
    for j in range(a - cn - 2, cn, -1):
        lastnum += 1
        out[j][cn] = lastnum
    if lastnum == a*a: break
    cn += 1;
[print(*out[i], sep = "" "") for i in range(a)]
 -End,"
 import json
class Pear():
    
    def __init__(self):
        self.dic = {}
        self.lstp = []
        self.fl = False
    def add(self, instr):
        w = instr.strip().split(':')
        if len(w) == 1:
            self.dic[w[0].strip()] = []
        else:
            self.dic[w[0].strip()] = w[1].strip().split()
    
    def ifpear(self, lst):
        self.fl = False
        self.ifpear1(lst)
        return self.fl
    
    def ifpear1(self, lst) -> bool:
        if lst[0] and lst[1] in self.dic:
            if lst[0] == lst[1] or lst[0] in self.dic[lst[1]]:
                self.fl = True
            else:
                for eny in self.dic[lst[1]]:
                    self.ifpear1([lst[0],eny])
                    
    def pearcnt(self, ind) -> str:
        cnt = 0
        if ind < len(self.lstp):
            valind = self.lstp[ind]
            for i in self.lstp:
                if self.ifpear([valind, i]):
                    cnt += 1
        return str(cnt)

pp = json.loads(input())
a = Pear()
[a.add(pp[_].get(""name"") + "" : "" + ' '.join(pp[_].get(""parents""))) for _ in range(len(pp))]
s = [i for i in a.dic.keys()]
[s.extend(j) for j in a.dic.values()]
a.lstp.extend(sorted(list(set(s))))
[print(a.lstp[_] + "" : "" + a.pearcnt(_)) for _ in range(len(a.lstp))]



 -End,"
 dic = {'mile': 1609, 'yard': 0.9144, 'foot': 0.3048, 'inch': 0.0254, 'km': 1000, 'm': 1, 'cm': 0.01, 'mm': 0.001}
val, k1, empt, k2 = input().split()
vi = float(val)
print('{:.2e}'.format(vi/dic[k2]*dic[k1]))
 -End,"
 st = input()
subst = input()
i = st.find(subst)
print(i, end = ' ')
while (i != -1):
    i += 1
    i = st.find(subst, i)
    if i != -1: 
        print(str(i), end = ' ')
 -End,"
 d = dict()
l = [int(input()) for i in range(int(input()))]
for j in l:
    if d.get(j) != None:
        print(d[j])
    else:
        d[j] = f(j) 
        print(d[j])
 -End,"
 print('{:.2f}'.format((lambda l:l.count('A')/len(l))(input().split())))
 -End,"
 X, Y = input(), input()
print(f""{X} and {Y} sat in the tree."")
print(f""{X} had fallen, {Y} was stolen.\nWhat's remaining in the tree?"")



 -End,"
 print(input())
 -End,"
 print(int(input()) % 10**int(input()))
 -End,"
 l = [float(input()) for _ in range(3)]
p = (l[0] + l[1] + l[2])/2
print((p*(p - l[0])*(p - l[1])*(p - l[2]))**0.5)
 -End,"
 t1, t2 = int(input()), int(input())
print(abs(t1 - t2)//60, abs(t1 - t2)%60, sep = ' ')
 -End,"
 print(sum([int(input()) for _ in range(3)]))
 -End,"
 rub, kop, kol = map(int, [input() for _ in range(3)])
st = (rub*100 + kop)*kol
print(st//100, st % 100)
 -End,"
 lst = [int(input()) for _ in range(2)]
lst.sort()
print('Большее число: ', lst[1], ', меньшее число: ', lst[0], sep = """") -End,"
 print('Нет, это не такое уж и большое число'if abs(int(input())) < 1000000000 else 'Да, это большое число')
 -End,"
 cnt, tow, lng = int(input()), input(), input()
if cnt > 6 and tow == ""Рим"" and (""английский"" in lng or ""русский"" in lng):
    print(""Подходит"")
else:
    print(""Не подходит"")
 -End,"
 lst = [input() for _ in range(4)]
if lst[0] in lst[3] and lst[1] in lst[3] and lst[2] in lst[3]:
    print(""YES"")
else:
    print(""NO"")
 -End,"
 lst = ['Арагорн', 'Леголас', 'Мериадок Брендибак', 'Боромир', 'Фродо Бэггинс']
instr = input()
b = False
for i in lst:
    if i in instr:
        b = True
        break
print((""Ты не пройдешь!"", ""Проходи!"")[b])
 -End,"
 coord = [int(input()) for _ in range(4)]
fl = abs(coord[0]-coord[2]) < 2 and abs(coord[1]-coord[3]) < 2 and (coord[0] != coord[2] or coord[1] != coord[3])
fl2 = (0 < coord[2] < 9) and (0 < coord[3] < 9)
print((""NO"", ""YES"")[fl and fl2])
 -End,"
 print(tuple(range(*sorted([int(input()) for i in range(2)]))))
       -End,"
 a = int(input())
print(tuple(range(a + a%2, a*10 + 2, 2)))
 -End,"
 a, b = [int(input()) for i in range(2)]
print(*tuple(range(a, b, -1)), sep = ""\n"")
 -End,"
 a = sorted([int(input()) for _ in  range(2)])
print(*tuple([i for i in range(*a) if not(i % 2) and i % 7 == 1]), sep = ""\n"")
 -End,"
 print(sum(i for i in range(*sorted([int(input()), int(input())]))))  -End,"
 n, f = int(input()), 1
for i in range(1, n + 1):
    f *= i
print(f)
 -End,"
 col = [""Радуга состоит только из семи цветов"", ""Красный"", ""Оранжевый"", ""Желтый"", ""Зеленый"", ""Голубой"", ""Синий"", ""Фиолетовый""]
n= int(input())
if n > 7:
    print(col[0])
else:
    print(*[col[i] for i in range(1, n + 1)], sep = ""\n"")
 -End,"
 m, cnt, s = int(input()), int(input()), 0
for i in range(cnt):
    s += int(input())
print((""Покупает"", ""Не покупает"")[s > m])
 -End,"
 a, b = sorted([int(input()), int(input())])
print(sum([i * i for i in range(a, b)]))
 -End,"
 lst = [""Error"", ""Первый месяц - январь"", ""Второй месяц - февраль"", ""Третий месяц - март"", 
       ""Четвертый месяц - апрель"", ""Пятый месяц - май"", ""Шестой месяц - июнь"", ""Седьмой месяц - июль"", 
       ""Восьмой месяц - август"", ""Девятый месяц - сентябрь"", ""Десятый месяц - октябрь"", 
       ""Одиннадцатый месяц - ноябрь"", ""Двенадцатый месяц - декабрь""]
a = int(input())
print(lst[0]) if a > 12 else print(*[lst[i] for i in range(1, a + 1)], sep = ""\n"")
 -End,"
 n, e = int(input()), """"
for a in range(1, n + 1):
    if a % 10 == 1 and (a // 10 == 0 or a // 10 > 1):
        e = ""а""
    elif (a % 10 == 2 or a % 10 == 3 or a % 10 == 4) and (a // 10 == 0 or a // 10 > 1):
        e = ""ы""
    else:
        e = """"
    print(""На лугу {n} коров{en}"".format(n = a, en = e))
 -End,"
 s = 0
while True:
    i = int(input())
    s += i
    if not(i):
        break        
print(s)
 -End,"
 rat = 0
s = [i for i in open(0).readlines()]
for j, i in enumerate(s):
    if ""rat"" in i:
        rat += 1
        print(j)
if not rat:
    print(-1)


 -End,"
 n = int(input())
while n % 2 == 0:
    n = n // 2
print(""NO"" if n > 1 else ""YES"")
 -End,"
 # Квадрат из чисел, закрученных по спирали

# Создаём таблицу n * n из нулей
n = int(input())
table = [[0 for i in range(n)] for j in range(n)]
table[0] = [i for i in range(1, n + 1)]   # Заполнили первую строку

x, y = n - 1, 0     # Текущие координаты ячейки спирали
current = n         # Текущее значение ячейки спирали
dx, dy = 0, 1       # Направление вектора спирали

# Забиваем таблицу убывающей последовательностью
for k in range(n - 1, 0, -1):
    for j in range(2):
        for i in range(k):
            current += 1
            x += dx
            y += dy
            table[y][x] = current
        # Поворотики (лучше бы сделал через тригонометрию)
        if dy == 1: dx, dy = -1, 0
        elif dx == 1: dx, dy = 0, 1
        elif dy == -1: dx, dy = 1, 0
        elif dx == -1: dx, dy = 0, -1

# Печать таблицы
for x in range(n):
    for y in range(n):
        print(table[x][y], end=' ')
    print()
 -End,"
 dict1, dict2, s1, s2 = (input() for i in range(4))   # Считали данные

def code (d1, d2, s):   # Кодирующая функция
    sc = ''    
    for char in s:
        sc += d2[d1.index(char)]
    return sc

print(code(dict1, dict2, s1))
print(code(dict2, dict1, s2))
 -End,"
 d = int(input())
dict = {input().lower() for i in range(d)}   # Считали множество слов для проверки орфгграфии

words = set()                    # Множество для всех слов текста
for i in range(int(input())):    # Цикл для ввода d строчек текста
    words.update(s.lower() for s in input().split())   # Добавляем слова в множество всего документа

print(*(words - dict), sep='\n')   # Напечатали разницу двух множеств (множества всех слов и множества слов словаря
 -End,"
 x, y = 0, 0

for i in range(int(input())):   # Цикл для вводимых черепашке команд
    s = input().split()         # Вводим команду
    direction, steps = s[0], int(s[1])   # Преобразуем в направление и количество шагов
    if direction == 'север': y += steps
    if direction == 'юг': y -= steps
    if direction == 'восток': x += steps
    if direction == 'запад': x -= steps

print(x, y)
 -End,"
 db = {'': [], 'global': ['', set()]}


def name_from(variable, namespace):
    if namespace == '':
        return None
    if variable in db[namespace][1]:
        return namespace
    return name_from(variable, db[namespace][0])


for i in range(int(input())):
    cmd, namespace, arg = input().split()

    if cmd == 'create':
        parent = arg
        db[namespace] = [parent, set()]

    if cmd == 'add':
        variable = arg
        db[namespace][1].add(variable)

    if cmd == 'get':
        variable = arg
        s = name_from(variable, namespace)
        print(s)
 -End,"
 class Buffer:
    def __init__(self):
        self.buf = []

    def add(self, *a):
        self.buf += a
        for i in range(len(self.buf) // 5):
            print(sum([self.buf.pop(0) for i in range(5)]))

    def get_current_part(self):
        return self.buf
 -End,"
 import datetime

d = datetime.date(*map(int, (input().split())))
d += datetime.timedelta(int(input()))
print(d.year, d.month, d.day)
 -End,"
 s, a, b = input(), input(), input()
cnt = 0

while s.find(a) != -1 and cnt <= 1000:
    s = s.replace(a, b)
    cnt += 1

print(cnt if cnt <= 1000 else 'Impossible') -End,"
 s, t = input(), input()
cnt = 0

for index in range(len(s)):
    if s.startswith(t, index):
        cnt += 1
print(cnt)
 -End,"
 import sys
import re


def new_str(matchobj):
    res = matchobj.group(0)
    return res[1::-1] + res[2:]


for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'(\b\w{2,}\b)', new_str, line))
 -End,"
 import requests
import re


def find_way(source, target, depth=2):
    if depth == 0:
        return False

    res = requests.get(source)
    if res.status_code != 200:
        return False

    links = re.findall(r'<a href=""(.*?)"".*>.*<\/a>', res.text)
    if target in links and depth == 1:
        return True

    for link in links:
        if find_way(link, target, depth - 1):
            return True
        
    return False


s, t = input(), input()
print('Yes' if find_way(s, t) else 'No')
 -End,"
 import requests, re

sites = set(re.findall(r'<a.*href ?= ?[\'|\""](?:[\w\d\-\.]*\:\/\/)?(\w[\w\d\-\.]*)', requests.get(input()).text))
for site in sorted(sites):
    print(site)
 -End,"
 n1, n2 = 1, 1
for i in range(2, int(input())):
    n2, n1 = n1 + n2, n2
print(n2) -End,"
 def gcd(a, b):
    if a == 0 or b == 0:
        return a + b
    return gcd(max(a, b) % min(a, b), min(a, b))

def main():
    a, b = map(int, input().split())
    print(gcd(a, b))


if __name__ == ""__main__"":
    main() -End,"
 # Вводим предметы
n, w = map(int, input().split())
items = []
for i in range(n):
    ci, wi = map(int, input().split())
    k = ci / wi
    items.append([ci, wi, k])

# Надёжный шаг - взять предмет с самой дорогой стоимостью за единицу веса

# Но для начала сортировочка
items.sort(key=lambda x: x[2], reverse=True)

# Теперь основная часть
cnt = 0
summ = 0
for i in range(n):
    ci = items[i][0]
    wi = items[i][1]
    if cnt < w:
        if cnt + wi <= w:
            cnt += wi
            summ += ci
        else:
            summ += ci * (w - cnt) / wi
            cnt = w

print('%.3f' % summ)
 -End,"
 # Принимаем строку
str = input()

# Вычисляем статистику символов
stats = {}
for s in str:
    if s not in stats:
        stats[s] = 1
    else:
        stats[s] += 1
tree = list(stats.items())

# Строим дерево
while len(tree) > 1:
    tree.sort(key=lambda i: i[1], reverse=True)
    ltree = tree.pop()
    rtree = tree.pop()
    node = [[ltree[0], rtree[0]], ltree[1] + rtree[1]]
    tree.append(node)
tree = tree[0][0]   # Убрали теперь уже ненужные веса


def bcode(tree, symbol):
    # Функция обхода дерева, возвращает код символа
    if type(tree) is not list:
        return ''
    lchild = tree[0]
    rchild = tree[1]
    if lchild == symbol:
        return '0'
    elif rchild == symbol:
        return '1'
    else:
        l = bcode(lchild, symbol)
        r = bcode(rchild, symbol)
        if l != '':
            return '0' + l
        if r != '':
            return '1' + r
        return ''


# Создаём таблицу кодов
codes = dict()
for s in stats.keys():
    code = bcode(tree, s)
    codes[s] = code
if tree == s:   # На случай, если строка состоит всего из 1 символа
    codes[s] = '1'

# Кодируем строку
result = ''
for s in str:
    result += codes[s]

# Выводим всё на печать
print(len(codes), len(result))
for s in codes:
    print(s + ':', codes[s])
print(result)
 -End,"
 # Очередь с приоритетами
ops = int(input())
btree = []


def sift_up(i_el):
    # Просеивание элемента с индексом i_el вверх к корню
    if i_el == 0:
        return
    i_father = (i_el - 1) // 2
    if btree[i_el] > btree[i_father]:
        btree[i_el], btree[i_father] = btree[i_father], btree[i_el]
        sift_up(i_father)


def sift_down(i_el):
    # Просеивание элемента с индексом i_el вниз
    i_left, i_right = 2 * i_el + 1, 2 * i_el + 2
    if i_left >= len(btree):   # если элемент и так уже внизу, то конец
        return
    guess = i_left
    if i_right < len(btree) and btree[i_right] > btree[i_left]:
        guess = i_right
    if btree[i_el] < btree[guess]:
        btree[i_el], btree[guess] = btree[guess], btree[i_el]
    sift_down(guess)


def insert(p):
    btree.append(p)   # добавили в конец массива
    sift_up(len(btree) - 1)   # просеиваем последний элемент вверх


def extract_max():
    el = btree[0]
    if len(btree) == 1:
        btree.pop()
    else:
        btree[0] = btree.pop()   # положили последний элемент в корень
        sift_down(0)   # просеили его вниз
    return el


for _ in range(ops):
    s = input()
    if s == 'ExtractMax':
        print(extract_max())
    else:
        insert(int(s.lstrip('Insert ')))
 -End,"
 def binarysch(list, item):
    low = 0
    high = len(list) - 1
    
    while low <= high:
        guess = (low + high) // 2
        if list[guess] == item:
            return guess + 1
        if list[guess] < item:
            low = guess + 1
        if list[guess] > item:
            high = guess - 1

    return -1


a = list(map(int, input().split()))
n = a.pop(0)

b = list(map(int, input().split()))
k = b.pop(0)

for i in range(k):
    print(binarysch(a, b[i]), end=' ')
 -End,"
 W, n = map(int, input().split())
m = list(map(int, input().split()))

D = [[0] * (W + 1) for _ in range(n + 1)]

for i in range(n):
    for w in range(W + 1):
        if w >= m[i]:   # Если предмет лезет в текущий подрюкзак
            var1 = D[i][w]    # Выгоднее вариант без текущего предмета
            var2 = m[i] + D[i][w - m[i]]   # Выгоднее вар. с текущим предметом
            D[i+1][w] = max(var1, var2)
        else:
            D[i + 1][w] = D[i][w]

print(D[n][W])
 -End,"
 N = int(input())
A = list(map(int, input().split()))
memo = [None] * (N + 1)


def step_sum(stairs: list, i):  # начинаем c -1 до i-той ступеньки
    if i == 1:
        return stairs[0]
    if i == 0:
        return 0
    if memo[i] is not None:
        return memo[i]
    r1 = step_sum(stairs, i - 1)
    memo[i - 1] = r1
    r2 = step_sum(stairs, i - 2)
    memo[i - 2] = r2
    return max(r1, r2) + stairs[i - 1]   # максимум из 2х подазадач
                                         # + стоимость текущей ступеньки

print(step_sum(A, N))
 -End,"
 def counter(T):
    result, lmax = 0, 0
    for word in T:
        lln = len(set(word.lower()))
        if lln > lmax:
            lmax = lln
            result = len(word)
        elif lln == lmax:
            result = max(result, len(word))
    return result
 -End,"
 with open('file.txt', 'r') as tfile:
    src = tfile.readline().rstrip()
    dest = tfile.readline().rstrip()
    n = int(tfile.readline().rstrip())

with open(src, 'r') as srcfile:
    for i in range(n):
        srcfile.readline()
    string = srcfile.readline().lower()

with open(dest, 'a') as destfile:
    destfile.writelines(string)
 -End,"
 n = int(input())
parents = list(map(int, input().split()))
distance = [0 for _ in range(n)]
nodes = dict()

# развернули все указатели
for i, parent in enumerate(parents):
    if parent not in nodes:
        nodes[parent] = {i}
    else:
        nodes[parent].add(i)

# выполнили обход в ширину
max_distance = 0
queue = [nodes[-1].pop()]
while queue:
    el = queue.pop(0)
    if el not in nodes:
        continue
    for child in nodes[el]:
        queue.append(child)
        distance[child] = distance[el] + 1

print(max(distance) + 1) -End,"
 s1 = sum(map(int, input().split()))
s2 = sum([int(s) for s in input().split()])
print('#'.join([str(s1), str(s2)]))
 -End,"
 s = input()
L = s[2:-2].split(""'"")[::2] -End,"
 def case(c: str) -> str:
    if c == 'int':
        n1 = int(input())
        n2 = int(input())
        return str(n1 + n2) if n1 or n2 else 'Empty Ints'
    if c == 'str':
        s = input()
        return s if s else 'Empty String'
    if c == 'list':
        lst = list(input().split())
        return lst[-1] if lst else 'Empty List'
    return 'Unknown type'


print(case(input())) -End,"
 def f():
    n = abs(int(input()))
    for i in range(1, n):
        print(i ** 3)

def f2():
    print(*(i ** 3 for i in range(1, abs(int(input())))), sep='\n')

f2() -End,"
 def even_elements(l):
    return [el for el in l if not el % 2]
 -End,"
 def front_x(words):
    w1 = sorted([w for w in words if 'x' <= w.lower() < 'y'])
    w2 = sorted([w for w in words if not 'x' <= w.lower() < 'y'])
    return w1 + w2 -End,"
 def kaprekar_n(n, counted_n):
    if n in [495, 6174, 549945, 631764]:
        return
    nlist = list(str(n))
    n1 = ''.join(sorted(nlist))
    n2 = ''.join(sorted(nlist, reverse=True))
    new_n = abs(int(n1) - int(n2))
    if new_n in counted_n:
        print('Следующее число - {0}, кажется процесс зациклился...'.format(new_n))
        return
    counted_n.add(new_n)
    print(new_n)
    kaprekar_n(new_n, counted_n)


def kaprekar_loop(n):
    if n in [100, 1000, 100000] or len(str(n)) not in [3, 4, 6] or len(
            set(str(n))) == 1:
        print(
            'Ошибка! На вход подано число {0}, не удовлетворяющее условиям '
            'процесса Капрекара'.format(n))
        return False
    print(n)
    kaprekar_n(n, {n}) -End,"
 import numpy as np

V1 = np.fromstring(input(), sep=',')
V2 = np.fromstring(input(), sep=',')

V = V1[V1 % V2[-2] == 0] / V2[-2]
 -End,"
 v1 = np.linalg.norm(A2-A1)  # длина стороны 1
v2 = np.linalg.norm(A2-A3)  # длина стороны 2
v3 = np.linalg.norm(A3-A1)  # длина стороны 3
p = (v1 + v2 + v3) / 2
print(np.sqrt(p * (p-v1) * (p-v2) * (p-v3))) -End,"
 import pandas as pd    
my_stat.session_value = my_stat.session_value.fillna(0);
my_stat.loc[my_stat.n_users < 0, 'n_users'] = my_stat[my_stat.n_users >= 0].median().n_users  -End,"
 from functools import reduce

print(reduce(lambda x, y: x * y, [i for i in range(1, int(input())+1, 2)])) -End,"
 import numpy as np

def no_numpy_mult(first, second):
    M = len(first)  # first dimensions: M x K  (M rows, K cols )
    K = len(second)    # second dimensions: K x N (K rows, N cols)
    N = len(second[0])

    result = [[0 for col in range(N)] for row in range(M)]  # M x N (M rows, N cols)
    
    for i in range(M):
        for j in range(N):
            for k in range(K):
                result[i][j] += first[i][k] * second[k][j]
    
    return result

def numpy_mult(first, second):
    return first @ second -End,"
 import numpy as np

def no_numpy_scalar(v1, v2):
    return sum((v1[i] * v2[i] for i in range(3)))

def numpy_scalar (v1, v2):
    return np.inner(v1, v2) -End,"
 import numpy as np

params = input().split()
t = 'float64' if params[-1].isdigit() else params.pop()
Z = np.zeros(tuple(map(int, params)), dtype=t) -End,"
 import numpy as np

#  В Jupyter можно так:
#  ?numpy.add
#  ?numpy.array

print(np.add.__doc__)
print(np.array.__doc__)
 -End,"
 import random
i = 0
while True:
    random.seed(i)
    if random.randint(0, 10) == 5:
        print(5)
        break
    i += 1
 -End,"
 import sys
import ast
import numpy as np


def parse_array(s):
    return np.array(ast.literal_eval(s))

def read_array():
    return parse_array(sys.stdin.readline())

def write_array(arr):
    print(repr(arr.tolist()))


def generate_w2v_sgns_samples(text, window_size, vocab_size, ns_rate):

    result = []
    pad = window_size // 2

    for w_idx, word in enumerate(text):
        for c_idx in range(w_idx-pad, w_idx+pad+1):
            if 0 <= c_idx < len(text) and c_idx != w_idx:
                result.append([word, text[c_idx], 1])
                for _ in range(ns_rate):
                    result.append([word, np.random.randint(vocab_size), 0])

    return result


text = read_array()
window_size = int(sys.stdin.readline().strip())
vocab_size = int(sys.stdin.readline().strip())
ns_rate = int(sys.stdin.readline().strip())

result = generate_w2v_sgns_samples(text, window_size, vocab_size, ns_rate)

write_array(np.array(result)) -End,"
 import sys
import ast
import numpy as np
from numpy.linalg import norm

def parse_array(s):
    return np.array(ast.literal_eval(s))

def read_array():
    return parse_array(sys.stdin.readline())

def write_array(arr):
    print(repr(arr.tolist()))


def get_nearest(embeddings, query_word_id, get_n):
    """"""
    embeddings - VocabSize x EmbSize - word embeddings
    query_word_id - integer - id of query word to find most similar to
    get_n - integer - number of most similar words to retrieve

    returns list of `get_n` tuples (word_id, similarity) sorted by descending order of similarity value
    """"""
    dist = []
    q_emb = embeddings[query_word_id]
    for w_id, w_emb in enumerate(embeddings):
        dist.append((w_id, - norm(q_emb/norm(q_emb) - w_emb/norm(w_emb))))
    
    return sorted(dist, key=lambda x:x[1], reverse=True)[:min(get_n, len(embeddings))]


embeddings = read_array()
query_word_id = int(sys.stdin.readline().strip())
get_n = int(sys.stdin.readline().strip())

result = get_nearest(embeddings, query_word_id, get_n)

write_array(np.array(result)) -End,"
 import ast
import sys
import collections
import numpy as np


LayerInfo = collections.namedtuple('LayerInfo', ('kernel_size', 'dilation'))


def parse_array(s):
    return np.array(ast.literal_eval(s))

def read_array():
    return parse_array(sys.stdin.readline())


def calculate_receptive_field(layers):

    return calculate_receptive_field(layers[1:]) + layers[0][1] * (layers[0][0] - 1) if layers else 1


kernels = read_array()
dilations = read_array()

layers = [LayerInfo(k, d) for k, d in zip(kernels, dilations)]

result = calculate_receptive_field(layers)
print(result) -End,"
 import numpy as np  

def batch_generator(X, y, batch_size):
    np.random.seed(42)
    perm = np.random.permutation(len(X))
    
    for i in range(0, len(X), batch_size):
        idxs = perm[i: i+batch_size]
        yield X[idxs], y[idxs] -End,"
 # put your python code here
inData = input().split()
etalon = dict(mile = 1609, yard = 0.9144, foot = 0.3048, inch = 0.0254, km = 1000, cm = 0.01, mm = 0.001, m = 1.0)
a = etalon[inData[1]]
b = etalon[inData[3]]
res = float(inData[0])*a/b
print('{:.2e}'.format(res)) -End,"
 # put your python code here
from collections import Counter
inData = input().split()
cnt = Counter()
for it in inData:
    cnt[it] += 1
res = cnt['A']/sum(cnt.values())
print('{:.2f}'.format(res)) -End,"
 # put your python code here
from collections import Counter
inData = input().split()
res = Counter(inData)
for it in res.keys():
    if res[it] > 1: print(it, end=' ') -End,"
 # put your python code here
a, b = input().split()
m = input()
v = ('5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A')
a1 = v.index(a[:len(a)-1])
b1 = v.index(b[:len(b)-1])
if a[-1] == m: a1 += 100
if b[-1] == m: b1 += 100
if a[-1] != b[-1] and a1 < 100 and b1 <100: print('Error')
elif a1 > b1: print('First')
elif a1 < b1: print('Second')
else: print(""Error"") -End,"
 # put your python code here
def split_encode_series(string):
    i = 0
    while i < len(string):
        j = i
        count = 0
        while j < len(string):
            if string[i] == string[j]:
                count += 1
                j += 1
                if j == len(string): yield (count, string[i])
            else:
                yield (count, string[i])
                break
        i = j

string = ''.join(input().split())
for it in split_encode_series(string):
    if it[0] > 1: print(it[0], it[1], sep='', end='')
    else: print(it[1], sep='', end='') -End,"
 # put your python code here
def depth(parent, child):
    outData.update(set(inData[child]))
    for el in inData[child]:
        depth(parent, el)

n = int(input())
inData = dict()
for i in range(n):
    s = input().replace(':', ' ').split()
    if len(s) == 1: inData[s[0]] = []
    else: inData[s[0]] = s[1:]
# print(inData)
q = int(input())
for i in range(q):
    s = input().split()
    outData = set()
    outData.add(s[1])
    depth(s[0], s[1])
    # print(outData)
    if s[0] in outData: print('Yes')
    else: print('No') -End,"
 # put your python code here
print(round(3*int(input())**2*(8+5*(3)**0.5)/8))



 -End,"
 # put your python code here
a = int(input())
print(f""{round(a**2*20.64573, 2)}\n{round(a**3*7.66312, 2)}"")



 -End,"
 # your code
L = input()[2:-2].split(""\', \'"")
# your code




 -End,"
 # put your python code here
n = int(input())
print(f'{int(input()) / n:.1f}' if n else 'Division by zero!')



 -End,"
 def dfactorial(n):
    pr = 1
    for it in range(n, 0, -2):
        pr *= it
    return pr




 -End,"
 def Kfactorial(n, k=1):
    pr = 1
    for it in range(n, 0, -k):
        pr *= it
    return pr




 -End,"
 def kaprekar_step(L):
    #your code
    L.sort()
    return ((1000*L[3] + 100*L[2] + 10*L[1] + L[0]) - (1000*L[0] + 100*L[1] + 10*L[2] + L[3]))




 -End,"
 def numerics(n):
    #your code
    return [n % 10, n // 10 % 10, n // 100 % 10, n // 1000 % 10]

def kaprekar_step(L):
    #your code
    L.sort()
    return ((1000*L[3] + 100*L[2] + 10*L[1] + L[0]) - (1000*L[0] + 100*L[1] + 10*L[2] + L[3]))

def kaprekar_loop(n):
    #your code
    while n != 6174:
        print(n)
        n = kaprekar_step(numerics(n))
    print(n) -End,"
 def numerics(n):
    #your code
    return [n % 10, n // 10 % 10, n // 100 % 10, n // 1000 % 10]

def kaprekar_step(L):
    #your code
    L.sort()
    return ((1000*L[3] + 100*L[2] + 10*L[1] + L[0]) - (1000*L[0] + 100*L[1] + 10*L[2] + L[3]))

def kaprekar_loop(n):
    #your code
    if n <= 1000:
        print(""Ошибка! На вход подано число 1000"")
        return
    if numerics(n)[0] == numerics(n)[1] and numerics(n)[2] == numerics(n)[3] and numerics(n)[0] == numerics(n)[3]:
        print(f""Ошибка! На вход подано число {n} - все цифры одинаковые"")
        return
    while n != 6174:
        print(n)
        n = kaprekar_step(numerics(n))
    print(n) -End,"
 def fib(n):
    f0, f1 = 0, 1
    for i in range(n-1):
        f0, f1 = f1, f0+f1
    return f1




 -End,"
 def is_prime(n):
    if n % 2 == 0: return False
    for i in range(3, round(n**0.5)+1, 2):
        if n % i == 0: return False
    return True




 -End,"
 n = int(input())
def donuts(n):
    print(f""Всего пончиков: много"" if n > 9 else f""Всего пончиков: {n}"")
donuts(n) -End,"
 a, b = int(input()), int(input())
print(f'{a/b:9.5f}', f'{b/a:9.5f}', sep='***')




 -End,"
 data = input()
print(int(data[0])+int(data[3]), int(data[1])+int(data[2]), sep='')




 -End,"
 a, b, c, d = (int(input()) for i in range(4))
print('YES' if abs(abs(a-c) - abs(b-d))==1 else 'NO')



 -End,"
 x1, y1, x2, y2, x, y = (int(input()) for _ in range(6))
print('Точка принадлежит прямоугольнику' if x2-x1>=x and y1-y2>=y else 'Точка не принадлежит прямоугольнику')




 -End,"
 a=float(input())
b=float(input())
x=str(input())

if x == '+':
    print(a+b)
elif x == '-':
    print(a-b)
elif x == '*':
    print(a*b)
elif x == ""pow"":
    print(a**b)
elif b == 0:
    print('Деление на 0!')
elif x == '/':
    print(a/b)
elif x == 'mod':
    print(a%b)
elif x == 'div':
    print(a//b)




 -End,"
 import re
print(sum(map(int, re.sub('-', '', input()))))




 -End,"
 a, b = (int((input())) for _ in range(2))
s = [it for it in range(a, b+1) if it%3==0]
print(sum(s)/len(s))




 -End,"
 lst = []
while True:
    t = int(input())
    if t == 0:
        break
    if t % 8 == 0:
        lst.append(t)
print('NO' if len(lst) == 0 else f'{sum(lst)/len(lst):.1f}')




 -End,"
 print(bin(int(input()))[2:])




 -End,"
 print(f'{int(input()):b}')




 -End,"
 print(int(input(), 2))




 -End,"
 s = input()
if s[0] == '-':
    s = s[1:]
print(s.isdigit())




 -End,"
 print(' '.join([str(_**2) for _ in [int(input()) for _ in range(5)]]))




 -End,"
 input()
lst = list(map(int, input().split(' ')))
lst.reverse()
print(len(lst) - lst.index(max(lst)))



 -End,"
 n = input()
try:
    index = input().split(' ').index(n)
except ValueError:
    index = -1
print(index)




 -End,"
 lst = [int(input()) for _ in range(3)]
for _ in range(lst[2]):
    lst[0] = lst[0] + lst[0]*lst[1]/100
    print(f'{lst[0]:.2f}')




 -End,"
 new_lst = [_ // 2 if _ % 2 == 0 else _ // 2 + 1 for _ in [int(input()) for _ in range (3)]]
print(sum(new_lst))




 -End,"
 p, x, y = (int(input()) for _ in range(3))
w = int((x * 100 + y)*(100+p)/100)
print(w//100, w%100)



 -End,"
 lst = [int(input()) for _ in range(3)]
lst.sort()
print(""YES"" if lst[0]+lst[1]>lst[2] else ""NO"")




 -End,"
 s = input()
lst = s.split(' ')
name = lst[0][:-2]
date = int(lst[1][:4])
if 2018 - date < 18:
    w = 'первой'
    e = ' (дети)'
elif 2018 - date > 35:
    w = 'третьей'
    e = ''
else:
    w = 'второй'
    e = ' (молодежь)'
print(f'Привет, {name}! Ждем тебя на {w} секции{e}')




 -End,"
 lst = [input() for _ in range(2)]
lst.sort()
a = ''.join(lst)
t = ('paper', 'rock', 'scissors')
game_map = {
    f'{t[0]}{t[1]}': 'Paper wins!',
    f'{t[0]}{t[2]}': 'Scissors win!',
    f'{t[1]}{t[2]}': 'Rock wins!',
    f'{t[0]}{t[0]}': ""It's a tie!"",
    f'{t[1]}{t[1]}': ""It's a tie!"",
    f'{t[2]}{t[2]}': ""It's a tie!"",
}
res = game_map.get(a)
if not res:
    print('Invalid input! You have not entered rock, paper or scissors, try again.')
else:
    print(res)



 -End,"
 def fib(n):
    a, b = 0, 1
    fib = [0, 1]
    for i in range(2, n + 1):
        a, b = b, a + b
    return b

def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main() -End,"
 def fib_digit(n):
    a, b = 0, 1
    for i in range(2, n + 1):
        a, b = b, (a + b) % 10
    return b 


def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 import pandas as pd    
# переменная my_stat уже создана
my_stat.session_value.fillna(0, inplace=True)
ser = my_stat.n_users
median = ser[ser >= 0].median()
ser.loc[ser < 0] = median



 -End,"
 a, b, c = sorted(map(int, (input() for _ in range(3))))
print(c, a, b, sep=""\n"") -End,"
 n = int(input())
sx = ""а"" if n % 10 in {2, 3, 4} and n % 100 not in {12, 13, 14} else """" if n % 10 == 1 and n % 100 != 11 else ""ов""
print(n, ""программист"" + sx) -End,"
 t = list(map(int, input()))
print(""Счастливый"") if sum(t[:3]) == sum(t[3:]) else print(""Обычный"") -End,"
 def triangle(a, b, c):
    p = (a + b + c) / 2
    return (p * (p - a) * (p - b) * (p - c)) ** 0.5
print({""треугольник"": lambda: triangle(float(input()), float(input()), float(input())),
       ""прямоугольник"": lambda: float(input()) * float(input()),
       ""круг"": lambda: 3.14 * float(input()) ** 2 
       }[input()]()) -End,"
 s, enc, i = input(), """", 0
while i < len(s):
    n, ln = s[i], 0
    while i < len(s) and s[i] == n:
        i, ln = i + 1, ln + 1
    enc += n + str(ln)
print(enc) -End,"
 A = list(map(int, input().strip().split()))
print(*[A[i - 1] + A[(i + 1) % len(A)] for i in range(len(A))]) if len(A) > 1 else print(A[0]) -End,"
 from collections import Counter as multiset
print(*[k for k, v in multiset(map(int, input().strip().split())).items() if v > 1]) -End,"
 n, s = int(input()), []
for i in range(n):
    s += [str(i + 1)] * (i + 1)
    if len(s) > n:
        break
print("" "".join(s[:n])) -End,"
 lst, x = map(int, input().strip().split()), int(input())
idx = [i for i, e in enumerate(lst) if e == x]
print(*idx) if idx else print(""Отсутствует"") -End,"
 mx = []
while(True):
    l = input()
    if l == ""end"":
        break
    mx.append(list(map(int, l.strip().split())))
mx = [[str(mx[(i+1)%len(mx)][j] + mx[i-1][j] + mx[i][j-1] + mx[i][(j+1)%len(mx[0])]) for j in range(len(mx[0]))] 
      for i in range(len(mx))]
print(*["" "".join(mx[i]) for i in range(len(mx))], sep=""\n"") -End,"
 from itertools import product
n, d = int(input()), 1
mx = [[None for _ in range(n)] for _ in range(n)]
for l in range(sum(divmod(n, 2))):
    for i, j in product(range(l, l + 1), range(l, n - l - 1)):
        mx[i][j], d = d, d + 1
    for i, j in product(range(l, n - l - 1), range(n - l - 1, n - l)):
        mx[i][j], d = d, d + 1
    for i, j in product(range(n - l - 1, n - l), range(n - l - 1, l, -1)):
        mx[i][j], d = d, d + 1
    for i, j in product(range(n - l - 1, l, -1), range(l, l + 1)):
        mx[i][j], d = d, d + 1
    if l == n - l - 1:
        mx[l][l] = d
print(*["" "".join(map(str, mx[i])) for i in range(len(mx))], sep=""\n"") -End,"
 def modify_list(l):
    l[:] = list(map(lambda x: x // 2, filter(lambda x: x % 2 == 0, l)))[:] -End,"
 from collections import Counter as multiset
print(*[""{} {}"".format(k, v) for k, v in multiset(input().lower().strip().split()).items()], sep=""\n"") -End,"
 alpha, mapping, plain, encrypted = (input() for _ in range(4))
a2m = {alpha[i]: mapping[i] for i in range(len(mapping))}
m2a = {v: k for k, v in a2m.items()}
print("""".join([a2m[c] for c in plain]))
print("""".join([m2a[c] for c in encrypted])) -End,"
 n = int(input())
mapper = {""север"": lambda x, d: (x[0], x[1] + d),
          ""юг"": lambda x, d: (x[0], x[1] - d),
          ""восток"": lambda x, d: (x[0] + d, x[1]),
          ""запад"": lambda x, d: (x[0] - d, x[1])}
target = (0, 0)
for _ in range(n):
    c, d = input().strip().split()
    target = mapper[c](target, int(d))
print(*target) -End,"
 d = {input().lower() for _ in range(int(input()))}
print(*{w for _ in range(int(input())) for w in input().strip().split() if w.lower() not in d}, sep=""\n"") -End,"
 from collections import defaultdict as dd
from operator import itemgetter
w = dd(lambda: dd(lambda: 0))
for g in [list(map(lambda x: int(x) if x.isdigit() else x, input().strip().split("";""))) for _ in range(int(input()))]:
    g = sorted([(g[0:2]), (g[2:])], key=itemgetter(1), reverse=True)
    if g[0][1] == g[1][1]:
        w[g[0][0]][""t""] += 1; w[g[1][0]][""t""] += 1
    else:
        w[g[0][0]][""w""] += 1; w[g[1][0]][""l""] += 1
print(*[""{}:{} {} {} {} {}"".format(t, sum(r.values()), w[t][""w""], w[t][""t""], w[t][""l""], w[t][""w""] * 3 + w[t][""t""]) 
        for t, r in w.items()], sep=""\n"") -End,"
 root = (""global"", True)
objects = {root: {}}


def enum_objects_paths():
    stack = [(objects, root, iter(objects[root]))]
    while stack:
        objs, start, children = stack[-1]
        try:
            end = next(children)
            stack.append((objs[start], end, iter(objs[start][end])))
        except StopIteration:
            yield [(o, s) for o, s, _ in stack]
            stack.pop()


def insert_object(parent, target):
    o = min(filter(lambda p: parent in [s[1] for s in p], enum_objects_paths()), key=len)[-1]
    o[0][o[1]].update({target: {}})


def get_object(ns, var):
    objs = min(filter(lambda p: ns in [s[1] for s in p], enum_objects_paths()), key=len)
    for o in reversed(objs):
        if var in o[0][o[1]]:
            return o[1][0]
    return None


for i in range(int(input())):
    c, ns, v = input().strip().split()
    {""create"": lambda y, x: insert_object((x, True), (y, True)),
     ""add"": lambda x, y: insert_object((x, True), (y, False)),
     ""get"": lambda x, y: print(get_object((x, True), (y, False)))}[c](ns, v) -End,"
 class Buffer:
    def __init__(self):
        self.__buf = []

    def add(self, *a):
        self.__buf += a
        while(len(self.__buf) >= 5):
            print(sum(self.__buf[:5]))
            self.__buf[:] = self.__buf[5:]

    def get_current_part(self):
        return self.__buf -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.__cap, self.__curr = capacity, 0

    def can_add(self, v):
        return self.__curr + v <= self.__cap

    def add(self, v):
        self.__curr += v -End,"
 dependencies = {}
for _ in range(int(input())):
    inp = input().strip().split("":"")
    dependencies.update([(inp[0], []) if len(inp) == 1 else (inp[0].strip(), inp[1].strip().split())])
classes = {c for c in dependencies} | {sc for c in dependencies for sc in c}
for _ in range(int(input())):
    e, s = input().strip().split()
    stk, route = [s], False
    while(stk and not route):
        stk.extend(dependencies[stk.pop()])
        route = (stk[-1] == e) if stk else False
    print(""Yes"" if route or e == s and s in classes else ""No"") -End,"
 class LoggableList(list, Loggable):
    def append(self, p_object):
        self.log(p_object)
        super(LoggableList, self).append(p_object) -End,"
 class multifilter:
    def judge_half(pos, neg):
        return pos >= neg

    def judge_any(pos, neg):
        return pos >= 1

    def judge_all(pos, neg):
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.__data, self.__funcs, self.__judge = iter(iterable), funcs, judge

    def __iter__(self):
        for d in self.__data:
            pos = sum(map(lambda fn: int(fn(d)), self.__funcs))
            neg = len(self.__funcs) - pos
            if self.__judge(pos, neg):
                yield d -End,"
 def primes():
    p, div = 1, []
    while(True):
        p += 1
        if not any(not p % d for d in div):
            yield p
            div.append(p) -End,"
 from datetime import datetime, timedelta
print((datetime.strptime(input().strip(), ""%Y %m %d"") + timedelta(int(input().strip()))).strftime(""%Y %-m %-d"")) -End,"
 n, (s, a, b) = 0, (input().strip() for _ in range(3))
while a in s:
    n += 1
    s = b.join(s.split(a))
    if a in b and a in s:
        break
print(""Impossible"" if a in b and a in s else n) -End,"
 s, t = input(), input()
print(len(list(filter(lambda x: x == t, (s[i : i + len(t)] for i in range(len(s) - len(t) + 1)))))) -End,"
 from collections import defaultdict as dd
from itertools import product
dependencies, handled = dd(lambda: set()), set()
for _ in range(int(input())):
    inp = input().strip().split("":"")
    if len(inp) > 1:
        for x, y in product(inp[1].strip().split("" ""), [inp[0].strip()]):
            dependencies[x] |= {y}
for _ in range(int(input())):
    ex = input()
    if ex in handled:
        print(ex)
    stack = [ex]
    while stack:
        handled |= {stack[-1]}
        stack.extend(dependencies[stack.pop()]) -End,"
 import sys, re
exp = re.compile(""cat"")
print(*filter(lambda x: len(exp.findall(x)) >= 2, (l.strip() for l in sys.stdin)), sep=""\n"") -End,"
 import sys, re
exp = re.compile(""(?<![A-z])cat(?![A-z])"")
print(*filter(lambda x: exp.findall(x), (l.strip() for l in sys.stdin)), sep=""\n"") -End,"
 import sys, re
exp = re.compile(""z.{3}z"")
print(*filter(lambda x: exp.findall(x), (l.strip() for l in sys.stdin)), sep=""\n"") -End,"
 import sys, re
exp = re.compile(r""\\"")
print(*filter(lambda x: exp.search(x), (l.strip() for l in sys.stdin)), sep=""\n"") -End,"
 import sys, re
exp = re.compile(r""\b(.+)\1\b"")
print(*filter(lambda x: exp.search(x), (l.strip() for l in sys.stdin)), sep=""\n"") -End,"
 import sys, re
exp = re.compile(""human"")
print(*map(lambda x: exp.sub(""computer"", x), (l.strip() for l in sys.stdin)), sep=""\n"") -End,"
 import sys, re
exp = re.compile(""(?<![A-z])([aA]+)(?![A-z])"")
print(*map(lambda x: exp.sub(""argh"", x, 1), (l.strip() for l in sys.stdin)), sep=""\n"") -End,"
 import sys, re
exp = re.compile(r""(\w)(\1+)"")
print(*map(lambda x: exp.sub(r'\1', x), (l.strip() for l in sys.stdin)), sep=""\n"") -End,"
 import requests, re
A, B, T = input(), input(), re.compile(r'<a\s+href\s*=\s*""(.+)""')
print(""Yes"" if B in (D for C in T.findall(requests.get(A).text) for D in T.findall(requests.get(C).text)) else ""No"") -End,"
 import requests, re
re_refs, re_domain = re.compile(r'<a\s.*?href\s*=\s*""?(.*?)""?>'), re.compile(r'(\w+://)?([\w][\w\-.]+)(:|/)?.*')
refs = re_refs.findall(requests.get(input()).text)
print(*sorted(set(map(lambda m: m.group(2), filter(lambda m: m, map(lambda r: re_domain.match(r), refs))))), sep=""\n"") -End,"
 import json
from collections import defaultdict as dd
from itertools import product
db, dependencies = json.loads(input()), dd(lambda: set())
for r in db:
    for c, p in product([r[""name""]], r[""parents""]):
        dependencies[p] |= {c}
for c in sorted(map(lambda r: r[""name""], db)):
    stack, visited = [c], set()
    while stack:
        visited |= {stack[-1]}
        stack.extend(dependencies[stack.pop()])
    print(""{} : {}"".format(c, len(visited))) -End,"
 import xml.etree.ElementTree as xml
from collections import defaultdict as dd
cost, root = dd(lambda: 0), xml.fromstring(input())
stack = [(root, 1)]
while stack:
    lr = stack.pop()
    cost[lr[0].attrib[""color""]] += lr[1]
    stack.extend((succ, lr[1] + 1) for succ in lr[0])
print(cost[""red""], cost[""green""], cost[""blue""]) -End,"
 def gcd(a, b):
    return gcd(b, a % b) if b else a    


def main():
    a, b = map(int, input().split())
    print(gcd(a, b))


if __name__ == ""__main__"":
    main() -End,"
 s, t = input(), input()
print(sum(s[i : i + len(t)] == t for i in range(len(s) - len(t) + 1))) -End,"
 d = {'global': [[], None]}
for i in range(int(input())):
    cmd, nmsp, arg = input().split()
    if cmd == 'create':
        d[nmsp] = [[], arg]
    elif cmd == 'add':
        d[nmsp][0].append(arg)
    else:
        while nmsp is not None:
            if arg in d[nmsp][0]:
                break
            nmsp = d[nmsp][1]
        print(nmsp)





 -End,"
 import re
import sys
for line in sys.stdin:
    if re.search(r'cat.*cat', line):
        print(line.rstrip())





 -End,"
 import re
import sys
for line in sys.stdin:
    if re.search(r'\bcat\b', line):
        print(line.rstrip())
 -End,"
 import re
import sys
for line in sys.stdin:
    if re.search(r'z...z', line):
        print(line.rstrip())
 -End,"
 import re
import sys
for line in sys.stdin:
    if re.search(r'\\', line):
        print(line.rstrip())
 -End,"
 import re
import sys
for line in sys.stdin:
    if re.search(r'\b(\w+)\1\b', line):
        print(line.rstrip())
 -End,"
 import re
import sys
for line in sys.stdin:
    print(re.sub(r'human', 'computer', line.rstrip()))
 -End,"
 import re
import sys
for line in sys.stdin:
    print(re.sub(r'\b[aA]+\b', 'argh', line, count=1).rstrip())





 -End,"
 import re
import sys
for line in sys.stdin:
    print(re.sub(r'\b(\w)(\w)', r'\2\1', line).rstrip())
 -End,"
 import re
import sys
for line in sys.stdin:
    print(re.sub(r'(\w)\1*', r'\1', line).rstrip())
 -End,"
 import re
import sys
for line in sys.stdin:
    if re.fullmatch(r'(1(01*0)*1|0)*', line.rstrip()):
        print(line.rstrip())
 -End,"
 import requests
import re
a, b = input(), input()
ans = 'No'
pattern = re.compile(r'<a.*href=""(.*)"".*</a>')
my_list = pattern.findall(requests.get(a).text)
for i in my_list:
    if b in pattern.findall(requests.get(i).text):
        ans = ""Yes""
        break
print(ans)
 -End,"
 import requests
import re
sss = requests.get(input()).text
pattern = """"""<a.*href=[""'](?:http://|https://|ftp://)?(\w[\w.-]*)""""""
domains = sorted(set(re.findall(pattern, sss)))
for i in domains:
    print(i)
 -End,"
 import json
# import sys
# sys.stdin = open(""input.txt"", ""r"")


def foo(x):
    k = set(kids[x])
    for ii in kids[x]:
        k.update(foo(ii))
    return k


s = json.loads(input())
kids = {}
for i in s:
    kids.setdefault(i['name'], [])
    for j in i['parents']:
        if kids.get(j) is None:
            kids[j] = [i['name']]
        else:
            kids[j].append(i['name'])

keys = sorted(list(kids.keys()))
for i in keys:
    print(f'{i} : {len(foo(i))+1}')
 -End,"
 from xml.etree import ElementTree


def foo(tree, level):
    price[tree.attrib['color']] += level
    for i in tree:
        foo(i, level+1)


root = ElementTree.fromstring(input())
price = {'red': 0, 'green': 0, 'blue': 0}
foo(root, 1)
print(price['red'], price['green'], price['blue'])
 -End,"
 shift = int(input())
s_in = input().strip()
s_out = ''
abc = ' abcdefghijklmnopqrstuvwxyz'
for i in s_in:
    s_out += abc[(abc.find(i) + shift)%27]
print(f'Result: ""{s_out}""')
 -End,"
 card1, card2 = input().split()
trump = input()

values = ('6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A')
c1_val, c1_suit = card1[:-1], card1[-1:]
c2_val, c2_suit = card2[:-1], card2[-1:]

if c1_suit == c2_suit:
    if values.index(c1_val) > values.index(c2_val):
        ans = 0
    else:
        ans = 1
elif trump in (c1_suit, c2_suit):
    if c1_suit == trump:
        ans = 0
    else:
        ans = 1
else:
    ans = 2
print(['First', 'Second', 'Error'][ans])





 -End,"
 s = input().split()
d = {'plus': '+', 'minus': '-', 'multiply': '*', 'divide': '//'}
print(eval(s[0] + d[s[1]] + s[2]))
 -End,"
 from itertools import groupby

for i, j in groupby(input()):
    c = len(list(j))
    print(str(c)*(c > 1), i, sep='', end='')
 -End,"
 s = input()
d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
ans = 0
for i in range(len(s)-1):
    if d[s[i]] >= d[s[i+1]]:
        ans += d[s[i]]
    else:
        ans -= d[s[i]]
print(ans + d[s[-1]])
 -End,"
 n = int(input())
a = []
for i in range(1, n+1):
    a += [i] * i
print(*a[:n])





 -End,"
 ss = input().split()
print(f'{ss.count(""A"")/len(ss):.2f}')
 -End,"
 d = {'mile': 1609,
     'yard': .9144,
     'foot': .3048,
     'inch': .0254,
     'km': 1000,
     'm': 1,
     'cm': .01,
     'mm': .001
     }
s = input().split()
print(f'{float(s[0]) * d[s[1]] / d[s[3]]:.2e}')
 -End,"
 s = [int(i) for i in input().split()]
x = int(input())
if x not in s:
    print('None')
else:
    while x in s:
        k = s.index(x)
        print(k, end=' ')
        s[k] += 1
 -End,"
 a, b = map(int, input().split())
for i in range(a, b+1):
    print('Fizz'*(i % 3 == 0) + 'Buzz'*(i % 5 == 0) or i)
 -End,"
 from itertools import groupby

c = 1
for i, j in groupby(input(), lambda x: x.isdigit()):
    s = list(j)
    if i:
        c = int(''.join(s))
    else:
        print(c * s[0] + ''.join(s[1:]), end='')
 -End,"
 s = list(map(int, input().split()))
a = set(range(1, len(s)))
pr = s[0]
for cur in s[1:]:
    a.discard(abs(cur - pr))
    pr = cur
if len(a) == 0:
    print('Jolly')
else:
    print('Not jolly')
 -End,"
 from itertools import groupby

s = sorted(len(i) for i in input().split())
for i, j in groupby(s):
    print(f'{i}: {len(tuple(j))}')
 -End,"
 def hanoi(m, fr, to, add):
    if m != 0:
        hanoi(m-1, fr, add, to)
        print(f'{fr} - {to}')
        hanoi(m-1, add, to, fr)


n = int(input())
hanoi(n, 1, 3, 2)
 -End,"
 from re import sub
print(sub(r' +', '_', input()))
 -End,"
 d = {'0': (' -- ', '|  |', '|  |', '    ', '|  |', '|  |', ' -- '),
     '1': ('    ', '   |', '   |', '    ', '   |', '   |', '    '),
     '2': (' -- ', '   |', '   |', ' -- ', '|   ', '|   ', ' -- '),
     '3': (' -- ', '   |', '   |', ' -- ', '   |', '   |', ' -- '),
     '4': ('    ', '|  |', '|  |', ' -- ', '   |', '   |', '    '),
     '5': (' -- ', '|   ', '|   ', ' -- ', '   |', '   |', ' -- '),
     '6': (' -- ', '|   ', '|   ', ' -- ', '|  |', '|  |', ' -- '),
     '7': (' -- ', '   |', '   |', '    ', '   |', '   |', '    '),
     '8': (' -- ', '|  |', '|  |', ' -- ', '|  |', '|  |', ' -- '),
     '9': (' -- ', '|  |', '|  |', ' -- ', '   |', '   |', ' -- ')
     }
s = input()
print(f'x{(5*len(s)-1)*""-""}x')
for i in range(7):
    print('|', end='')
    for digit in s:
        print(d[digit][i], end=' ')
    print('\b|')
print(f'x{(5*len(s)-1)*""-""}x')
 -End,"
 n, m = map(int, input().split())
a = [input().split() for i in range(n)]
for i in zip(*a):
    print(*i)
 -End,"
 s = input().lower().split()
for i in set(s):
    print(i, s.count(i))
 -End,"
 s = input()
while s != 'End':
    print(f'Processing ""{s}"" command...')
    s = input()
print('Good bye!')
 -End,"
 s = input().split()
for i in set(s):
    if s.count(i) > 1:
        print(i, end=' ')
 -End,"
 d = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',
     50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}
n = int(input())
res = ''
for arab, rom in d.items():
    res += n // arab * rom
    n = n % arab
print(res)
 -End,"
 def coch_curve(n):
    if n:
        coch_curve(n-1)
        print(f'turn 60')
        coch_curve(n-1)
        print(f'turn -120')
        coch_curve(n - 1)
        print(f'turn 60')
        coch_curve(n - 1)


coch_curve(int(input()))
 -End,"
 a, b = map(int, input().split('/'))
while b:
    print(f'{a // b}', end=' ')
    a, b = b, a % b
 -End,"
 from collections import Counter

def duplicate():  # есть карты с одинаковым достоинством
    k = c.most_common()[0][1] - len(c)
    return ('Pair', 'Two Pairs', 'Three of a Kind', 'Full House', 'Four of a Kind')[k+2]

def unduplicate():  # карты с разным достоинством
    k, straight, flash = 0, False, False
    if max(value) - min(value) == 4:  # straight
        straight = True
        k = 1
    if len(suit) == 1:  # flush
        flash = True
        k = 2
    if straight and flash:
        if min(value) == 8:
            k = 4  # Royal
        else:
            k = 3  # straight + flush
    return ('High Card', 'Straight', 'Flush', 'Straight Flush', 'Royal Flush')[k]

cards = ('2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A')
s = input().split()
value = tuple(map(cards.index, (i[:-1] for i in s)))  # кортеж из индексов введенных карт
suit = {i[-1] for i in s}
c = Counter(value)
print(f'{duplicate() if len(c) < 5 else unduplicate()}')
 -End,"
 def is_prime(n):
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
            break
    else:
        return True
 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.count = 0
        
    def can_add(self, v):
        if v + self.count <= self.capacity :
            return True
        else:
            return False
       
    def add(self, v):
        self.count += v
        




 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    print(re.sub(r'\ba+\b', 'argh', line, flags=re.IGNORECASE, count=1)) -End,"
 import math

def def_e(x):
    return math.exp(x) * math.log(math.exp(1))





 -End,"
 def fib(n):
    if n == 1 or n == 2:
        return 1
    elif n == 0:
        return 0
    else:
        return fib(n - 1) + fib(n - 2)
 -End,"
 def numerics(n):
    res = [int(k) for k in str(n)]
    return res
 -End,"
 def kaprekar_step(L):
    L = sorted(L)
    L_obr = list(reversed(L))
    chislo1 = int(''.join((str(i) for i in L)))
    chislo2 = int(''.join((str(i) for i in L_obr)))
    if chislo1 > chislo2:
        return chislo1 - chislo2
    else:
        return chislo2 - chislo1




 -End,"
 def numerics(n):
    return [int(k) for k in str(n)]

def kaprekar_step(L):
    L = sorted(L)
    L_obr = list(reversed(L))
    chislo1 = int(''.join((str(i) for i in L)))
    chislo2 = int(''.join((str(i) for i in L_obr)))
    if chislo1 > chislo2:
        return chislo1 - chislo2
    else:
        return chislo2 - chislo1

def kaprekar_loop(n):
    while True:
        if n != 6174:
            print(n)
            n = kaprekar_step(numerics(n))
        elif n == 6174:
            print(n)
            break -End,"
 def numerics(n):
    return [int(k) for k in str(n)]

def kaprekar_step(L):
    L = sorted(L)
    L_obr = list(reversed(L))
    chislo1 = int(''.join((str(i) for i in L)))
    chislo2 = int(''.join((str(i) for i in L_obr)))
    if chislo1 > chislo2:
        return chislo1 - chislo2
    else:
        return chislo2 - chislo1

def kaprekar_loop(n):
    while True:
        if n == 1000:
            print('Ошибка! На вход подано число 1000')
            break
        if len(set(numerics(n))) < 2:
            print('Ошибка! На вход подано число {} - все цифры одинаковые'.format(n))
            break
        if n != 6174:
            print(n)
            n = kaprekar_step(numerics(n))
        elif n == 6174:
            print(n)
            break -End,"
 # Recomendation to use numerics(n) and set() for counting
def numerics(n):
    return [int(k) for k in str(n)]

true_len = [3,4,6]
false_num = [100, 1000, 100000]


def kaprekar_check(n):
    if len(str(n)) in true_len:
        if n not in false_num:
            if len(set(numerics(n))) >= 2:
                return True
            else:
                return False
        else:
            return False
    else:
        return False -End,"
 def kaprekar_step(L):
    L = sorted(L)
    L_obr = list(reversed(L))
    chislo1 = int(''.join((str(i) for i in L)))
    chislo2 = int(''.join((str(i) for i in L_obr)))
    if chislo1 > chislo2:
        return chislo1 - chislo2
    else:
        return chislo2 - chislo1




 -End,"
 def numerics(n):
    return [int(k) for k in str(n)]

def kaprekar_step(L):
    L = sorted(L)
    L_obr = list(reversed(L))
    chislo1 = int(''.join((str(i) for i in L)))
    chislo2 = int(''.join((str(i) for i in L_obr)))
    if chislo1 > chislo2:
        return chislo1 - chislo2
    else:
        return chislo2 - chislo1

true_len = [3,4,6]
false_num = [100, 1000, 100000]
kaprekar_nums = [495, 6174, 549945, 631764]


def kaprekar_check(n):
    if len(str(n)) in true_len:
        if n not in false_num:
            if len(set(numerics(n))) >= 2:
                return True
            else:
                return False
        else:
            return False
    else:
        return False


def kaprekar_loop(n):
    loop_lst = []
    while True:
        if not kaprekar_check(n):
            print('Ошибка! На вход подано число {}, не удовлетворяющее условиям процесса Капрекара'.format(n))
            break
        if n not in kaprekar_nums:
            if n in loop_lst:
                print('Следующее число - {}, кажется процесс зациклился...'.format(n))
                break
            else:    
                print(n)
                loop_lst.append(n)
                n = kaprekar_step(numerics(n))
        elif n in kaprekar_nums:
            print(n)
            break



 -End,"
 from math import pi, sin

def f(x):
    return round(((sin(pi * x) / 2) / x), 3)

x1 = 1e6
print(f(x1)) -End,"
 import numpy as np
n = int(input())
Z = np.zeros(n, float) -End,"
 import numpy as np
params = input().split(' ')
if params[-1].isdigit():
    shape = [int(i) for i in params]
    Z = np.zeros(shape)
else:
    shape = [int(i) for i in params if i.isdigit()]
    dtype = params[-1]
    Z = np.zeros(shape, dtype=dtype) -End,"
 import numpy as np

n = int(input())
m = int(input())
shape = [int(i) for i in range(n, m + 1)]
Z = np.zeros((m + 1 - n), int)
Z[:] = shape


 -End,"
 import numpy as np
print(list(Z[np.nonzero(Z > 3)]))




 -End,"
 import numpy as np

np.random.seed(42)

n, m = map(int, input().split())
Z = np.random.random((n, m))
print(Z.sum() / (n * m)) -End,"
 import numpy as np

n, m = map(int, input().split())
Z = np.ones((n, m))
Z[:n:2, :m:2] = 0
Z[1:n:2, 1:m:2] = 0
 -End,"
 import numpy
if len(A[0]) != len(B[:, 0]):
    Z = 'Упс! Что-то пошло не так...'
else:
    Z = A @ B
 -End,"
 import numpy as np

Z = []
for i in A:
    if i < 0:
        Z.append(np.floor(i))
    elif i == 0:
        Z.append(i)
    else:
        Z.append(np.ceil(i))
        
Z = np.array(Z) -End,"
 import numpy as np

n, m = map(int, input().split())
k = int(input())

finish = k + n

Z = np.zeros((n, m)) + np.arange(k, finish).reshape(-1, 1)




 -End,"
 import numpy as np


start = int(input())
stop = int(input())
n = int(input())

sep = float((stop - start) / (n + 1))

Z = np.around(np.linspace(start + sep, stop-sep, num=n), decimals=3)
 -End,"
 print(float(df.age.count()))
print(df.age.describe()['75%'])





 -End,"
 print(df[df.age.notnull() == False])
 -End,"
 print(df[(df[filter_names[0]] == filter_values[0]) & (df[filter_names[1]] < filter_values[1])])
 -End,"
 print(df[(df.age >= age_between[0]) & (df['age'] <= age_between[1])])
 -End,"
 df['age'][index] = df['age'][index] + 1

print(df)
 -End,"
 col = list(df)
for i in col:
    if df[i].dtypes == 'float64' or df[i].dtypes == 'int64':
        print(i + ':' + str(df[i].sum()))
 -End,"
 print(df.groupby([group_by])['age'].mean())
 -End,"
 df.loc[new_index] = new_data
print(df.drop(index = del_index))
 -End,"
 print(pd.Series(df[group_by]).value_counts())
 -End,"
 z = {0 : False, 1 : True, 'yes': True, 'no': False}

df[column] = pd.Series(df[column]).map(z)
print(df)
 -End,"
 string = input().lower().split(' ')
sting_dict = {}

for j in set(string):
    sting_dict[j] = 0

for i in string:
    sting_dict[i] += 1

for word in sting_dict:
    print(word + ' ' + str(sting_dict[word]))
 -End,"
 alpha = ' abcdefghijklmnopqrstuvwxyz'
step = int(input())
psswrd = input().strip()
res = []
for i in psswrd:
    enter = alpha.find(i)
    elem = (enter + step) % 27
    res.append(alpha[elem])

print('Result: ""{}""'.format(''.join(res)))
 -End,"
 a = sorted(list(input().lower()))
b = sorted(list(input().lower()))
print(a == b)
 -End,"
 a = list(input().split())
result = 0
operator = a[1]
first_arg = int(a[0])
second_arg = int(a[2])
if operator == 'plus':
    result = first_arg + second_arg
elif operator == 'minus':
    result = first_arg - second_arg
elif operator == 'multiply':
    result = first_arg * second_arg
elif operator == 'divide':
    result = first_arg // second_arg

print(str(result))   -End,"
 numerals = {'M':1000, 'D':500, 'C':100, 'L':50, 'X':10, 'V':5, 'I':1}
n = 0
last_value = 0
s = input()
for value in (numerals[c] for c in reversed(s.upper())):
    v = (value, -value)[value < last_value]
    n += (value, -value)[value < last_value]
    last_value = value

print(n)
 -End,"
 a = input().split('_')
print(''.join(map(str.title, a)))




 -End,"
 def counter(T):
    val_dict = {}
    for i in T:
        val_dict[i] = len(set(i.upper()))
    a = max(val_dict.values())
    res_list = []
    for (k, v) in val_dict.items():
        if v == a:
            res_list.append(k)
    max_len = 0
    for i in res_list:
        if len(i) > max_len:
            max_len = len(i)
    return max_len




 -End,"
 def avg_sum():
    sum = 0
    n = int(input())
    for i in range(0, n):
        sum += int(input())
    return sum

print(avg_sum())
 -End,"
 scopes = {'global': {'parent': None, 'variables': set()}}

def create(namespace, parent):
  scopes[namespace] = {'parent': parent, 'variables': set()}

def add(namespace, var):
  scope_to_add = scopes[namespace]
  scope_to_add['variables'].add(var)

def get(namespace, var):
  scope_to_get = scopes[namespace]
  if var in scope_to_get['variables']:
    return print(namespace)
  elif scope_to_get['parent'] != None:
    get(scope_to_get['parent'], var)
  else:
    return print(None)    


for i in range(int(input())):
  cmd, nsp, arg = input().split()
  if cmd == 'create':
    create(nsp, arg)
  elif cmd == 'add':
    add(nsp, arg)
  elif cmd == 'get':
    get(nsp, arg)
 -End,"
 mx = []
while True:
    row = input()
    if row == 'end':
        break
    mx.append(list(map(int, row.split())))

n, m = len(mx), len(mx[0])
nmx = [[mx[i-1][j] + mx[(i+1)%n][j] + mx[i][j-1] + mx[i][(j+1)%m] for j in range(m)] for i in range(n)]
for row in nmx:
    print(*row) -End,"
 import fractions
print(fractions.gcd(*map(int, input().split()))) -End,"
 import xml.etree.ElementTree as ET

res = {'red': 0, 'green': 0, 'blue': 0}

def search(root, lvl=1):
    res[root.attrib['color']] += lvl
    for child in root:
        search(child, lvl + 1)

search(ET.fromstring(input()))
print(res['red'], res['green'], res['blue']) -End,"
 from datetime import date, timedelta

d = date(*map(int, input().split())) + timedelta(int(input()))
print('{} {} {}'.format(d.year, d.month, d.day)) -End,"
 print(sorted(input().split(), key=len, reverse=True)[0]) -End,"
 s = input()
print('yes' if s == s[::-1] else 'no') -End,"
 from textwrap import wrap
print(''.join(wrap('{:028b}'.format(int(input())), 7)[::-1])) -End,"
 import numpy as np
m = np.array([input().split() for _ in range(3)], dtype=int)
if np.linalg.det(m[:,:-1]) != 0:
    print(*np.linalg.solve(m[:,:-1], m[:,-1]))
else:
    print('Система не имеет решений') -End,"
 import numpy as np
m = np.array([input().split() for _ in range(4)], dtype=int)
if np.linalg.det(m[:,:-1]) != 0:
    print(*np.linalg.solve(m[:,:-1], m[:,-1]))
else:
    print('Система не имеет решений') -End,"
 import numpy as np
n = int(input())
m = np.array([input().split() for _ in range(n)], dtype=float)
if np.linalg.det(m[:,:-1]) != 0:
    print(*np.linalg.solve(m[:,:-1], m[:,-1]))
else:
    print('Система не имеет решений') -End,"
 print('-$-'.join(input().split()[::-1])) -End,"
 def front_x(words):
    return sorted(sorted(words), key=lambda x: x[0] == 'x' if x else 0, reverse=True)




 -End,"
 s = input()
n = 0
while s != 'The End':
    n += int(s)
    s = input()
print(n) -End,"
 def translate(x, n=2):
    result = ''
    while x:
        x, r = divmod(x, n)
        result = str(r) + result
    return result -End,"
 from math import factorial
from operator import mul
from functools import reduce

def sf(n):
    return reduce(mul, (factorial(i) for i in range(n+1))) -End,"
 def maxId(L):
    return L.index(max(L, key=int)) -End,"
 def list_pull(L):
    result = []
    for item in L:
        if isinstance(item, list):
            result.extend(list_pull(item))
        else:
            result.append(item)
    return result -End,"
 def copy(L):
	result = []
	for item in L:
		if isinstance(item, list):
			result.append(copy(item))
		else:
			result.append(item)
	return result

L2 = copy(L1) -End,"
 n = int(input())
print('{}{}'.format(n - 9 * (n // 9), '9' * (n // 9))) -End,"
 a = [int(i) for i in input().split()]
if len(a) < 2:
    print('Ошибка. Кучек слишком мало, чтобы можно было решить задачу.')
elif not len(a) % 2 and (sum(a) % 2 or len(set(a)) != 1):
    print('Кучки нельзя уравнять')
else:
    print('Кучки можно уравнять') -End,"
 def check(a):
    if not len(a) % 2 and (sum(a) % 2 or len(set(a)) != 1):
        return False
    return True

def solve(a):
    if len(a) < 2:
        return 'Ошибка. Кучек слишком мало, чтобы можно было решить задачу.'
    if check(a):
        m = 0
        while len(set(a)) != 1:
            m += 1
            min1, min2 = sorted(a)[:2]
            a[a.index(min1)] += 1
            a[a.index(min2)] += 1
        return '{} {}'.format(m, a[0])
    return 'Кучки нельзя уравнять'

a = [int(i) for i in input().split()]
print(solve(a)) -End,"
 a, b = map(int, input().split())
print('Замостить можно' if (a + b) % 2 else 'Замостить нельзя') -End,"
 def check(a):
    s = 1
    for i in range(len(a)):
        for j in range(i+1, len(a)):
            s *= -1 if a[i] > a[j] else 1
    return s

arr = [int(i) for s in range(4) for i in input().split()]
print('Бинго!' if check(arr) < 0 else 'Не повезло...') -End,"
 def check(a):
    s = 1
    for i in range(len(a)):
        for j in range(i+1, len(a)):
            s *= -1 if a[i] > a[j] else 1
    return s

n, m = map(int, input().split())
arr = [int(i) for s in range(n) for i in input().split()]

std = [i for i in range(1, n * m)]
for i in range(m):
    std[n*i:n*i+m] = std[n*i:n*i+m][::(-1)**i]

print('Бинго!' if check(arr) == check(std) else 'Не повезло...') -End,"
 s, a, b = (input() for _ in '123')
c = 0
if a in b and a in s:
    print('Impossible')
else:
    while a in s:
        s = s.replace(a, b)
        c += 1
    print(c) -End,"
 def print_mimic(mdict, word, n=200):
    res = []
    for _ in range(n):
        res.append(word)
        word = random.choice(mdict.get(word, mdict['']))
    return ' '.join(res) -End,"
 from collections import defaultdict

def mimic_dict(string):
    words = [''] + string.split()
    d = defaultdict(list)
    for first, second in zip(words, words[1:]):
        d[first].append(second)
    return d -End,"
 n = int(input())
print(f""{n - 9 * (n // 9)}{'9' * (n // 9)}"") -End,"
 def numerics(n):
    return list(map(int, str(n))) -End,"
 def numerics(n):
    return list(map(int, str(n)))

def kaprekar_step(L):
    less = ''.join(map(str, sorted(L)))
    return int(less[::-1]) - int(less)

def kaprekar_check(n):
    return n not in [100, 1000, 100000] \
        and len(numerics(n)) in [3, 4, 6] \
        and len(set(str(n))) != 1

def kaprekar_loop(n):
    if not kaprekar_check(n):
        print(f'Ошибка! На вход подано число {n}, не удовлетворяющее условиям процесса Капрекара')
        return

    numbers = set()
    print(n)
    while n not in [495, 6174, 549945, 631764]:
        numbers.add(n)
        n = kaprekar_step(numerics(n))
        if n in numbers:
            print(f'Следующее число - {n}, кажется процесс зациклился...')
            break
        print(n)
 -End,"
 import sys

answer = {}
row = sys.stdin.readline()
while row:
    k, v = row.split()
    v = int(v)
    if not k in answer:
        answer[k] = (v, 1)
    else:
        answer[k] = (answer[k][0] + v, answer[k][1] + 1)
    row = sys.stdin.readline()

for k, v in answer.items():
    print(f'{k}\t{(v[0] / v[1]):.0f}') -End,"
 
def sum2(a, b):
    a_isdigit = isinstance(a, (int, float))
    b_isdigit = isinstance(b, (int, float))
    if not a_isdigit and b_isdigit:
        return ""1st argument is not a number""
    elif a_isdigit and not b_isdigit:
        return ""2nd argument is not a number""
    elif not (a_isdigit or b_isdigit):
        return ""all arguments are not a numbers""
    return a + b
 -End,"
 import numpy as np

n = int(input())
Z = np.diag(np.arange(1, n + 1)) -End,"
 def generate_parts(num: int):
    s = str(num ** 2)
    half = len(s) // 2

    yield s[:half], s[half:]

    last_index = 1
    left_half_len = len(s[:half])
    while last_index <= left_half_len:
        last_pos = half - last_index
        last_symbol = s[last_pos]
        if last_symbol != ""0"":
            break
        yield s[:last_pos], s[last_pos:]
        last_index += 1


def get_number(s: str):
    return int(s or ""0"")


def get_part_sum(part):
    return sum(get_number(item) for item in part)


def check_part(part, src):
    return get_number(part[-1]) != 0 and get_part_sum(part) == src


def kaprekar(n):
    for part in generate_parts(n):
        if check_part(part, n):
            return True
    return False
 -End,"
 def wisdom_multiplication(x, y, length_check=True):
    a = 100 - x
    b = 100 - y
    
    first_part = str(100 - a - b)
    second_part = str(a * b)

    if length_check:
        if len(second_part) < 2:
            second_part = f""0{second_part}""
    
    return int(first_part + second_part)


def multiplication_check(x, y, length_check=True):
    return wisdom_multiplication(x, y, length_check) == x * y


def multiplication_check_list(start=10, stop=99, length_check=True):
    n, m = 0, 0
    for x in range(start, stop + 1):
        for y in range(start, stop + 1):
            if multiplication_check(x, y, length_check):
                n += 1
            else:
                m += 1

    print(""Правильных результатов:"", n)
    print(""Неправильных результатов:"", m) -End,"
 c1, c2 = filter_names
v1, v2 = filter_values

print(df[(df[c1] == v1) & (df[c2] < v2)]) -End,"
 def caesar(text, key):
    text = """".join(filter(str.isalnum, text)).upper()
    return """".join(chr(65 + (ord(letter) - 65 + key) % 26) for letter in text) -End,"
 def caesar(text, key, alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'):
    return """".join(
        alphabet[(alphabet.index(letter) + key) % len(alphabet)]
        for letter in map(str.upper, filter(str.isalnum, text))
    ) -End,"
 def caesar(text, key, alphabet=""ABCDEFGHIJKLMNOPQRSTUVWXYZ""):
    return """".join(
        alphabet[(alphabet.index(letter) + key) % len(alphabet)]
        for letter in filter(alphabet.__contains__, text.upper())
    )


def bruteforce(text, alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'):
    for key in range(1, len(alphabet)):
        print(caesar(text, -key, alphabet))



 -End,"
 from itertools import cycle


def jarriquez_encryption(text, key, alphabet='ABCDEFGHIJKLMNOPQRSTUVWXYZ', reverse=False):
    n = len(alphabet)
    sign = -1 if reverse else 1
    return """".join(
        alphabet[(alphabet.index(letter) + sign * int(skey)) % n]
        for letter, skey in zip(
            filter(alphabet.__contains__, text.upper()), cycle(str(key))
        )
    ) -End,"
 from itertools import cycle


def disc_generator(alphabet):
    l = list(alphabet)
    random.shuffle(l)
    return """".join(l)


discs = [disc_generator(clear_alphabet) for i in range(n)]


def lcaesar(letter, key, alphabet=""ABCDEFGHIJKLMNOPQRSTUVWXYZ""):
    return alphabet[(alphabet.index(letter) + key) % len(alphabet)]


def jefferson_encryption(text, discs, step, reverse=False):
    key = -step if reverse else step
    return """".join(
        lcaesar(letter, key, disc)
        for letter, disc in zip(
            filter(clear_alphabet.__contains__, text.upper()), cycle(discs)
        )
    )
 -End,"
 ordinary_letters = ""ethosnairfdlmbyguvcp""
ecryption_letters = ""8;4‡)*56(1†092:3?¶-.""


def kidds_encryption(text, reverse=False):
    k, v = ordinary_letters, ecryption_letters
    mapping = dict(zip(v, k) if reverse else zip(k, v))
    return """".join(map(mapping.get, filter(mapping.__contains__, text.lower()))) -End,"
 n=int(input())
if (n==1 or n%10==1) and (n-11)%100 != 0:
    print (n, 'программист') 
elif ((n==2 or n==3 or n==4) or (n%10==2 or n%10==3 or n%10==4)) and ((n-12)%100 != 0 and (n-13)%100 !=0 and (n-14)%100 != 0):
    print (n, 'программиста') 
else: 
    print (n, 'программистов') -End,"
 n=int(input())  
a=n//100000
b=(n//10000)%10 
c=(n//1000)%10
d=(n//100)%10
e=(n//10)%10
f=n%10
if (a+b+c)==(d+f+e):
    print ('Счастливый')
else:
    print ('Обычный') -End,"
 ni=int(input())
i=1
s=0
while ni != 0:
    s += ni
    ni=int(input())
    i +=1
print(s)  -End,"
 a=int(input())
b=int(input())
if a >=b:
    d=a
else:
    d=b
while (d%a != 0 or d%b != 0):
    d +=1
print(d) -End,"
 i = 0
while i>=0:
    n=int(input())
    if n <10:
        continue
    if n>100: 
        break
    else:  
        print(n) 
    i=i+1 -End,"
 a=int(input())
b=int(input())
c=int(input())
d=int(input())
for i in range (c, (d+1)):
    print ('\t', i, end='')
print()
for j in range (a,(b+1)):
    print(j, end='')
    for k in range (c,(d+1)):
                print('\t',j*k, end='')
    print() -End,"
 a=int(input())
b=int(input())
s=0
k=0
for i in range(a,(b+1)):
    if i%3==0:
        s += i
        k +=1
print(s/k) -End,"
 genome=input()
g=genome.upper().count('G')
c=genome.upper().count('C')
print((g+c)*100/len(genome)) -End,"
 s=input().split()
summa=0
for i in s:
    summa += int(i)
print(summa)
     -End,"
 # put your python code here
a=[int(i) for i in input().split()]
if len(a)==1:
    print(a[0])
elif len(a)>=2:
    a.insert(0, a[len(a)-1])
    a.insert(len(a), a[1])
    for j in range(1,len(a)-1):
        b=a[j-1]+a[j+1]
        print(b,end=' ') -End,"
 # put your python code here
a=[int(i) for i in input().split()] 
a.sort() 
j=0
while j <= (len(a)-1):
    if a.count(a[j]) > 1:
        print(a[j], end=' ')
        j = j+a.count(a[j])
    else:
        j += 1  -End,"
 # put your python code here
ni=int(input())
i=1
s=ni
q=(ni)**2
while s != 0:
    i +=1
    ni=int(input())
    s += ni
    q+=(ni)**2
print(q) -End,"
 # put your python code here
lst=[int(i) for i in input().split()] 
a=int(input())
if a not in lst:
    print('Отсутствует') 
for i in lst:
    if i==a:
        ind=lst.index(i)
        print(ind, end=' ')
        lst[ind]='b' -End,"
 # put your python code here
n=int(input())
s=[]
for i in range(n+1):
    ai=[i]*i
    s +=ai
b=s[:n]
for j in range(n):
    print(b[j], end=' ') -End,"
 # put your python code here
lst=input()
i=0
a=[]
while lst!='end':
  a.append([int(i) for i in lst.split()])
  i+=1
  lst=input()
b=[[0 for j in range(len(a[0]))] for i in range(len(a))]
n=len(a)
m=len(a[0])
for i in range(len(a)):
    for j in range(len(a[0])):
        b[i][j]=a[(n-1+i)%n][(m+j)%m]+a[(n+1+i)%n][(m+j)%m]+a[(n+i)%n][(m-1+j)%m]+a[(n+i)%n][(m+1+j)%m]
for i in range(len(a)):
    for j in range(len(a[0])):
        print(b[i][j], end=' ')
    print() -End,"
 # put your python code here
n=int(input())
a=[[0 for i in range(n)]for j in range(n)]
s=1
for k in range((n//2)+1):
    for j in range(k,n-1-k):
        a[k][j]=s
        s+=1
    for i in range(k,n-1-k):
        a[i][n-1-k]=s
        s+=1
    for j in range(k+1,n-k):
        a[n-1-k][-j]=s
        s+=1
    for i in range(k+1,n-k):
        a[-i][k]=s
        s+=1
if n%2==0:
    for i in range(n):
        for j in range(n):
            print(a[i][j], end=' ')
        print()
elif n%2==1:
    a[n//2][n//2]=n**2
    for i in range(n):
        for j in range(n):
            print(a[i][j], end=' ')
        print() -End,"
 # put your python code here
s=input().lower().split()
d={}
for x in s:
    d[x]=s.count(x)
for key, value in d.items():
    print(key, value) -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
d={}
s=[]
n=int(input())
for i in range(n):
    ai=int(input())
    if ai not in d:
        d[ai]=f(ai)
        s.append(f(ai))
    elif ai in d:
        s.append(d[ai])
for j in range(n):
    print(s[j]) -End,"
 # put your python code here
from math import pi
r=float(input())
print(2*pi*r) -End,"
 # put your python code here
d={}
n=int(input())
for i in range(n):
    s=input().split(';')
    s[1]=int(s[1])
    s[3]=int(s[3])
    if s[0] not in d:
        d[s[0]]=[0, 0, 0, 0, 0]
        d[s[0]][0]+=1
        if s[1]>s[3]:
            d[s[0]][1]+=1 
            d[s[0]][4]+=3
        elif s[1]==s[3]:
            d[s[0]][2]+=1
            d[s[0]][4]+=1
        elif s[1]<s[3]:
            d[s[0]][3]+=1
    elif s[0] in d:
        d[s[0]][0]+=1
        if s[1]>s[3]:
            d[s[0]][1]+=1
            d[s[0]][4]+=3
        elif s[1]==s[3]:
            d[s[0]][2]+=1
            d[s[0]][4]+=1
        elif s[1]<s[3]:
            d[s[0]][3]+=1
    if s[2] not in d:
        d[s[2]]=[0, 0, 0, 0, 0]
        d[s[2]][0]+=1
        if s[3]>s[1]:
            d[s[2]][1]+=1
            d[s[2]][4]+=3
        elif s[3]==s[1]:
            d[s[2]][2]+=1
            d[s[2]][4]+=1
        elif s[3]<s[1]:
            d[s[2]][3]+=1
    elif s[2] in d:
        d[s[2]][0]+=1
        if s[3]>s[1]:
            d[s[2]][1]+=1
            d[s[2]][4]+=3
        elif s[3]==s[1]:
            d[s[2]][2]+=1
            d[s[2]][4]+=1
        elif s[3]<s[1]:
            d[s[2]][3]+=1
c=[]
for key, value in d.items():
    c.append(key)
    c.append(value)
i=0
while i<len(c):
    print(c[i]+':', end='')
    for x in c[i+1]:
        print(x,end=' ')
    print()
    i+=2 -End,"
 # put your python code here
s1,s2,d1,d2=[],[],{},{}
s1+=input()
s2+=input()
i,j=0,0
while i<len(s2):
    for x in s1:
        d1[x]=s2[i]
        i+=1
while j<len(s1):
    for x in s2:
        d2[x]=s1[j]
        j+=1
s3,s4=[],[]
s3+=input()
s4+=input()
for x in s3:
    print(d1[x],end='')
print()
for x in s4:
    print(d2[x],end='') -End,"
 a,b=map(int,input().split())

while a != 0 and b != 0:
    if a >=b:
        a=a%b
    else:
        b=b%a
print(max(a,b)) -End,"
 n,s,tchk=int(input()),[],[]
for i in range(n):
    a,b=map(int,input().split())
    s.append([a,b])
s.sort()
for i in range(1,len(s)):
    if s[i-1][1]>=s[i][0]:
        s[i][1]=min(s[i-1][1],s[i][1])
        if i==len(s)-1:
            tchk.append(s[i])
    elif s[i-1][1]<s[i][0]:
        tchk.append(s[i-1])
        if i==len(s)-1:
            tchk.append(s[i])
    
print(len(tchk))
for t in tchk:
    print(t[0],end="" "")




 -End,"
 def sort_cw(i):
    return i[0]/i[1]
n,W=map(int,input().split())
W_sum=float()
summ=float()
tov=[]
for i in range(n):
    c,w=map(int,input().split())
    tov.append([c,w])
tov.sort(key=sort_cw)
tov.reverse()
for i in range(len(tov)):
    W_sum+=tov[i][1]
    summ+=tov[i][0]
    if W_sum>W:
        W_sum=W_sum-tov[i][1]
        summ=summ-tov[i][0]
        summ=summ+tov[i][0]*(W-W_sum)/tov[i][1]
        break
print(""%.3f"" % summ)




 -End,"
 n=int(input())
s=0
slg=[]
if n<=2:
    print(1)
    print(n)
else:
    for i in range(1,n):
        s+=i
        if s<=n:
            slg.append(i)
        elif s>n:
            slg[i-2]=slg[i-2]+(n-(s-i))
            break
print(len(slg))
for sl in slg:
    print(sl, end="" "")




 -End,"
 a=list(input())
d=[]
dic={}
i=0
f=sorted(a)
while i<len(f):
    b=a.count(f[i])
    d.append((f.count(f[i]), f[i]))
    dic[f[i]]=""""
    i+=b
d=sorted(d, reverse=True)
if len(d)==1:
    dic[d[0][1]]=""0""
while len(d)>1:
    l=len(d)
    for c in d[-1][1]:
        dic[c]=""0""+dic[c]
    for c in d[-2][1]:
        dic[c]=""1""+dic[c]
    d.append((d[l-2][0]+d[l-1][0],d[l-2][1]+d[l-1][1]))
    d.remove(d[l-1])
    d.remove(d[l-2])
    d=sorted(d, reverse=True)
   

res=""""
for c in a:
    res+=dic[c]

print(len(set(a)), len(res))
for k, v in dic.items():
    print(k + "": "" + v)
print(res) -End,"
 # put your python code here
a,b,c=[int(input()) for i in (1,2,3)]
p=(a+b+c)/2.
print(a+b+c, (p*(p-a)*(p-b)*(p-c))**0.5, sep='\n')



 -End,"
 # put your python code here
a,b=[input() for i in (1,2)]
print(a,b,sep='$')



 -End,"
 def numerics(n):
    return([int(i) for i in str(n)])
def kaprekar_step(L):
    b=[str(i) for i in L]
    a=int(''.join(sorted(b, reverse=True)))-int(''.join(sorted(b)))
    return(a)
def kaprekar_loop(n):
    if n==6174:
        print(6174)
    else:
        print(n)
        return(kaprekar_loop(kaprekar_step(numerics(n)))) -End,"
 def list_pull(L):
    for w in L:
        if type(w) is list:
            for elem in w:
                L.append(elem)
            L.remove(w)
            return(list_pull(L))
    return(L)




 -End,"
 import numpy as np
M=int(input())
X=np.zeros((M,M), dtype=float)
Y=np.zeros(M, dtype=float)
for i in range(M):
    x,y=map(float,input().split())
    X[i,:]=[x**k for k in range(M)]
    Y[i]=y
r=np.linalg.solve(X,Y)
print(*r)




 -End,"
 ans=0
r=[]
for obj in objects:
    if obj not in r:
        r.append(obj)
        ans+=1
print(ans)


 -End,"
 # put your python code 
print(sum(map(int,input().split())))



 -End,"
 def closest_mod_5(x):
    if x%5==0:
        return(x)
    else:
        return(closest_mod_5(x+1))




 -End,"
 def fact(n):
    if n <=1:
        return(1)
    else:
        return(n*fact(n-1))
def C(n,k):
    return(fact(n)/fact(k)/fact(n-k))
n,k=map(int,input().split())
print(int(C(n,k)))



 -End,"
 # put your python code here
def getspace(namesp,var):
    if var in dic[namesp]:
        return(namesp)
    if namesp=='global' and var not in dic.get(namesp):
        return('None')
    else:
        return(getspace(dic_prnt[namesp],var))
        
    
    
dic={'global':[]}
dic_prnt={'global': 'None'}
for i in range(int(input())):
    cmd, namesp, var =input().split()
    if cmd=='create':
        dic[namesp]=[]
        
        dic_prnt[namesp]=var
    elif cmd=='add':
        dic[namesp].append(var)
    elif cmd=='get':
        print(getspace(namesp,var))

    



 -End,"
 class MoneyBox:
    def __init__(self,capacity):
        self.box=capacity
        
    def can_add(self,v):
        if self.box - v >= 0:
            return True
        else:
            return False
        
    def add(self,v):
        if MoneyBox.can_add(self,v):
            self.box-=v




 -End,"
 class Buffer:
    def __init__(self):
        self.seq=list()
        # конструктор без аргументов
    def add(self, *a):
        for elem in a:
            self.seq.append(elem)
        while len(self.seq)>=5:
            summ=sum(self.seq[:5])
            self.seq=self.seq[5:]
            print(summ)

    def get_current_part(self):
            return(self.seq) -End,"
 # put your python code here
dic={}
for i in range(int(input())):
    s=input()
    if "":"" in s:
        s1=s[:s.index("":"")-1]
        s2=s[s.index("":"")+1:].split()
        dic[s1]=s2
        for elem in s2:
            if elem in dic.keys():
                dic[s1].extend(dic[elem])
        for key in dic.keys():
            if s1 in dic[key]:
                dic[key].extend(dic[s1])
                
    else:
        dic[s]=[]
for m in dic.keys():
    dic[m]=list(set(dic[m]))
#print(dic)
inp=[]
res=[]
for i in range(int(input())):
    s=input()
    inp.append(s)
    if len(dic[s]) >0: 
        for elem in dic[s]:
            if elem in inp:
                res.append(s)
                break
for k in res:
    print(k)



 -End,"
 # put your python code here
a=sorted(list(map(int,input().split()))[1:])
b=list(map(int,input().split()))[1:]
def isin(l,r):
        while l <=r:
            m=(l+r)//2
            if a[m]==k:
                return(m+1)
            elif a[m] > k:
                return(isin(l, m-1))
            elif a[m] < k:
                return(isin(m+1,r))
        return(-1)
for k in b:
    print(isin(0, len(a)-1))



 -End,"
 # put your python code here
n = int(input())
a = list(map(int,input().split()))
d = [0 for i in range(len(a))]
for i in range(len(d)):
    d[i]=1
    for j in range(i):
        if a[i] % a[j] == 0 and d[j] + 1 > d[i]:
            d[i] = d[j] + 1
print(max(d))



 -End,"
 n=int(input())
a=list(map(int,input().split()))
a.insert(0,0)
d=[]
d.append(0)
d.append(a[1])
s=0
if len(a)==1:
    print(a[0])
elif len(a)==2:
    print(max(sum(a),a[-1]))
else:
    for i in range(2,len(a)):
        d.append(max(a[i]+d[i-1], a[i]+d[i-2]))
    print(d[-1])
 -End,"
 mins = int(input())
print(mins // 60)
print(mins % 60) -End,"
 x = int(input())
h = int(input())
m = int(input())

x += h * 60 + m

print(x // 60)
print(x % 60) -End,"
 year = int(input())

if year % 4 == 0:
    if year % 100 == 0:
        if year % 400 == 0:
            print('Високосный')
        else:
            print('Обычный')
    else:
        print('Високосный')
else:
    print('Обычный')
     -End,"
 a = int(input()) 
print(a > -15 and a <= 12 or a > 14 and a < 17 or a >= 19) -End,"
 a = float(input())
b = float(input())
c = input()
if b == 0 and c in ('/','mod','div'):
    print('Деление на 0!')
else:
    if c == '+':
        print(a + b) 
    elif c == '-':
        print(a - b) 
    elif c == '/':
        print(a / b) 
    elif c == '*':
        print(a * b) 
    elif c == 'mod':
        print(a % b) 
    elif c == 'pow':
        print(a ** b)
    elif c == 'div':
        print(a // b)  -End,"
 a = int(input())
b = int(input())
c = int(input())

nummax = max(a,b,c)
nummin = min(a,b,c)
numost = a + b + c - nummax - nummin

print(nummax)
print(nummin)
print(numost) -End,"
 a = int(input())

a100 = a % 100
a10 = a100 % 10

if 11 <= a100 <= 19:
    pr = 'программистов'
else:
    if a10 == 0 or 5 <= a10 <= 9:
        pr = 'программистов'
    elif a10 == 1:
        pr = 'программист'
    elif 2 <= a10 <= 4:
        pr = 'программиста'
    
print(a, pr) -End,"
 s = 0

a = int(input())
while not a == 0:
    s += a
    a = int(input())

print(s) -End,"
 a = int(input())
b = int(input())
d = min(a,b)

while d % a != 0 or d % b != 0:
    d += 1
    
print(d) -End,"
 while True:
    a = int(input())
    if a < 10:
        continue
    elif a > 100:
        break     
    print(a) -End,"
 a = int(input())
b = int(input())
c = int(input())
d = int(input())

# Формируем шапку таблицы
st = ''
for j in range(c, d+1):
    st = st + '\t' + str(j)
# Выводим шапку таблицы
print(st)

for i in range(a, b+1):
    # Формируем строку таблицы
    st = str(i)
    for j in range(c, d+1):
        st = st + '\t'+str(i*j)
    # Выводим строку таблицы
    print(st)   -End,"
 a = int(input())
b = int(input())

m = 0
n = 0

for i in range(a, b+1):
    if i % 3 == 0:
        m += i
        n += 1
        
if n == 0:
    print(0)
else:
    print(m/n) -End,"
 genome = input().upper()
cg_count = genome.count('C') + genome.count('G')
print(cg_count / len(genome) * 100) -End,"
 string = input()
result = ''
cursym = ''
count = 0

for sym in string:
    if sym != cursym:
        if count != 0:
            result += cursym + str(count)
        cursym = sym
        count = 1
    else:
        count += 1
        
if count != 0:
    result += cursym + str(count)
        
print(result) -End,"
 sm = 0
for num in [int(i) for i in input().split()]:
    sm += num
print(sm) -End,"
 ls = [int(i) for i in input().split()]
lenls = len(ls)

for i in range(0, lenls):
    if lenls == 1:
        print(ls[i], end='')
    elif i == lenls-1:
        print(ls[i-1] + ls[0], end='')
    else:
        print(ls[i-1] + ls[i+1], end=' ') -End,"
 ls = [int(i) for i in input().split()]
ls.sort()
myls = []

for i in ls:
    if ls.count(i) > 1 and myls.count(i) == 0:
        myls.append(i)
        print(i, end=' ') -End,"
 a = []

while True:
    s = input()
    if s == 'end':
        break
    else:
        a.append([int(i) for i in s.split()])
        
for i in range(len(a)):
    for j in range(len(a[i])):
        s = 0
        s += a[i-1][j] # добавим значение ячейки слева
        s += a[i][j-1] # добавим значение ячейки сверху
        if i+1 == len(a):
            s += a[0][j] # выход за границу, добавим значение первой ячейки в строке
        else:
            s += a[i+1][j]  # добавим значение ячейки справа
        if j+1 == len( a[i]):
            s += a[i][0] # выход за границу, добавим значение первой ячейки в колонке
        else:
            s += a[i][j+1] # добавим значение ячейки снизу
        
        print(s, end=' ')
    print() -End,"
 n = int(input())
a = [[0] * n for i in range(n)]

xmin = 0
xmax = n-1
ymin = 0
ymax = n-1
b = 0
bmax = n ** 2

while b != bmax:
    # Идем вправо по горизонтали
    for i in range(xmin, xmax+1):
        b += 1
        a[ymin][i] = b
    ymin += 1 # Убираем из диапазона обхода матрицы строку сверху
    
    # Идем вниз по вертикали
    for i in range(ymin, ymax+1):
        b += 1
        a[i][xmax] = b
    xmax -= 1 # Убираем из диапазона обхода матрицы колонку справа
    
    # Идем влево по горизонтали
    for i in reversed(range(xmin, xmax+1)):
        b += 1
        a[ymax][i] = b
    ymax -= 1 # Убираем из диапазона обхода матрицы строку снизу
    
    # Идем вверх по вертикали
    for i in reversed(range(ymin, ymax+1)):
        b += 1
        a[i][xmin] = b
    xmin += 1 # Убираем из диапазона обхода матрицы колонку слева
        
for i in range(len(a)):
    for j in range(len(a[i])):
        print(a[i][j], end=' ')
    print() -End,"
 r = {}

for i in [i for i in input().split()]:
    if i.lower() not in r:
        r[i.lower()] = 1
    else:
        r[i.lower()] += 1

for key, value in r.items():
    print(key, value) -End,"
 d = {}
for i in range(int(input())):
    x = int(input())
    if x not in d:
        d[x] = f(x)
    print(d[x]) -End,"
 import math
print(float(input()) * math.pi * 2) -End,"
 import sys
for arg in sys.argv[1:]:
    print(arg, end=' ') -End,"
 def get_winkey(goals1, goals2):
    if goals1 == goals2:
        return 'Ничьих'
    elif goals1 > goals2:
        return 'Побед'
    else:
        return 'Поражений'

def add_new_team(team):
    teams[team] = {'Всего_игр': 0, 'Побед': 0, 'Ничьих': 0, 'Поражений': 0, 'Всего_очков': 0}
    
def add_team_result(team, goals, winkey):
    if team not in teams:
        add_new_team(team)
    
    teams[team][winkey] += 1
    teams[team]['Всего_игр'] += 1
    teams[team]['Всего_очков'] += scoring[winkey]
    
def add_result(team1, goals1, team2, goals2):  
    add_team_result(team1, goals1, get_winkey(goals1, goals2)) 
    add_team_result(team2, goals2, get_winkey(goals2, goals1))

scoring, teams = {'Побед': 3, 'Ничьих': 1, 'Поражений': 0}, {}

a = int(input())
for i in range(a):
    set = input().split(';')
    add_result(set[0], int(set[1]), set[2], int(set[3]))
    
for team, results in teams.items():
    print(team+':'+ str(results['Всего_игр']), str(results['Побед']), 
                    str(results['Ничьих']), str(results['Поражений']), 
                    str(results['Всего_очков'])) -End,"
 d = {'север':0, 'юг':0, 'запад':0, 'восток':0,}
for i in range(int(input())):
    s = input().lower().split()
    key = s[0]
    value = int(s[1])
    d[key] += int(value)
               
print(d['восток'] - d['запад'], d['север'] - d['юг']) -End,"
 a = [int(input()) for _ in range(int(input()))]

print(sum(a)) -End,"
 mylist = []
for obj in objects:
    if obj not in mylist:
        mylist.append(obj)

print(len(mylist)) -End,"
 def create(namespace, parent):
    namespaces.append({'namespace': namespace, 'parent': parent, 'var': []})

def add(namespace, var):
    for ns in namespaces:
        if ns['namespace'] == namespace and var not in ns['var']:
            ns['var'].append(var)

def get(namespace, var):
    for ns in namespaces:
        if ns['namespace'] == namespace: 
            if var in ns['var']:
                return ns['namespace']
            elif ns['parent'] == None:
                return None
            else:
                return get(ns['parent'], var)

namespaces = []
create('global', None)

for i in range(int(input())):
    cmd, par1, par2  = input().split(' ')
    if cmd == 'add':
        add(par1, par2) 
    elif cmd == 'get':
        print(str(get(par1, par2)))
    elif cmd == 'create':
        create(par1, par2)
 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity  = capacity
        self.count  = 0
        
    def can_add(self, v):
        if self.count  + v > self.capacity:
            return False
        else:
            return True

    def add(self, v):
        self.count  += v

def intinput(text=''):
    return int(input(text)) -End,"
 class Buffer:
    def __init__(self):
        self.buf = []
    
    def add(self, *a):
        self.buf += a
        count5 = len(self.buf) // 5
        if count5 > 0:
            for i in range(count5):
                print(sum(self.buf[i*5:i*5+5]))
            self.buf = self.buf[count5*5:]
    
    def get_current_part(self):
        return self.buf -End,"
 def is_parent(dct, parent, child):

    # Предварительные проверки
    parents = dct.get(child, None)
    if parents is None:
        return False
    elif parent == child:
        return True

    # Основные проверки
    if parent in parents:
        return True
    else:
        for new_child in parents:
            if is_parent(dct, parent, new_child):
                return True
        return False


def check(dct, parent, child):

    if is_parent(dct, parent, child):
        return 'Yes'
    else:
        return 'No'


dct = {}

# Ввод данных
n = int(input())
for _ in range(n):
    lst = input().split()
    dct[lst[0]] = lst[2:]

# Ввод запросов и вывод ответа
q = int(input())
for _ in range(q):
    parent, child = input().split()
    print(check(dct, parent, child))
 -End,"
 def is_parent(dct, parent, child):
    # Предварительные проверки
    parents = dct.get(child, None)
    if parents is None:
        return False
    elif parent == child:
        return True
    # Основные проверки
    if parent in parents:
        return True
    else:
        for new_child in parents:
            if is_parent(dct, parent, new_child):
                return True
        return False

def check(dct, ex_list, child):
    for parent in ex_list:
        if is_parent(dct, parent, child):
            return True
    return False


dct = {}
ex_list = list()

# Ввод данных
n = int(input())
for _ in range(n):
    lst = input().split()
    dct[lst[0]] = lst[2:]

# Ввод запросов и вывод ответа
q = int(input())
for _ in range(q):
    ex = input()
    if ex in ex_list:
        continue
    elif check(dct, ex_list, ex):
        ex_list.append(ex)
        print(ex)
    else:
        ex_list.append(ex) -End,"
 import datetime

date = datetime.datetime.strptime(input(), ""%Y %m %d"")

newdate = date + datetime.timedelta(int(input()))

print(newdate.year, newdate.month, newdate.day) -End,"
 class multifilter:
    def judge_half(pos, neg):
        # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)
        return pos >= neg

    def judge_any(pos, neg):
        # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)
        return pos >= 1

    def judge_all(pos, neg):
        # допускает элемент, если его допускают все функции (neg == 0)
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable   # исходная последовательность
        self.funcs = funcs         # допускающие функции
        self.judge = judge         # решающая функция
        self.i = 0
    
    def __iter__(self):
        return self
    
    def __next__(self):
        while True:
            if self.i < len(self.iterable):
                self.i += 1
                
                x, pos, neg = self.iterable[self.i - 1], 0, 0
                for func in self.funcs:
                    if func(x):
                        pos += 1
                    else:
                        neg += 1
                
                if self.judge(pos, neg):
                    return x
            else:
                raise StopIteration -End,"
 class multifilter:
    def judge_half(pos, neg):
        # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)
        return pos >= neg

    def judge_any(pos, neg):
        # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)
        return pos >= 1

    def judge_all(pos, neg):
        # допускает элемент, если его допускают все функции (neg == 0)
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable   # исходная последовательность
        self.funcs = funcs         # допускающие функции
        self.judge = judge         # решающая функция

    def __iter__(self):
        for x in self.iterable:
            pos, neg = 0, 0
            for func in self.funcs:
                if func(x):
                    pos += 1
                else:
                    neg += 1
            
            if self.judge(pos, neg):
                yield x -End,"
 def primes():   
    yield 2
    yield 3
    
    prs = [3]
    n = 3
    
    while True:
        n += 2
        for p in prs:
            if n % p == 0:
                break
        else:
            prs.append(n)
            yield n -End,"
 s, t = [input() for _ in range(2)]

count = 0
while t in s:
    i = s.find(t)
    s = s[i+1:]
    count += 1
    
print(count) -End,"
 import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    
    if re.match(r"".*\bcat\b.*"", line):
        print(line) -End,"
 import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if re.match(r"".*z...z.*"", line):
        print(line) -End,"
 import sys, re

for line in sys.stdin:
    line = line.rstrip()
    if re.match(r"".*\\.*"", line):
        print(line) -End,"
 import sys, re

for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(r""human"", ""computer"", line)
    print(line) -End,"
 import requests, re

def Get_URL_list(res):
    result = [] 
    if res.status_code != 200:
        return result
    reg = re.findall(r""<a href=\""(.*)\"""", res.text)
    for link in reg:
        result.append(link)
    return result

def Check_URLs(urlA, urlB):
    result = False
    for urlA2 in Get_URL_list(requests.get(urlA)):
        if urlB in Get_URL_list(requests.get(urlA2)):
            result = True
    return result

urlA = input()
urlB = input()

print('Yes' if Check_URLs(urlA, urlB) else 'No') -End,"
 X=int(input())
print(X//60)
print(X%60)



 -End,"
 X=int(input())
H=int(input())
M=int(input())
print(H+X//60+(M+X%60)//60)
print(M+X%60-60*((M+X%60)//60))


 -End,"
 A=int(input())
B=int(input())
H=int(input())
if  A<=H<=B:
    print('Это нормально')
elif H<A:
    print('Недосып')
elif H>B:
    print('Пересып')


 -End,"
 x=int(input())
if x%4==0 and x%100!=0 or x%400==0:
    print('Високосный')
else:
    print('Обычный')


 -End,"
 A=float(input())
B=float(input())
C=str(input())
if C=='+':
    print(A+B)
elif C=='-':
    print(A-B)
elif C=='*':
    print(A*B)
elif C=='pow':
    print(A**B)
elif C=='div'and B!=0:
    print (A//B) 
elif C=='/' and B!=0:
    print(A/B)
elif C=='mod' and B!=0:
    print(A%B)
elif C=='/' and B==0.0:
    print('Деление на 0!')
elif C=='mod' and B==0.0:
    print('Деление на 0!')
elif C=='div'and B==0:
    print ('Деление на 0!')
 -End,"
 e=input()
if e=='треугольник':
    a=int(input())
    b=int(input())
    c=int(input())
    print(float ((((a+b+c)/2-a)*((a+b+c)/2-b)*((a+b+c)/2-c)*(a+b+c)/2)**0.5))
elif e=='прямоугольник':
    a=int(input())
    b=int(input())
    print(float (a*b))
elif e=='круг':
    r=int(input())
    print(float (3.14*r**2))

 -End,"
 a=int(input())
b=int(input())
c=int(input())
if c<a>b and c<b: print(a),'\n',print(c),'\n',print(b)
elif c<a>b and c>b: print(a),'\n',print(b),'\n',print(c)
elif c<b>a and c<a: print(b),'\n',print(c),'\n',print(a)
elif c<b>a and c>a: print(b),'\n',print(a),'\n',print(c)
elif b<c>a and b<a: print(c),'\n',print(b),'\n',print(a)
elif b<c>a and b>a: print(c),'\n',print(a),'\n',print(b)
elif a==b and c>b: print(c),'\n',print(b),'\n',print(a)
elif a==c and b>a: print(b),'\n',print(c),'\n',print(a)
elif b==c and a>b: print(a),'\n',print(c),'\n',print(b)
elif a==b and c<b: print(b),'\n',print(c),'\n',print(a)
elif a==c and b<a: print(c),'\n',print(b),'\n',print(a)
elif b==c and a<b: print(c),'\n',print(a),'\n',print(b)
elif b==c==a: print(a),'\n',print(b),'\n',print(c) -End,"
 a=int(input())
b=int(input())
c=int(input())
if a>=b>=c: print(a),'\n',print(c),'\n',print(b)
elif b>=a>=c: print(b),'\n',print(c),'\n',print(a)
elif c>=a>=b: print(c),'\n',print(b),'\n',print(a)
elif a>=c>=b: print(a),'\n',print(b),'\n',print(c)
elif b>=c>=a: print(b),'\n',print(a),'\n',print(c)
elif c>=b>=a: print(c),'\n',print(a),'\n',print(b)

 -End,"
 n=int(input())
if n%10==0:print (n,'программистов')
elif n%10==1 and (n//10)%10!=1:print (n,'программист')
elif n%10==2 and (n//10)%10!=1:print (n,'программиста')
elif n%10==3 and (n//10)%10!=1:print (n,'программиста')
elif n%10==4 and (n//10)%10!=1:print (n,'программиста')
elif n%10==5 and (n//10)%10!=1:print (n,'программистов')
elif n%10==6 and (n//10)%10!=1:print (n,'программистов')
elif n%10==7 and (n//10)%10!=1:print (n,'программистов')
elif n%10==8 and (n//10)%10!=1:print (n,'программистов')
elif n%10==9 and (n//10)%10!=1:print (n,'программистов')
elif (n//10)%10==1:print (n,'программистов')
 -End,"
 n=int(input())
if ((n%1000)%10+((n%1000)%100-((n%1000)%10))//10+((n%1000)-(n%1000)%100)//100)==(((n-n%1000)//1000)%10)+(((n-n%1000)//1000)%100-((n-n%1000)//1000)%10)//10+((n-n%1000)//1000-((n-n%1000)//1000)%100)//100:print('Счастливый')
else: print('Обычный')


 -End,"
 n=int(input())
if ((n%1000)//100+((n%1000)%100)//10+(n%1000)%10)==(n//100000+(n//10000)%10+(n//1000)%10):print('Счастливый')
else:print('Обычный')




 -End,"
 a=int(input())
s=a
while (a!=0):
    a=int(input())
    s+=a
print(s)



 -End,"
 a=int(input())
b=int(input())
d=a
while (d%a!=0 or d%b!=0):
    d+=1
print(d) -End,"
 a=int(input())
b=int(input())
c=int(input())
d=int(input())
for n in range(1):
    for p in range(c,d+1):
        print ('\t',p,end='')
    print()
for i in range(a,b+1):
    print (i,end='\t')
    for j in range(c,d+1):
        print (i*j,end='\t')
    print()




 -End,"
 a=int(input())
b=int(input())
s=0
d=0
for i in range(a,b+1):
    if i%3==0:
        s+=i
for j in range(a,b+1):
    if j%3==0:
        d+=1
print(s/d)




 -End,"
 genome=input()
print((genome.upper().count('G')+genome.upper().count('C'))/len(genome)*100)




 -End,"
 s=input()
i=0
j=1
b=len(s)
a=s[i]
if b>1:
    c=s[i+1]
    d=0
    for d in range(1,1000):
        while a==c:
            j+=1
            i+=1
            a=s[i]
            if i<b-1:
                c=s[i+1]
            else:
                print(a,end='')
                print(j,end='')
                break
        while a!=c:
            print(a,end='')
            print(j,end='')
            j=1
            i+=1
            a=s[i]
            if i<b-1:
                c=s[i+1]
            else:
                print(a,end='')
                print(j,end='')
                break
        if i==b-1:
            break
else:
    print(a,end='')
    print(1,end='')




 -End,"
 a=[int(i) for(i) in input().split()]
s=0
for i in range(0,len(a)):
    s+=a[i]
print(s)




 -End,"
 a=[int(i) for i in input().split()]
if len(a)>1:
    for i in range (len(a)):
        if i<len(a)-1:
            print (str(a[i-1]+a[i+1]),end=' ')
        else: 
            print(str(a[i-1]+a[0]),end=' ')
else:
    print(str(a[0]))




 -End,"
 a=[int(i) for i in input().split()]
if sorted(a)==a and len(a)>1 and a[::-1]==a:
    print(a[0])
a.sort()
for i in range(len(a)-1):
    if a[i-len(a)]==a[i+1-len(a)]:
        if a[i+1-len(a)]!=a[i+2-len(a)]:
            print(a[i],end=' ')
        else:
            continue
    else:
        continue




 -End,"
 i=int(input())
s=i
c=i**2
while s!=0:
    i=int(input())
    s+=i
    c+=i**2
print(c)




 -End,"
 j=int(input())
a=str()
b=str()
k=1
if j==1:
    print(1)
else:
    for i in range(1,j):
        a+=(str(i)+' ')*i
    while b.count(' ')!=j:
        b=a[0:k]
        k+=1
print(b)




 -End,"
 lst = [int(i) for i in input().split()]
x=int(input())
for j in range(len(lst)):   
    if lst[j]==x:
        lst.append(j)
del lst[0:j+1]
if lst!=[]:
    for k in range(len(lst)):    
        print(lst[k], end=' ')
else:
    print('Отсутствует')




 -End,"
 a=[str(i) for i in input().split()]
b=[]
c=['end']
n=0
while a!=c:
    b+=[a]
    a=[str(i) for i in input().split()]
if len(b)>1 and len(b[0])>1:    
    for i in range(len(b)): 
        for j in range(len(b[0])):
            if j==len(b[0])-1:
                print(int(b[i-1][j])+int(b[i-len(b)+1][j])+int(b[i][j-1])+int(b[i][j-len(b[0])+1]),end=' ') 
                print()
            else:
                print(int(b[i-1][j])+int(b[i-len(b)+1][j])+int(b[i][j-1])+int(b[i][j-len(b[0])+1]),end=' ')
elif len(b)==1 and len(b[0])>1:
    for j in range(len(b[0])):
        print(int(b[0][j-1])+int(b[0][j-len(b[0])+1])+int(b[0][j])+int(b[0][j]),end=' ') 
elif len(b)>1 and len(b[0])==1:
    for i in range(len(b)):
        print(int(b[i-1][0])+int(b[i-len(b)+1][0])+int(b[i][0])+int(b[i][0]),end=' ') 
        print()
else:
    print(int(b[0][0])*4)




 -End,"
 a=[str(i) for i in input().split()]
b=[]
c=['end']
while a!=c:
    b+=[a]
    a=[str(i) for i in input().split()]
for i in range(len(b)): 
    for j in range(len(b[0])):
            print(int(b[i-1][j])+int(b[i-len(b)+1][j])+int(b[i][j-1])+int(b[i][j-len(b[0])+1]),end=' ') 
    print()




 -End,"
 t=int(input())
n,m,b,k,s,y,x=0,0,1,-2,-1,t,t
z=[[0 for j in range(0,y)] for i in range(0,y)]
while t>=1:
    for j in range(m,t):
        z[-x][j]=n+1
        n+=1
    for i in range(b,t):
        z[i][x-1]=n+1
        n+=1
    for j in range(k,-t,-1):
        z[x-1][j]=n+1
        n+=1
    for i in range(s,-t,-1):
        z[i][-x]=n+1
        n+=1
    t-=1
    x-=1
    m+=1
    k-=1
    b+=1
    s-=1
for i in range(y):
    for j in range(y):
        print(z[i][j],end=' ')
    print()




 -End,"
 def modify_list(l):
    lst=[]
    for i in range(len(l)):
        if l[i]%2==0:
            lst+=[l[i]]
    for i in range(len(lst)):
        lst[i]=lst[i]//2
    l.clear()
    for i in range(len(lst)):
        l+=[lst[i]]



 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    if key in d:
        d[key]+=[value]
    elif key*2 in d:
        d[key*2]+=[value]
    else:
        d[key*2]=[value]

# не добавляйте кода вне функции -End,"
 s=input().lower().split()
c=set()
for i in range(len(s)):
    c.add(s[i])
for x in c:
    print(x,s.count(x))




 -End,"
 r=float(input())
import math
print(2*math.pi*r)




 -End,"
 n=int(input())
b=[n]
for i in range(n):
    b+=[input().split(';')]
z={}
for i in range(1,len(b)):
    z[b[i][0]]=[0,0,0,0,0]
    z[b[i][2]]=[0,0,0,0,0]
for i in range(1,len(b)):
    if int(b[i][1])>int(b[i][3]):
        z[b[i][0]][4]+=3
        z[b[i][0]][1]+=1
        z[b[i][0]][0]+=1
        z[b[i][2]][0]+=1
        z[b[i][2]][3]+=1
    elif int(b[i][1])==int(b[i][3]):
        z[b[i][0]][4]+=1
        z[b[i][0]][2]+=1
        z[b[i][0]][0]+=1
        z[b[i][2]][4]+=1
        z[b[i][2]][2]+=1
        z[b[i][2]][0]+=1
    elif int(b[i][1])<int(b[i][3]):
        z[b[i][2]][4]+=3
        z[b[i][2]][0]+=1
        z[b[i][2]][1]+=1
        z[b[i][0]][3]+=1
        z[b[i][0]][0]+=1
for key in z:
    x=z[key]
    print(str(key)+str(':'),end='')
    print(*x)




 -End,"
 s1=list(input())
s2=list(input())
s3=list(input())
s4=list(input())
for i in range(len(s3)):
    for j in range(len(s1)):
        if s3[i]==s1[j]:
            print(str(s2[j]),end='')
print()
for i in range(len(s4)):
    for j in range(len(s2)):
        if s4[i]==s2[j]:
            print(str(s1[j]),end='')




 -End,"
 d=int(input())
s1=set()
s2=set()
s3=set()
for i in range(d):
    s=str(input()).lower()
    s1.add(s)
l=int(input())
for j in range(l):
    a=str(input()).lower().split(' ')
    b=len(a)
    for k in range(b):
        s2.add(a[k])
for key in s2:
    if key not in s1:
        s3.add(key)
for x in s3:
    print(x)




 -End,"
 n=int(input())
z=[]
for i in range(n):
    s=input().split(' ')
    z+=[s]
x=0
y=0
for j in range(len(z)):
    if z[j][0]=='север':
        y+=int(z[j][1])
    elif z[j][0]=='юг':
        y-=int(z[j][1])
    elif z[j][0]=='восток':
        x+=int(z[j][1])
    elif z[j][0]=='запад':
        x-=int(z[j][1])
print(x,y)



 -End,"
 def closest_mod_5(x):
    y=x
    while y % 5 != 0:
        y+=1
    return y




 -End,"
 n=int(input())
s=[]
for i in range(n):
    s+=[str(input()).split()]
s1={'None':[],'global':[]}
s2={'None':['global']}
var=''
namespace=''
for i in range(len(s)):
    if s[i][0]=='add':
        s1[s[i][1]]=[]
    elif s[i][0]=='create':
        s2[s[i][2]]=[]
        s1[s[i][1]]=[]
for i in range(len(s)):
    if s[i][0]=='add':
        s1[s[i][1]]+=[s[i][2]]
    elif s[i][0]=='create':
        s2[s[i][2]]+=[s[i][1]]
def searchvar(namespace,var):
    if var in s1[namespace]:
        return namespace
    else:
        for key in s2:
            if namespace in s2[key]:
                namespace=key
                return searchvar(namespace,var)
for i in range(len(s)):
    if s[i][0]=='get'and s[i][1] not in list(s2.keys()) and s[i][1] not in list(s1.keys()):
        print(None)
        continue
    elif n==1:
        print(None)
        break
    elif s[i][0]=='get':
        var=s[i][2]
        namespace=s[i][1]
        print(searchvar(namespace,var))




 -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity=capacity
        self.current=0
        self.adding=None
        self.v=0
    def can_add(self, v):
        self.v=v
        if self.current+self.v<=self.capacity:
            self.adding = True
            return True
        else:
            self.adding = False
            return False
    def add(self, v):
        self.v=v
        if self.can_add(self.v) is True:
            self.current+=self.v




 -End,"
 class Buffer:
    def __init__(self):
        self.s=[]
        return 
    def add(self,*a):
        self.a=list(a)
        self.s+=self.a
        self.c=0
        while len(self.s)>=5:
            for j in range(len(self.s)//5):
                for i in range(5):
                    self.c+=int(self.s[i])
                print(self.c)
                self.c=0
                self.s=self.s[5:]
        return self.s
    def get_current_part(self):
        return self.s -End,"
 s1=[input().split(' : ') for i in range(int(input()))]
s4=[input().split() for j in range(int(input()))]
s2={s1[i][0]:[] for i in range(len(s1))}
for j in range(len(s1)):
    if len(s1[j])>1:
        s2[s1[j][0]]=s1[j][1].split()
    else:
        s2[s1[j][0]]=[s1[j][0]]
for i in range(len(s2)):
    for jey in s2:
        for key in s2:
            if key in s2[jey]:
                for i in range(len(s2[key])):
                    if s2[key][i] not in s2[jey]:
                        s2[jey]+=[s2[key][i]]
                    elif jey not in s2[jey]:
                        s2[jey]+=[jey]
for i in range(len(s4)):
    if s4[i][0] in s2[s4[i][1]]:
        print('Yes')
    else:
        print('No')




 -End,"
 s1=[input().split(' : ') for i in range(int(input()))]
s4=[input().split() for j in range(int(input()))]
s2={s1[i][0]:[] for i in range(len(s1))}
s3=[]
for j in range(len(s1)):
    if len(s1[j])>1:
        s2[s1[j][0]]=s1[j][1].split()
    else:
        s2[s1[j][0]]=[s1[j][0]]
for i in range(len(s2)):
    for key in s2:
        for jey in s2:
            if jey in s2[key]:
                for i in range(len(s2[jey])):
                    if s2[jey][i] not in s2[key]:
                        s2[key]+=[s2[jey][i]]
                    elif key not in s2[key]:
                        s2[key]+=[key]
for i in range(len(s4)):
    for j in range(len(s4)):
        if s4[i][0] in s2[s4[j][0]] and j>i and s4[j][0] not in s3:
            s3+=[s4[j][0]]
for i in range(len(s4)):
    for x in s3:
        if s4[i][0]==x:
            print(x)




 -End,"
 def mod_checker(x, mod=0):
    return lambda y: y%x==mod




 -End,"
 import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r""\b(\w+)\1\b"", line):
        print(line)




 -End,"
 n = int(input())
print('Високосный' if (n % 4 == 0) ^ (n % 100 == 0) or n % 400 == 0 else 'Обычный') -End,"
 operations = {
    '+': lambda x, y: x + y,
    '-': lambda x, y: x - y,
    '/': lambda x, y: ""Деление на 0!"" if y == 0 else x / y,
    '*': lambda x, y: x * y,
    'mod': lambda x, y: ""Деление на 0!"" if y == 0 else x % y,
    'pow': lambda x, y: x ** y,
    'div': lambda x, y: ""Деление на 0!"" if y == 0 else x // y,
}
a = float(input())
b = float(input())
op = input()
print(operations[op](a, b))
 -End,"
 def triangle():
    a = int(input())
    b = int(input())
    c = int(input())
    p = (a+b+c)/2
    print((p*(p-a)*(p-b)*(p-c))**0.5)


def rect():
    print(int(input())*int(input()))


def circle():
    print(3.14*int(input())**2)


def shapes(shape):
    return {
        'треугольник': triangle,
        'прямоугольник': rect,
        'круг': circle
    }.get(shape, 'error')


shapes(input())()




 -End,"
 a, b, c = int(input()), int(input()), int(input())
arr = [a,b,c]
arr.sort(reverse=True)
swap = arr[arr.__len__()-1],arr[arr.__len__()-2]
arr[arr.__len__()-2],arr[arr.__len__()-1] = swap
print(*arr,sep='\n')
 -End,"
 import re

def sayThat(n):
    if re.search('(?<!1)[2-4]$', n):
        return ""программиста""
    elif re.search('(?<=[02-9])1$', n) or re.search('^1$', n):
        return ""программист""
    else:
        return ""программистов""

a = input()
print(a, sayThat(a))

 -End,"
 ticketNr = input()
firstSum, secondSum = 0, 0
for i in range(ticketNr.__len__()):
    secondSum += int(ticketNr.__getitem__(i))
    if i == ticketNr.__len__()//2-1:
        firstSum, secondSum = secondSum, 0
print('Счастливый' if firstSum == secondSum else 'Обычный')
 -End,"
 a, b = int(input()),int(input())
c, d = int(input()),int(input())
for i in range(a-1, b+1):
    print('' if i < a else i, end='\t')
    for j in range(c, d+1):
        print(j if i < a else i*j, end='\t' if j < d else '\n')
         -End,"
 a, b = int(input()), int(input())
s = list(i for i in range(a, b+1) if i % 3 == 0)
print(sum(s)/len(s))
 -End,"
 str = input()
print(len([c for c in str.lower() if c == 'c' or c == 'g'])*100/len(str))
 -End,"
 s = input()
prev = s[0]
n = 0
res = ''
for i in s:
    if prev == i:
        n += 1
    else:
        res += prev + str(n)
        prev = i
        n = 1
print(res+prev+str(n))
 -End,"
 a = [int(i) for i in input().split()]
b = []
for i in range(len(a) - 1):  # последний эл-т можно откинуть
    if a[i] in a[i + 1:] and a[i] not in b:
        b += [a[i]]
print(*b, sep=' ')
 -End,"
 s, b = 0, 0
while True:
    a = int(input())
    s += a
    b += a ** 2
    if s == 0:
        break;
print(b)
 -End,"
 lst, x = [i for i in input().split()], input()
arr = [i for i, item in enumerate(lst) if item == x]
print(*arr if len(arr) > 0 else [""Отсутствует""])
 -End,"
 m = []
while True:
    row = input()
    if row != 'end':
        m += [[int(i) for i in row.split()]]
    else:
        break
for i, row in enumerate(m):
    for j in range(len(row)):
        s = sum([m[i - 1][j], m[(i + 1) % len(m)][j], m[i][j - 1], m[i][(j + 1) % len(row)]])
        print(s, end=' ' if j < len(row) - 1 else '\n')
 -End,"
 n = int(input())
m = [[0] * n for i in range(n)]
i, j, = 0, 0
x, y = 1, 1
xMove = True

for r in range(1, n ** 2 + 1):
    if xMove:
        if 0 <= j <= n - 1 and m[i][j] == 0:
            m[i][j] = r
            j += x
        else:
            xMove = not xMove
            x *= -1  # двигаться по x обратно
            j += x  # вернуть обратно координату по x
            i += y  # сместить по y
            m[i][j] = r  # записать
            i += y  # сместить по y
    else:
        if 0 <= i <= n - 1 and m[i][j] == 0:
            m[i][j] = r
            i += y
        else:
            xMove = not xMove
            y *= -1  # двигаться по y обратно
            j += x  # сместить по x
            i += y  # вернуть обратно координату по y
            m[i][j] = r  # записать
            j += x  # сместить по x
for row in m:
    for item in row:
        print(item, end=' ')
    print()

 -End,"
 f = lambda x: 1 - (x + 2) ** 2 if x <= -2 else -x / 2 if -2 < x <= 2 else (x - 2) ** 2 + 1
 -End,"
 print(sum([int(input()) for i in range(int(input()))]))
 -End,"
 table = {}
for _ in range(int(input())):
    a = input().split(';')
    for i in range(0, 4, 2):  # 2 прохода для подсчета для каждой команды
        res = [0] * 5 if a[i] not in table.keys() else table[a[i]]
        win = int(a[i + 1]) > int(a[-i - 1])  # win
        lose = int(a[i + 1]) < int(a[-i - 1])  # lose
        res[0] += 1
        res[1] += 1 if win else 0
        res[2] += 1 if not (win or lose) else 0
        res[3] += 1 if lose else 0
        res[4] += 3 if win else 0 if lose else 1  # points
        table[a[i]] = res
for k, v in table.items():
    print(k+':', sep='', end='')
    print(*v)
 -End,"
 def encode(val, key, enc):
    return """".join([enc[key.index(char)] for char in val])

k, e = input(), input()
for _ in range(2):
    print(encode(input(), k, e))
    k, e = e, k
 -End,"
 dic = [input().lower() for i in range(int(input()))]
text = [input().lower().split() for i in range(int(input()))]
unique = []
for line in text:
    unique += [word for word in line if word not in dic and word not in unique]
print(*unique,sep='\n')
 -End,"
 d = {'север': 1, 'запад': -1, 'юг': -1, 'восток': 1}
commands = [input().split() for i in range(int(input()))]
x, y = 0, 0
for command in commands:
    m = d[command[0]] * int(command[1])
    if command[0] in ('север', 'юг'):
        y += m
    else:
        x += m

print(x, y)
 -End,"
 class Buffer:
    def __init__(self):
        self.buffer = []

    def add(self, *a):
        for i in a:
            self.buffer.append(i)
            if len(self.buffer) == 5:
                print(sum(self.buffer))
                self.buffer.clear()

    def get_current_part(self):
        return self.buffer
     -End,"
 class ExtendedStack(list):
    def append(self, val):
        super(ExtendedStack, self).append(val)

    def pop(self):
        return super(ExtendedStack, self).pop()

    def sum(self):
        """"""операция сложения""""""
        self.append(self.pop() + self.pop())

    def sub(self):  
        """"""операция вычитания""""""
        self.append(self.pop() - self.pop())

    def mul(self):  
        """"""операция умножения""""""
        self.append(self.pop() * self.pop())

    def div(self):  
        """"""операция целочисленного деления""""""
        self.append(self.pop() // self.pop())
 -End,"
 ext = {}
for i in range(int(input())):
    e = input().split(':')
    ext[e[0].strip()] = e[1].split() if len(e) > 1 else []


def has_parent(parent, child):
    res = False
    if parent == child or parent in ext[child]:
        return True
    for subparent in ext[child]:
        if has_parent(parent, subparent):
            res = True
            break
    return res


for _ in range(int(input())):
    print('Yes' if has_parent(*input().split()) else 'No')
 -End,"
 ex = {}
for _ in range(int(input())):
    e = input().split(':')
    ex[e[0].strip()] = e[1].split() if len(e) > 1 else []

exlist = [input() for _ in range(int(input()))]
def has_parent(parent, child):
    return parent == child or any(map(lambda p: has_parent(parent, p), ex[child]))

for i, child in enumerate(exlist):
    for e in exlist[:i]:
        if has_parent(e, child):
            print(child)
            break
 -End,"
 from datetime import datetime, timedelta
print((datetime.strptime(input(), '%Y %m %d') + timedelta(days=int(input()))).strftime('%Y %-m %-d'))
 -End,"
 class multifilter:
    def judge_half(pos, neg):
        """"""допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)""""""
        return pos >= neg


    def judge_any(pos, neg):
        """"""допускает элемент, если его допускает хотя бы одна функция (pos >= 1)""""""
        return pos >= 1


    def judge_all(pos, neg):
        """"""допускает элемент, если его допускают все функции (neg == 0)""""""
        return neg == 0


    def __init__(self, iterable, *funcs, judge=judge_any):
        """"""    iterable - исходная последовательность
    funcs - допускающие функции
    judge - решающая функция""""""
        self.judge = judge
        self.num = 0
        self.iterable = iterable
        self.funcs = funcs


    def __iter__(self):
        """""" возвращает итератор по результирующей последовательности""""""
        return self

    def __next__(self):
        while self.num < len(self.iterable):
            val = self.iterable[self.num]
            valfilter = [func(val) for func in self.funcs]
            pos = valfilter.count(True)
            neg = len(valfilter) - pos
            self.num += 1
            if self.judge(pos,neg):
                return val
        raise StopIteration
 -End,"
 def primes():
    num = 2
    while True:
        if all([(num % i) != 0 for i in range(2, num)]):
            yield num
        num += 1
 -End,"
 s, a, b = [input() for _ in range(3)]
c = 0 if a != b or a not in s else 1001
while c <= 1000:
    if a not in s:
        break
    s = s.replace(a, b)
    c += 1
print('Impossible' if c > 1000 else c)
 -End,"
 import re
import sys

[print(line.rstrip()) for line in sys.stdin if len(re.findall(r'(cat)', line)) > 1]
 -End,"
 import re
import sys

[print(line.rstrip()) for line in sys.stdin if re.search(r'\bcat\b', line)]
 -End,"
 import re
import sys

[print(line.rstrip()) for line in sys.stdin if re.search(r'z[\w]{3}z', line)]
 -End,"
 import re
import sys

[print(line.rstrip()) for line in sys.stdin if re.search(r'\\', line)]
 -End,"
 import re
import sys

[print(line.rstrip()) for line in sys.stdin if re.search(r'\b(\w+)\1\b', line)]
 -End,"
 import re
import sys

[print(re.sub(r'human', 'computer', line.rstrip())) for line in sys.stdin]
 -End,"
 import re
import sys

[print(re.sub(r'\ba+\b', 'argh', line.rstrip(), count=1, flags=re.IGNORECASE)) for line in sys.stdin]
 -End,"
 import re
import sys

[print(re.sub(r'\b(\w)(\w)', r'\2\1', line.rstrip())) for line in sys.stdin]
 -End,"
 import re
import sys

[print(re.sub(r'((\w)\2+)', r'\2', line.rstrip())) for line in sys.stdin]
 -End,"
 import re
import requests

def getref(url):
    resp = requests.get(url)
    if resp.status_code == 200:
        return [match.group() for match in re.finditer(r'(https?|ftp):\/\/[^\s\/$.?#].[^\s>""]*', resp.text)]
    else:
        return []
    
urlA, urlB = [input() for _ in range(2)]

urlist = getref(urlA)

res = 'No'
for url in urlist:
    if urlB in getref(url):
        res = 'Yes'
        break
print(res)
 -End,"
 import re
import requests

regex = r'(?<=<a)(?:[\s\w""\'=])*(?:href=""|\')(?:https?|ftp)?(?:\:\/\/)?(\w[\w\.-]*)'
urlist = {m for m in re.findall(regex, requests.get(input()).text, flags=re.IGNORECASE)}
print(*sorted(urlist), sep='\n')
 -End,"
 import json

data = json.loads(input())

def childs(parent):
    c = {parent}
    for child in data:
        if parent in child['parents']:
            c |= childs(child['name']) # |= суммирование двух сэтов
    return c


[print(""{} : {}"".format(p['name'], len(childs(p['name'])))) for p in sorted(data, key=lambda i: i['name'])]
 -End,"
 from xml.etree import ElementTree

def value(element, c):
    value_count = {element.attrib['color']: [c]}
    for el in element:
        for k, v in value(el, c + 1).items():
            value_count[k] = value_count[k] + v if k in value_count else v
    return value_count


res = value(ElementTree.fromstring(input()), 1)
print(*[sum(res[color]) for color in ['red', 'green', 'blue']])
 -End,"
 m = input().lower()
print((m.count('g')+m.count('c'))*100 / len(m)) -End,"
 n, a, i = int(input()), [], 1
while len(a) < n:
    a += [i] * i
    i += 1
print(*a[:n], sep = ' ') -End,"
 tmp, s = input(), []
while tmp != 'end':
    s += [[int(i) for i in tmp.split()]]
    tmp = input()
for i in range(len(s)):
    for j in range(len(s[0])):
        print(s[i-1][j] + s[(i+1)%len(s)][j] + s[i][j-1] + s[i][(j+1)%len(s[0])], end = ' ')
    print() -End,"
 x = [int(input()) for i in range(int(input()))]
b = {x : f(x) for x in set(x)}
print (*[b[i] for i in x], sep='\n') -End,"
 k,n = [int(i) for i in input().split()]
a = [i for i in range(k)]
print(*a)

def one(a, k, n):
    for i in range(k-1, -1, -1):
        if a[i] < (n-1) - (k-1-i):
            a[i] += 1
            for j in range(i+1,k):
                a[j] = a[j - 1] + 1
            print(*a)
            one(a, k, n)
one(a, k, n)
 -End,"
 s = {x.lower() for x in (input() for i in range(int(input())))}
b = []
for x in (input().split() for i in range(int(input()))):
    for i in x:
        if i.lower() not in s:
            b += [i]
print(*[j for j in set(b)], sep='\n')
 -End,"
 s = {'восток':0,'север':0,'юг':0,'запад':0}
for i in range(int(input())):
    v = input().lower().split()
    s[v[0]] += int(v[1])
print(s['восток'] - s['запад'],s['север']-s['юг']) -End,"
 print(sum(int(input()) for i in range(int(input())))) -End,"
 print(sum(list(map(lambda x: x == 0,[sum(objects[i] is j for j in objects[i+1:len(objects)]) for i in range(len(objects))])))) -End,"
 class Buffer:
    def __init__(self):
        self.li1 = []

    def add(self, *a):
        def five(a):
            if len(a) >= 5:
                print(sum(a[0:5]))
                return five(a[5:])
            else:
                return a
        self.li1 = five(self.li1 + list(a))

    def get_current_part(self):
        return(self.li1) -End,"
 derevo = {} #наследование
output = [] #порядок вывода
#генерация дерева
def def_derevo():
    value = [i.split() for i in input().split(' : ')]
    value.append([])
    derevo.update({value[0][0]: value[1]})
#анализ вывода
def def_output(child, father):
    return child == father or any(map(lambda p: def_output(p, father), derevo[child]))

[def_derevo() for _ in range(int(input()))] #получение дерева
ochered = [input() for _ in range(int(input()))] #получение вывода

#перебираем список вывода
for i in range(len(ochered)):
    for j in range(i):
        if def_output(ochered[i],ochered[j]):
            print(ochered[i])
            break -End,"
 class NonPositiveError(Exception):
    pass
# += [x] быстрее работает?
class PositiveList(list):
    def append(self, x):
        if x <= 0:
            raise NonPositiveError
        self += [x] -End,"
 print(sum(list(map(int,input().split()))),sum(list(map(int,input().split()))),sep=""#"") -End,"
 s = input().split()
print(s[1],s[2],s[-2]) -End,"
 x = int(input())
print('Division by zero!' if not x else round(int(input()) / x, 1))
#b = int(input())
#print('Division by zero!' if not b else round(int(input()) / b, 1)) -End,"
 print(*(i**2 for i in range(0, int(input()),2)), sep=""\n"") -End,"
 print(*(r for r in input().split() if r[0] != '*'), sep=""\n"") -End,"
 v = int(input())
print([i for i in range(2, v+1) if v%i == 0][0]) -End,"
 convert = lambda L: list(map(int,L)) -End,"
 def translate(x,n=2):
    l = []
    while x:
        l.append(str(x%n))
        x = x // n
    return """".join(l[::-1]) -End,"
 def maxId(L):
    L = list(map(int,L))
    return L.index(max(L))
     -End,"
 f = lambda x: (2*x**2-3*x-5) / (3*x**2+x+1)
print(round(f(float('+10000000000')),3), round(f(float('-100000')),3), sep='\n') -End,"
 from math import sin, pi
f = lambda x: (sin(pi*x*0.5)) / (x)
print(round(f(1000000000),3)) -End,"
 verbing = lambda s: len(s) < 3 and s or ('ing' in s and s+'ly' or s+'ing') -End,"
 front_back = lambda a,b: a[:(len(a)+1)//2]+b[:(len(b)+1)//2]+a[(len(a)+1)//2:]+b[(len(b)+1)//2:] -End,"
 def mimic_dict(s):
    l = ['']+s.strip().split()
    d = dict.fromkeys(list(l[:-1]), [])
    for i in range(len(l) - 1):
        d[l[i]] = d[l[i]] + [l[i+1]]
    return d -End,"
 import random
def print_mimic(d, w = ''):
    s = w
    for _ in range(199):
        w = (w if d.get(w) else '')
        w = random.choice(d[w])
        s += "" ""+w
    return(s) -End,"
 with open(""text.txt"") as f:
    for line in f:
        print(line.rstrip()) -End,"
 import re
print(re.split(r'[^a-z]',input())) -End,"
 def list_pull_door(L, M):
    i = 0
    while i < len(L):
        if type(L[i]) is list:
            list_pull_door(L[i], M)
        else:
            M.append(L[i])
        i += 1
        
def list_pull(L):
    i = 0
    M = []
    while i < len(L):
        if type(L[i]) is list:
            list_pull_door(L[i], M)
        else:
            M.append(L[i])
        i += 1
    return(M)
 -End,"
 list_pull = lambda L: [item for sublist in L1 for item in sublist] -End,"
 import numpy as np
M = np.array((input().split(), input().split()), dtype=int)
(print(*np.linalg.solve(M[:,:-1], M[:,-1])) if np.linalg.det(M[:,:-1]) else print(""Система не имеет решений"")) -End,"
 import numpy as np
M = np.array(tuple(input().split() for _ in range(3)), dtype=int)
try:
    print(*np.linalg.solve(M[:,:-1], M[:,-1]))
except:
    print(""Система не имеет решений"") -End,"
 import numpy as np
M = np.array(tuple(input().split() for _ in range(4)), dtype=int)
try:
    print(*np.linalg.solve(M[:,:-1], M[:,-1]))
except:
    print(""Система не имеет решений"") -End,"
 import numpy as np
M = np.array(tuple(input().split() for _ in range(int(input()))), dtype=float)
try:
    print(*np.linalg.solve(M[:,:-1], M[:,-1]))
except:
    print(""Система не имеет решений"") -End,"
 import numpy as np
M = np.array([[1,1],[1,-1],input().split()], dtype=int).T
print(*map(int,np.linalg.solve(M[:,:-1], M[:,-1]))) if np.linalg.det(M[:,:-1]) and M[0][2]>=M[1][2] else print(""Такой класс не существует"") -End,"
 
n, W = [int(i) for i in input().split()]
sum_weight, sum_price = 0, 0
d = [[int(a[0]), int(a[1]), int(a[0])/int(a[1])] for _ in range(n) for a in [input().split()] if int(a[0]) > 0]
sort_d = sorted(d, key = lambda x: x[-1], reverse=True)

for tupl in sort_d:
    if sum_weight < W:
        if tupl[1]+sum_weight <= W:
            sum_weight += tupl[1]
            sum_price += tupl[0]
        else:
            sum_price += (W - sum_weight)*tupl[0]/tupl[1]
            sum_weight += sum_price*tupl[1]/tupl[0]
print(round(sum_price,3)) -End,"
 f = lambda x: x**2 + 2*x + 1 -End,"
 g = lambda x: f(x)//1 -End,"
 import math
S = lambda x: 20*1.5*x**2*math.sqrt(3)+12*0.25*x**2*math.sqrt(25+10*math.sqrt(5))
S_ceil = lambda x: math.ceil(S(x)) -End,"
 from scipy.optimize import golden

f = lambda x: (x+a)**2 - b
g = lambda x: abs(f(x))
print(golden(f, brack=(-10,4), full_output=True)[1], golden(g, brack=(-10,4), full_output=True)[1]) -End,"
 X = int(input())
y=int(X/60)
print(y)
z = y*60
print(X-z)


 -End,"
 a = int(input()) 
b = int(input())
h = int(input())

if h < a:
    print(""Недосып"")

if h > b:
  print(""Пересып"")

if ((h >= a) and (h <= b)):
  print(""Это нормально"")


 -End,"
 X = int(input())
Y = int(input())
Z = int(input())

p = (X+Y+Z)/2
koren = p*(p-X)*(p-Y)*(p-Z)
print(koren**0.5)


 -End,"
 X = int(input())

if X > -15 and X<=12:
  print(""True"")
elif X > 14 and X  <17:
    print(""True"")
elif X >= 19:
  print(""True"")
else:
    print(""False"")

 -End,"
 x = float(input())
z = float(input())
y = str(input())

if y == ""*"":
  print(x*z)
elif y == ""/"" and z == 0:
  print(""Деление на 0!"")
elif y == ""/"":
  print(x/z)
elif y == ""-"":
  print(x-z)
elif y == ""+"":
  print(x+z)
elif y == ""mod"" and z == 0:
  print(""Деление на 0!"")
elif y == ""mod"":
  print(x%z)
elif y == ""pow"":
  print(x**z)
elif y == ""div"" and z == 0:
  print(""Деление на 0!"")
elif y == ""div"":
  print(x//z)  
else:
    print(""False"") -End,"
 x = int(input())

#print(x)
i = 1
while i < 1010:
    if i >= x:
      break
    i += 10
   # print(i)
    
z = 2
while z < 1010:
    if z >= x:
      break
    z += 10
   # print(z)
c = 3
while c < 1010:
    if c >= x:
      break
    c += 10
   # print(c)
v = 4
while v < 1010:
    if v >= x:
      break
    v += 10
  #  print(v)

      
if x == 11 or x == 111 or x == 211 or x == 311 or x == 411 or x == 511 or x == 611 or x == 711 or x == 811 or x == 911:
 print(str(x) + "" программистов"")
elif x == 12 or x == 112 or x == 212 or x == 312 or x == 412 or x == 512 or x == 612 or x == 712 or x == 812 or x == 912:
 print(str(x) + "" программистов"")
elif x == 13 or x == 113 or x == 213 or x == 313 or x == 413 or x == 513 or x == 613 or x == 713 or x == 813 or x == 913:
 print(str(x) + "" программистов"")
elif x == 14 or x == 114 or x == 214 or x == 314 or x == 414 or x == 514 or x == 614 or x == 714 or x == 814 or x == 914:
 print(str(x) + "" программистов"")
elif x == i:
   print(str(x)+"" программист"")
elif x == z or x == c or x == v:
  print(str(x)+"" программиста"") 
else:
    print(str(x)+"" программистов"") -End,"
 a = int(input())
b = int(input())
x = 1
while (x % a != 0) or (x % b != 0):
    x += 1
    

print(x)

 -End,"
 i = 0
while i < 5:
    a = int(input())
    if (a<10):
      continue
    if (a > 100):
        break # досрочно завершаем цикл
    print(a)

 -End,"
 # put your python code here
a = [int(i) for i in input().split()]
lengthspisik = len(a) - 1
result=[]
z = -1
x = 1
if lengthspisik == 0:
    print(a[0])
else:
    for col in a:
        print(a[z] + a[x], end= ' ')
        z += 1
        x += 1
        if x > lengthspisik:
            x = x - x
    

     
    
     
     






 -End,"
 data = [int(i) for i in input().split()]
data.sort()
result = set(data)
if len(data) == 1:
    print('')
else:
    for i in result:
        data.remove(i)
    result = set(data)
    for i in result:
        print(i, end=' ') -End,"
 a = input()
b = input() 
a = a.split()
z = len(a)
v = 0
count = -1
for x in a:
    #print(x)
    count += 1
    if x == b:
        print(count, end=' ')
    if x != b:
        v += 1
if z==v:
    print('Отсутствует')



 -End,"
 def f(x):
    if x <= -2:
        x =1 -(x + 2)**2
    elif x > -2 and x <= 2:
        x = -(x / 2)
    elif x > 2:
        x= (x - 2)**2 + 1
    return(x)# put your python code here




 -End,"
 a = input()
cnt = a[0]
cn = 0
cnn = -1
print(cnt, end= '',sep="""")
for x in a:
    cnn += 1
    if x == cnt:
        cnt = x
        cn +=1
    else:
        print(cn, x, end= '',sep="""")
        cn = 1
        cnt = a[cnn]
print(cn)



 -End,"
 a = int(input()) 
c = 0
for x in range(1, a+1):
    b = int(input())
    c +=b
print(c) -End,"
 from math import factorial 
n, k = map(int, input().split())
def c(n,k):
    c = 5
    if k == 0:
        c = 1
    elif k > n:
        c = 0
    else:
        c = factorial(n) / (factorial(n - k) * factorial(k))
    return c


print(int(c(n, k))) -End,"
 N = int(input())
t=1
for x in range(1,N+1):
  if x % 2 !=0:
    t*=x
#YOUR CODE

print(t) -End,"
 class MoneyBox:
    def __init__(self, capacity): 
        self.capacity = capacity
    def can_add(self, v): 
        if self.capacity < v:
            return False 
        else:
            return True
    def add(self, v):
        if self.capacity < v:
            return False 
        else:
             self.capacity -= v 
             return self.capacity -End,"
 class Buffer:
    def __init__(self):
        self.count = []
    def add(self, *a):
        for x in a:
            self.count.append(x) 
        a = int((len(self.count) / 5) // 1)
        c = 0
        d = 0
        for x in range(0, a):
            d = c
            c += 1 * 5
            print(sum(self.count[d:c]))
        #print(sum(self.count[d:c]))
    def get_current_part(self):
        zx = 0
        ff = len(self.count) - (len(self.count) // 5 * 5)
        while len(self.count) != ff:
            del self.count[zx]
        return self.count -End,"
 sorted_items = sorted(items, key=lambda x: x[1][-1])




 -End,"
 x[::-2] = [-1, -3, -5]




 -End,"
 def process(sentences):
    spisok1slov = []
    result = []
    for x in sentences:
        for n in x.split():
            if n.isalpha() == True:
                spisok1slov.append(n)
                ntext = ' '
                text = ntext.join(spisok1slov)
        result.append(text)
        spisok1slov = []
        text = ''
        result = result
    return result -End,"
 from datetime import datetime, timedelta
data1 = str(input())
daaays = int(input())
deadline = datetime.strptime(data1, ""%Y %m %d"")
days = timedelta(daaays)
in_days = deadline + days
print(in_days.year, in_days.month,  in_days.day) -End,"
 import numpy as np
def no_numpy_mult(a,b):
    zip_b = zip(*b)
    # uncomment next line if python 3 : 
    zip_b = list(zip_b)
    return [[sum(ele_a*ele_b for ele_a, ele_b in zip(row_a, col_b)) 
             for col_b in zip_b] for row_a in a]
def numpy_mult(first, second):
    """"""
    param first: np.array[size, size]
    param second: np.array[size, size]
    """"""
    nummatrix = np.dot(first, second)
    #YOUR CODE: please use numpy

    result = nummatrix #YOUR CODE: create np.array
    return result
 -End,"
 import numpy as np

def no_numpy_scalar(v1, v2):
    a = -1
    result = 0
    for x in v1:
        a += 1
        result += x * v2[a] 
    return result
def numpy_scalar (v1, v2):   
    result = np.dot(v1, v2)#YOUR CODE
    return result
 -End,"
 import numpy as np

def cumsum(A):
    result = list(map(lambda x:np.cumsum(x, axis = 0), A))#YOUR CODE
    
    return result -End,"
 try:
    foo()
except ZeroDivisionError:
    print(""ZeroDivisionError"")
except ArithmeticError:
    print(""ArithmeticError"")
except AssertionError:
    print(""AssertionError"") -End,"
 import numpy as np

def transform(X, a=1):
    b1 = X.copy()
    for n in range(len(b1)):
        if n % 2 != 0:
            b1[n] = a
        else:
            b1[n] = b1[n]**3
        b1 = b1[ : :-1] 
    return np.hstack((X, b1)) -End,"
 mean_concentrations = concentrations.groupby('genus').mean()




 -End,"
 import pandas as pd


d = {'type': ['A', 'A', 'B', 'B'], 'value': [10, 14, 12, 23]}
my_data = pd.DataFrame(data=d) -End,"
 import pandas as pd    
# переменная my_stat уже создана
subset_1 = my_stat.loc[0:9,['V1', 'V3']]
subset_2 = my_stat.iloc[:, [1,3]].drop([0,4])



 -End,"
 import pandas as pd    


subset_1 = my_stat.loc[(my_stat.loc[:, 'V3'] == 'A') & (my_stat.loc[:, 'V1'] > 0)]
subset_2 = my_stat.loc[(my_stat.loc[:, 'V2'] != 10) | (my_stat.loc[:, 'V4'] >= 1)] -End,"
 import pandas as pd    


my_stat['V5'] = my_stat['V1'] + my_stat['V4']
my_stat['V6'] = np.log(my_stat['V2']) -End,"
 import pandas as pd    
# переменная my_stat уже создана


my_stat.rename(columns={'V1': 'session_value', 'V2': 'group', 'V3': 'time', 'V4': 'n_users'}, inplace=True)


 -End,"
 import pandas as pd    
# переменная my_stat уже создана
my_stat[['session_value']] = my_stat[['session_value']].fillna(0) 
my_stat.loc[my_stat['n_users'] < 0, 'n_users'] = my_stat.loc[my_stat.loc[:, 'n_users'] >= 0, 'n_users'].median() -End,"
 import pandas as pd
# переменная my_stat уже создана

mean_session_value_data = my_stat.groupby('group', as_index=False).mean()
mean_session_value_data.rename(columns={'session_value': 'mean_session_value'}, inplace=True)
mean_session_value_data.drop(['time', 'n_users'], axis=1, inplace=True) -End,"
 import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris


iris = load_iris()
X = iris.data
y = iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)
predicted = dt.predict(X_test) -End,"
 import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import load_iris


iris = load_iris()
X = iris.data
y = iris.target

clf = DecisionTreeClassifier()
parameters = {'max_depth': range(2, 11),
             'min_samples_leaf': range(2, 10),
             'min_samples_split': range(2, 10)}
search = GridSearchCV(clf, parameters, cv=5)
search.fit(X, y)

best_tree = search.best_estimator_  -End,"
 import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import RandomizedSearchCV
from sklearn.datasets import load_iris

iris = load_iris()
X = iris.data
y = iris.target
clf = DecisionTreeClassifier()
parameters = {'max_depth': range(2, 11),
             'min_samples_leaf': range(2, 10),
             'min_samples_split': range(2, 10)}
search = RandomizedSearchCV(clf, parameters,cv=5, random_state=0)
search.fit(X, y)

best_tree = search.best_estimator_ -End,"
 import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV


X=train.drop([""y""], axis=1)
y=train.y
clf = DecisionTreeClassifier()
parameters = {'max_depth': range(2, 11),
             'min_samples_leaf': range(2, 10),
             'min_samples_split': range(2, 10)}
search = GridSearchCV(clf, parameters,cv=5)
search.fit(X, y)
best_tree = search.best_estimator_
predictions = best_tree.predict(test)
 -End,"
 import pandas as pd
from sklearn.ensemble import RandomForestClassifier


rf = RandomForestClassifier(n_estimators=15, max_depth=5)
rf.fit(x_train, y_train)
predictions = rf.predict(x_test) -End,"
 import pandas as pd


total_birds = wintering.expanding().sum()

 -End,"
 # put your python code here
a, b = input().split(), []
a.sort()
for i in a:
    if a.count(i) > 1:
        b.append(i)
for k in range(len(b)):
    s = b.index(b[k])
    while k != s:
        break
    else:
        print(b[k], end=' ') -End,"
 # put your python code here
x = 1
b = []
while x != 0:
    a = input()
    if a != 'end':
        a_int = [int(i) for i in a.split()]
        b.append(a_int)
    else:
        x = 0
for i in range(len(b)):
    k = 0
    if i >= len(b) - 1:
        k = i + 1
    for j in range(len(a_int)):
        z = 0
        if j >= len(a_int) - 1:
            z = j + 1
        s = b[i - 1][j] + b[i + 1 - (k)][j] + b[i][j - 1] + b[i][j + 1 - (z)]
        print(s, end=' ')
        s = 0
    print() -End,"
 # put your python code here
n = int(input())
s = [[0 for j in range(n)] for i in range(n)]
x = 1
for i in range(n):
    for a in range(i, n - i):# up-to-right
        s[i][a] = x
        x += 1
    for b in range(i + 1, n - i):# right-down
        s[b][n - 1 - i] = x
        x += 1
    for c in range(n - 1 - i, i, -1):# down-to-left
        s[n - 1 - i][c - 1] = x
        x += 1
    for d in range(n - 1 - i, i + 1, -1):# left-up
        s[d - 1][i] = x
        x += 1
for i in range(len(s)):
    for j in range(len(s[0])):
        print(s[i][j], end=' ')
    print() -End,"
 # put your python code here
n = int(input())
table = [[0 for x in range(n)] for y in range(n)]
w = n
offs = 0
d = 0
while w >= 1:
    h = w - 2
    for c in range(0, w):
        idx = n - c - offs - 1
        table[offs][offs + c] = c + d + 1
        table[n - offs - 1][idx] = c + d + 2 * h + 3
        if c in range(1, w - 1):
            table[offs + c][n - offs - 1] = w + c + d
            table[idx][offs] = w + c + d + 2 * h + 2
    d += 2 * w + 2 * h
    w -= 2
    offs += 1
for i in range(len(table)):
    for j in range(len(table[0])):
        print (table[i][j], end=' ')
    print() -End,"
 # put your python code here
s = [i.lower() for i in input().split()] # создаю список из введенных символов (наборов символов) и сразу же делаю символы прописными 
k = set() #создаю пустое множество, чтобы в последствии записать символы из списка S в это множество (в множестве как известно повторные символы удаляются и остаются только уникальные), это нам потребуется при подсчете дублей
for i in s: #далее циклом прохожусь по списку символов S 
    k.add(i) #и переписываю каждый символ в множество K (в множестве K остаются только уникальные символы)
for j in k: # затем проходим циклом по множеству K
    if j in k: # в случае если символ имеется в K (а он там полюбому имеется, не важно), то
        p = s.count(j) #считаю сколько раз этот символ встречается в списке S
        print(j, p) #выводим этот искомый символ и количество его повторов в списке
# Если не использовать множество, а считать дубли символов в списке, проходя циклом по этому же списку, то выводится подсчет будет верно, только будут выведены не уникальные символы, а все в том порядке, в каком они были введены в список. А вот как раз множество и приходит на помощь в этом случае, оставляя только уникальные символы, т.е. берем уникальный символ из множества К, но подсчет ведем все равно в списке S. -End,"
 # put your python code here
exec(""""""
s = [i.lower() for i in input().split()]
k = set()
for i in s:
    k.add(i)
for j in k:
    if j in k:
        p = s.count(j)
        print(j, p)"""""") -End,"
 # Считайте, что функция f(x) уже определена выше. Определять её отдельно не требуется.
exec('''n, k = int(input()), {}
for i in range(n):
    x = int(input())
    if x in k:
        print(k[x])
    else:
        k.update({x:f(x)})
        print(k[x])''') -End,"
 # put your python code here
n = int(input())
tableRes = {}
while n != 0:
    gameRes = input().split(';')
    if gameRes[1] > gameRes[3]:
        res1 = 3
        res2 = 0
    elif gameRes[1] == gameRes[3]:
        res1 = 1
        res2 = 1
    else:
        res1 = 0
        res2 = 3
    if gameRes[0] in tableRes and gameRes[2] not in tableRes:
        tableRes[gameRes[0]].append(res1)
        tableRes.update({gameRes[2]:[res2]})
    elif gameRes[0] not in tableRes and gameRes[2] in tableRes:
        tableRes[gameRes[2]].append(res2)
        tableRes.update({gameRes[0]:[res1]})
    elif gameRes[0] in tableRes and gameRes[2] in tableRes:
        tableRes[gameRes[0]].append(res1)
        tableRes[gameRes[2]].append(res2)
    else:
        tableRes.update({gameRes[0]:[res1], gameRes[2]:[res2]})
    n -= 1
for key in tableRes:
    count, win, draw, lose = 0, 0, 0, 0
    s = tableRes[key]
    for i in range(len(s)):
        count += s[i]
        if len(s) > 1:
            if s[i] == 3:
                win += 1
            elif s[i] == 1:
                draw += 1
            else:
                lose += 1
        elif len(s) == 1:
            if s[i] == 3:
                win += 1
            elif s[i] == 1:
                draw += 1
            else:
                lose += 1
    print(key + ':', len(s), win, draw, lose, count) -End,"
 # put your python code here
a = input()
b = input()
d, co, enco = {}, '', ''
for i in range(len(a)):
    d.update({a[i] : b[i]})
code = input()
for i in code:
    if i in d.keys():
        co += d[i]
encode = input()
for i in encode:
    for k, v in d.items():
        if v == i:
            enco += k
print(co)
print(enco) -End,"
 # put your python code here
slovar = []
spisok = set()
d = int(input())
for i in range(d):
    slovo = input().lower()
    slovar.append(slovo)
l = int(input())
for j in range(l):
    stroka = input().split()
    for n in stroka:
        if n.lower() not in slovar:            
            spisok.add(n)
for k in spisok:
    print(k) -End,"
 def closest_mod_5(x):    
    while x%5 != 0:
        x += 1
    y = x
    return y
    return ""I don't know :(""




 -End,"
 # put your python code here
n, k = map(int, input().split()) 
def C(n, k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    else:
        return C(n - 1, k) + C(n - 1, k - 1)

x = C(n, k)
print(x) -End,"
 # put your python code here
n = int(input())
scopes = {'global': {'parent': 'None', 'vars': []}}      #Создаем словарь словарей(сразу вписываю global по-умолчанию)
def findParent(nmspc, arg):                              #Функция поиска пространства имен
            if nmspc in scopes.keys():                   #Проверяем есть ли введенное простанство в списке scopes
                if arg in scopes[nmspc]['vars']:         #Проверяем есть ли введенная переменная в указанном 
                                                         #словаре простр-ва имен nmspc
                    return nmspc
                else:                                    #Если не нашли, то
                    nmspc = scopes.get(nmspc)['parent']  #Присваиваем в nmspc простр-во имен, где искали переменную 
                                                         #и не нашли(на уровень выше)
                    x = findParent(nmspc, arg)           #Запускаем функцию по новой (рекурсия) и так до самого верхнего уровня
                    return x
for i in range(n):
    cmd, nmspc, arg = input().split()
    if cmd == 'add':
        scopes[nmspc]['vars'].append(arg)
    elif cmd == 'create':
        scopes[nmspc] = {'parent': arg, 'vars': []}
    elif cmd == 'get':
        res = findParent(nmspc, arg)
        print(res) -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.count = 0
    def can_add(self, v):
        if self.count + v <= self.capacity:
            return True
        else:
            return False
    def add(self, v):
        res = self.can_add(v)
        if res == True:
            self.count += v -End,"
 class Buffer:
    def __init__(self):
        self.buffer = []
        
    def add(self, *a):
        for arg in a:
            self.buffer.append(arg)
        while len(self.buffer) >= 5:    
            self.count = 0
            if len(self.buffer) >= 5:
                for i in range(5):
                    self.count += self.buffer[i]
                self.buffer.reverse()
                for k in range(5):            
                    self.buffer.pop()
                self.buffer.reverse()
                print(self.count)
    
    def get_current_part(self):
        return self.buffer -End,"
 # put your python code here
classParent = {}                                                #Пустой словарь для хранения классов (графов)
def findParent(parent, child):                                  #Функция по поиску предок-наследник
    if child in classParent.keys():                             #Если ключ-наследник имеется в словаре, то: 
        if (parent == child) or (parent in classParent[child]): #Если наследник является сам себе предком или предок входит в сет                                                                     #наследника, где хранятся предки, то выводим Yes
            return True        
        elif parent not in classParent[child]:                  #Если предок не входит в сэт наследника
            child = [i for i in classParent[child]]             #Создаем список всех предков, которые теперь становятся наследниками                                                                 #для дальнейшего поиска связей
            if len(child) == 0:                                 #Если список наследников пуст, делаем вывод, что у наследника нет                                                                     #заданного по условию предка, значит ответ No
                return False
            else:
                for n in child:                                 #Если наследник 1 или более, то циклом перебираем по одному                                                                           #наследнику и..
                    nextDepth = findParent(parent, n)           #Запускаем рекурсивно функцию поиска наследник-предок и подставляем в                                                                 #нее на место наследника новое значение child                   
                    if nextDepth is True:                       #Если результатом работы функции будет True, 
                        return True                             #то заканчиваем перебирать наследников
                        break                                   #и останавливаемся
    else:
        return False                                            #Если не находим наследника в словаре, выдаем ответ No
        
n = int(input())                                                #Это количество вводов наследник-предок
for j in range(n):                                              
    classes = [str(i) for i in input().split()]                 #В список через цикл собираем все введенные значения
    if classes[0] not in classParent:                           #Проверка, если ключа-наследника еще нет, то
        if (len(classes)) == 1:                                 #Если введено одно значение
            classParent[classes[0]] = set()                     #Просто содаем ключ с пустым value в виде пустого set()
        else:
            classParent[classes[0]] = {classes[i] for i in range(2, len(classes))} #Если введено несколько значений, то создаем пару                                                                 #ключ-наследник: значение-предок/предки
    else:
        for c in range(2, len(classes)):                        #Циклом перебираем значения введенных предков (известно, что предки                                                                   #начинаюся со второго индекса от [2] и до конца длины списка classes)
            classParent[classes[0]].add(classes[c])             #Если же ключ есть, то добавляем в имеющийся ключ (мы знаем, что ключ                                                                 #всегда вводится первым, т.е. его индекс [0]) новые значения предков
q = int(input())                                                #Количество проверок предок-наследник
for j in range(q):
    searchClass = [str(i) for i in input().split()]             #Вводим стандартные запросы предок-наследник и складываем в список
    res = findParent(searchClass[0], searchClass[1])            #Запуск функции поиска предок-наследник
    if res is True:
        print('Yes')                                            #Вывод результата
    else:
        print(""No"") -End,"
 class ExtendedStack(list):
    def sum(self):
        self.append(self.pop() + self.pop())
        # операция сложения

    def sub(self):
        self.append(self.pop() - self.pop())
        # операция вычитания

    def mul(self):
        self.append(self.pop() * self.pop())
        # операция умножения

    def div(self):
        self.append(self.pop() // self.pop())
        # операция целочисленного деления -End,"
 # put your python code here
classExceptions = {}
exceptionList = []

def findParentException(excepts):
    if excepts in classExceptions.keys():
        exceptsParents = []
        if len(classExceptions[excepts]) != 0:
            parents = [i for i in classExceptions[excepts]]
            for i in parents:
                exceptsParents.append(i)
            for thisExcept in exceptsParents:
                if thisExcept in exceptionList:
                    return True
                    break
                else:
                    res = findParentException(thisExcept)
                    if res is True:
                        return True
    else:
        return
for n in range(int(input())):
    exceptions = [str(i) for i in input().split()]
    if exceptions[0] not in classExceptions:
        if (len(exceptions)) == 1:
            classExceptions[exceptions[0]] = set()
        else:
            classExceptions[exceptions[0]] = {exceptions[i] for i in range(2, len(exceptions))}
    else:
        for c in range(2, len(exceptions)):
            classExceptions[exceptions[0]].add(exceptions[c])
for q in range(int(input())):
    excepts = input()
    exceptionList.append(excepts)
    res = findParentException(excepts)
    if res is True:
        print(excepts) -End,"
 class NonPositiveError(Exception):
    pass
class PositiveList(list):
    def append(self, x):
        if x > 0:
            list.append(self, int(x))
        else:
            raise NonPositiveError(str(x) + ' is NonPositive') -End,"
 # put your python code here
import datetime

date = input().split()
days = input()
d = datetime.date(int(date[0]), int(date[1]), int(date[2]))
t = datetime.timedelta(days = int(days))
res = d + t

print(res.year, res.month, res.day) -End,"
 class multifilter:
    def judge_half(pos, neg):
        # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)
        #self.pos = pos
        #self.neg = neg
        if pos >= neg:
            return True

    def judge_any(pos, neg):
        # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)
        #self.pos = pos
        #self.neg = neg
        if pos >= 1:
            return True

    def judge_all(pos, neg):
        # допускает элемент, если его допускают все функции (neg == 0)
        #self.pos = pos
        #self.neg = neg
        if neg == 0:
            return True

    def __init__(self, iterable, *funcs, judge = judge_any):
        # iterable - исходная последовательность
        # funcs - допускающие функции
        # judge - решающая функция
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        for x in self.iterable:
            self.pos = 0
            self.neg = 0
            for foo in self.funcs:
                res = foo(x)

                if res is True:
                    self.pos += 1
                else:
                    self.neg += 1

            c = self.judge(self.pos, self.neg)
            if c is True:
                yield x -End,"
 import itertools

def primes(): 
    n = 2
    while True:
        count = 0
        for i in range(n, n + 1):
            for j in range(i, 0, -1):
                if i % j == 0:
                    count += 1
            if count <= 2:
                yield n
            else:
                break
        n += 1 -End,"
 import itertools

def primes(): 
    n = 2
    while True:        
        count = 0
        for j in range(n, 0, -1):
            if n % j == 0:
                count += 1
        if count <= 2:
            yield n

        n += 1 -End,"
 def mod_checker(x, mod = 0):
    return lambda y: y % x == mod -End,"
 # put your python code here
s = input()
a = input()
b = input()

counter = 0

def replaceText(text):
    global counter
    if (a in b) and (a in text):
        return False
    elif counter <= 1000:
        if a not in text and a in b:
            return True
        else:        
            replacedText = text.replace(a, b)
            counter += 1
            if a in replacedText:
                res = replaceText(replacedText)
                if res is True:
                    return True
            else:
                return True
    else:
        return False                        
res = replaceText(s)
    
if res is True:
    print(counter)
else:
    print(""Impossible"") -End,"
 # put your python code here
s = input()
t = input() 

def entrySubString(s, t):
    count = 0
    i = -1
    while True:
        i = s.find(t, i+1)
        if i == -1:
            return count
        count += 1
print(entrySubString(s,t)) -End,"
 # put your python code here
import sys
import re

for line in sys.stdin:
    line = line.rstrip()
    pattern = r'cat'
    res = re.findall(pattern, line)
    if len(res) >= 2:
        print(line) -End,"
 # put your python code here
import sys
import re

for line in sys.stdin:
    line = line.strip()
    pattern = r'\bcat\b'
    if re.search(pattern, line):
        print(line) -End,"
 # put your python code here
import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    if re.search(r""z(.){3}z"", line):
        print(line) -End,"
 # put your python code here
# put your python code here
import re
import sys

for line in sys.stdin:
    line = line.rstrip()
    pattern = r'human'
    if re.findall(pattern, line):
        res = re.sub(pattern,'computer', line)
        print(res)
    else:
        print(line) -End,"
 # put your python code here
import re
import sys

for line in sys.stdin:
    line = line.strip()
    pattern = r'\b([aA])+\b'
    if re.search(pattern, line):
        res = re.sub(pattern,'argh', line, count = 1, flags=re.IGNORECASE)
        print(res) -End,"
 # put your python code here
import re
import sys

for line in sys.stdin:
    line = line.strip()
    line = re.sub(r'\b(\w)(\w)(\w{0,})\b', r'\2\1\3', line, flags=re.IGNORECASE)
    print(line) -End,"
 # put your python code here
import sys, re

for line in sys.stdin:
    line = line.rstrip()
    line = re.sub(r'(\w)\1{1,}',r'\1',line)
    print(line) -End,"
 # put your python code here
import requests, re

links, secondLinks = [], []

a = re.findall(r'\<a\s.+?>.*?\<\/a>', requests.get(input()).text)
b = input()
for i in a:
    if re.search(r'http[s]*:', i):
        res = re.findall(r'href=[\""\'](.+?)[\""\']', i)    
        links.append(res[0])
for link in links:
    x = requests.get(link)
    if x.status_code == 200:
        x = re.findall(r'\<a\s.+?>.*?\<\/a>', requests.get(link).text)
        for n in x:
            if re.search(r'http[s]*:', n):
                res = re.findall(r'href=[\""\'](.+?)[\""\']', n)    
                secondLinks.append(res[0])
        
if b in secondLinks:
    print('Yes')
else:
    print('No')
 -End,"
 # put your python code here
import json
from collections import Counter
z = []
d = dict()
s = set()
m = dict()

def countClass(classParent):
    if d[classParent] != []:
        for i in d[classParent]:
            countClass(i) 
            m[k].add(i)

data = json.loads(input())
for className in data:
    d[className['name']] = className['parents']
for k in d.keys():
    m[k] = set()
    if d[k] != []:
        for classname in d[k]:
            m[k].add(classname)
            countClass(classname)
for key in m.keys():
    z.append(key)
    for t in m[key]:
        z.append(t)
c = Counter(z)
for k in sorted(c.keys()):
    print (k, ':', c[k]) -End,"
 # put your python code here
from xml.etree import ElementTree

def countColors(root, a):
    a+=1
    for c in root:      
        if c.attrib['color'] in colors:
            colors[c.attrib['color']]+=a
        else:
            continue
        countColors(c, a)

colors = {'red':0, 'green':0, 'blue':0}

str_xml = input()
root = ElementTree.fromstring(str_xml)

if root.attrib['color'] in colors:
    colors[root.attrib['color']]+=1

for element in root:
    a = 2
    colors[element.attrib['color']]+=a
    countColors(element, a = 2)
    
print(colors['red'], colors['green'],colors['blue']) -End,"
 def fib(n):
    # put your code here
    fibList = [0,1,1]
    if n <= 2 and n > 0:
        return 1
    elif n == 0:
        return 0
    else:
        for i in range(3, n + 1):
            res = fibList[i-1] + fibList[i-2]
            fibList.append(res)
    return res

def main():
    n = int(input())
    print(fib(n))


if __name__ == ""__main__"":
    main() -End,"
 def fib_digit(n):
    a, b = 0, 1
    for i in range(2, n+1):
        a, b = b%10, (a + b)%10
    return b % 10


def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 def gcd(a, b):
    while a != 0 and b != 0:
        if a > b:
            a %= b
        else:
            b %= a
        res = a + b

    return res


def main():
    a, b = map(int, input().split())
    print(gcd(a, b))


if __name__ == ""__main__"":
    main() -End,"
 # put your python code here
n = int(input())

lines = []
cut = []
rightPoints = []
points = []

while n != 0:
    a, b = map(int, input().split())
    lines += [[a, b]]
    n -= 1
    
lines.sort()

for i in range(len(lines)-1):
    if lines[i][1] >= lines[i+1][0]:
        a = lines[i + 1][0]
        b = min(lines[i][1], lines[i+1][1])
        lines.remove(lines[i+1])
        lines.remove(lines[i])
        lines.insert(i,[])
        lines.insert(i+1,[a,b])
for x in lines:
    if x != []:
        cut += [x]

print(len(cut))
for y in cut:
    print(y[1], end=' ') -End,"
 def gcd(a, b):
    return a if b == 0 else gcd(b, a%b)


def main():
    a, b = map(int, input().split())
    print(gcd(a, b))


if __name__ == ""__main__"":
    main() -End,"
 X = int(input())
Y = int(input())
print(X*60 + Y) -End,"
 # put your python code here
minuts = int(input());
print(minuts // 60);
print(minuts % 60);


 -End,"
 # put your python code here
minuts_sleeps = int(input());
hour_mid = int(input());
minuts_mid = int(input());
minuts_sleeps = minuts_sleeps + (hour_mid * 60) + minuts_mid;
print(minuts_sleeps // 60);
print(minuts_sleeps % 60);
 -End,"
 # put your python code here
a = int(input())
b = int(input())
h = int(input())

if (a <= h <= b):
    print('Это нормально')
elif (a > h):
    print('Недосып')
else:
    print('Пересып')



 -End,"
 # put your python code here
y = int(input())
if ((y % 4 == 0) and (y % 100 != 0 or y % 400 == 0)):
	print('Високосный')
else:
	print('Обычный')



 -End,"
 # put your python code here
a = int(input())
b = int(input())
c = int(input())

p = (a + b + c) / 2
s = (p * (p - a) * (p - b) * (p - c)) ** 0.5
print(s)
 -End,"
 # put your python code here
n = int(input())
if ((12 >= n > -15) or (17 > n > 14) or (n >= 19)):
    print('True')
else:
    print('False')



 -End,"
 # put your python code here
n1 = float(input())
n2 = float(input())
operation = input()


if (operation == '+'):
    print(n1 + n2)
elif (operation == '-'):
    print(n1 - n2)
elif (operation == '/' and n2 != 0):
    print(n1 / n2)
elif (operation == '*'):
    print(n1 * n2)
elif (operation == 'mod' and n2 != 0):
    print(n1 % n2)
elif (operation == 'pow'):
    print(n1 ** n2)
elif (operation == 'div' and n2 != 0):
    print(n1 // n2)
else:
    print('Деление на 0!') -End,"
 # put your python code here
shape = input()
if shape == 'прямоугольник':
    a = float(input())
    b = float(input())
    print(a * b)
elif shape == 'круг':
    a = float(input())
    print(3.14 * a ** 2)
elif shape == 'треугольник':
    a = float(input())
    b = float(input())
    c = float(input())
    p = (a + b + c) / 2
    s = (p * (p - a) * (p - b) * (p - c)) ** 0.5
    print(s) -End,"
 # put your python code here
a = int(input())
b = int(input())
c = int(input())

if (a >= b and a >= c):
    print(a)
    if (b >= c):
        print(c)
        print(b)
    else:
        print(b)
        print(c)
elif (b >= a and b >= c):
    print(b)
    if (a >= c):
        print(c)
        print(a)
    else:
        print(a)
        print(c)
elif (c >= a and c >= b):
    print(c)
    if (a >= b):
        print(b)
        print(a)
    else:
        print(a)
        print(b) -End,"
 # put your python code here
n = int(input())
last_n = n % 10
two_last = n % 100
if ((5 <= last_n <= 9) or last_n == 0 or 11 <= two_last <= 14):
    print(n, 'программистов')
elif (last_n == 1):
    print(n, 'программист')
elif (1 < last_n < 5):
    print(n, 'программиста')



 -End,"
 # put your python code here
n = int(input())
first = n // 100000
second = (n // 10000) % 10
third = (n // 1000) % 10

fourth = (n // 100) % 10
fifth = (n // 10) % 10
sixth = n % 10
if ((first + second + third) == (fourth + fifth + sixth)):
    print('Счастливый')
else:
    print('Обычный') -End,"
 # put your python code here
res = 0
n = int(input())
while (n):
    res += n
    n = int(input())
print(res)


 -End,"
 # put your python code here
i = 1
a = int(input())
b = int(input())
while (i <= a * b):
    if (i % a == 0 and i % b == 0):
        print(i)
        break
    i += 1



 -End,"
 # put your python code here
n = int(input())
while (n <= 100):
    if (n < 10 or n > 100):
        n = int(input())
        continue
    print(n)
    n = int(input())

 -End,"
 # put your python code here
a = int(input())
b = int(input())
c = int(input())
d = int(input())

print('\t', end='')
for k in range(c, d + 1):
    print(k, '\t', end='')
print()
for i in range(a, b + 1):
    print(i ,end='\t')
    for j in range(c, d + 1):
        print(j * i, end='\t')
    print()
 -End,"
 # put your python code here
a = int(input())
b = int(input())
j = 0
sum = 0

for i in range(a, b + 1):
    if (i % 3 == 0):
        j += 1
        sum  += i
print(sum / j)
 -End,"
 # put your python code here
s = input()
s = s.upper()
n = s.count('G') + s.count('C')
len = len(s)
print(n * 100 / len)

 -End,"
 # put your python code here
a = [int(i) for i in input().split()]
res = 0
for i in a:
    res += i
print(res) 



 -End,"
 # put your python code here
list = [int(i) for i in input().split()]
i = 0
j = 0
len = len(list)
if (len == 1):
    print(list[0])
else:
    while len > i:
        if i == 0:
            print(list[-1] + list[1], end=' ')
            i += 1
            continue
        elif i == len - 1:
            print(list[-2] + list[0], end=' ')
            i += 1
            break
        else:
            print(list[i - 1] + list[i + 1], end=' ')
            i += 1
 -End,"
 # put your python code here
list = [int(i) for i in input().split()]
list.sort()
len = len(list)
tmp = 4815162342
if len == 1:
    print()
else:    
    for i, item in enumerate(list):
        if (tmp == item):
            if (j == 0):
                print(item, end=' ')
                j += 1
        else:
            j = 0
        tmp = item


 -End,"
 # put your python code here
res = 0
sum = 0
while 1:
    tmp = int(input())
    sum += tmp
    res += tmp ** 2
    if sum == 0:
        break
print(res)
 -End,"
 def f(x):
    # put your python code here
    if x <= -2:
        return (1 - (x + 2) ** 2)
    elif -2 < x <= 2:
        return (- x / 2)
    else:
        return ((x - 2) ** 2 + 1)



 -End,"
 # put your python code here
n = int(input())
i = 1
s = []
while len(s) < n:
    j = i
    while j:
        if (len(s) >= n):
            break
        s += [i]
        j -= 1
    i += 1
print(*s) -End,"
 # put your python code here
lst = [int(i) for i in input().split()]
new_lst = []
x = int(input())
i = 0
len = len(lst)
while i < len:
    if lst[i] == x:
        new_lst += [i]
    i += 1
if not new_lst:
    print('Отсутствует')
else:
    print(*new_lst)
 -End,"
 def modify_list(l):
    # put your python code here
    i = 0
    while i < len(l):
        if l[i] % 2 != 0:
            l.remove(l[i])
            continue
        else:
            l[i] = l[i] // 2
        i += 1 -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    # put your python code here
    if key in d:
        d[key] = d[key] + [value]
    else:
        if key * 2 not in d:
            d[key * 2] = []
        d[key * 2] = d[key * 2] + [value]
# не добавляйте кода вне функции -End,"
 # put your python code here
list = input().lower().split()
d = {}
for i in list:
    d[i] = list.count(i)
for key, value in d.items():
    print(key, value)
 -End,"
 # put your python code here
s = input()
y = s[0]
count = 0
for x in s:
    if y == x:
        count += 1
    else:
        print(y, end='')
        print(count, end='')
        count = 1
    y = x
print(y, end='')
print(count, end='')
 -End,"
 # put your python code here
n = int(input())
p = ' программи'
if 11<=n % 100<=14:
    s = str(n) + p + 'стов'
elif n%10==1:
    s = str(n) + p + 'ст'
elif 2<=n % 10<=4:
    s = str(n) + p + 'ста'
elif 5<=n%10<=9 or n%10 == 0:
    s = str(n) + p + 'стов'
print(s) -End,"
 # put your python code here
s = input()
l = [int(a) for a in s]
sum1 = sum(l[0:3])
sum2 = sum(l[-3:])
if sum1 == sum2:
    print('Счастливый')
else:
    print('Обычный') -End,"
 # put your python code here
s1 = int(input())
s2 = int(input())
mult = s1 * s2
k = max(s1, s2)
while k <= mult :
    if (k % s1 == 0) and (k % s2 == 0) :
        print(k)
        break
    k += 1



 -End,"
 # put your python code here
a = int(input())
b = int(input())
c = int(input())
d = int(input())
print(end='\t')
for j in range(c, d + 1):
    print(j, sep='t', end='\t')
print()
for i in range(a, b + 1):
    print(i, end = '\t')
    for j in range(c, d + 1):
        print(i * j, sep = '\t', end='\t')
    print()


 -End,"
 # put your python code here
genom = input()
n = 0
k = []
item = ('', 0)
i = 0
while i < len(genom):
    temp = genom[i]
    while i < len(genom) and genom[i] == temp:
        temp = genom[i]
        n += 1
        i += 1
    item = (temp, n)
    k.append(item)
    n = 0
for i in k:
    print(i[0], i[1], sep='', end='')



 -End,"
 # put your python code here
sp = [int(i) for i in input().split()]
st = set()
for i in sp:
    if sp.count(i) > 1:
        st.add(i)
for i in st:
    print(i, end=' ')



 -End,"
 # put your python code here
matrix = []
matrix_res = []
s = input()
while s != 'end':
    lst = [int(i) for i in s.split()]
    matrix.append(lst)
    s = input()
    matrix_res.append([0]*len(lst))
dim_i = len(matrix)
for i in range(0, dim_i):
    if dim_i == 1:
        i_min = i
        i_max = i
        i_me = i
    else:
        if i == dim_i - 1:
            i_me = i - dim_i
        else:
            i_me = i
        i_max = i_me + 1
        i_min = i_me - 1
    dim_j = len(matrix[i])
    for j in range(0, dim_j):
        if dim_j == 1:
            j_min = j
            j_max = j
            j_me = j
        else:
            if j == dim_j - 1:
                j_me = j - dim_j
            else:
                j_me = j
            j_max = j_me + 1
            j_min = j_me - 1
        bottom = matrix[i_min][j_me]
        top = matrix[i_max][j_me]
        left = matrix[i_me][j_min]
        right = matrix[i_me][j_max]
        matrix_res[i][j] = bottom + top + left + right
for i in matrix_res:
    print(*i)


 -End,"
 dim = int(input())
table = [[0 for i in range(dim)] for j in range(dim)]
i, j, cnt = 0, 0, 0
while 0 <= j < dim and 0 <= i < dim and table[i][j] == 0:
    while j < dim and table[i][j] == 0:
        cnt += 1
        table[i][j] = cnt
        j += 1
    i += 1
    j -= 1
    while i < dim and table[i][j] == 0:
        cnt += 1
        table[i][j] = cnt
        i += 1
    j -= 1
    i -= 1
    while j >= 0 and table[i][j] == 0:
        cnt += 1
        table[i][j] = cnt
        j -= 1
    j += 1
    i -= 1
    while i >= 0 and table[i][j] == 0:
        cnt += 1
        table[i][j] = cnt
        i -= 1
    i += 1
    j += 1
for i in table:
    for j in i:
        print(j, end='\t')
    print() -End,"
 def modify_list(l):
    dim = len(l)
    for i in range(dim - 1, -1, -1):
        if l[i] % 2 == 1:
            l.remove(l[i])
        else:
            l[i] = l[i]//2 -End,"
 lst = [x.lower() for x in input().split()]
d = {x.lower(): lst.count(x) for x in lst}
for key in d:
    print(key, d[key]) -End,"
 def res_sourse(x):
    if x in res_dict:
        return res_dict[x]
    else:
        res = f(x)
        res_dict[x] = res
        return res


res_dict = {}
cnt = int(input())
for i in range(cnt):
    val = int(input())
    print(res_sourse(val)) -End,"
 def one_game_two_command_table_res(goals1, goals2, cmd1_table, cmd2_table):
#   cmd_table = [command, games, wins, drawn, falls, points]
    cmd1_table[1] += 1
    cmd2_table[1] += 1
    if goals1 > goals2:  # победа первой
        cmd1_table[2] += 1  # первая команда плюс одна победа
        cmd2_table[4] += 1  # вторая команда плюс одно поражение
        cmd1_table[5] += 3
    elif goals1 < goals2:  # поражение первой
        cmd1_table[4] += 1  # первая команда плюс одно поражение
        cmd2_table[2] += 1  # вторая команда плюс одна победа
        cmd2_table[5] += 3
    else:  # ничья
        cmd1_table[3] += 1  # первая команда плюс одна ничья
        cmd2_table[3] += 1  # вторая команда плюс одна ничья
        cmd1_table[5] += 1
        cmd2_table[5] += 1

def command_table_in_tournament_table(command_name, tournament_table):
    for i in range(len(tournament_table)):
        if tournament_table[i][0] == command_name:
            return tournament_table[i]


n = int(input())
games_table = []
for i in range(0, n):
    st = input().strip().split(';')
    game = [x for x in st]
    for j in range(len(game)):
        if str.isdigit(game[j]):
            game[j] = int(game[j])
    games_table += [game]
#print(*games_table, sep='\n')
command_set = {x[0] for x in games_table} | {x[2] for x in games_table}
#print(command_set)
commands_count = len(command_set)
#print(commands_count)
tournament_table = [[x, 0, 0, 0, 0, 0] for x in command_set]
#print(*tournament_table, sep='\n')
for game in games_table:
    command1 = game[0]
    command2 = game[2]
    cmd1_table = command_table_in_tournament_table(game[0], tournament_table)
    cmd2_table = command_table_in_tournament_table(game[2], tournament_table)
    one_game_two_command_table_res(game[1], game[3], cmd1_table, cmd2_table)
for command in tournament_table:
    print(command[0] + ':' + str(command[1]), *command[2:]) -End,"
 first_str = input()
second_str = input()
uncoded_str = input()
coded_str = input()


def coding(transform_str, *code_and_uncode, key = 'code'):
    code_dict = code_and_uncode[0]
    uncode_dict = code_and_uncode[1]
    if key == 'code':
        coded = ''
        for ch in transform_str:
            coded += code_dict[ch]
        return coded
    if key == 'uncode':
        uncoded = ''
        for ch in transform_str:
            uncoded += uncode_dict[ch]
        return uncoded

keys = [x for x in first_str]
vals = [x for x in second_str]
dic_coded = dict(zip(keys, vals))
dic_uncoded = dict(zip(vals, keys))
coded = coding(uncoded_str, dic_coded, dic_uncoded)
uncoded = coding(coded_str, dic_coded, dic_uncoded, key='uncode')
print(coded)
print(uncoded) -End,"
 cnt_dict = int(input())
dict_set = {input().lower() for x in range(cnt_dict)}
cnt_text = int(input())
text_strings = [input().lower() for x in range(cnt_text)]


def check_one_string_of_text(string, set_of_dictionary) -> set:
    words = string.split()
    words_set = set(words)
    incoclusive_set = {word for word in words_set if word not in set_of_dictionary}
    return incoclusive_set


inconclusive = set()
for string in text_strings:
    inconclusive |= check_one_string_of_text(string, dict_set)

print(*inconclusive, sep='\n') -End,"
 from typing import Dict, Tuple

commands_str = [input() for x in range(int(input()))]
commands = {}
for string in commands_str:
    key = string.split()[0]
    val = int(string.split()[1])
    if key not in commands:
        commands[key] = val
    else:
        commands[key] += val
#print(commands)

def command_to_coordinate(commands : Dict[str, int], coordinate : Tuple[int, int]) \
        -> Tuple[int, int]:
    sev = 'север'
    yug = 'юг'
    vos = 'восток'
    zap = 'запад'
    last_coord = coordinate[0], coordinate[1]
    for key in commands:
        if key == sev:
            last_coord = last_coord[0], last_coord[1] + commands[sev]
        elif key == yug:
            last_coord = last_coord[0], last_coord[1] - commands[yug]
        elif key == vos:
            last_coord = last_coord[0] + commands[vos], last_coord[1]
        elif key == zap:
            last_coord = last_coord[0] - commands[zap], last_coord[1]
    return last_coord

last_coord = command_to_coordinate(commands, (0, 0))
print(*last_coord)

 -End,"
 x = {id(obj) for obj in objects}
print(len(x)) -End,"
 def add_namespace(child_name: str, parent_name: str):
    namespaces[child_name] = parent_name


def add_var_to_namespace(var_name: str, namesp_name: str):
    namespaces_vars[var_name] = namesp_name


def get_namespace_for_var(var_name: str, namesp_name: str)-> str:
    if namespaces_vars.get(var_name):
        if namespaces_vars[var_name] == namesp_name:
            return namesp_name
        else:
            parent = namespaces[namesp_name]
            if parent == 'None':
                return None
            else:
                return get_namespace_for_var(var_name, parent)
    else:
        return None


commands_cnt = int(input())
namespaces = {'global': 'None'} # child : parent
namespaces_vars = {}
prints = []
for i in range(0, commands_cnt):
    cmd, namesp, arg = input().strip().split()
    if cmd == 'create':
        add_namespace(namesp, arg)
    if cmd == 'add':
        add_var_to_namespace(arg, namesp)
    if cmd == 'get':
       prints.append(get_namespace_for_var(arg, namesp))
print(*prints, sep='\n') -End,"
 class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.value = 0

    def can_add(self, v):
        return self.value + v <= self.capacity

    def add(self, v):
        if self.can_add(v):
            self.value += v -End,"
 class Buffer:

    def __init__(self):
        self.buffer = []

    def add(self, *a):
        buf_ln = len(self.buffer)
        for item in a:
            if buf_ln < 5:
                self.buffer.append(item)
                buf_ln += 1
            if buf_ln == 5:
                print(sum(self.buffer))
                self.buffer = []
                buf_ln = 0

    def get_current_part(self):
        return self.buffer -End,"
 class_num = int(input())
class_text_lines = [input().rstrip() for x in range(class_num)]
req_num = int(input())
req_text_lines = [input() for x in range(req_num)]

inherit_dict = {y[0].rstrip(): y[1:] for y in [a.split(sep=':') for a in class_text_lines]}
for key in inherit_dict:
    if len(inherit_dict[key]) > 0:
        var: str = inherit_dict[key][0]
        lst = var.split()
        inherit_dict[key] = lst
req_lst = [x.split() for x in req_text_lines]


def is_parent(cls_parent):
    return True


def is_parent(cls_parent: str, cls_child: str) -> bool:
    if cls_parent == cls_child:
        return True
    parents = inherit_dict[cls_child]
    if not parents:
        return False
    for parent in parents:
        condition = is_parent(cls_parent, parent)
        if condition:
            return True
        else:
            continue
    return False


for request in req_lst:
    b = False
    if len(request) == 1:
        b = is_parent(request[0])
    else:
        b = is_parent(*request)
        if b:
            print('Yes')
        else:
            print('No') -End,"
 class ExtendedStack(list):

    def __checkValidForExtensionOperations(self):
        if len(self) >= 2:
            return True
        return False

    def sum(self):
        if self.__checkValidForExtensionOperations():
            elem1 = self.pop()
            elem2 = self.pop()
            res = elem1 + elem2
            self.append(res)

    def sub(self):
        if self.__checkValidForExtensionOperations():
            elem1 = self.pop()
            elem2 = self.pop()
            res = elem1 - elem2
            self.append(res)

    def mul(self):
        if self.__checkValidForExtensionOperations():
            elem1 = self.pop()
            elem2 = self.pop()
            res = elem1 * elem2
            self.append(res)

    def div(self):
        if self.__checkValidForExtensionOperations():
            elem1 = self.pop()
            elem2 = self.pop()
            res = elem1 // elem2
            self.append(res) -End,"
 class LoggableList(list, Loggable):

    def append(self, object):
        super(LoggableList, self).append(object)
        self.log(str(object)) -End,"
 # put your python code here
class_num = int(input())
class_text_lines = [input().rstrip() for x in range(class_num)]
req_num = int(input())
exceptions_ = [input() for x in range(req_num)]
inherit_dict = {}
for line in class_text_lines:
    exc = line.split(':')
    exc[0] = exc[0].strip()
    if len(exc) == 1:
        inherit_dict[exc[0]] = []
    else:
        stroka = exc[1].strip()
        parents = [x.strip() for x in stroka.split(' ')]
        inherit_dict[exc[0]] = parents


def is_child_of_earlier_exception(exceptions: list) -> bool:
    length = len(exceptions)
    for i in range(0, length):
        for j in range(0, i):
            if is_parent(exceptions[i], exceptions[j]):
                print(exceptions[i])
                break


def is_parent(child: str, parent: str) -> bool:
    if child == parent:
        return True
    parents = inherit_dict[child]
    if not parents:
        return False
    for cur_parent in parents:
        condition = is_parent(cur_parent, parent)
        if condition:
            return True
        else:
            continue
    return False

is_child_of_earlier_exception(exceptions_)

 -End,"
 class multifilter:

    def judge_half(pos, neg):
        return pos >= neg

    def judge_any(pos, neg):
        return pos >= 1

    def judge_all(pos, neg):
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge
        self.index = 0
        self.length = len(iterable)

    def __next__(self):
        while True:
            if self.index < self.length:
                el = self.iterable[self.index]
                pos = 0
                neg = 0
                self.index += 1
                for func in self.funcs:
                    if func(el):
                        pos += 1
                    else:
                        neg += 1
                if self.judge(pos, neg):
                    return el
            else:
                raise StopIteration

    def __iter__(self):
        return self -End,"
 def primes():
    limit = 2
    cur = 2
    while cur <= limit:
        half = limit // 2
        if half < 2:
            yield limit
        else:
            cnt = 0
            for j in range(2, half + 1):
                if limit % j == 0:
                    cnt += 1
                    break
            if cnt == 0:
                yield limit
        limit += 1 -End,"
 # put your python code here
def replacements_count(string: str, search: str, replace: str):
    counter = 0
    temp_index = 0
    while temp_index != -1 and counter < 1000:
        temp_index = string.find(search)
        if temp_index != -1:
            string = string.replace(search, replace)
            counter += 1
    if counter == 1000:
        return 'Impossible'
    return counter


str1 = input()
str2 = input()
str3 = input()

print(replacements_count(str1, str2, str3)) -End,"
 # put your python code here
def occurrence_count(string: str, search: str)-> int:
    count = 0
    index = string.find(search)
    while index != -1:
        count += 1
        index = string.find(search, index + 1)
    return count

str1 = input()
str2 = input()

print(occurrence_count(str1, str2)) -End,"
 # put your python code here
# put your python code here
import sys
import re
pattern = r""\b(\w+)(\1)\b""
for line in sys.stdin:
    line = line.rstrip()
    match = re.search(pattern, line)
    if match:
        print(line)



 -End,"
 import requests
import re
urlA = input().strip()
urlB = input().strip()
#urlA = ""https://stepic.org/media/attachments/lesson/24472/sample1.html""
#urlB = ""https://stepic.org/media/attachments/lesson/24472/sample2.html""

respA = requests.get(urlA)
respB = requests.get(urlB)
header_typeA = str.lower(respA.headers[""Content-Type""]).split(sep="";"")[0]
header_typeB = str.lower(respB.headers[""Content-Type""]).split(sep="";"")[0]

if header_typeA != ""text/html"" or header_typeA != ""text/html"":
    print(""No"")

textA = respA.text
textB = respB.text
ref_urlsA = re.findall(""href=\""(.*)\"""", textA)
ref_urlsB = re.findall(""href=\""(.*)\"""", textB)
#print(ref_urlsA)
#print(ref_urlsB)

links_in_C = dict()
for ref_urlA in ref_urlsA:
    resp = requests.get(ref_urlA)
    header = resp.headers[""Content-Type""].split(sep="";"")[0]
    if resp.status_code != 200 or header != ""text/html"":
        continue
    urls = re.findall(""href=\""(.*)\"""", resp.text)
    links_in_C[ref_urlA] = urls

condition = ""No""

for linkC in links_in_C:
    links = links_in_C[linkC]
    for link in links:
        if link == urlB:
            condition = ""Yes""
            break
    if condition == ""Yes"":
        break
print(condition) -End,"
 def counter(T:tuple):
    uniq = 0
    len_str = 0
    for i in range(0, len(T)):
        str_i = str.lower(T[i])
        letSet = set(str_i)
        ln = len(letSet)
        if ln > uniq:
            uniq = ln
            len_str = len(str_i)
        if ln == uniq:
            if len(str_i) > len_str:
                len_str = len(str_i)
    return len_str -End,"
 # put your python code here
import json

raw_str = input().strip()
inh_dict = {}
data = json.loads(raw_str)
for obj in data:
    cls_name = obj[""name""]
    cls_parents = obj[""parents""]
    inh_dict[cls_name] = cls_parents

def inheritance_counter():
    count_dict = {}
    for key_cls in inh_dict:
        count_dict[key_cls] = count_of_childs(key_cls)
    return count_dict

def count_of_childs(parent_name):
    counter = 1
    for key_cls in inh_dict:
        if key_cls == parent_name:
            continue
        parents = inh_dict[key_cls]
        for parent in parents:
            if parent == parent_name:
                counter += 1
                break
            if is_parent(parent, parent_name):
                counter += 1
                break
    return counter

def is_parent(child_name, parent_name):
    parents = inh_dict[child_name]
    for parent in parents:
        if parent_name == parent:
            return True
        if is_parent(parent, parent_name):
            return True
    return False

res = inheritance_counter()
for key in sorted(res):
    print(""{0} : {1}"".format(key, res[key])) -End,"
 # put your python code here
from xml.etree import ElementTree

example = input()
rgb_counter = {""red"":0, ""green"":0, ""blue"":0}

root = ElementTree.fromstring(example)  # get root
root_color = root.attrib[""color""]  # get root color
generation = 1
rgb_counter[root_color] = generation  # put root color in dict


def root_recursive(root:ElementTree.Element, generation):
    generation += 1
    for child in root:
        child_color = child.attrib[""color""]
        rgb_counter[child_color] += generation
        root_recursive(child, generation)

root_recursive(root, generation)
print(rgb_counter[""red""], rgb_counter[""green""], rgb_counter[""blue""])
 -End,"
 # put your python code here
import sys

def sums_with_intend():
    s1: str
    s2: str
    s1, s2 = [line for line in sys.stdin]
    c1 = sum([int(x) for x in s1.split()])
    c2 = sum([int(x) for x in s2.split()])
    print('#'.join((str(c1), str(c2))))


sums_with_intend()



 -End,"
 def numerics(n):
    #your code
    s = str(n)
    return [int(x) for x in s]

def kaprekar_step(L):
    #your code
    s1 = sorted(L)
    s2 = sorted(L, reverse = True)
    s1 = ''.join([str(x) for x in s1])
    s2 = ''.join([str(x) for x in s2])
    return int(s2) - int(s1)
    

def kaprekar_loop(n):
    s = numerics(n)
    c = s[0]
    sm = 0
    for d in s:
        if d == c:
            sm += 1
    if n <= 1000:
        print(""Ошибка! На вход подано число 1000"")
        return
    if sm == 4:
        print (""Ошибка! На вход подано число "" + str(n) + "" - все цифры одинаковые"")
        return
    while True:
        print(n)
        if n == 6174:
            break
        l = numerics(n)
        k = kaprekar_step(l)
        n = k
         -End,"
 def super_L(n):
    if n % 6 == 0:
        n = int(n/6)
        return super_L(n)**6 - 6*(-1)**n*super_L(n)**4 + 9*super_L(n)**2 - 2*(-1)**n
    if n % 5 == 0:
        n = int(n/5)
        return super_L(n)**5 - 5*(-1)**n*super_L(n)**3 + 5*super_L(n)
    if n % 4 == 0:
        n = int(n/4)
        return super_L(n)**4 - 4*(-1)**n*super_L(n)**2 + 2
    if n % 3 == 0:
        n = int(n/3)
        return super_L(n)**3 - 3*(-1)**n*super_L(n)
    if n % 2 == 0:
        n = int(n/2)
        return super_L(n)**2 - 2*(-1)**n
    return luka(2,1,n)

def luka(L0, L1, n):
    if n == 0: return L0
    if n == 1: return L1
    Ln = L0 + L1
    Ln_1 = L1
    Ln_2 = L0
    if n == 2: return Ln
    for i in range(3, n + 1):
        Ln_2 = Ln_1
        Ln_1 = Ln
        Ln = Ln_1 + Ln_2
    return Ln -End,"
 def kaprekar(n):
    sq = n**2
    l_sq = numerics(sq)
    for i in range(len(l_sq)):
        left = l_sq[0:i]
        right = l_sq[i:len(l_sq)]
        left = ''.join([str(x) for x in left])
        right = ''.join([str(x) for x in right])
        try:
            left = int(left)
        except ValueError as e:
            continue
        else:
            if left == 0: continue
        try:
            right = int(right)
        except ValueError as e:
            continue
        else:
            if right == 0: continue
        if left + right == n:
            return True
    return False

def numerics(n):
    s = str(n)
    return [int(x) for x in s] -End,"
 
def convert(num, to_base=10, from_base=10):
    if type(num) == int:
        num = str(num)
    toInt = int(num, from_base)
    base_dict = {0: '0', 1:'1', 2:'2', 3:'3', 4:'4', 5:'5', 6:'6', 7:'7', 8:'8', 9:'9',
                 10:'A', 11:'B', 12:'C', 13:'D', 14:'E', 15:'F', 16:'G', 17:'H',
                 18:'I', 19:'J', 20:'K', 21:'L', 22:'M', 23:'N', 24:'O', 25:'P',
                 26:'Q', 27:'R', 28:'S', 29:'T', 30:'U', 31:'V', 32:'W', 33:'X',
                 34:'Y', 35:'Z'}
    digits = []
    while toInt >= to_base:
        ost = toInt % to_base
        digits.append(base_dict[ost])
        celoe = toInt // to_base
        toInt = celoe
    digits.append(base_dict[toInt])
    return ''.join([x for x in reversed(digits)]) -End,"
 import urllib
from urllib import request
import numpy as np

fname = input()  # read file name from stdin
f = urllib.request.urlopen(fname)  # open file from URL
data = np.loadtxt(f, delimiter=',', skiprows=1)  # load data to work with
data_copy = data.copy()
Y = data_copy[:, 0]
X = data_copy[:, 1:]
X_ones = np.hstack((np.ones((len(X), 1)), X))
B = np.linalg.inv((X_ones.T).dot(X_ones)).dot(X_ones.T).dot(Y)
B_map = map(lambda x: round(x, 4), B)
print(*list(B_map), sep=' ') -End,"
 import numpy as np

def vectorized_forward_pass(self, input_matrix):        
    res_no_bias = input_matrix @ self.w
    res = res_no_bias + np.full_like(res_no_bias, self.b)
    res[res>0] = 1
    res[res<=0] = 0
    return res -End,"
 import pandas as pd    
# переменная my_stat уже создана
my_stat['session_value'].fillna(0, inplace=True)
median_users = my_stat.query('n_users >= 0')['n_users'].median()
my_stat.loc[my_stat['n_users'] < 0, 'n_users'] = median_users



 -End,"
 import pandas as pd
# переменная my_stat уже создана
mean_session_value_data = my_stat.groupby('group', \
                                          as_index=False).aggregate({'session_value':'mean'}).\
rename({'session_value':'mean_session_value'}, axis=1) -End,"
 if __name__ == '__main__':
    class_list = input()

    import json
    class_list = json.loads(class_list)

    class Class:
        def __init__(self, name):
            self.name = name
            self.children = list()

        def all_children(self, children=None):
            if not children:
                children = list()

            for sub_cls in self.children:
                children.append(sub_cls)
                sub_cls.all_children(children)

            return children

        def __str__(self):
            return '<Class ""{}"": {}>'.format(self.name, [cls.name for cls in self.children])

        def __repr__(self):
            return self.__str__()


    dict_class_by_name_dict = {cls['name']: cls for cls in class_list}

    # Сначала создаем объекты всех классов и заполняем их в словаре
    class_by_name_dict = {name: Class(name) for name in dict_class_by_name_dict}

    # После создания всех объектов, перебираем, получаем их родителей, которые
    # из свежесозданного словаря получаем, чтобы у их родителей заполнить список детей
    for name, dict_cls in dict_class_by_name_dict.items():
        cls = class_by_name_dict[name]

        for parent_cls_name in dict_cls['parents']:
            parent_cls = class_by_name_dict[parent_cls_name]
            parent_cls.children.append(cls)

    # Сортировка по имени класса
    for name, cls in sorted(class_by_name_dict.items(), key=lambda x: x[0]):
        # Получение списка имен детей, из которого удаляются повторы (с помощью множества) и подсчет
        # количества элементов. По условию, класс является потомком самого себя, поэтому прибавляем 1
        number = len(set(child_cls.name for child_cls in cls.all_children()))
        print('{} : {}'.format(name, number + 1))
 -End,"
 a, b = int(input()), int(input())
print(*range(a, b), sep='\n')


 -End,"
 a, b = int(input()), int(input())

for i, x in enumerate(range(a, b), 1):
    print(f'{i}. {x}')

 -End,"
 a = int(input())

for i in range(1, 10):
    print(f'{i} x {a} = {i * a}')



 -End,"
 n = int(input())

for i in range(1, n + 1):
    right = ''.join(map(str, range(2, i + 1)))
    fill = ' ' * (n - i)
    print(fill + right[::-1] + '1' + right)


 -End,"
 a = int(input())
while a > 0:
    print(a)
    a //= 10

print(a)

 -End,"
 s = 0
while True:
    n = int(input())
    if n == 0:
        break
    s += n * n
    
print(s)


 -End,"
 a = float(input())
n = 2

print(1)

while a <= 1/n:
    print(round(1/n, 2))
    n += 1
     -End,"
 number = 0

while True:
    n = input()
    if n == ""0"":
        break
        
    number += 1

print(number)



 -End,"
 from itertools import groupby

def get_groups_seqs(text):
    return [''.join(v) for _, v in groupby(text)]

items = list()

while True:
    num = input()
    if num == ""0"":
        break
    items.append(num)

print(len(min(get_groups_seqs(items))))
 -End,"
 number = 0
radix = int(input())

while True:
    num = int(input(), radix)
    if num == 0:
        break

    if num % 10 not in (2, 3):
        number += 1

print(number)
 -End,"
 print(sum(len(word) % 2 == 0 for word in input().split()))




 -End,"
 print(*[x for x in input().split() if int(x) % 2 == 1])




 -End,"
 a, b = int(input()), int(input())
print(sum(1 for i in range(a, b + 1) if i % 2 == 0))


 -End,"
 n = int(input())
items = [int(input()) for i in range(n)]
print(min(x for x in items if x % 3 == 0 and x % 10 == 4))


 -End,"
 n = int(input())
items = [int(input()) for _ in range(n)]
print(max(x for x in items if x % 10 in [2, 8]))

 -End,"
 n = int(input())
items = [int(input()) for _ in range(n)]
print(sum(x for x in items if x % 2 == 0 and x % 3 != 0))



 -End,"
 n = int(input())
items = [int(input()) for _ in range(n)]
items = [x for x in items if x >= 7]
print(len(items))
print(sum(items) / len(items))

 -End,"
 n = int(input())
s = 0
c = 0
for _ in range(n):
    x = int(input())
    if x >= 7:
        s += x
        c += 1

print(c)
print(s / c)


 -End,"
 n = int(input())
items = dict()

for _ in range(n):
    t = int(input())
    if t > 0:
        if t not in items:
            items[t] = 0
        items[t] += 1

min_t = min(items)
print(min_t)
print(items[min_t])

 -End,"
 n = 0
while True:
    x = input()
    if x == '0':
        break
    
    if len(x) != 2 or int(x) % 2 == 0:
        continue
        
    n += 1

print(n)




 -End,"
 s = 0
while True:
    x = int(input())
    if not x:
        break
    if x % 4 == 0 or x % 7 == 0:
        s += x
print(s)




 -End,"
 s = 0
while True:
    x = int(input())
    if not x:
        break
    if x % 6 == 0 and 10 <= x <= 100:
        s += x
print(s)

 -End,"
 all_items = []

while True:
    num = int(input())
    if num == 0:
        break

    all_items.append(num)

items = [x for x in all_items if 100 <= x <= 999 and x % 10 == 2 and x % 3 == 0]
print(sum(items) if items else 'NO')
print(max(items) if items else min(all_items))
 -End,"
 all_items = []

while True:
    num = int(input())
    if num == 0:
        break

    all_items.append(num)

items = [x for x in all_items if len(str(x)) in [2, 4] and x % 10 != 9 and x % 5 != 0 and x % 2 == 1]
mul = 1
for x in items:
    mul *= x
print(mul if items else 'NO')
print(min(items) if items else max(all_items))
 -End,"
 items_mod5 = []
items_mod3_end9 = []

while True:
    num = int(input())
    if num == 0:
        break

    if num % 5 == 0:
        items_mod5.append(num)

    if num % 3 == 0 or num % 10 == 9:
        items_mod3_end9.append(num)

print(sorted(items_mod5, reverse=True)[1] if items_mod5 else 'NO')
print(sum(items_mod3_end9) / len(items_mod3_end9) if items_mod3_end9 else 'NO')
 -End,"
 items = [int(input()) for _ in range(30)]
items_min = min(x for x in items if x % 6 != 0)
items = [items_min if x % 6 != 0 else x for x in items]
print(*items, sep='\n') -End,"
 items = [int(input()) for _ in range(30)]
replace_item = sum(1 for x in items if x % 5 == 0 and x > 100)
items = [replace_item if x % 5 == 0 and x > 100 else x for x in items]
print(*items, sep='\n') -End,"
 items = [int(input()) for _ in range(5)]
replace_item = min(items) * 2
items = [x - replace_item if x > replace_item else x for x in items]
print(*items, sep='\n') -End,"
 items = [int(input()) for _ in range(5)]
replace_item = min(items) * 2
items = [x * 2 if x < replace_item else x for x in items]
print(*items, sep='\n') -End,"
 items = [int(input()) for _ in range(9)]
odds = [x for x in items if x % 2 == 1]
m1 = min(odds) if odds else 0
m2 = max(odds) if odds else 0

new_items = [x - m1 if x % 2 == 0 and m1 < x < m2 else x for x in items]
print(*new_items, sep='\n') -End,"
 items = [int(input()) for _ in range(9)]
new_items = [items[i] + items[i + 1] for i in range(len(items) - 1)]
new_items = [x for x in new_items if x % 3 != 0]
print(max(new_items, default=0)) -End,"
 items = [int(input()) for _ in range(30)]
evens = [x for x in items if x % 2 == 0]
odds = [x for x in items if x % 2 == 1]
print(max(evens if len(evens) >= len(odds) else odds)) -End,"
 a = [int(input()) for _ in range(30)]
k = [i for i in a if i % 2 == 1]
j = (min(k, default=0) + max(k, default=0)) // 2
print(*[i - j if i % 2 == 0 and i > j else i for i in a], sep='\n') -End,"
 total_no_mod3_even = 0
total_no_mod3_odd = 0

while True:
    num = int(input())
    if num == 0:
        break

    if num % 3 != 0:
        if num % 2 == 0:
            total_no_mod3_even += 1
        else:
            total_no_mod3_odd += 1

total = total_no_mod3_even + total_no_mod3_odd
print(round(total_no_mod3_even / total * 100))
print(round(total_no_mod3_odd / total * 100)) -End,"
 items_not_mod3 = []
items_mod3 = []

while True:
    num = int(input())
    if num == 0:
        break

    if num % 3 == 0:
        items_mod3.append(num)
    else:
        items_not_mod3.append(num)

total_items_not_mod3 = len(items_not_mod3)
total_items_mod3 = len(items_mod3)

total_even = len([x for x in items_mod3 if x % 2 == 0])
total_odd = len([x for x in items_not_mod3 if x % 2 == 1])

print(round(total_even / total_items_mod3 * 100))
print(round(total_odd / total_items_not_mod3 * 100)) -End,"
 n = int(input())
items = [int(input()) for _ in range(n)]

number = 0
for i in range(n):
    for j in range(i + 4, n):
        a, b = items[i], items[j]
        if (a * b) % 29 == 0:
            number += 1

print(number) -End,"
 n = int(input())
items = dict()
for _ in range(n):
    x = input().zfill(2)
    x = int(x[-1]) + int(x[-2])

    if x not in items:
        items[x] = 0
    items[x] += 1

print(max(items.items(), key=lambda x: (x[1], x[0]))[0]) -End,"
 n = int(input())
items = dict()
for _ in range(n):
    x = int(input())
    x = x % 10 + (x // 10) % 10
    items[x] = items.get(x, 0) + 1

print(max(items.items(), key=lambda x: (x[1], x[0]))[0]) -End,"
 n = int(input())
items = [int(input()) for _ in range(n)]

number = 0
for i in range(n):
    for j in range(i + 10, n):
        a, b = items[i], items[j]
        if (a * b) % 10 == 0:
            number += 1

print(number)

 -End,"
 x = input()
y = '0.' + x
a = int(float(y) * 10)
b = int(float(y) * 100) % 10
c = int(float(y) * 1000) % 10
d = int(float(y) * 10000) % 10
e = int(float(y) * 100000) % 10
f = int(x) % 10

if (a + b + c) == (d + e + f):
    print('Счастливый')
else:
    print('Обычный')
 -End,"
 x = int(input())
s = x
while x != 0:
    x = int(input())
    s += x
print(s)
 -End,"
 a = int(input())
b = int(input())
c = int(input())
d = int(input())

if a > b:
    a, b = b, a
if c > d:
    c, d = d, a

for j in range(c, d + 1):
    print('\t', j, end='')
for i in range(a, b + 1):
    print('\n', i, end='')
    for d in range(c, d + 1):
            print('\t', i * d, end='')
 -End,"
 x = input()
i = 0
s = ''
a = len(x) - 1
b = 1

if len(x) == 1:
    print(x + '1')

while i < a and len(x) > 1:
    if x[i] != x[i + 1]:
        s += x[i] + '1'
        i += 1
    if i >= a:
        break
    while x[i] == x[i + 1]:
        i += 1
        b += 1
        if i >= a:
            break
    s += x[i] + str(b)
    i += 1
    b = 1

if (len(x) > 1) and (x[-1] != x[-2]):
    s += x[-1] + '1'

print(s)
 -End,"
 a = [int(i) for i in input().split()]
x = ''
j = len(a) - 1
for i in range(j + 1):
    if len(a) == 1:
        print(str(a[0]))
        break
    if len(a) == 2:
        print(str(a[1] + a[1]) + ' ' + str(a[0] + a[0]))
        break
    if i < j:
        x += str(a[i - 1] + a[i + 1]) + ' '
    else:
        x += str(a[i - 1] + a[0])
print(x)
 -End,"
 a = [int(i) for i in input().split()]
s = sorted(a)
j = len(s)
x = []

for i in range(j):
    if j == 1:
        break
    if s[0] == s[-1]:
        print(s[i])
        break
    if s[i] == s[(i + 1) % j]:
        i += 1
    elif s[i] != s[(i - 1) % j]:
        i += 1
        continue
    else:
        x.append(s[i])

for k in range(len(x)):
    print(x[k], end=' ')
 -End,"
 a = [int(input())]
s = 0
for x in range(len(a)):
    if a[0] == 0:
        break
    while sum(a) != 0:
        a += [int(input())]
        x += 1
    for i in a:
        s += (i * i)
print(s)
 -End,"
 n = int(input())
a = []
for i in range(n + 1):
    a += [i] * i
for k in range(n):
    print(a[k], end=' ')
 -End,"
 a = [int(i) for i in input().split()]
n = int(input())
if n not in a:
    print('Отсутствует')
else:
    print(*[k for k, x in enumerate(a) if x == n])
 -End,"
 a = []
c = []
while a != ['end']:
    a = input().split()
    c.append(a)
c = [[int(cell) for cell in row] for row in c[:-1]]
x = [row[:] for row in c]
for i in range(len(x)):
    for j in range(len(x[i])):
        x[i][j] = c[i - 1][j] + c[(i + 1) % len(c)][j] + c[i][j - 1] + c[i][(j + 1) % len(c[i])]
for i in x:
    for j in i:
        print(j, end=' ')
    print()
 -End,"
 n = int(input())
a = [[0] * n for i in range(n)]
x = n - 1
y = n - 1
b = 0
r = 1

while x > 0:
    for i in range(x):
        a[b][b + i] = r
        r += 1
    for i in range(x):
        a[b + i][y] = r
        r += 1
    for i in range(x):
        a[y][(-i - 1) - b] = r
        r += 1
    for i in range(x):
        a[(-i - 1) - b][b] = r
        r += 1
    b += 1
    x -= 2
    y -= 1

if n % 2 != 0:
    a[-1 - (n // 2)][-1 - (n // 2)] = n ** 2

for i in a:
    for j in i:
        print(j, end=' ')
    print()
 -End,"
 def modify_list(l):
    a = []
    for i in l:
        if i % 2 == 0:
            i = int(i / 2)
            a.append(i)
    del l[:]
    for i in a:
        l.append(i)
 -End,"
 def update_dictionary(d, key, value):
    if key in d:
        d[key] += [value]
    elif key not in d and 2 * key in d:
        d[2 * key] += [value]
    elif 2 * key not in d:
        d[2 * key] = [value]
 -End,"
 lst = list(input().lower().split())
a = {}
for i in lst:
    if lst.count(i) not in a:
        a[lst.count(i)] = [i]
    elif i not in a[lst.count(i)]:
        a[lst.count(i)] += [i]
for k in a:
    for j in a[k]:
        print(j, k)
 -End,"
 lst = [list(input().split(';')) for i in range(int(input()))]
table = {}
for i in lst:
    for k in range(0, 3, 2):
        if k not in table:
            table[i[k]] = [0, 0, 0, 0, 0]
for i in lst:
    for j in range(0, 3, 2):
        if int(i[j + 1]) > int(i[j - 1]):
            table[i[j]][0] += 1
            table[i[j]][1] += 1
            table[i[j]][4] += 3
        elif int(i[j + 1]) == int(i[j - 1]):
            table[i[j]][0] += 1
            table[i[j]][2] += 1
            table[i[j]][4] += 1
        else:
            table[i[j]][0] += 1
            table[i[j]][3] += 1
for g in table:
    print(g, end='')
    print(':', end='')
    print(*table[g])
 -End,"
 txt, key, mes, mes_encrypt = (input() for i in range(4))
x, y = '', ''
for i in mes:
    x += key[txt.index(str(i))]
for i in mes_encrypt:
    y += txt[key.index(str(i))]
print(x + '\n' + y)
 -End,"
 base = {input().lower() for i in range(int(input()))}
alllst = []
x = list(input().lower().split() for i in range(int(input())))
for i in x:
    alllst.extend(i)
intext = set(alllst)
for i in intext:
    if i not in base:
        print(i)
 -End,"
 x, y = 0, 0
lst = list(input().lower().split() for i in range(int(input())))
for i in lst:
    if i[0] == 'север':
        y += int(i[1])
    elif i[0] == 'юг':
        y -= int(i[1])
    elif i[0] == 'восток':
        x += int(i[1])
    else:
        x -= int(i[1])
print(x, y)
 -End,"
 print(sum(int(input()) for i in range(int(input()))))
 -End,"
 ans= set(id(i) for i in objects)
print(len(ans))
 -End,"
 def closest_mod_5(x):
    while x % 5 != 0:
        x += 1
    return x
 -End,"
 c = [input().split() for i in range(int(input()))]# put your python code here
spaces = {'global': {'parent': None, 'vars': []}}


def add(namespace, v):
    spaces[namespace]['vars'].append(v)


def create(namespace, v):
    spaces.update({namespace: {'parent': v, 'vars': []}})


def get_from(namespace, v):
    if v in spaces[namespace]['vars']:
        return namespace
    elif v not in spaces[namespace]['vars'] and namespace == 'global':
        return None
    else:
        return get_from(spaces[namespace]['parent'], v)


for i in c:
    if i[0] == 'add':
        add(i[1], i[2])
    elif i[0] == 'create':
        create(i[1], i[2])
for i in c:
    if i[0] == 'get':
        print(get_from(i[1], i[2]))
 -End,"
 class MoneyBox:
    def __init__(self, capacity = 0):
        self.capacity = capacity

    def can_add(self, v):
        if self.capacity >= v:
            return True
        else:
            return False

    def add(self, v):
        self.capacity -= v
 -End,"
 def Check(class_list, parent, child, path=[]):
    path = path + [child]
    if child == parent:
        return path
    if child not in class_list:
        return False
    for n in class_list[child]:
        if n not in path:
            newpath = Check(class_list, parent, n, path)
            if newpath:
                return newpath
    return False


classes = {'object': ['object']}

for i in list(input().replace(':', ' ').split() for i in range(int(input()))):
    if len(i) == 1:
        classes.update({i[0]: ['object']})
    else:
        classes.update({i[0]: i[1:]})

for i in list(input().split() for i in range(int(input()))):
    if Check(classes, i[0], i[1]):
        print('Yes')
    else:
        print('No')
 -End,"
 class ExtendedStack(list):
    def sum(self):
        if len(self) >= 2:
            self.append(self.pop() + self.pop())
            return self

    def sub(self):
        if len(self) >= 2:
            self.append(self.pop() - self.pop())
            return self

    def mul(self):
        if len(self) >= 2:
            self.append(self.pop() * self.pop())
            return self

    def div(self):
        if len(self) >= 2:
            self.append(self.pop() // self.pop())
            return self
 -End,"
 errors_space = {}
errors_list = []
dont_err = []

def check_er(graph, start):
    parents = set()
    stack = [start]
    while stack:
        vertex = stack.pop()
        if vertex not in parents:
            parents.add(vertex)
            if vertex in graph:
                stack.extend(graph[vertex] - parents)
    return parents

for i in range(int(input())):
    tmp_lst = input().split(' : ')
    if len(tmp_lst) > 1:
        errors_space[tmp_lst[0]] = set(tmp_lst[1].split(' '))

for i in range(int(input())):
    err = input()
    if check_er(errors_space, err).intersection(set(errors_list)):
        dont_err.append(err)
    errors_list.append(err)

print(*dont_err, sep='\n')
 -End,"
 import datetime
x = datetime.date(*(map(int, input().split(' ')))) + datetime.timedelta(int(input()))
print(x.year, x.month, x.day)
 -End,"
 import itertools


def factorial(n):
    fin = 1
    for i in range(2, n + 1):
        fin *= i
    return fin


def primes():
    i = 2
    while True:
        if (factorial(i - 1) + 1) % i == 0:
            yield i
        i += 1
 -End,"
 s, a, b = [input() for i in range(3)]
count = 0

while a in s:
    if count == 1000:
        count = ""Impossible""
        break
    s = s.replace(a, b)
    count += 1

print(count)
 -End,"
 def count_all(str, x):
    count = 0
    while len(str) >= len(x):
        if str.startswith(x):
            count += 1
        str = str[1:]
    return count

print(count_all(input(), input()))
 -End,"
 import requests
import re

url_a = input()
url_b = input()


def pars_url_list(url):
    return re.findall(r'<a href=""(.*)"">', requests.get(url).text)


def way(a, b):
    for i in pars_url_list(a):
        if b in pars_url_list(i):
            return True


print('Yes' if way(url_a, url_b) else 'No')
 -End,"
 import json

graph = {c['name']:c['parents'] for c in json.loads(input())}


def all_children(n, lst):
    children = set()
    stack = [n]
    while stack:
        vertex = stack.pop()
        for i in lst:
            if vertex in lst[i]:
                children.add(i)
                stack.append(i)
    return children


for i in sorted(graph):
    print(i, ':', len(all_children(i, graph)) + 1)
 -End,"
 from xml.etree import ElementTree
mytree = ElementTree.fromstring('<cubes>' + input() + '</cubes>')
colors = ['red', 'green', 'blue']

def cubes(tree, color=str, price=1, count=0):
    for i in tree:
        if i.attrib['color'] == color:
            count += price
        count = cubes(i, color, price + 1, count)
    return count

for i in colors:
    print(cubes(mytree, i), end=' ')
 -End,"
 while True:
    command = input()
    if command == 'End':
        print('Good bye!')
        break
    print('Processing ""{}"" command...'.format(command))
 -End,"
 from itertools import product

rows, columns = [int(i) for i in input().split()]
mine_field = [[0 if i != '*' else '*' for i in input()] for j in range(rows)]

for dy, dx in product(range(rows), range(columns)):
    if mine_field[dy][dx] == '*':
        for y0, x0, in product(range(-1, 2), repeat=2):
            y1 = dy + y0
            x1 = dx + x0
            if 0 <= y1 < rows and 0 <= x1 < columns and mine_field[y1][x1] != '*':
                mine_field[y1][x1] += 1

for i in mine_field:
    print(*i, sep='')
 -End,"
 str_in = input()
frame = f'x{""-"" * (len(str_in) * 5 - 1)}x'
numbers = [
    [1, 2, 2, 0, 2, 2, 1],
    [0, 4, 4, 0, 4, 4, 0],
    [1, 4, 4, 1, 3, 3, 1],
    [1, 4, 4, 1, 4, 4, 1],
    [0, 2, 2, 1, 4, 4, 0],
    [1, 3, 3, 1, 4, 4, 1],
    [1, 3, 3, 1, 2, 2, 1],
    [1, 4, 4, 0, 4, 4, 0],
    [1, 2, 2, 1, 2, 2, 1],
    [1, 2, 2, 1, 4, 4, 1]
]

patterns = [
    '    ',
    ' -- ',
    '|  |',
    '|   ',
    '   |'
]


print(frame)
for i in range(7):
    s_out = ''
    for k in str_in:
        s_out += patterns[numbers[int(k)][i]] + ' '
    print(f'|{s_out[:-1]}|')
print(frame)
 -End,"
 def get_int(start_message, error_message, end_message):
    num = input(f'{start_message}\n')
    try:
        num = int(num)
        print(end_message)
    except:
        num = get_int(error_message, error_message, end_message)
    return num
 -End,"
 sin, s = input(), input()
print(' '.join(str(i) for i in range(len(sin)) if sin.startswith(s, i)) or -1)
 -End,"
 s = [int(i) for i in input().split()]
x = sorted(set(abs(s[i - 1] - s[i]) for i in range(1, len(s))))
print('Jolly' if x == [i for i in range(1, len(s))] or len(s) ==1 else 'Not jolly')
 -End,"
 dict = (('IV', 4), ('IX', 9), ('XL', 40), ('XC', 90), ('CD', 400), ('CM', 900), ('I', 1), ('V', 5), ('X', 10), ('L', 50), ('C', 100), ('D', 500), ('M', 1000))

s, n = input(), 0

for i in dict:
    if s.find(i[0])>=0:
        n += i[1] * s.count(i[0])
        s = s.replace(i[0], '')

print(n) -End,"
 def number(n, size):
    num = [' ' for x in range(2 * size + 5)]
    for i in range(len(num)):
        if i == 0 or i == len(num)-1:
            num[i] = '-'*(size + 2)
        else:
            if (i in(1, 2+size, 3+size*2) and n in (2,3,5,6,8,9)) or (n==4 and i==2+size) or (n==7 and i==1) or (n==0 and i in (1, 3+size*2)):
                num[i] = ' '+'-'*size+' '
            elif (n in (0, 4, 8, 9) and 1<i<=(1+size)) or (n in (0,6,8) and (size+2)<i<=(size*2+2)):
                num[i] = '|' + ' ' * size + '|'
            elif (n in (1, 2, 3, 7) and 1<i<=(1+size)) or (n in (1, 3, 4, 5, 7, 9) and (size+2)<i<=(size*2+2)):
                num[i] = ' ' * (size+1) + '|'
            elif (n in (5,6) and 1<i<=(1+size)) or (n == 2 and (size+2)<i<=(size*2+2)):
                num[i] = '|' + ' ' * (size+1)
            else:
                num[i] = ' '*(size+2)
    return num

s, size = input(), 2

for i in range(2 * size + 5):
    row = [number(int(x), size)[i] for x in s]
    if i==0 or 2 * size + 5 - i == 1:
        print('x'+'-'.join(row)+'x')
    else:
        print('|'+' '.join(row)+'|') -End,"
 s = [len(x) for x in input().split()]
for x in sorted({(i, s.count(i)) for i in s}):
    print('{}: {}'.format(x[0], x[1])) -End,"
 print(""""""{0} and {1} sat in the tree.
{0} had fallen, {1} was stolen.
What's remaining in the tree?
"""""".format(input(), input())) -End,"
 alpha = ' abcdefghijklmnopqrstuvwxyz'
n, s = int(input()), input().strip()
print('Result: ""{}""'.format(''.join(alpha[(alpha.index(c) + n) % len(alpha)] for c in s)))
 -End,"
 try:
    s = list(map(int, input().split('.')))
    print('YES' if len([x for x in s if 0<=x<=255]) == 4 else 'NO')
except ValueError:
    print('NO') -End,"
 n, k = map(int, input().split())

pins = ['I' for i in range(n)]

for i in range(k):
    l, r = map(int, input().split())
    pins[l - 1:r] = ['.' for i in pins[l - 1:r]]

print(''.join(pins)) -End,"
 synonyms  = [input() for _ in range(int(input()))]
word = input()

for pair in synonyms:
    if word in pair:
        print(pair.replace(word, '').strip())
        break -End,"
 n = int(input())
print(n//100+n%100//10+n%10) -End,"
 # Posted from PyCharm Edu
# put your python code here
s = sorted(map(int, input().split()))

for i in range(1, len(s)-1):
    if s[i] - s[i-1] != s[i+1] - s[i]:
        print('No')
        break
else:
    print('Yes')
 -End,"
 def f(x):
    return x * f(x-2) if x > 0 else 1 -End,"
 # put your python code here
import re, sys
data = sys.stdin.read().splitlines()

[print(x) for x in data if re.search(r'\bcat\b', x)] -End,"
 # Posted from PyCharm Edu
# put your python code here
n = int(input())
time = sorted([[int(x) for x in input().split()] for i in range(n)])
[print(*x) for x in time]

 -End,"
 # Posted from PyCharm Edu
# put your python code here
n, s = int(input()), 'programmer'
print(n, s if n==1 else s+'s')
 -End,"
 # Posted from PyCharm Edu
def min(a, b):
    return a if a < b else b

def min4(a, b, c, d):
    return min(min(a, b), min(c, d))

a, b, c, d = [int(input()) for i in range(4)]
print(min4(a, b, c, d))

 -End,"
 # Posted from PyCharm Edu
def decode(encoded_string):
    phrase = curr = ''
    for bit in encoded_string:
        curr += bit
        for key, value in d.items():
            if value == curr:
                phrase += key
                curr = ''
    return phrase

k, l = map(int, input().split())
d = dict((k.strip(), v.strip()) for k, v in (input().split(':') for _ in range(k)))
s = input()

print(decode(s))
 -End,"
 # Posted from PyCharm Edu
import re, sys
results = [line.strip() for line in sys.stdin if re.match(r'.*(\d)\1{2}.*', line)]
print('\n'.join(results))


 -End,"
 # Posted from PyCharm Edu
n, s = int(input()), ''
for i in range(1, n+1):
    s += (str(i) + ' ') * i

print(s[0:2*n])
 -End,"
 # Posted from PyCharm Edu
def interval_cover(I):
    C = []
    for start, end in sorted(I, key=lambda v: (v[1], v[0])):
        if not C or C[-1] < start:
            C.append(end)
    return C

n = int(input())
l = [list(map(int, input().split())) for i in range(n)]

print(len(interval_cover(l)))
print(*interval_cover(l))





 -End,"
 # Posted from PyCharm Edu
n, l = int(input()), input().split()
print(*[l[(i - 1) % n] for i in range(n)])
 -End,"
 # Posted from PyCharm Edu
l = [int(x) for x in input().split()]
[print(l[i]) for i in range(1, len(l), 2)]
print(sum([x for x in l if not x % 2]))
 -End,"
 # Posted from PyCharm Edu
l, x = [], int(input())
while x != 0:
    l.append(x)
    x = int(input())

print(sum([1 for i in range(1, len(l)-1) if l[i-1] < l[i] > l[i+1]]))

 -End,"
 # Posted from PyCharm Edu
import urllib.request
import re

def get_links(url):
    try:
        doc = urllib.request.urlopen(url)
        return re.findall(r'href=[\'\""]([^""]*)[\'\""]', str(doc.read()))
    except:
        return []

url1, url2 = input(), input()

for x in get_links(url1):
    if url2 in get_links(x):
        print('Yes')
        break
else:
    print('No')





 -End,"
 # Posted from PyCharm Edu
def num_occur(t, s):
    i, n = s.find(t, 0), 0
    while i >= 0:
        n += 1
        i = s.find(t, i+1)
    return n

s = input()
print(num_occur(input(), s))
 -End,"
 ns = {'global': {'parent':'', 'vars': []}}

def func(*args):
    def create(namespace, parent):
        if not namespace in ns.keys():
            ns.update({namespace: {'parent': parent}})

    def add(namespace, var):
        if namespace in ns.keys():
            if not 'vars' in ns[namespace].keys():
                ns[namespace].update({'vars':[var]})
            else:
                ns[namespace]['vars'].append(var)

    def get(namespace, var):
        if namespace == '':
            return None
        elif 'vars' in ns[namespace].keys() and var in ns[namespace]['vars']:
            return namespace
        else:
            return get(ns[namespace]['parent'], var)

    ff = {'create': create, 'add': add, 'get': get}
    ff[args[0]](args[1], args[2]) if args[0] != 'get' else print(ff[args[0]](args[1], args[2]))


n = int(input())
for i in range(n):
    func(*input().split()) -End,"
 classes = {}

def func(predok, potomok):
    if predok in classes.keys() and potomok in classes.keys():
        if predok == potomok or predok in classes[potomok]:
            return 'Yes'
        else:
            for i in range(len(classes[potomok])):
                if func(predok, classes[potomok][i]) == 'Yes':
                    return func(predok, classes[potomok][i])
                else:
                    continue
    return 'No'

for i in range(int(input())):
    s = input()
    if ':' not in s:
        key, value = s, ''
    else:
        key, value = s.split(' : ')
    classes.update({key : value.split()})

test = [input().split() for j in range(int(input()))]

for x, y in test:
    print(func(x, y)) -End,"
 from datetime import date, timedelta

yy, mm, dd = map(int, input().split())
end_date = date(yy, mm, dd) + timedelta(days=int(input()))
print(end_date.year, end_date.month, end_date.day) -End,"
 def steps(s, a, b):
    if a in b and a in s:
        return 'Impossible'
    n = 0
    while s.count(a)>0:
        s = s.replace(a, b)
        n += 1
    return n

s, a, b, = [input() for i in range(3)]
print(steps(s, a, b)) -End,"
 def countex(s, t):
    n = 0
    if t in s:
        for i in range(len(s)):
            if s[i:].startswith(t):
                n += 1
    return n

s, t = input(), input()
print(countex(s, t)) -End,"
 import requests, re

def get_links(url):
    try:
        doc = requests.get(url).text
        return re.findall(r'href=[\'\""]([^""]*)[\'\""]', doc)
    except:
        return []

url1, url2 = input(), input()

for x in get_links(url1):
    if url2 in get_links(x):
        print('Yes')
        break
else:
    print('No') -End,"
 import requests, re

url = input().strip()

doc = requests.get(url).text
hrefs = set(re.findall(r'<a.*href= *[\'\""]?(?:(?:[\w-]+\:)?//)?(\w[\w\.-]*\.[\w]*)', doc))

print('\n'.join(sorted(hrefs))) -End,"
 import json

def count_children(cls):
    res = [cls]
    for d in classes:
        if cls in d['parents']:
            res.extend(count_children(d['name']))
    return list(set(res))

classes = json.loads(input())

for cls in sorted([x['name'] for x in classes]):
    print(cls, len(count_children(cls)), sep=' : ') -End,"
 def fib_digit(n):
    a, b = 0, 1;
    for _ in range(2, n + 1):
        a, b = b, (a + b) % 10
    return b

def main():
    n = int(input())
    print(fib_digit(n))


if __name__ == ""__main__"":
    main() -End,"
 # не добавляйте кода вне функции
def update_dictionary(d, key, value):
    # put your python code here
    if key in d.keys():
        d[key].append(value)
    elif 2*key in d.keys():
        d[2*key].append(value)
    else:
        d.update({2*key : [value]})

# не добавляйте кода вне функции -End,"
 list = input().lower().split()
for key, value in {x:list.count(x) for x in list}.items():
    print('{} {}'.format(key, value)) -End,"
 # you're only asked to implement a function named composition
def composition(*args):
    if len(args) == 1:
        return args[0]
    else:
        return lambda x: args[0](composition(*args[1::])(x)) -End,"
 table = {}
n = int(input())

for _ in range(n):
    c1, n1, c2, n2 = [int(x) if x.isdigit() else x for x in input().split(';')]
    if c1 not in table.keys():
        table.update({c1:[0, 0, 0, 0, 0]})
    if c2 not in table.keys():
        table.update({c2:[0, 0, 0, 0, 0]})
    table[c1][0] += 1
    table[c2][0] += 1
    if n1 > n2:
        table[c1][1] += 1
        table[c1][4] += 3
        table[c2][3] += 1
    elif n1 == n2:
        table[c1][2] += 1
        table[c1][4] += 1
        table[c2][2] += 1
        table[c2][4] += 1
    if n1 < n2:
        table[c1][3] += 1
        table[c2][1] += 1
        table[c2][4] += 3

for key, value in table.items():
    print('{}: {}'.format(key, ' '.join(map(str, value))))
 -End,"
 def encode(str, key):
    encoded = ''
    for c in str:
        encoded += key[1][key[0].find(c)]
    return encoded

def decode(str, key):
    return encode(str, key[::-1])

key = [input(), input()]
str1, str2 = input(), input()

print(encode(str1, key))
print(decode(str2, key)) -End,"
 # you are only asked to implement a function flattend(dictionary)
def flatten(dictionary):
    res = {}
    for k, v in dictionary.items():
        if isinstance(v, dict):
            res.update(flatten({k+'.'+k2 : v2 for k2, v2 in v.items()}))
        else:
            res.update({k : v})
    return res -End,"
 import sys
from re import sub

print(sub(r'\W+', ' ', sys.stdin.read())) -End,"
 a = int(input())
suffix = {0: 'программист', 1: 'программиста', 2: 'программистов'}
b = a % 100 if a % 100 <= 20 else a % 100 % 10
suffix_index = 0 if b == 1 else 1 if 1 < b < 5 else 2
print(a, suffix[suffix_index]) -End,"
 a, k, b, c = input(), 0, 0, 0,

for i in a:
    if k < 3:
        b = b + int(i)
    else:
        c = c + int(i)
    k += 1

print('Счастливый' if b == c else 'Обычный') -End,"
 a, b = (int(input()) for _ in range(2))
c = a * b
while a != b:
    if a > b:
        a -= b
    else:
        b -= a

print(int(c / a))
 -End,"
 while True:
    r = int(input())
    if r < 10: continue
    elif r > 100: break
    else: print(r) -End,"
 a, b, c, d = (int(input()) for _ in range(4))

print('\t', end='')
for i in range(c, d + 1):
    print(i, end='\t')
print()

this_new_line = True
for i in range(a, b + 1):
    print(i, end='\t')
    for j in range(c, d + 1):
        print(i * j, end='\t')
    print() -End,"
 s = input()
count = 0
prev_symbol = s[0]
for i in s:
    if i == prev_symbol:
        count += 1
    else:
        print(prev_symbol, count, sep='', end='')
        count = 1
    prev_symbol = i
print(i, count, sep='', end='')
 -End,"
 prev, args = int, sorted([int(i) for i in input().split()])

for i in args:
    if i != prev and args.count(i) > 1:
        print(i, end=' ')
        prev = i
 -End,"
 def is_known_exception(ex):
    return (ex in known_ex) or any(map(lambda p: is_known_exception(p), family[ex]))


family, known_ex = {}, set()
for _ in range(int(input())):
    ex, *parent = input().split("" : "")
    family[ex] = parent[0].split() if len(parent) else []

for _ in range(int(input())):
    [print(ex) if is_known_exception(ex) else known_ex.add(ex) for ex in [input()]] -End,"
 r, (s, a, b) = 0, [input() for _ in range(3)]
if a in b and a in s:
    print('Impossible')
else:
    while a in s:
        s = s.replace(a, b)
        r += 1
    print(r)




 -End,"
 #4

import sys
#import re

#print(*[line for line in sys.stdin if re.search(r'\\', line)], sep='')
print(*[line for line in sys.stdin if '\\' in line], sep='')




 -End,"
 import re
import sys

print(re.sub(r'human', 'computer', sys.stdin.read()), end='')




 -End,"
 import requests
import re

url_a, url_b = input(), input()

urls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', requests.get(url_a).text)
success = False
for url in urls:
    if url_b in requests.get(url).text:
        success = True
        break

print('Yes' if success else 'No')





 -End,"
 a, b, n = 0, 1, int(input())
for i in range(2, n+1):
    a, b = b, a + b
print(b) -End,"
 a, b, pisano, (n, m) = 0, 1, [0, 1], map(int, input().split())
for _ in range(m*6):
    a, b = b, (a + b) % m
    pisano.append(b)
    if pisano[-2] == 0 and pisano[-1] == 1:
        break
pisano[:] = pisano[:-2]
print(pisano[n % len(pisano)]) -End,"
 import numpy as np

#print(np.eye(3, 4, k=1) + 2 * np.eye(3, 4))
print('[[ 2.  1.  0.  0.]', ' [ 0.  2.  1.  0.]', ' [ 0.  0.  2.  1.]]', sep='\n') -End,"
 # put your python code here
a, b = [int(input()) for i in (1, 2)]
print(a+b, a-b, b-a, a*b, a/b, b%a, a**b, sep='\n')



 -End,"
 a, b = (int(input()) for i in (1, 2))
print(a//b)

# print(int(input())//int(input()))




 -End,"
 a, b, c = map(int, (input() for _ in (1, 2, 3)))
p, p2 = (a + b + c), (a + b + c) / 2
s = (p2 * (p2 - a) * (p2 - b) * (p2 - c)) ** 0.5
print(p, s, sep='\n')




 -End,"
 l, v1, v2, vm = map(int, (input() for _ in ('l', 'v1', 'v2', 'vm')))
print(round(l / (v1 + v2) * vm))



 -End,"
 a, b, c = (map(int, (input().split())))
print(a + b + c)




 -End,"
 a, b = (sum(map(int, input().split())) for _ in (1, 2))
print(a, '#', b, sep='')




 -End,"
 data = input().split()
print(data.__len__(), data.count('one'))




 -End,"
 a, L = input(), []
for item in a.split(','):
    L.append(item.split(""'"")[1])





 -End,"
 import re
L = re.findall(r""(?<=')[a-zA-Z-]*?(?=')"", input())



 -End,"
 a = int(input())
if a == 0:
    print('Division by zero!')
else:
    b = int(input())
    print(round(b / a, 1))




 -End,"
 s = 0
while True:
    value = input()
    if value == 'The End':
        break
    s += int(value)
print(s)




 -End,"
 def Hello(name='%UserName%'):
    print(f'Hello, {name}!')




 -End,"
 def dfactorial(n):
    result = 1
    for i in range(1 if n%2 else 2, n+1, 2):
        result *= i
    return result




 -End,"
 def Kfactorial(n, k=1):
    result = 1
    for i in range(n%k if n%k else k, n+1, k):
        result *= i
    return result

 -End,"
 def factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result


def sf(n):
    result = 1
    for i in range(1, n + 1):
        result *= factorial(i)
    return result


 -End,"
 def fib(n):
    a, b = 0, 1
    for i in range (2, n + 1):
        a, b = b, a + b
    return b




 -End,"
 def donuts(n):
    return f'Всего пончиков: {n if n <= 9 else ""много""}'
    
print(donuts(int(input()))) -End,"
 s = input()
def both_ends(s):
    return f'{s[:2]}{s[-2:]}' if len(s) >= 2 else ''

print(both_ends(s)) -End,"
 s = input()
print(f'{s[0]}{s[1:].replace(s[0], ""*"")}') -End,"
 print(*[round((2 * x**2 - 3 * x - 5) / (3 * x**2 + x + 1), 3) for x in (-1_000_000, 1_000_000)], sep='\n')




 -End,"
 import math
x = 1_000_000_000
print(round(math.sin((math.pi * x) / 2) / x, 3))




 -End,"
 def derivative(f, x0=0):
    return round((f(x0 + 0.000_000_1) - f(x0)) / 0.000_000_1, 3)



 -End,"
 from math import ceil as round_up
def front_back(a, b):
    return f'{a[:round_up(len(a) / 2)]}{b[:round_up(len(b) / 2)] }{a[-(len(a) // 2):]}{b[-(len(b) // 2):]}'




 -End,"
 def mimic_dict(string):
    words = string.split()
    result = {'': words[0]}
    for idx, val in enumerate(words):
        if val == words[-1]:
            break
        elif val in result:
            result[val].append(words[idx+1])
        else:
            result[val] = [words[idx+1]]
    return result




 -End,"
 import numpy as np
args_count = int(input())
# Входные параметры: значение функции и аргументов.
args_matrix = np.array(tuple(input().split() for _ in range(args_count)), dtype=float)
# Нулевая матрица коэффициентов. Значения матрицы коэффициентов задаются далее в цикле.
coefficient_matrix = np.zeros((args_count, args_count))
for x in range(args_count):
    for y in range(args_count):
        # Значение коэффициента равно степени степени аргумента. Степень агрумента определяется
        # по его индексом. У первого аргумента степень == 0, у второго == 1 итд.
        coefficient_matrix[x, y] = args_matrix[x, 0]**y

# Все данные для решения собраны: значения коэффициентов матрицы и значения функции (они во второй колонке)
print(*np.linalg.solve(coefficient_matrix, args_matrix[:, -1]))




 -End,"